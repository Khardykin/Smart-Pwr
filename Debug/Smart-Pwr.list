
Smart-Pwr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b0  080044b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080044b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  20000090  08004548  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000658  08004548  00020658  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f83  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c1b  00000000  00000000  0003903b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000070b7  00000000  00000000  0003dc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  00044d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a90  00000000  00000000  00045520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100af  00000000  00000000  00045fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000116e6  00000000  00000000  0005605f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004dfb2  00000000  00000000  00067745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b56f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001544  00000000  00000000  000b574c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000090 	.word	0x20000090
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003dcc 	.word	0x08003dcc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000094 	.word	0x20000094
 8000104:	08003dcc 	.word	0x08003dcc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	1c08      	adds	r0, r1, #0
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	a80d      	add	r0, sp, #52	; 0x34
 800064e:	f002 ff82 	bl	8003556 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000652:	2210      	movs	r2, #16
 8000654:	2100      	movs	r1, #0
 8000656:	a809      	add	r0, sp, #36	; 0x24
 8000658:	f002 ff7d 	bl	8003556 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2210      	movs	r2, #16
 800065e:	2100      	movs	r1, #0
 8000660:	a805      	add	r0, sp, #20
 8000662:	f002 ff78 	bl	8003556 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <MX_ADC_Init+0x154>)
 8000668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	0080      	lsls	r0, r0, #2
 800066e:	4301      	orrs	r1, r0
 8000670:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000674:	4002      	ands	r2, r0
 8000676:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000678:	9a02      	ldr	r2, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	2701      	movs	r7, #1
 800067e:	433a      	orrs	r2, r7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000684:	403b      	ands	r3, r7
 8000686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000688:	9b01      	ldr	r3, [sp, #4]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800068a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000690:	2500      	movs	r5, #0
 8000692:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	3861      	subs	r0, #97	; 0x61
 8000696:	38ff      	subs	r0, #255	; 0xff
 8000698:	a903      	add	r1, sp, #12
 800069a:	05c0      	lsls	r0, r0, #23
 800069c:	f002 fbee 	bl	8002e7c <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <MX_ADC_Init+0x158>)
 80006a2:	21c3      	movs	r1, #195	; 0xc3
 80006a4:	0089      	lsls	r1, r1, #2
 80006a6:	585a      	ldr	r2, [r3, r1]
 80006a8:	20ff      	movs	r0, #255	; 0xff
 80006aa:	4382      	bics	r2, r0
 80006ac:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0152      	lsls	r2, r2, #5
 80006b2:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006b4:	4c3a      	ldr	r4, [pc, #232]	; (80007a0 <MX_ADC_Init+0x15c>)
 80006b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b8:	433b      	orrs	r3, r7
 80006ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80006bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	02db      	lsls	r3, r3, #11
 80006c2:	4313      	orrs	r3, r2
 80006c4:	62a3      	str	r3, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006c6:	4e37      	ldr	r6, [pc, #220]	; (80007a4 <MX_ADC_Init+0x160>)
 80006c8:	6830      	ldr	r0, [r6, #0]
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <MX_ADC_Init+0x164>)
 80006cc:	4010      	ands	r0, r2
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0409      	lsls	r1, r1, #16
 80006d2:	4301      	orrs	r1, r0
 80006d4:	6031      	str	r1, [r6, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	4319      	orrs	r1, r3
 80006de:	62a1      	str	r1, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	401a      	ands	r2, r3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	03db      	lsls	r3, r3, #15
 80006e8:	4313      	orrs	r3, r2
 80006ea:	6033      	str	r3, [r6, #0]
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006ec:	950d      	str	r5, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	930e      	str	r3, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006f4:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006f6:	9510      	str	r5, [sp, #64]	; 0x40
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80006f8:	9511      	str	r5, [sp, #68]	; 0x44
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006fa:	a90d      	add	r1, sp, #52	; 0x34
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 fb41 	bl	8002d84 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	2207      	movs	r2, #7
 8000706:	4393      	bics	r3, r2
 8000708:	3a02      	subs	r2, #2
 800070a:	4313      	orrs	r3, r2
 800070c:	6163      	str	r3, [r4, #20]
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800070e:	6923      	ldr	r3, [r4, #16]
 8000710:	43bb      	bics	r3, r7
 8000712:	431f      	orrs	r7, r3
 8000714:	6127      	str	r7, [r4, #16]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <MX_ADC_Init+0x168>)
 800071a:	401a      	ands	r2, r3
 800071c:	238e      	movs	r3, #142	; 0x8e
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4313      	orrs	r3, r2
 8000722:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_ADC_Init+0x16c>)
 8000728:	4013      	ands	r3, r2
 800072a:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800072c:	68e3      	ldr	r3, [r4, #12]
 800072e:	2104      	movs	r1, #4
 8000730:	438b      	bics	r3, r1
 8000732:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_ADC_Init+0x170>)
 8000738:	401a      	ands	r2, r3
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	049b      	lsls	r3, r3, #18
 800073e:	4313      	orrs	r3, r2
 8000740:	6033      	str	r3, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000742:	6863      	ldr	r3, [r4, #4]
 8000744:	438b      	bics	r3, r1
 8000746:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000748:	6863      	ldr	r3, [r4, #4]
 800074a:	2208      	movs	r2, #8
 800074c:	4393      	bics	r3, r2
 800074e:	6063      	str	r3, [r4, #4]
  LL_ADC_SetOverSamplingDiscont(ADC1, LL_ADC_OVS_REG_CONT);
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
  LL_ADC_DisableIT_EOC(ADC1);
  LL_ADC_DisableIT_EOS(ADC1);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000756:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000758:	950b      	str	r5, [sp, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800075a:	950c      	str	r5, [sp, #48]	; 0x30
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800075c:	a909      	add	r1, sp, #36	; 0x24
 800075e:	0020      	movs	r0, r4
 8000760:	f002 faf6 	bl	8002d50 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8000764:	68a3      	ldr	r3, [r4, #8]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_ADC_Init+0x174>)
 8000768:	401a      	ands	r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	055b      	lsls	r3, r3, #21
 800076e:	4313      	orrs	r3, r2
 8000770:	60a3      	str	r3, [r4, #8]
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC_Init+0x178>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	4912      	ldr	r1, [pc, #72]	; (80007c0 <MX_ADC_Init+0x17c>)
 8000778:	f7ff fcd8 	bl	800012c <__udivsi3>
 800077c:	0003      	movs	r3, r0
 800077e:	0080      	lsls	r0, r0, #2
 8000780:	18c0      	adds	r0, r0, r3
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	210a      	movs	r1, #10
 8000786:	f7ff fcd1 	bl	800012c <__udivsi3>
  while(wait_loop_index != 0)
 800078a:	2800      	cmp	r0, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC_Init+0x14e>
  {
    wait_loop_index--;
 800078e:	3801      	subs	r0, #1
 8000790:	e7fb      	b.n	800078a <MX_ADC_Init+0x146>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000792:	b013      	add	sp, #76	; 0x4c
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	40012400 	.word	0x40012400
 80007a4:	40012708 	.word	0x40012708
 80007a8:	ff3fffff 	.word	0xff3fffff
 80007ac:	fffffe03 	.word	0xfffffe03
 80007b0:	fffffdff 	.word	0xfffffdff
 80007b4:	fdffffff 	.word	0xfdffffff
 80007b8:	6fffffe8 	.word	0x6fffffe8
 80007bc:	2000001c 	.word	0x2000001c
 80007c0:	00030d40 	.word	0x00030d40

080007c4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_CRC_Init+0x40>)
 80007c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	0140      	lsls	r0, r0, #5
 80007ce:	4301      	orrs	r1, r0
 80007d0:	6311      	str	r1, [r2, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80007d4:	4003      	ands	r3, r0
 80007d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007d8:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_CRC_Init+0x44>)
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	2160      	movs	r1, #96	; 0x60
 80007e0:	438a      	bics	r2, r1
 80007e2:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	3120      	adds	r1, #32
 80007e8:	438a      	bics	r2, r1
 80007ea:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <MX_CRC_Init+0x48>)
 80007ee:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	3968      	subs	r1, #104	; 0x68
 80007f4:	438a      	bics	r2, r1
 80007f6:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4252      	negs	r2, r2
 80007fc:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	40023000 	.word	0x40023000
 800080c:	04c11db7 	.word	0x04c11db7

08000810 <CalcCRC>:

/* USER CODE BEGIN 1 */

uint32_t CalcCRC(uint32_t* buff, uint8_t len){
 8000810:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <CalcCRC+0x28>)
 8000814:	6893      	ldr	r3, [r2, #8]
 8000816:	2401      	movs	r4, #1
 8000818:	4323      	orrs	r3, r4
 800081a:	6093      	str	r3, [r2, #8]
  uint8_t i;
  uint32_t tmp;

  LL_CRC_ResetCRCCalculationUnit(CRC);

  for(i = 0; i < len; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	428b      	cmp	r3, r1
 8000820:	d206      	bcs.n	8000830 <CalcCRC+0x20>
    LL_CRC_FeedData32(CRC,buff[i]);
 8000822:	009a      	lsls	r2, r3, #2
 8000824:	5884      	ldr	r4, [r0, r2]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <CalcCRC+0x28>)
 8000828:	6014      	str	r4, [r2, #0]
  for(i = 0; i < len; i++){
 800082a:	3301      	adds	r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	e7f6      	b.n	800081e <CalcCRC+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8000830:	4b01      	ldr	r3, [pc, #4]	; (8000838 <CalcCRC+0x28>)
 8000832:	6818      	ldr	r0, [r3, #0]
  }

  tmp = LL_CRC_ReadData32(CRC);
  return(tmp);

}
 8000834:	bd10      	pop	{r4, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40023000 	.word	0x40023000

0800083c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	46d6      	mov	lr, sl
 8000840:	464f      	mov	r7, r9
 8000842:	4646      	mov	r6, r8
 8000844:	b5c0      	push	{r6, r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000848:	ae0a      	add	r6, sp, #40	; 0x28
 800084a:	2308      	movs	r3, #8
 800084c:	4699      	mov	r9, r3
 800084e:	2208      	movs	r2, #8
 8000850:	2100      	movs	r1, #0
 8000852:	0030      	movs	r0, r6
 8000854:	f002 fe7f 	bl	8003556 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	2400      	movs	r4, #0
 800085a:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->IOPENR, Periphs);
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xd0>)
 800085e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000860:	2204      	movs	r2, #4
 8000862:	4311      	orrs	r1, r2
 8000864:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000868:	400a      	ands	r2, r1
 800086a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800086c:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	2501      	movs	r5, #1
 8000872:	432a      	orrs	r2, r5
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000878:	402a      	ands	r2, r5
 800087a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	2102      	movs	r1, #2
 8000882:	4688      	mov	r8, r1
 8000884:	430a      	orrs	r2, r1
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	400b      	ands	r3, r1
 800088c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000890:	27a0      	movs	r7, #160	; 0xa0
 8000892:	05ff      	lsls	r7, r7, #23
 8000894:	464b      	mov	r3, r9
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_GPIO_Init+0xd4>)
 800089a:	469a      	mov	sl, r3
 800089c:	6299      	str	r1, [r3, #40]	; 0x28

  /**/
  LL_GPIO_ResetOutputPin(HEAT_GPIO_Output_GPIO_Port, HEAT_GPIO_Output_Pin);

  /**/
  GPIO_InitStruct.Pin = TURN_ON_IR_Pin;
 800089e:	464b      	mov	r3, r9
 80008a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a8:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(TURN_ON_IR_GPIO_Port, &GPIO_InitStruct);
 80008aa:	a904      	add	r1, sp, #16
 80008ac:	0038      	movs	r0, r7
 80008ae:	f002 fae5 	bl	8002e7c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HEAT_GPIO_Output_Pin;
 80008b2:	4643      	mov	r3, r8
 80008b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008bc:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(HEAT_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 80008be:	a904      	add	r1, sp, #16
 80008c0:	4650      	mov	r0, sl
 80008c2:	f002 fadb 	bl	8002e7c <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_GPIO_Init+0xd8>)
 80008c8:	68d3      	ldr	r3, [r2, #12]
 80008ca:	210f      	movs	r1, #15
 80008cc:	438b      	bics	r3, r1
 80008ce:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4911      	ldr	r1, [pc, #68]	; (8000918 <MX_GPIO_Init+0xdc>)
 80008d4:	400a      	ands	r2, r1
 80008d6:	60fa      	str	r2, [r7, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	400b      	ands	r3, r1
 80008dc:	603b      	str	r3, [r7, #0]

  /**/
  LL_GPIO_SetPinMode(RDY_ADS1115_GPIO_Port, RDY_ADS1115_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80008de:	2310      	movs	r3, #16
 80008e0:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80008e2:	7135      	strb	r5, [r6, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008e4:	7174      	strb	r4, [r6, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80008e6:	71b5      	strb	r5, [r6, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008e8:	0030      	movs	r0, r6
 80008ea:	f002 fa63 	bl	8002db4 <LL_EXTI_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_GPIO_Init+0xe0>)
 80008f0:	21c1      	movs	r1, #193	; 0xc1
 80008f2:	0089      	lsls	r1, r1, #2
 80008f4:	5853      	ldr	r3, [r2, r1]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 8000900:	b00c      	add	sp, #48	; 0x30
 8000902:	bce0      	pop	{r5, r6, r7}
 8000904:	46ba      	mov	sl, r7
 8000906:	46b1      	mov	r9, r6
 8000908:	46a8      	mov	r8, r5
 800090a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	50000400 	.word	0x50000400
 8000914:	40010000 	.word	0x40010000
 8000918:	fffffcff 	.word	0xfffffcff
 800091c:	e000e100 	.word	0xe000e100

08000920 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	46c6      	mov	lr, r8
 8000924:	b500      	push	{lr}
 8000926:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000928:	221c      	movs	r2, #28
 800092a:	2100      	movs	r1, #0
 800092c:	a809      	add	r0, sp, #36	; 0x24
 800092e:	f002 fe12 	bl	8003556 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8000932:	4c2a      	ldr	r4, [pc, #168]	; (80009dc <MX_I2C1_Init+0xbc>)
 8000934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000936:	2602      	movs	r6, #2
 8000938:	4333      	orrs	r3, r6
 800093a:	62e3      	str	r3, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800093c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800093e:	4033      	ands	r3, r6
 8000940:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000942:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000948:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	3b3d      	subs	r3, #61	; 0x3d
 800094c:	4698      	mov	r8, r3
 800094e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000950:	2501      	movs	r5, #1
 8000952:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000954:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000956:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	4f21      	ldr	r7, [pc, #132]	; (80009e0 <MX_I2C1_Init+0xc0>)
 800095a:	a903      	add	r1, sp, #12
 800095c:	0038      	movs	r0, r7
 800095e:	f002 fa8d 	bl	8002e7c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000966:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	4643      	mov	r3, r8
 800096a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800096c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800096e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000970:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	a903      	add	r1, sp, #12
 8000974:	0038      	movs	r0, r7
 8000976:	f002 fa81 	bl	8002e7c <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800097a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0389      	lsls	r1, r1, #14
 8000980:	430a      	orrs	r2, r1
 8000982:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000986:	400b      	ands	r3, r1
 8000988:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800098a:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800098c:	4c15      	ldr	r4, [pc, #84]	; (80009e4 <MX_I2C1_Init+0xc4>)
 800098e:	6862      	ldr	r2, [r4, #4]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	049b      	lsls	r3, r3, #18
 8000994:	4313      	orrs	r3, r2
 8000996:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000998:	68e3      	ldr	r3, [r4, #12]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_I2C1_Init+0xc8>)
 800099c:	4013      	ands	r3, r2
 800099e:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_I2C1_Init+0xcc>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <MX_I2C1_Init+0xd0>)
 80009ac:	4013      	ands	r3, r2
 80009ae:	6023      	str	r3, [r4, #0]
  */
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009b0:	2300      	movs	r3, #0
 80009b2:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0000061E;
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_I2C1_Init+0xd4>)
 80009b6:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009b8:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80009ba:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 80009bc:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009be:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009c0:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009c2:	a909      	add	r1, sp, #36	; 0x24
 80009c4:	0020      	movs	r0, r4
 80009c6:	f002 fab1 	bl	8002f2c <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009ca:	68e3      	ldr	r3, [r4, #12]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <MX_I2C1_Init+0xd8>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	60e3      	str	r3, [r4, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d2:	b010      	add	sp, #64	; 0x40
 80009d4:	bc80      	pop	{r7}
 80009d6:	46b8      	mov	r8, r7
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000400 	.word	0x50000400
 80009e4:	40005400 	.word	0x40005400
 80009e8:	ffff7fff 	.word	0xffff7fff
 80009ec:	fff7ffff 	.word	0xfff7ffff
 80009f0:	fffdffff 	.word	0xfffdffff
 80009f4:	0000061e 	.word	0x0000061e
 80009f8:	fffff801 	.word	0xfffff801

080009fc <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80009fc:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_LPTIM1_Init+0x70>)
 8000a00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0612      	lsls	r2, r2, #24
 8000a06:	430a      	orrs	r2, r1
 8000a08:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0c:	0fdb      	lsrs	r3, r3, #31
 8000a0e:	07db      	lsls	r3, r3, #31
 8000a10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a12:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_LPTIM1_Init+0x74>)
 8000a16:	21c3      	movs	r1, #195	; 0xc3
 8000a18:	0089      	lsls	r1, r1, #2
 8000a1a:	585a      	ldr	r2, [r3, r1]
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_LPTIM1_Init+0x78>)
 8000a1e:	4002      	ands	r2, r0
 8000a20:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_LPTIM1_Init+0x7c>)
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	438a      	bics	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <MX_LPTIM1_Init+0x80>)
 8000a36:	4011      	ands	r1, r2
 8000a38:	22e0      	movs	r2, #224	; 0xe0
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	490f      	ldr	r1, [pc, #60]	; (8000a80 <MX_LPTIM1_Init+0x84>)
 8000a44:	400a      	ands	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <MX_LPTIM1_Init+0x88>)
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	03d2      	lsls	r2, r2, #15
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	490b      	ldr	r1, [pc, #44]	; (8000a88 <MX_LPTIM1_Init+0x8c>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	490a      	ldr	r1, [pc, #40]	; (8000a8c <MX_LPTIM1_Init+0x90>)
 8000a62:	400a      	ands	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
  LL_LPTIM_TrigSw(LPTIM1);
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	ffff00ff 	.word	0xffff00ff
 8000a78:	40007c00 	.word	0x40007c00
 8000a7c:	fffff1ff 	.word	0xfffff1ff
 8000a80:	ffdfffff 	.word	0xffdfffff
 8000a84:	ffbfffff 	.word	0xffbfffff
 8000a88:	ff7fffff 	.word	0xff7fffff
 8000a8c:	fff9ffff 	.word	0xfff9ffff

08000a90 <printUID>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printUID(void){
 8000a90:	b500      	push	{lr}
 8000a92:	b087      	sub	sp, #28
	uint32_t *idBase = (uint32_t*)(UID_BASE);
	uint8_t s[4];
	int i;
	//memcpy(s0,(uint8_t*)idBase0,3);
	for(i = 0; i < 3; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	e008      	b.n	8000aaa <printUID+0x1a>
		s[2-i] = (*idBase >> (8 * i)) & 0xff;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <printUID+0x5c>)
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	00da      	lsls	r2, r3, #3
 8000a9e:	40d1      	lsrs	r1, r2
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	a805      	add	r0, sp, #20
 8000aa6:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 3; i++)
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	ddf4      	ble.n	8000a98 <printUID+0x8>
	s[3]= 0;
 8000aae:	ab05      	add	r3, sp, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	70da      	strb	r2, [r3, #3]

	uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
	uint8_t s2[5];

	for(i = 0; i < 4; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e008      	b.n	8000aca <printUID+0x3a>
		s2[3-i] = (*idBase2 >> (8 * i)) & 0xff;
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <printUID+0x60>)
 8000aba:	6811      	ldr	r1, [r2, #0]
 8000abc:	00da      	lsls	r2, r3, #3
 8000abe:	40d1      	lsrs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	a803      	add	r0, sp, #12
 8000ac6:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 4; i++)
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	ddf4      	ble.n	8000ab8 <printUID+0x28>
	s2[4]= 0;
 8000ace:	ab03      	add	r3, sp, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	711a      	strb	r2, [r3, #4]

	idBase = (uint32_t*)(UID_BASE + 0x14);

	d_printf("\n\rUID %02X-\"%s\"-\"%s\"-%08lx", (*idBase >> 24) & 0xff, s, s2, *idBase2);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <printUID+0x64>)
 8000ad6:	78d1      	ldrb	r1, [r2, #3]
 8000ad8:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <printUID+0x60>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	aa05      	add	r2, sp, #20
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <printUID+0x68>)
 8000ae2:	f000 fbd7 	bl	8001294 <d_printf>

}
 8000ae6:	b007      	add	sp, #28
 8000ae8:	bd00      	pop	{pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	1ff80050 	.word	0x1ff80050
 8000af0:	1ff80054 	.word	0x1ff80054
 8000af4:	1ff80064 	.word	0x1ff80064
 8000af8:	08003de4 	.word	0x08003de4

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <SystemClock_Config+0xdc>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	2101      	movs	r1, #1
 8000b04:	438b      	bics	r3, r1
 8000b06:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <SystemClock_Config+0xdc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000b0c:	07db      	lsls	r3, r3, #31
 8000b0e:	d4fb      	bmi.n	8000b08 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b10:	4932      	ldr	r1, [pc, #200]	; (8000bdc <SystemClock_Config+0xe0>)
 8000b12:	680b      	ldr	r3, [r1, #0]
 8000b14:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <SystemClock_Config+0xe4>)
 8000b16:	401a      	ands	r2, r3
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000b20:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b22:	6811      	ldr	r1, [r2, #0]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	059b      	lsls	r3, r3, #22
 8000b32:	d5fb      	bpl.n	8000b2c <SystemClock_Config+0x30>
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	492b      	ldr	r1, [pc, #172]	; (8000be8 <SystemClock_Config+0xec>)
 8000b3a:	4011      	ands	r1, r2
 8000b3c:	22a0      	movs	r2, #160	; 0xa0
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	430a      	orrs	r2, r1
 8000b42:	605a      	str	r2, [r3, #4]
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	0a12      	lsrs	r2, r2, #8
 8000b4a:	605a      	str	r2, [r3, #4]
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <SystemClock_Config+0xe0>)
 8000b4e:	6801      	ldr	r1, [r0, #0]
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	4311      	orrs	r1, r2
 8000b56:	6001      	str	r1, [r0, #0]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8000b58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000b5a:	4821      	ldr	r0, [pc, #132]	; (8000be0 <SystemClock_Config+0xe4>)
 8000b5c:	4001      	ands	r1, r0
 8000b5e:	6519      	str	r1, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000b60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000b62:	430a      	orrs	r2, r1
 8000b64:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b6a:	059b      	lsls	r3, r3, #22
 8000b6c:	d5fb      	bpl.n	8000b66 <SystemClock_Config+0x6a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	21f0      	movs	r1, #240	; 0xf0
 8000b74:	438a      	bics	r2, r1
 8000b76:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	491c      	ldr	r1, [pc, #112]	; (8000bec <SystemClock_Config+0xf0>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	491b      	ldr	r1, [pc, #108]	; (8000bf0 <SystemClock_Config+0xf4>)
 8000b84:	400a      	ands	r2, r1
 8000b86:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	220c      	movs	r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000b96:	421a      	tst	r2, r3
 8000b98:	d1fa      	bne.n	8000b90 <SystemClock_Config+0x94>
  {

  }

  LL_Init1msTick(2097000);
 8000b9a:	4c16      	ldr	r4, [pc, #88]	; (8000bf4 <SystemClock_Config+0xf8>)
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	f002 fc7d 	bl	800349c <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f002 fc9e 	bl	80034e4 <LL_SetSystemCoreClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <SystemClock_Config+0xe8>)
 8000baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bac:	210c      	movs	r1, #12
 8000bae:	438a      	bics	r2, r1
 8000bb0:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb4:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <SystemClock_Config+0xfc>)
 8000bb6:	4011      	ands	r1, r2
 8000bb8:	22c0      	movs	r2, #192	; 0xc0
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <SystemClock_Config+0x100>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <SystemClock_Config+0x104>)
 8000bcc:	4011      	ands	r1, r2
 8000bce:	22c0      	movs	r2, #192	; 0xc0
 8000bd0:	0312      	lsls	r2, r2, #12
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_LSE);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
}
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	40022000 	.word	0x40022000
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	ffffe7ff 	.word	0xffffe7ff
 8000be4:	40021000 	.word	0x40021000
 8000be8:	ffff1fff 	.word	0xffff1fff
 8000bec:	fffff8ff 	.word	0xfffff8ff
 8000bf0:	ffffc7ff 	.word	0xffffc7ff
 8000bf4:	001fff68 	.word	0x001fff68
 8000bf8:	fffff3ff 	.word	0xfffff3ff
 8000bfc:	ffffcfff 	.word	0xffffcfff
 8000c00:	fff3ffff 	.word	0xfff3ffff

08000c04 <main>:
{
 8000c04:	b570      	push	{r4, r5, r6, lr}
 8000c06:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c08:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <main+0x174>)
 8000c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c14:	400a      	ands	r2, r1
 8000c16:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000c18:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0549      	lsls	r1, r1, #21
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c26:	400b      	ands	r3, r1
 8000c28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c2a:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 8000c2c:	f7ff ff66 	bl	8000afc <SystemClock_Config>
  MX_GPIO_Init();
 8000c30:	f7ff fe04 	bl	800083c <MX_GPIO_Init>
  MX_ADC_Init();
 8000c34:	f7ff fd06 	bl	8000644 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c38:	f7ff fe72 	bl	8000920 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000c3c:	f000 fa04 	bl	8001048 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fa6c 	bl	800111c <MX_USART2_UART_Init>
  MX_TIM22_Init();
 8000c44:	f000 f9a2 	bl	8000f8c <MX_TIM22_Init>
  MX_CRC_Init();
 8000c48:	f7ff fdbc 	bl	80007c4 <MX_CRC_Init>
  MX_TIM21_Init();
 8000c4c:	f000 f948 	bl	8000ee0 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8000c50:	f7ff fed4 	bl	80009fc <MX_LPTIM1_Init>
	debug_init();
 8000c54:	f000 faf0 	bl	8001238 <debug_init>
	d_printf("\n\r\n\r%s %s", date, time);
 8000c58:	4a48      	ldr	r2, [pc, #288]	; (8000d7c <main+0x178>)
 8000c5a:	4949      	ldr	r1, [pc, #292]	; (8000d80 <main+0x17c>)
 8000c5c:	4849      	ldr	r0, [pc, #292]	; (8000d84 <main+0x180>)
 8000c5e:	f000 fb19 	bl	8001294 <d_printf>
	printUID();
 8000c62:	f7ff ff15 	bl	8000a90 <printUID>
	ADC1_COMMON->CCR |= LL_ADC_PATH_INTERNAL_TEMPSENSOR;
 8000c66:	4a48      	ldr	r2, [pc, #288]	; (8000d88 <main+0x184>)
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000c72:	4946      	ldr	r1, [pc, #280]	; (8000d8c <main+0x188>)
 8000c74:	688b      	ldr	r3, [r1, #8]
 8000c76:	4a46      	ldr	r2, [pc, #280]	; (8000d90 <main+0x18c>)
 8000c78:	401a      	ands	r2, r3
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	061b      	lsls	r3, r3, #24
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000c82:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <main+0x188>)
 8000c84:	689b      	ldr	r3, [r3, #8]
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dbfb      	blt.n	8000c82 <main+0x7e>
	LL_mDelay(2);
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f002 fc16 	bl	80034bc <LL_mDelay>
	read_config_from_eeprom();
 8000c90:	f000 fc48 	bl	8001524 <read_config_from_eeprom>
	dev_init();
 8000c94:	f001 fa10 	bl	80020b8 <dev_init>
	d_printf("\n\rSN %09lu", dev.Config.Serial);
 8000c98:	4a3e      	ldr	r2, [pc, #248]	; (8000d94 <main+0x190>)
 8000c9a:	23d0      	movs	r3, #208	; 0xd0
 8000c9c:	58d1      	ldr	r1, [r2, r3]
 8000c9e:	483e      	ldr	r0, [pc, #248]	; (8000d98 <main+0x194>)
 8000ca0:	f000 faf8 	bl	8001294 <d_printf>
	d_printf("\n\r");
 8000ca4:	483d      	ldr	r0, [pc, #244]	; (8000d9c <main+0x198>)
 8000ca6:	f000 faf5 	bl	8001294 <d_printf>
	modbus_init();
 8000caa:	f000 fdc1 	bl	8001830 <modbus_init>
  MODIFY_REG(ADCx->CR,
 8000cae:	4937      	ldr	r1, [pc, #220]	; (8000d8c <main+0x188>)
 8000cb0:	688b      	ldr	r3, [r1, #8]
 8000cb2:	4a37      	ldr	r2, [pc, #220]	; (8000d90 <main+0x18c>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4303      	orrs	r3, r0
 8000cba:	608b      	str	r3, [r1, #8]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000cbc:	684b      	ldr	r3, [r1, #4]
 8000cbe:	2504      	movs	r5, #4
 8000cc0:	432b      	orrs	r3, r5
 8000cc2:	604b      	str	r3, [r1, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000cc4:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <main+0x19c>)
 8000cc6:	68d3      	ldr	r3, [r2, #12]
 8000cc8:	2602      	movs	r6, #2
 8000cca:	4333      	orrs	r3, r6
 8000ccc:	60d3      	str	r3, [r2, #12]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <main+0x1a0>)
 8000cd0:	691c      	ldr	r4, [r3, #16]
 8000cd2:	4304      	orrs	r4, r0
 8000cd4:	611c      	str	r4, [r3, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000cd6:	699a      	ldr	r2, [r3, #24]
 8000cd8:	0c12      	lsrs	r2, r2, #16
 8000cda:	0412      	lsls	r2, r2, #16
 8000cdc:	4302      	orrs	r2, r0
 8000cde:	619a      	str	r2, [r3, #24]
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000ce0:	6899      	ldr	r1, [r3, #8]
 8000ce2:	4331      	orrs	r1, r6
 8000ce4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	2106      	movs	r1, #6
 8000cea:	438a      	bics	r2, r1
 8000cec:	432a      	orrs	r2, r5
 8000cee:	611a      	str	r2, [r3, #16]
	HourTimer = CntSec;
 8000cf0:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <main+0x1a4>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <main+0x1a8>)
 8000cf6:	601a      	str	r2, [r3, #0]
	Mipex_Init();
 8000cf8:	f001 f916 	bl	8001f28 <Mipex_Init>
 8000cfc:	e01c      	b.n	8000d38 <main+0x134>
			f_Time500ms = FALSE;
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <main+0x1ac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			dev_proc();
 8000d04:	f001 f9ee 	bl	80020e4 <dev_proc>
 8000d08:	e01c      	b.n	8000d44 <main+0x140>
			f_Time250ms = FALSE;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <main+0x1b0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000d10:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <main+0x188>)
 8000d12:	6893      	ldr	r3, [r2, #8]
 8000d14:	491e      	ldr	r1, [pc, #120]	; (8000d90 <main+0x18c>)
 8000d16:	400b      	ands	r3, r1
 8000d18:	2104      	movs	r1, #4
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6093      	str	r3, [r2, #8]
		if(f_AdcCycleEnd){
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <main+0x1b4>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d113      	bne.n	8000d4e <main+0x14a>
		if((uint32_t)(CntSec - HourTimer) >= SEC_PER_MHOUR){
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <main+0x1a4>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <main+0x1a8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	21e1      	movs	r1, #225	; 0xe1
 8000d32:	0109      	lsls	r1, r1, #4
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d210      	bcs.n	8000d5a <main+0x156>
		mb_proc();
 8000d38:	f001 fe44 	bl	80029c4 <mb_proc>
		if(f_Time500ms){
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <main+0x1ac>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1dc      	bne.n	8000cfe <main+0xfa>
		if(f_Time250ms){
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <main+0x1b0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0e8      	beq.n	8000d1e <main+0x11a>
 8000d4c:	e7dd      	b.n	8000d0a <main+0x106>
			f_AdcCycleEnd = FALSE;
 8000d4e:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <main+0x1b4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
			Adc_read_data();
 8000d54:	f001 fa1e 	bl	8002194 <Adc_read_data>
 8000d58:	e7e5      	b.n	8000d26 <main+0x122>
			HourTimer = CntSec;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <main+0x1a8>)
 8000d5c:	601a      	str	r2, [r3, #0]
			arh.MHour++;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <main+0x1b8>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	1c50      	adds	r0, r2, #1
 8000d64:	6018      	str	r0, [r3, #0]
			if((arh.MHour % 24) == 0){
 8000d66:	2118      	movs	r1, #24
 8000d68:	f7ff fa66 	bl	8000238 <__aeabi_uidivmod>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	d1e3      	bne.n	8000d38 <main+0x134>
				DayArhivStore();
 8000d70:	f000 fa46 	bl	8001200 <DayArhivStore>
 8000d74:	e7e0      	b.n	8000d38 <main+0x134>
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000000 	.word	0x20000000
 8000d84:	08003e00 	.word	0x08003e00
 8000d88:	40012708 	.word	0x40012708
 8000d8c:	40012400 	.word	0x40012400
 8000d90:	7fffffe8 	.word	0x7fffffe8
 8000d94:	2000050c 	.word	0x2000050c
 8000d98:	08003e0c 	.word	0x08003e0c
 8000d9c:	08003e18 	.word	0x08003e18
 8000da0:	40011400 	.word	0x40011400
 8000da4:	40007c00 	.word	0x40007c00
 8000da8:	20000180 	.word	0x20000180
 8000dac:	2000018c 	.word	0x2000018c
 8000db0:	20000192 	.word	0x20000192
 8000db4:	20000191 	.word	0x20000191
 8000db8:	2000062b 	.word	0x2000062b
 8000dbc:	200001c4 	.word	0x200001c4

08000dc0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <Error_Handler+0x2>

08000dc4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler>

08000dc6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler>

08000dc8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	4770      	bx	lr
	...

08000dd0 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <EXTI4_15_IRQHandler+0x10>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000dd4:	06db      	lsls	r3, r3, #27
 8000dd6:	d502      	bpl.n	8000dde <EXTI4_15_IRQHandler+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000dd8:	4b01      	ldr	r3, [pc, #4]	; (8000de0 <EXTI4_15_IRQHandler+0x10>)
 8000dda:	2210      	movs	r2, #16
 8000ddc:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000dde:	4770      	bx	lr
 8000de0:	40010400 	.word	0x40010400

08000de4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000de4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	__NOP();
 8000de6:	46c0      	nop			; (mov r8, r8)

	Adc_Eoc_Callback();
 8000de8:	f001 f9b0 	bl	800214c <Adc_Eoc_Callback>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP));
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <ADC1_COMP_IRQHandler+0x40>)
 8000dee:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000df0:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000df2:	681b      	ldr	r3, [r3, #0]

	if(LL_ADC_IsActiveFlag_OVR(ADC1)){
		//		LL_ADC_ClearFlag_OVR(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	d502      	bpl.n	8000dfe <ADC1_COMP_IRQHandler+0x1a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <ADC1_COMP_IRQHandler+0x40>)
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	601a      	str	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <ADC1_COMP_IRQHandler+0x40>)
 8000e00:	681b      	ldr	r3, [r3, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8000e02:	071b      	lsls	r3, r3, #28
 8000e04:	d506      	bpl.n	8000e14 <ADC1_COMP_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <ADC1_COMP_IRQHandler+0x40>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	601a      	str	r2, [r3, #0]
		LL_ADC_ClearFlag_EOS(ADC1);
		adc_cnt = 0;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <ADC1_COMP_IRQHandler+0x44>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000e12:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->CR,
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <ADC1_COMP_IRQHandler+0x40>)
 8000e16:	6893      	ldr	r3, [r2, #8]
 8000e18:	4904      	ldr	r1, [pc, #16]	; (8000e2c <ADC1_COMP_IRQHandler+0x48>)
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	6093      	str	r3, [r2, #8]
 8000e22:	e7f6      	b.n	8000e12 <ADC1_COMP_IRQHandler+0x2e>
 8000e24:	40012400 	.word	0x40012400
 8000e28:	20000190 	.word	0x20000190
 8000e2c:	7fffffe8 	.word	0x7fffffe8

08000e30 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000e30:	b510      	push	{r4, lr}
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <LPTIM1_IRQHandler+0x1c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	079b      	lsls	r3, r3, #30
 8000e38:	d504      	bpl.n	8000e44 <LPTIM1_IRQHandler+0x14>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <LPTIM1_IRQHandler+0x1c>)
 8000e3c:	6853      	ldr	r3, [r2, #4]
 8000e3e:	2102      	movs	r1, #2
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1)){
		LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
	}

	timer_1_128();
 8000e44:	f001 f88c 	bl	8001f60 <timer_1_128>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000e48:	bd10      	pop	{r4, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40007c00 	.word	0x40007c00

08000e50 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000e50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  /* USER CODE BEGIN TIM21_IRQn 1 */
#ifdef CONFIG_MIPEX
	MSI_Callback_Capture_Timer();
 8000e52:	f001 ff11 	bl	8002c78 <MSI_Callback_Capture_Timer>
#endif
  /* USER CODE END TIM21_IRQn 1 */
}
 8000e56:	bd10      	pop	{r4, pc}

08000e58 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000e58:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <TIM22_IRQHandler+0x24>)
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	079b      	lsls	r3, r3, #30
 8000e60:	d503      	bpl.n	8000e6a <TIM22_IRQHandler+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <TIM22_IRQHandler+0x24>)
 8000e64:	2203      	movs	r2, #3
 8000e66:	4252      	negs	r2, r2
 8000e68:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_CC1(TIM22);
	}


	Modbus_TO_timer();
 8000e6a:	f000 fcf7 	bl	800185c <Modbus_TO_timer>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e6e:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <TIM22_IRQHandler+0x24>)
 8000e70:	6813      	ldr	r3, [r2, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	438b      	bics	r3, r1
 8000e76:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM22_IRQn 0 */
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000e78:	bd10      	pop	{r4, pc}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40011400 	.word	0x40011400

08000e80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	Debug_UART_IRQHandler();
 8000e82:	f000 fa6b 	bl	800135c <Debug_UART_IRQHandler>
#ifdef CONFIG_MIPEX
	Mipex_UART_IRQHandler();
 8000e86:	f000 ff6b 	bl	8001d60 <Mipex_UART_IRQHandler>
#endif
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e8a:	bd10      	pop	{r4, pc}

08000e8c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000e8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	Modbus_LPUART_IRQHandler();
 8000e8e:	f000 fd3b 	bl	8001908 <Modbus_LPUART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e92:	bd10      	pop	{r4, pc}

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b510      	push	{r4, lr}
 8000e96:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <_sbrk+0x38>)
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <_sbrk+0x3c>)
 8000e9c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <_sbrk+0x40>)
 8000ea0:	6809      	ldr	r1, [r1, #0]
 8000ea2:	2900      	cmp	r1, #0
 8000ea4:	d007      	beq.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea6:	490b      	ldr	r1, [pc, #44]	; (8000ed4 <_sbrk+0x40>)
 8000ea8:	6808      	ldr	r0, [r1, #0]
 8000eaa:	18c3      	adds	r3, r0, r3
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d806      	bhi.n	8000ebe <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000eb0:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <_sbrk+0x40>)
 8000eb2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000eb4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000eb6:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <_sbrk+0x40>)
 8000eb8:	4807      	ldr	r0, [pc, #28]	; (8000ed8 <_sbrk+0x44>)
 8000eba:	6008      	str	r0, [r1, #0]
 8000ebc:	e7f3      	b.n	8000ea6 <_sbrk+0x12>
    errno = ENOMEM;
 8000ebe:	f002 fb17 	bl	80034f0 <__errno>
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	4240      	negs	r0, r0
 8000eca:	e7f3      	b.n	8000eb4 <_sbrk+0x20>
 8000ecc:	20002000 	.word	0x20002000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200000ac 	.word	0x200000ac
 8000ed8:	20000658 	.word	0x20000658

08000edc <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	4770      	bx	lr
	...

08000ee0 <MX_TIM21_Init>:

/* USER CODE END 0 */

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	466a      	mov	r2, sp
 8000ee8:	8153      	strh	r3, [r2, #10]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eea:	4924      	ldr	r1, [pc, #144]	; (8000f7c <MX_TIM21_Init+0x9c>)
 8000eec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000eee:	2204      	movs	r2, #4
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	6348      	str	r0, [r1, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000efa:	9a01      	ldr	r2, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efc:	4d20      	ldr	r5, [pc, #128]	; (8000f80 <MX_TIM21_Init+0xa0>)
 8000efe:	21c5      	movs	r1, #197	; 0xc5
 8000f00:	0089      	lsls	r1, r1, #2
 8000f02:	586a      	ldr	r2, [r5, r1]
 8000f04:	20ff      	movs	r0, #255	; 0xff
 8000f06:	4382      	bics	r2, r0
 8000f08:	506a      	str	r2, [r5, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	2680      	movs	r6, #128	; 0x80
 8000f0c:	0376      	lsls	r6, r6, #13
 8000f0e:	602e      	str	r6, [r5, #0]
  NVIC_EnableIRQ(TIM21_IRQn);

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000f10:	466a      	mov	r2, sp
 8000f12:	8113      	strh	r3, [r2, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f14:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 65535;
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_TIM21_Init+0xa4>)
 8000f18:	9204      	str	r2, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f1a:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 8000f1c:	4c1a      	ldr	r4, [pc, #104]	; (8000f88 <MX_TIM21_Init+0xa8>)
 8000f1e:	a902      	add	r1, sp, #8
 8000f20:	0020      	movs	r0, r4
 8000f22:	f002 fa15 	bl	8003350 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	2170      	movs	r1, #112	; 0x70
 8000f32:	438b      	bics	r3, r1
 8000f34:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	4393      	bics	r3, r2
 8000f3a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000f3c:	69a3      	ldr	r3, [r4, #24]
 8000f3e:	396d      	subs	r1, #109	; 0x6d
 8000f40:	438b      	bics	r3, r1
 8000f42:	3902      	subs	r1, #2
 8000f44:	430b      	orrs	r3, r1
 8000f46:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000f48:	69a3      	ldr	r3, [r4, #24]
 8000f4a:	310b      	adds	r1, #11
 8000f4c:	438b      	bics	r3, r1
 8000f4e:	430b      	orrs	r3, r1
 8000f50:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000f52:	69a3      	ldr	r3, [r4, #24]
 8000f54:	31e4      	adds	r1, #228	; 0xe4
 8000f56:	438b      	bics	r3, r1
 8000f58:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000f5a:	6a23      	ldr	r3, [r4, #32]
 8000f5c:	39e6      	subs	r1, #230	; 0xe6
 8000f5e:	438b      	bics	r3, r1
 8000f60:	6223      	str	r3, [r4, #32]
  MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
 8000f62:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000f64:	3135      	adds	r1, #53	; 0x35
 8000f66:	438b      	bics	r3, r1
 8000f68:	392f      	subs	r1, #47	; 0x2f
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6523      	str	r3, [r4, #80]	; 0x50
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	50ae      	str	r6, [r5, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f74:	f3bf 8f6f 	isb	sy
  LL_TIM_SetRemap(TIM21, LL_TIM_TIM21_TI1_RMP_LSE);
  /* USER CODE BEGIN TIM21_Init 2 */
  NVIC_DisableIRQ(TIM21_IRQn);
  /* USER CODE END TIM21_Init 2 */

}
 8000f78:	b006      	add	sp, #24
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	0000ffff 	.word	0x0000ffff
 8000f88:	40010800 	.word	0x40010800

08000f8c <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	46c6      	mov	lr, r8
 8000f90:	b500      	push	{lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f94:	2500      	movs	r5, #0
 8000f96:	466b      	mov	r3, sp
 8000f98:	835d      	strh	r5, [r3, #26]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	a802      	add	r0, sp, #8
 8000fa0:	f002 fad9 	bl	8003556 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <MX_TIM22_Init+0xa4>)
 8000fa6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000fa8:	2320      	movs	r3, #32
 8000faa:	4319      	orrs	r1, r3
 8000fac:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000fb4:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_TIM22_Init+0xa8>)
 8000fb8:	21c5      	movs	r1, #197	; 0xc5
 8000fba:	0089      	lsls	r1, r1, #2
 8000fbc:	585a      	ldr	r2, [r3, r1]
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <MX_TIM22_Init+0xac>)
 8000fc0:	4002      	ands	r2, r0
 8000fc2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	03d2      	lsls	r2, r2, #15
 8000fc8:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM22_IRQn);

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8000fca:	2704      	movs	r7, #4
 8000fcc:	466b      	mov	r3, sp
 8000fce:	831f      	strh	r7, [r3, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fd0:	9507      	str	r5, [sp, #28]
  TIM_InitStruct.Autoreload = 1911;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM22_Init+0xb0>)
 8000fd4:	4698      	mov	r8, r3
 8000fd6:	9308      	str	r3, [sp, #32]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fd8:	9509      	str	r5, [sp, #36]	; 0x24
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8000fda:	4c19      	ldr	r4, [pc, #100]	; (8001040 <MX_TIM22_Init+0xb4>)
 8000fdc:	a906      	add	r1, sp, #24
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f002 f9b6 	bl	8003350 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	2680      	movs	r6, #128	; 0x80
 8000fe8:	43b3      	bics	r3, r6
 8000fea:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000fec:	68a3      	ldr	r3, [r4, #8]
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <MX_TIM22_Init+0xb8>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM22);
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000ff4:	9502      	str	r5, [sp, #8]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ff6:	9503      	str	r5, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 1911;
 8000ff8:	4643      	mov	r3, r8
 8000ffa:	9304      	str	r3, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ffc:	9505      	str	r5, [sp, #20]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ffe:	aa02      	add	r2, sp, #8
 8001000:	2101      	movs	r1, #1
 8001002:	0020      	movs	r0, r4
 8001004:	f002 f9d2 	bl	80033ac <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001008:	69a3      	ldr	r3, [r4, #24]
 800100a:	43bb      	bics	r3, r7
 800100c:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	2208      	movs	r2, #8
 8001012:	4393      	bics	r3, r2
 8001014:	4313      	orrs	r3, r2
 8001016:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001018:	6863      	ldr	r3, [r4, #4]
 800101a:	3268      	adds	r2, #104	; 0x68
 800101c:	4393      	bics	r3, r2
 800101e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	43b3      	bics	r3, r6
 8001024:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM22);
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8001026:	b00a      	add	sp, #40	; 0x28
 8001028:	bc80      	pop	{r7}
 800102a:	46b8      	mov	r8, r7
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	40021000 	.word	0x40021000
 8001034:	e000e100 	.word	0xe000e100
 8001038:	ff00ffff 	.word	0xff00ffff
 800103c:	00000777 	.word	0x00000777
 8001040:	40011400 	.word	0x40011400
 8001044:	ffffbff8 	.word	0xffffbff8

08001048 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001048:	b530      	push	{r4, r5, lr}
 800104a:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800104c:	2218      	movs	r2, #24
 800104e:	2100      	movs	r1, #0
 8001050:	a808      	add	r0, sp, #32
 8001052:	f002 fa80 	bl	8003556 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <MX_LPUART1_UART_Init+0xb8>)
 8001058:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	02c0      	lsls	r0, r0, #11
 800105e:	4301      	orrs	r1, r0
 8001060:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001064:	4002      	ands	r2, r0
 8001066:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001068:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800106a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800106c:	2501      	movs	r5, #1
 800106e:	432a      	orrs	r2, r5
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	402b      	ands	r3, r5
 8001076:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001078:	9b00      	ldr	r3, [sp, #0]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800107a:	2304      	movs	r3, #4
 800107c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800107e:	3b02      	subs	r3, #2
 8001080:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	3301      	adds	r3, #1
 8001084:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001086:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001088:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800108a:	3303      	adds	r3, #3
 800108c:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	20a0      	movs	r0, #160	; 0xa0
 8001090:	a902      	add	r1, sp, #8
 8001092:	05c0      	lsls	r0, r0, #23
 8001094:	f001 fef2 	bl	8002e7c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_LPUART1_UART_Init+0xbc>)
 800109a:	21c7      	movs	r1, #199	; 0xc7
 800109c:	0089      	lsls	r1, r1, #2
 800109e:	585a      	ldr	r2, [r3, r1]
 80010a0:	4819      	ldr	r0, [pc, #100]	; (8001108 <MX_LPUART1_UART_Init+0xc0>)
 80010a2:	4002      	ands	r2, r0
 80010a4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0592      	lsls	r2, r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(LPUART1_IRQn);

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 80010ac:	2396      	movs	r3, #150	; 0x96
 80010ae:	019b      	lsls	r3, r3, #6
 80010b0:	9308      	str	r3, [sp, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80010b2:	2300      	movs	r3, #0
 80010b4:	9309      	str	r3, [sp, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80010b6:	930a      	str	r3, [sp, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80010b8:	930b      	str	r3, [sp, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80010ba:	330c      	adds	r3, #12
 80010bc:	930c      	str	r3, [sp, #48]	; 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80010be:	4c13      	ldr	r4, [pc, #76]	; (800110c <MX_LPUART1_UART_Init+0xc4>)
 80010c0:	a908      	add	r1, sp, #32
 80010c2:	0020      	movs	r0, r4
 80010c4:	f001 ff6e 	bl	8002fa4 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR3, USART_CR3_HDSEL);
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	2208      	movs	r2, #8
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_RTSE);
 80010d0:	68a3      	ldr	r3, [r4, #8]
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <MX_LPUART1_UART_Init+0xc8>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	60a3      	str	r3, [r4, #8]
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSIE);
 80010d8:	68a3      	ldr	r3, [r4, #8]
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <MX_LPUART1_UART_Init+0xcc>)
 80010dc:	4013      	ands	r3, r2
 80010de:	60a3      	str	r3, [r4, #8]
  SET_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 80010e0:	68a2      	ldr	r2, [r4, #8]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_EIE);
 80010ea:	68a3      	ldr	r3, [r4, #8]
 80010ec:	43ab      	bics	r3, r5
 80010ee:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 80010f0:	68a3      	ldr	r3, [r4, #8]
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <MX_LPUART1_UART_Init+0xd0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
 80010f8:	69e3      	ldr	r3, [r4, #28]
  LL_LPUART_IsActiveFlag_CTS(LPUART1);
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010fa:	b00f      	add	sp, #60	; 0x3c
 80010fc:	bd30      	pop	{r4, r5, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40021000 	.word	0x40021000
 8001104:	e000e100 	.word	0xe000e100
 8001108:	ffff00ff 	.word	0xffff00ff
 800110c:	40004800 	.word	0x40004800
 8001110:	fffffeff 	.word	0xfffffeff
 8001114:	fffffbff 	.word	0xfffffbff
 8001118:	fffffdff 	.word	0xfffffdff

0800111c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	46ce      	mov	lr, r9
 8001120:	4647      	mov	r7, r8
 8001122:	b580      	push	{r7, lr}
 8001124:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001126:	221c      	movs	r2, #28
 8001128:	2100      	movs	r1, #0
 800112a:	a809      	add	r0, sp, #36	; 0x24
 800112c:	f002 fa13 	bl	8003556 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001130:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_USART2_UART_Init+0xd4>)
 8001132:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001134:	2080      	movs	r0, #128	; 0x80
 8001136:	0280      	lsls	r0, r0, #10
 8001138:	4301      	orrs	r1, r0
 800113a:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800113c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800113e:	4002      	ands	r2, r0
 8001140:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001142:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8001144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001146:	2501      	movs	r5, #1
 8001148:	432a      	orrs	r2, r5
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800114c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114e:	402b      	ands	r3, r5
 8001150:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001152:	9b01      	ldr	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA9   ------> USART2_TX
  PA10   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DEBUG_USART2_TX_Pin;
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800115a:	3bff      	subs	r3, #255	; 0xff
 800115c:	3bff      	subs	r3, #255	; 0xff
 800115e:	4699      	mov	r9, r3
 8001160:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	3301      	adds	r3, #1
 8001164:	4698      	mov	r8, r3
 8001166:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001168:	2400      	movs	r4, #0
 800116a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800116e:	2704      	movs	r7, #4
 8001170:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001172:	26a0      	movs	r6, #160	; 0xa0
 8001174:	05f6      	lsls	r6, r6, #23
 8001176:	a903      	add	r1, sp, #12
 8001178:	0030      	movs	r0, r6
 800117a:	f001 fe7f 	bl	8002e7c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = DEBUG_USART2_RX_Pin;
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001184:	464b      	mov	r3, r9
 8001186:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	4643      	mov	r3, r8
 800118a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001190:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001192:	a903      	add	r1, sp, #12
 8001194:	0030      	movs	r0, r6
 8001196:	f001 fe71 	bl	8002e7c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119a:	4a16      	ldr	r2, [pc, #88]	; (80011f4 <MX_USART2_UART_Init+0xd8>)
 800119c:	21c7      	movs	r1, #199	; 0xc7
 800119e:	0089      	lsls	r1, r1, #2
 80011a0:	5853      	ldr	r3, [r2, r1]
 80011a2:	20ff      	movs	r0, #255	; 0xff
 80011a4:	4383      	bics	r3, r0
 80011a6:	387f      	subs	r0, #127	; 0x7f
 80011a8:	4303      	orrs	r3, r0
 80011aa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	055b      	lsls	r3, r3, #21
 80011b0:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80011b2:	2396      	movs	r3, #150	; 0x96
 80011b4:	019b      	lsls	r3, r3, #6
 80011b6:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80011b8:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011ba:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011bc:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011be:	230c      	movs	r3, #12
 80011c0:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011c2:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011c4:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80011c6:	4c0c      	ldr	r4, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0xdc>)
 80011c8:	a909      	add	r1, sp, #36	; 0x24
 80011ca:	0020      	movs	r0, r4
 80011cc:	f002 f90e 	bl	80033ec <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <MX_USART2_UART_Init+0xe0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011d8:	68a3      	ldr	r3, [r4, #8]
 80011da:	222a      	movs	r2, #42	; 0x2a
 80011dc:	4393      	bics	r3, r2
 80011de:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	432b      	orrs	r3, r5
 80011e4:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	b011      	add	sp, #68	; 0x44
 80011e8:	bcc0      	pop	{r6, r7}
 80011ea:	46b9      	mov	r9, r7
 80011ec:	46b0      	mov	r8, r6
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	40004400 	.word	0x40004400
 80011fc:	ffffb7ff 	.word	0xffffb7ff

08001200 <DayArhivStore>:
#include "arhiv.h"
#include "string.h"

ARCHIVE_TYPEDEF arh;

void DayArhivStore(void){
 8001200:	b510      	push	{r4, lr}
  uint32_t tmp;

  //ArhivStoreNote(ARCHIVE_CURRENT_VALUE,*(uint32_t*)&dgs.RegState.CurrentValue);

  //memcpy(&tmp,&arh.ValueMax,4);
  tmp = arh.ValueMax << 16;
 8001202:	4c0b      	ldr	r4, [pc, #44]	; (8001230 <DayArhivStore+0x30>)
 8001204:	88a3      	ldrh	r3, [r4, #4]
 8001206:	041b      	lsls	r3, r3, #16

  tmp |= arh.ValueMin;
 8001208:	88e1      	ldrh	r1, [r4, #6]
 800120a:	4319      	orrs	r1, r3

  ArhivStoreNote(ARCHIVE_MAX_MIN_VALUE,tmp);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fadb 	bl	80017c8 <ArhivStoreNote>

  arh.ValueMax = dev.RegInput.Value;
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <DayArhivStore+0x34>)
 8001214:	22e2      	movs	r2, #226	; 0xe2
 8001216:	5a9a      	ldrh	r2, [r3, r2]
 8001218:	80a2      	strh	r2, [r4, #4]
  arh.ValueMin = dev.RegInput.Value;
 800121a:	80e2      	strh	r2, [r4, #6]
/*
  tmp = dev.RegInput.TempSensor/10 + (arh.Temper_Max << 24) + (arh.Temper_Min << 16);

  ArhivStoreNote(ARCHIVE_TEMPERATURA, tmp);
*/
  arh.Temper_Max = dev.RegInput.TempSensor/10;
 800121c:	22e8      	movs	r2, #232	; 0xe8
 800121e:	5e98      	ldrsh	r0, [r3, r2]
 8001220:	210a      	movs	r1, #10
 8001222:	f7ff f80d 	bl	8000240 <__divsi3>
 8001226:	b240      	sxtb	r0, r0
 8001228:	72a0      	strb	r0, [r4, #10]
  arh.Temper_Min = dev.RegInput.TempSensor/10;
 800122a:	72e0      	strb	r0, [r4, #11]

}
 800122c:	bd10      	pop	{r4, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	200001c4 	.word	0x200001c4
 8001234:	2000050c 	.word	0x2000050c

08001238 <debug_init>:
#define TX_BUF_SIZE 256

uint8_t tx_buffer[TX_BUF_SIZE];
ring_buffer dbg_ring_buff_tx;

void debug_init(void){
 8001238:	b530      	push	{r4, r5, lr}
 800123a:	b087      	sub	sp, #28

  DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <debug_init+0x4c>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	3101      	adds	r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STANDBY;
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	3102      	adds	r1, #2
 8001252:	430a      	orrs	r2, r1
 8001254:	605a      	str	r2, [r3, #4]
}

static inline ring_buffer ring_buffer_init(uint8_t *buffer, uint16_t size)
{
  ring_buffer ring;
  ring.write_offset = 0;
 8001256:	466a      	mov	r2, sp
 8001258:	2300      	movs	r3, #0
 800125a:	8013      	strh	r3, [r2, #0]
  ring.read_offset = 0;
 800125c:	8053      	strh	r3, [r2, #2]
  ring.size = size;
 800125e:	3301      	adds	r3, #1
 8001260:	33ff      	adds	r3, #255	; 0xff
 8001262:	8093      	strh	r3, [r2, #4]
  ring.buffer = buffer;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <debug_init+0x50>)
 8001266:	6093      	str	r3, [r2, #8]
  return ring;
 8001268:	ab03      	add	r3, sp, #12
 800126a:	0019      	movs	r1, r3
 800126c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800126e:	c131      	stmia	r1!, {r0, r4, r5}

  dbg_ring_buff_tx = ring_buffer_init(tx_buffer, TX_BUF_SIZE);
 8001270:	4a06      	ldr	r2, [pc, #24]	; (800128c <debug_init+0x54>)
 8001272:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001274:	c213      	stmia	r2!, {r0, r1, r4}
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <debug_init+0x58>)
 8001278:	6813      	ldr	r3, [r2, #0]
 800127a:	2120      	movs	r1, #32
 800127c:	430b      	orrs	r3, r1
 800127e:	6013      	str	r3, [r2, #0]

  LL_LPUART_EnableIT_RXNE(DBG_UART);

}
 8001280:	b007      	add	sp, #28
 8001282:	bd30      	pop	{r4, r5, pc}
 8001284:	40015800 	.word	0x40015800
 8001288:	200001d0 	.word	0x200001d0
 800128c:	200002d4 	.word	0x200002d4
 8001290:	40004400 	.word	0x40004400

08001294 <d_printf>:

void d_printf(const char *format, ...){
 8001294:	b40f      	push	{r0, r1, r2, r3}
 8001296:	b530      	push	{r4, r5, lr}
 8001298:	b0af      	sub	sp, #188	; 0xbc
 800129a:	ab32      	add	r3, sp, #200	; 0xc8
 800129c:	cb04      	ldmia	r3!, {r2}

  //return;

  va_list args;

  va_start(args, format);
 800129e:	9300      	str	r3, [sp, #0]
  vsnprintf((char*)aString,180,format,args);
 80012a0:	21b4      	movs	r1, #180	; 0xb4
 80012a2:	a801      	add	r0, sp, #4
 80012a4:	f002 f98a 	bl	80035bc <vsniprintf>
  va_end(args);

  len = strlen((char*)aString);
 80012a8:	a801      	add	r0, sp, #4
 80012aa:	f7fe ff2d 	bl	8000108 <strlen>
 80012ae:	b2c0      	uxtb	r0, r0

  for(uint16_t i=0;i<len;i++)
 80012b0:	2200      	movs	r2, #0
 80012b2:	e005      	b.n	80012c0 <d_printf+0x2c>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80012b4:	3301      	adds	r3, #1
 80012b6:	b29b      	uxth	r3, r3
}

static inline void ring_buffer_put(ring_buffer *ring, uint8_t data)
{
  ring->buffer[ring->write_offset] = data;
  ring->write_offset = ring_buffer_get_next_write(ring);
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <d_printf+0x64>)
 80012ba:	800b      	strh	r3, [r1, #0]
 80012bc:	3201      	adds	r2, #1
 80012be:	b292      	uxth	r2, r2
 80012c0:	b283      	uxth	r3, r0
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d90d      	bls.n	80012e2 <d_printf+0x4e>
    ring_buffer_put(&dbg_ring_buff_tx,aString[i]);
 80012c6:	ab01      	add	r3, sp, #4
 80012c8:	5c9c      	ldrb	r4, [r3, r2]
  ring->buffer[ring->write_offset] = data;
 80012ca:	490b      	ldr	r1, [pc, #44]	; (80012f8 <d_printf+0x64>)
 80012cc:	880b      	ldrh	r3, [r1, #0]
 80012ce:	688d      	ldr	r5, [r1, #8]
 80012d0:	54ec      	strb	r4, [r5, r3]
  return get_next(ring->write_offset, ring->size);
 80012d2:	880b      	ldrh	r3, [r1, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80012d8:	3901      	subs	r1, #1
 80012da:	428b      	cmp	r3, r1
 80012dc:	d1ea      	bne.n	80012b4 <d_printf+0x20>
 80012de:	2300      	movs	r3, #0
 80012e0:	e7ea      	b.n	80012b8 <d_printf+0x24>
  SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <d_printf+0x68>)
 80012e4:	6813      	ldr	r3, [r2, #0]
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	430b      	orrs	r3, r1
 80012ea:	6013      	str	r3, [r2, #0]

  LL_LPUART_EnableIT_TXE(DBG_UART);


}
 80012ec:	b02f      	add	sp, #188	; 0xbc
 80012ee:	bc30      	pop	{r4, r5}
 80012f0:	bc08      	pop	{r3}
 80012f2:	b004      	add	sp, #16
 80012f4:	4718      	bx	r3
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	200002d4 	.word	0x200002d4
 80012fc:	40004400 	.word	0x40004400

08001300 <Debug_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <Debug_TXEmpty_Callback+0x40>)
 8001302:	885a      	ldrh	r2, [r3, #2]
 8001304:	b292      	uxth	r2, r2
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
	}
}

void Debug_TXEmpty_Callback(void){

  if(ring_buffer_is_empty(&dbg_ring_buff_tx))
 800130a:	429a      	cmp	r2, r3
 800130c:	d010      	beq.n	8001330 <Debug_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <Debug_TXEmpty_Callback+0x40>)
 8001310:	8853      	ldrh	r3, [r2, #2]
 8001312:	6891      	ldr	r1, [r2, #8]
 8001314:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 8001316:	8853      	ldrh	r3, [r2, #2]
 8001318:	b29b      	uxth	r3, r3
 800131a:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800131c:	3a01      	subs	r2, #1
 800131e:	4293      	cmp	r3, r2
 8001320:	d00c      	beq.n	800133c <Debug_TXEmpty_Callback+0x3c>
 8001322:	3301      	adds	r3, #1
 8001324:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <Debug_TXEmpty_Callback+0x40>)
 8001328:	8053      	strh	r3, [r2, #2]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <Debug_TXEmpty_Callback+0x44>)
 800132c:	6299      	str	r1, [r3, #40]	; 0x28

  }else{
    LL_LPUART_TransmitData8(DBG_UART,ring_buffer_get(&dbg_ring_buff_tx));
  }

}
 800132e:	4770      	bx	lr
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <Debug_TXEmpty_Callback+0x44>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	438b      	bics	r3, r1
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	e7f8      	b.n	800132e <Debug_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800133c:	2300      	movs	r3, #0
 800133e:	e7f2      	b.n	8001326 <Debug_TXEmpty_Callback+0x26>
 8001340:	200002d4 	.word	0x200002d4
 8001344:	40004400 	.word	0x40004400

08001348 <Debug_RXNEmpty_Callback>:
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <Debug_RXNEmpty_Callback+0xc>)
 800134a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

uint8_t dbg_cmd;

void Debug_RXNEmpty_Callback(void){

	dbg_cmd = LL_LPUART_ReceiveData8(DBG_UART);
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <Debug_RXNEmpty_Callback+0x10>)
 800134e:	701a      	strb	r2, [r3, #0]

//	debugMenu(dbg_cmd);
}
 8001350:	4770      	bx	lr
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40004400 	.word	0x40004400
 8001358:	200002d0 	.word	0x200002d0

0800135c <Debug_UART_IRQHandler>:
void Debug_UART_IRQHandler(void){
 800135c:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	d505      	bpl.n	8001372 <Debug_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	d501      	bpl.n	8001372 <Debug_UART_IRQHandler+0x16>
		Debug_TXEmpty_Callback();
 800136e:	f7ff ffc7 	bl	8001300 <Debug_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	069b      	lsls	r3, r3, #26
 8001378:	d505      	bpl.n	8001386 <Debug_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	069b      	lsls	r3, r3, #26
 8001380:	d501      	bpl.n	8001386 <Debug_UART_IRQHandler+0x2a>
		Debug_RXNEmpty_Callback();
 8001382:	f7ff ffe1 	bl	8001348 <Debug_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	071b      	lsls	r3, r3, #28
 800138c:	d502      	bpl.n	8001394 <Debug_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 800138e:	4b02      	ldr	r3, [pc, #8]	; (8001398 <Debug_UART_IRQHandler+0x3c>)
 8001390:	2208      	movs	r2, #8
 8001392:	621a      	str	r2, [r3, #32]
}
 8001394:	bd10      	pop	{r4, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40004400 	.word	0x40004400

0800139c <EEPROM_WaitEOP>:
// Ожидание завершения операции (стирание или записи) EEPROM с таймаутом
//
void EEPROM_WaitEOP(){

	// Таймаут 10 мсек
	uint32_t Timeout = 10;
 800139c:	220a      	movs	r2, #10

	while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <EEPROM_WaitEOP+0x24>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	079b      	lsls	r3, r3, #30
 80013a4:	d408      	bmi.n	80013b8 <EEPROM_WaitEOP+0x1c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <EEPROM_WaitEOP+0x28>)
 80013a8:	681b      	ldr	r3, [r3, #0]

		if (LL_SYSTICK_IsActiveCounterFlag())
 80013aa:	03db      	lsls	r3, r3, #15
 80013ac:	d5f7      	bpl.n	800139e <EEPROM_WaitEOP+0x2>
		{
			if(Timeout-- == 0)
 80013ae:	1e53      	subs	r3, r2, #1
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d004      	beq.n	80013be <EEPROM_WaitEOP+0x22>
 80013b4:	001a      	movs	r2, r3
 80013b6:	e7f2      	b.n	800139e <EEPROM_WaitEOP+0x2>
			}
		}

	}

	FLASH->SR = FLASH_SR_EOP;
 80013b8:	4b01      	ldr	r3, [pc, #4]	; (80013c0 <EEPROM_WaitEOP+0x24>)
 80013ba:	2202      	movs	r2, #2
 80013bc:	619a      	str	r2, [r3, #24]

}
 80013be:	4770      	bx	lr
 80013c0:	40022000 	.word	0x40022000
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <writeWordToEEPROM>:

void writeWordToEEPROM(uint16_t address, uint32_t data) {
 80013c8:	b510      	push	{r4, lr}

	if(*(__IO uint32_t *) (EEPROM_BASE_ADR + address) != data){
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <writeWordToEEPROM+0x18>)
 80013cc:	469c      	mov	ip, r3
 80013ce:	4460      	add	r0, ip
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d100      	bne.n	80013d8 <writeWordToEEPROM+0x10>

		EEPROM_WaitEOP();

	}

}
 80013d6:	bd10      	pop	{r4, pc}
		*(__IO uint32_t *) (EEPROM_BASE_ADR + address) = data;
 80013d8:	6001      	str	r1, [r0, #0]
		EEPROM_WaitEOP();
 80013da:	f7ff ffdf 	bl	800139c <EEPROM_WaitEOP>
}
 80013de:	e7fa      	b.n	80013d6 <writeWordToEEPROM+0xe>
 80013e0:	08080000 	.word	0x08080000

080013e4 <write_mem_to_eeprom>:

void write_mem_to_eeprom(uint16_t address, uint32_t *ptr, uint8_t len){
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	0007      	movs	r7, r0
 80013e8:	000e      	movs	r6, r1
 80013ea:	0015      	movs	r5, r2

	int i;

	for(i=0;i<len;i++){
 80013ec:	2400      	movs	r4, #0
 80013ee:	42a5      	cmp	r5, r4
 80013f0:	dd07      	ble.n	8001402 <write_mem_to_eeprom+0x1e>

		writeWordToEEPROM(address + i*4, ptr[i]);
 80013f2:	00a3      	lsls	r3, r4, #2
 80013f4:	58f1      	ldr	r1, [r6, r3]
 80013f6:	18f8      	adds	r0, r7, r3
 80013f8:	b280      	uxth	r0, r0
 80013fa:	f7ff ffe5 	bl	80013c8 <writeWordToEEPROM>
	for(i=0;i<len;i++){
 80013fe:	3401      	adds	r4, #1
 8001400:	e7f5      	b.n	80013ee <write_mem_to_eeprom+0xa>

	}

}
 8001402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001404 <eeprom_config_write_bank>:

void eeprom_config_write_bank(uint8_t bank){
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	0004      	movs	r4, r0

	dev.Config.crc = CalcCRC((uint32_t*)&dev.Config,(sizeof(Config_td)/4)-1);
 8001408:	4e0e      	ldr	r6, [pc, #56]	; (8001444 <eeprom_config_write_bank+0x40>)
 800140a:	2135      	movs	r1, #53	; 0x35
 800140c:	0030      	movs	r0, r6
 800140e:	f7ff f9ff 	bl	8000810 <CalcCRC>
 8001412:	23d4      	movs	r3, #212	; 0xd4
 8001414:	50f0      	str	r0, [r6, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001416:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800141a:	b672      	cpsid	i

	__enter_critical();

	FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 800141c:	4d0a      	ldr	r5, [pc, #40]	; (8001448 <eeprom_config_write_bank+0x44>)
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <eeprom_config_write_bank+0x48>)
 8001420:	60ea      	str	r2, [r5, #12]
	FLASH->PEKEYR = (uint32_t) 0x02030405U;
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <eeprom_config_write_bank+0x4c>)
 8001424:	60ea      	str	r2, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001426:	f383 8810 	msr	PRIMASK, r3

	__exit_critical();

	write_mem_to_eeprom(EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * bank,
 800142a:	20d8      	movs	r0, #216	; 0xd8
 800142c:	4360      	muls	r0, r4
 800142e:	b280      	uxth	r0, r0
 8001430:	2236      	movs	r2, #54	; 0x36
 8001432:	0031      	movs	r1, r6
 8001434:	f7ff ffd6 	bl	80013e4 <write_mem_to_eeprom>
			(uint32_t*)&dev.Config,sizeof(Config_td)/4);


	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001438:	686b      	ldr	r3, [r5, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	4313      	orrs	r3, r2
 800143e:	606b      	str	r3, [r5, #4]

}
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	2000050c 	.word	0x2000050c
 8001448:	40022000 	.word	0x40022000
 800144c:	89abcdef 	.word	0x89abcdef
 8001450:	02030405 	.word	0x02030405

08001454 <eeprom_config_write>:

void eeprom_config_write(void) {
 8001454:	b510      	push	{r4, lr}

	dev.Config.Counter++;
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <eeprom_config_write+0x2c>)
 8001458:	6813      	ldr	r3, [r2, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	6013      	str	r3, [r2, #0]

	d_printf("\n\r");
 800145e:	4809      	ldr	r0, [pc, #36]	; (8001484 <eeprom_config_write+0x30>)
 8001460:	f7ff ff18 	bl	8001294 <d_printf>
	eeprom_config_write_bank(nConfigBank);
 8001464:	4c08      	ldr	r4, [pc, #32]	; (8001488 <eeprom_config_write+0x34>)
 8001466:	7820      	ldrb	r0, [r4, #0]
 8001468:	f7ff ffcc 	bl	8001404 <eeprom_config_write_bank>
	d_printf("Config write");
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <eeprom_config_write+0x38>)
 800146e:	f7ff ff11 	bl	8001294 <d_printf>

	f_AdcDataBad = TRUE;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <eeprom_config_write+0x3c>)
 8001474:	2201      	movs	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]

	nConfigBank ^= 1;
 8001478:	7823      	ldrb	r3, [r4, #0]
 800147a:	4053      	eors	r3, r2
 800147c:	7023      	strb	r3, [r4, #0]


}
 800147e:	bd10      	pop	{r4, pc}
 8001480:	2000050c 	.word	0x2000050c
 8001484:	08003e18 	.word	0x08003e18
 8001488:	200000b0 	.word	0x200000b0
 800148c:	08003e40 	.word	0x08003e40
 8001490:	2000062a 	.word	0x2000062a

08001494 <factory_config_write>:
}

//==============================================================================
// Запись заводских настроек во FLASH
//
void factory_config_write(void){
 8001494:	b510      	push	{r4, lr}

	eeprom_config_write_bank(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff ffb4 	bl	8001404 <eeprom_config_write_bank>

	d_printf("\n\rFactory config write");
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <factory_config_write+0x10>)
 800149e:	f7ff fef9 	bl	8001294 <d_printf>

}
 80014a2:	bd10      	pop	{r4, pc}
 80014a4:	08003e50 	.word	0x08003e50

080014a8 <factory_config_read>:

//==============================================================================
// Чтение заводских настроек из FLASH
//
BOOL factory_config_read(void){
 80014a8:	b510      	push	{r4, lr}
 80014aa:	b0b6      	sub	sp, #216	; 0xd8

	uint32_t tmp;

	// Чтение заводских настроек во временную структуру

	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 80014ac:	2300      	movs	r3, #0
 80014ae:	e007      	b.n	80014c0 <factory_config_read+0x18>

		((uint32_t*) &ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * 2 + (i * 4)));
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4918      	ldr	r1, [pc, #96]	; (8001514 <factory_config_read+0x6c>)
 80014b4:	1859      	adds	r1, r3, r1
 80014b6:	6809      	ldr	r1, [r1, #0]
 80014b8:	4668      	mov	r0, sp
 80014ba:	50c1      	str	r1, [r0, r3]
	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 80014bc:	3201      	adds	r2, #1
 80014be:	b253      	sxtb	r3, r2
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	2a35      	cmp	r2, #53	; 0x35
 80014c4:	d9f4      	bls.n	80014b0 <factory_config_read+0x8>
	}

	// Проверка CRC

	crc = CalcCRC((uint32_t*)&ConfigTmp, (EEPROM_CONFIG_LEN/4)-1);
 80014c6:	2135      	movs	r1, #53	; 0x35
 80014c8:	4668      	mov	r0, sp
 80014ca:	f7ff f9a1 	bl	8000810 <CalcCRC>

	if( ConfigTmp.crc != crc){
 80014ce:	23d4      	movs	r3, #212	; 0xd4
 80014d0:	466a      	mov	r2, sp
 80014d2:	58d3      	ldr	r3, [r2, r3]
 80014d4:	4283      	cmp	r3, r0
 80014d6:	d006      	beq.n	80014e6 <factory_config_read+0x3e>

		d_printf("\n\rNo Data Factory",0);
 80014d8:	2100      	movs	r1, #0
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <factory_config_read+0x70>)
 80014dc:	f7ff feda 	bl	8001294 <d_printf>

		return FALSE;
 80014e0:	2000      	movs	r0, #0

	eeprom_config_write();

	return TRUE;

}
 80014e2:	b036      	add	sp, #216	; 0xd8
 80014e4:	bd10      	pop	{r4, pc}
	d_printf("\n\rLoad Factory");
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <factory_config_read+0x74>)
 80014e8:	f7ff fed4 	bl	8001294 <d_printf>
	tmp = dev.Config.Counter;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <factory_config_read+0x78>)
 80014ee:	681c      	ldr	r4, [r3, #0]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	e006      	b.n	8001502 <factory_config_read+0x5a>
		((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp)[i];
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4669      	mov	r1, sp
 80014f8:	58c8      	ldr	r0, [r1, r3]
 80014fa:	4909      	ldr	r1, [pc, #36]	; (8001520 <factory_config_read+0x78>)
 80014fc:	50c8      	str	r0, [r1, r3]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80014fe:	3201      	adds	r2, #1
 8001500:	b253      	sxtb	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	2a35      	cmp	r2, #53	; 0x35
 8001506:	d9f5      	bls.n	80014f4 <factory_config_read+0x4c>
	dev.Config.Counter = tmp;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <factory_config_read+0x78>)
 800150a:	601c      	str	r4, [r3, #0]
	eeprom_config_write();
 800150c:	f7ff ffa2 	bl	8001454 <eeprom_config_write>
	return TRUE;
 8001510:	2001      	movs	r0, #1
 8001512:	e7e6      	b.n	80014e2 <factory_config_read+0x3a>
 8001514:	080801b0 	.word	0x080801b0
 8001518:	08003e68 	.word	0x08003e68
 800151c:	08003e7c 	.word	0x08003e7c
 8001520:	2000050c 	.word	0x2000050c

08001524 <read_config_from_eeprom>:
void read_config_from_eeprom(void){
 8001524:	b530      	push	{r4, r5, lr}
 8001526:	b0ef      	sub	sp, #444	; 0x1bc
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 8001528:	2300      	movs	r3, #0
 800152a:	b2da      	uxtb	r2, r3
 800152c:	2a6b      	cmp	r2, #107	; 0x6b
 800152e:	d808      	bhi.n	8001542 <read_config_from_eeprom+0x1e>
		((uint32_t*) ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + (i * 4)));
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4943      	ldr	r1, [pc, #268]	; (8001640 <read_config_from_eeprom+0x11c>)
 8001534:	1859      	adds	r1, r3, r1
 8001536:	6808      	ldr	r0, [r1, #0]
 8001538:	a902      	add	r1, sp, #8
 800153a:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 800153c:	3201      	adds	r2, #1
 800153e:	b253      	sxtb	r3, r2
 8001540:	e7f3      	b.n	800152a <read_config_from_eeprom+0x6>
	for(int8_t i = 0; i < 2; i++){
 8001542:	2400      	movs	r4, #0
 8001544:	e004      	b.n	8001550 <read_config_from_eeprom+0x2c>
			fValid[i] = TRUE;
 8001546:	ab01      	add	r3, sp, #4
 8001548:	2201      	movs	r2, #1
 800154a:	551a      	strb	r2, [r3, r4]
	for(int8_t i = 0; i < 2; i++){
 800154c:	3401      	adds	r4, #1
 800154e:	b264      	sxtb	r4, r4
 8001550:	2c01      	cmp	r4, #1
 8001552:	dc12      	bgt.n	800157a <read_config_from_eeprom+0x56>
		crc = CalcCRC((uint32_t*)&ConfigTmp[i], (EEPROM_CONFIG_LEN/4)-1);
 8001554:	25d8      	movs	r5, #216	; 0xd8
 8001556:	4365      	muls	r5, r4
 8001558:	ab02      	add	r3, sp, #8
 800155a:	1958      	adds	r0, r3, r5
 800155c:	2135      	movs	r1, #53	; 0x35
 800155e:	f7ff f957 	bl	8000810 <CalcCRC>
		if( ConfigTmp[i].crc == crc){
 8001562:	ab02      	add	r3, sp, #8
 8001564:	469c      	mov	ip, r3
 8001566:	4465      	add	r5, ip
 8001568:	002b      	movs	r3, r5
 800156a:	33d4      	adds	r3, #212	; 0xd4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4283      	cmp	r3, r0
 8001570:	d0e9      	beq.n	8001546 <read_config_from_eeprom+0x22>
			fValid[i] = FALSE;
 8001572:	ab01      	add	r3, sp, #4
 8001574:	2200      	movs	r2, #0
 8001576:	551a      	strb	r2, [r3, r4]
 8001578:	e7e8      	b.n	800154c <read_config_from_eeprom+0x28>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 800157a:	ab01      	add	r3, sp, #4
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d010      	beq.n	80015a4 <read_config_from_eeprom+0x80>
	}else if((fValid[0] == FALSE) && (fValid[1] == TRUE)){
 8001582:	2b00      	cmp	r3, #0
 8001584:	d103      	bne.n	800158e <read_config_from_eeprom+0x6a>
 8001586:	aa01      	add	r2, sp, #4
 8001588:	7852      	ldrb	r2, [r2, #1]
 800158a:	2a01      	cmp	r2, #1
 800158c:	d01e      	beq.n	80015cc <read_config_from_eeprom+0xa8>
		nConfigBank = 0;
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <read_config_from_eeprom+0x120>)
 8001590:	2100      	movs	r1, #0
 8001592:	7011      	strb	r1, [r2, #0]
	if((fValid[0] == FALSE) && (fValid[1] == FALSE)){
 8001594:	2b00      	cmp	r3, #0
 8001596:	d150      	bne.n	800163a <read_config_from_eeprom+0x116>
 8001598:	ab01      	add	r3, sp, #4
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d019      	beq.n	80015d4 <read_config_from_eeprom+0xb0>
 80015a0:	2300      	movs	r3, #0
 80015a2:	e039      	b.n	8001618 <read_config_from_eeprom+0xf4>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 80015a4:	aa01      	add	r2, sp, #4
 80015a6:	7852      	ldrb	r2, [r2, #1]
 80015a8:	2a01      	cmp	r2, #1
 80015aa:	d1ea      	bne.n	8001582 <read_config_from_eeprom+0x5e>
		if(ConfigTmp[0].Counter < ConfigTmp[1].Counter){
 80015ac:	32d7      	adds	r2, #215	; 0xd7
 80015ae:	4669      	mov	r1, sp
 80015b0:	2008      	movs	r0, #8
 80015b2:	1809      	adds	r1, r1, r0
 80015b4:	588a      	ldr	r2, [r1, r2]
 80015b6:	9902      	ldr	r1, [sp, #8]
 80015b8:	4291      	cmp	r1, r2
 80015ba:	d203      	bcs.n	80015c4 <read_config_from_eeprom+0xa0>
			nConfigBank = 1;
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <read_config_from_eeprom+0x120>)
 80015be:	2101      	movs	r1, #1
 80015c0:	7011      	strb	r1, [r2, #0]
 80015c2:	e7e7      	b.n	8001594 <read_config_from_eeprom+0x70>
			nConfigBank = 0;
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <read_config_from_eeprom+0x120>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	7011      	strb	r1, [r2, #0]
 80015ca:	e7e3      	b.n	8001594 <read_config_from_eeprom+0x70>
		nConfigBank = 1;
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <read_config_from_eeprom+0x120>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	7011      	strb	r1, [r2, #0]
 80015d2:	e7df      	b.n	8001594 <read_config_from_eeprom+0x70>
		if(!factory_config_read()){
 80015d4:	f7ff ff68 	bl	80014a8 <factory_config_read>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d127      	bne.n	800162c <read_config_from_eeprom+0x108>
			dev_set_config_default();
 80015dc:	f000 fd5c 	bl	8002098 <dev_set_config_default>
			d_printf("\n\r%SetDef",0);
 80015e0:	2100      	movs	r1, #0
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <read_config_from_eeprom+0x124>)
 80015e4:	f7ff fe56 	bl	8001294 <d_printf>
			nConfigBank = 0;
 80015e8:	4c16      	ldr	r4, [pc, #88]	; (8001644 <read_config_from_eeprom+0x120>)
 80015ea:	2500      	movs	r5, #0
 80015ec:	7025      	strb	r5, [r4, #0]
			eeprom_config_write();
 80015ee:	f7ff ff31 	bl	8001454 <eeprom_config_write>
			nConfigBank = 0;
 80015f2:	7025      	strb	r5, [r4, #0]
			ArhivStoreNote(ARCHIVE_SET_CONFIG_DEFAULT, 0);
 80015f4:	2100      	movs	r1, #0
 80015f6:	2009      	movs	r0, #9
 80015f8:	f000 f8e6 	bl	80017c8 <ArhivStoreNote>
 80015fc:	e016      	b.n	800162c <read_config_from_eeprom+0x108>
			((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp[nConfigBank])[i];
 80015fe:	4911      	ldr	r1, [pc, #68]	; (8001644 <read_config_from_eeprom+0x120>)
 8001600:	7808      	ldrb	r0, [r1, #0]
 8001602:	21d8      	movs	r1, #216	; 0xd8
 8001604:	4341      	muls	r1, r0
 8001606:	a802      	add	r0, sp, #8
 8001608:	4684      	mov	ip, r0
 800160a:	4461      	add	r1, ip
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	58c8      	ldr	r0, [r1, r3]
 8001610:	490e      	ldr	r1, [pc, #56]	; (800164c <read_config_from_eeprom+0x128>)
 8001612:	50c8      	str	r0, [r1, r3]
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8001614:	3201      	adds	r2, #1
 8001616:	b253      	sxtb	r3, r2
 8001618:	b2da      	uxtb	r2, r3
 800161a:	2a35      	cmp	r2, #53	; 0x35
 800161c:	d9ef      	bls.n	80015fe <read_config_from_eeprom+0xda>
		d_printf("\n\rConfigBank-%d, CNT-%d", nConfigBank, dev.Config.Counter);
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <read_config_from_eeprom+0x128>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <read_config_from_eeprom+0x120>)
 8001624:	7819      	ldrb	r1, [r3, #0]
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <read_config_from_eeprom+0x12c>)
 8001628:	f7ff fe34 	bl	8001294 <d_printf>
	nConfigBank ^= 1;
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <read_config_from_eeprom+0x120>)
 800162e:	7813      	ldrb	r3, [r2, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	404b      	eors	r3, r1
 8001634:	7013      	strb	r3, [r2, #0]
}
 8001636:	b06f      	add	sp, #444	; 0x1bc
 8001638:	bd30      	pop	{r4, r5, pc}
 800163a:	2300      	movs	r3, #0
 800163c:	e7ec      	b.n	8001618 <read_config_from_eeprom+0xf4>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	08080000 	.word	0x08080000
 8001644:	200000b0 	.word	0x200000b0
 8001648:	08003e8c 	.word	0x08003e8c
 800164c:	2000050c 	.word	0x2000050c
 8001650:	08003e98 	.word	0x08003e98

08001654 <FLASH_UNLOCK>:
//=============================================================================
// Снятие блокировки FLASH для стирания и записи
//
void FLASH_UNLOCK(void){

  FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <FLASH_UNLOCK+0x44>)
 8001656:	4a11      	ldr	r2, [pc, #68]	; (800169c <FLASH_UNLOCK+0x48>)
 8001658:	60da      	str	r2, [r3, #12]
  FLASH->PEKEYR = (uint32_t) 0x02030405U;
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <FLASH_UNLOCK+0x4c>)
 800165c:	60da      	str	r2, [r3, #12]

  if(READ_BIT(FLASH->PECR, FLASH_PECR_PELOCK)){
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	07db      	lsls	r3, r3, #31
 8001662:	d509      	bpl.n	8001678 <FLASH_UNLOCK+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001664:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <FLASH_UNLOCK+0x44>)
 800166c:	490b      	ldr	r1, [pc, #44]	; (800169c <FLASH_UNLOCK+0x48>)
 800166e:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001670:	490b      	ldr	r1, [pc, #44]	; (80016a0 <FLASH_UNLOCK+0x4c>)
 8001672:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001674:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

  if (READ_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK)){
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <FLASH_UNLOCK+0x44>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	079b      	lsls	r3, r3, #30
 800167e:	d509      	bpl.n	8001694 <FLASH_UNLOCK+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001680:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <FLASH_UNLOCK+0x44>)
 8001688:	4906      	ldr	r1, [pc, #24]	; (80016a4 <FLASH_UNLOCK+0x50>)
 800168a:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);
 800168c:	4906      	ldr	r1, [pc, #24]	; (80016a8 <FLASH_UNLOCK+0x54>)
 800168e:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001690:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

}
 8001694:	4770      	bx	lr
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	40022000 	.word	0x40022000
 800169c:	89abcdef 	.word	0x89abcdef
 80016a0:	02030405 	.word	0x02030405
 80016a4:	8c9daebf 	.word	0x8c9daebf
 80016a8:	13141516 	.word	0x13141516

080016ac <FLASH_LOCK>:
//=============================================================================
// Восстановление блокировки FLASH
//
void FLASH_LOCK(void){

  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <FLASH_LOCK+0x14>)
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	2101      	movs	r1, #1
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	3101      	adds	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]

}
 80016be:	4770      	bx	lr
 80016c0:	40022000 	.word	0x40022000

080016c4 <FlashWaitNoBSY>:
void FlashWaitNoBSY(void){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 80016c4:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_BSY) != 0){
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <FlashWaitNoBSY+0x20>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	07db      	lsls	r3, r3, #31
 80016cc:	d508      	bpl.n	80016e0 <FlashWaitNoBSY+0x1c>
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <FlashWaitNoBSY+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 80016d2:	03db      	lsls	r3, r3, #15
 80016d4:	d5f7      	bpl.n	80016c6 <FlashWaitNoBSY+0x2>
    {
      if(Timeout-- == 0)
 80016d6:	1e53      	subs	r3, r2, #1
 80016d8:	2a00      	cmp	r2, #0
 80016da:	d001      	beq.n	80016e0 <FlashWaitNoBSY+0x1c>
 80016dc:	001a      	movs	r2, r3
 80016de:	e7f2      	b.n	80016c6 <FlashWaitNoBSY+0x2>

  }

//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 80016e0:	4770      	bx	lr
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	40022000 	.word	0x40022000
 80016e8:	e000e010 	.word	0xe000e010

080016ec <FlashWaitEOP>:
void FlashWaitEOP(){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 80016ec:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <FlashWaitEOP+0x24>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	079b      	lsls	r3, r3, #30
 80016f4:	d408      	bmi.n	8001708 <FlashWaitEOP+0x1c>
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <FlashWaitEOP+0x28>)
 80016f8:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 80016fa:	03db      	lsls	r3, r3, #15
 80016fc:	d5f7      	bpl.n	80016ee <FlashWaitEOP+0x2>
    {
      if(Timeout-- == 0)
 80016fe:	1e53      	subs	r3, r2, #1
 8001700:	2a00      	cmp	r2, #0
 8001702:	d004      	beq.n	800170e <FlashWaitEOP+0x22>
 8001704:	001a      	movs	r2, r3
 8001706:	e7f2      	b.n	80016ee <FlashWaitEOP+0x2>
      }
    }

  }

  FLASH->SR = FLASH_SR_EOP;
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <FlashWaitEOP+0x24>)
 800170a:	2202      	movs	r2, #2
 800170c:	619a      	str	r2, [r3, #24]
//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 800170e:	4770      	bx	lr
 8001710:	40022000 	.word	0x40022000
 8001714:	e000e010 	.word	0xe000e010

08001718 <FlashPageErase>:

//=============================================================================
// Стирание страницы FLASH
//
void FlashPageErase(uint32_t *ptr){
 8001718:	b570      	push	{r4, r5, r6, lr}

  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800171a:	4c0d      	ldr	r4, [pc, #52]	; (8001750 <FlashPageErase+0x38>)
 800171c:	6862      	ldr	r2, [r4, #4]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4313      	orrs	r3, r2
 8001724:	6063      	str	r3, [r4, #4]

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001726:	6863      	ldr	r3, [r4, #4]
 8001728:	2508      	movs	r5, #8
 800172a:	432b      	orrs	r3, r5
 800172c:	6063      	str	r3, [r4, #4]

  *(__IO uint32_t *)((uint32_t)ptr & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800172e:	237f      	movs	r3, #127	; 0x7f
 8001730:	4398      	bics	r0, r3
 8001732:	2300      	movs	r3, #0
 8001734:	6003      	str	r3, [r0, #0]

  FlashWaitNoBSY();
 8001736:	f7ff ffc5 	bl	80016c4 <FlashWaitNoBSY>
  FlashWaitEOP();
 800173a:	f7ff ffd7 	bl	80016ec <FlashWaitEOP>


  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800173e:	6863      	ldr	r3, [r4, #4]
 8001740:	43ab      	bics	r3, r5
 8001742:	6063      	str	r3, [r4, #4]

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001744:	6863      	ldr	r3, [r4, #4]
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <FlashPageErase+0x3c>)
 8001748:	4013      	ands	r3, r2
 800174a:	6063      	str	r3, [r4, #4]

}
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40022000 	.word	0x40022000
 8001754:	fffffdff 	.word	0xfffffdff

08001758 <FlashProgram>:
// stat - вид записи
// data - данные записи
// Возвращает TRUE, если FLASH не стёрта и записанные
// данные помечены как недействительные
//
BOOL FlashProgram(uint32_t *ptr, uint8_t stat, uint32_t data){
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	0004      	movs	r4, r0
 800175c:	0015      	movs	r5, r2

  BOOL no_erase = FALSE;

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <FlashProgram+0x68>)
 8001760:	6853      	ldr	r3, [r2, #4]
 8001762:	2008      	movs	r0, #8
 8001764:	4303      	orrs	r3, r0
 8001766:	6053      	str	r3, [r2, #4]

  if(*(__IO uint32_t *)((uint32_t)ptr) == 0){
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <FlashProgram+0x4a>
    *(__IO uint32_t *)((uint32_t)ptr) = ((stat & 0x7F) << 24) | (0xFFFFFF & arh.MHour);
 800176e:	0609      	lsls	r1, r1, #24
 8001770:	23fe      	movs	r3, #254	; 0xfe
 8001772:	05db      	lsls	r3, r3, #23
 8001774:	4019      	ands	r1, r3
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <FlashProgram+0x6c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	4319      	orrs	r1, r3
 8001780:	6021      	str	r1, [r4, #0]
  BOOL no_erase = FALSE;
 8001782:	2600      	movs	r6, #0
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001784:	f7ff ffb2 	bl	80016ec <FlashWaitEOP>

  if(*(__IO uint32_t *)((uint32_t)ptr+4) == 0){
 8001788:	6863      	ldr	r3, [r4, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d110      	bne.n	80017b0 <FlashProgram+0x58>
    *(__IO uint32_t *)((uint32_t)ptr+4) = data;
 800178e:	6065      	str	r5, [r4, #4]
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001790:	f7ff ffac 	bl	80016ec <FlashWaitEOP>

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <FlashProgram+0x68>)
 8001796:	6853      	ldr	r3, [r2, #4]
 8001798:	2108      	movs	r1, #8
 800179a:	438b      	bics	r3, r1
 800179c:	6053      	str	r3, [r2, #4]

  return no_erase;
}
 800179e:	0030      	movs	r0, r6
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 80017a2:	6822      	ldr	r2, [r4, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4313      	orrs	r3, r2
 80017aa:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 80017ac:	2601      	movs	r6, #1
 80017ae:	e7e9      	b.n	8001784 <FlashProgram+0x2c>
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	4313      	orrs	r3, r2
 80017b8:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 80017ba:	2601      	movs	r6, #1
 80017bc:	e7e8      	b.n	8001790 <FlashProgram+0x38>
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40022000 	.word	0x40022000
 80017c4:	200001c4 	.word	0x200001c4

080017c8 <ArhivStoreNote>:
//=============================================================================
// Сохранение записи во FLASH
// stat - вид записи
// data - данные записи
//
void ArhivStoreNote(uint8_t stat, uint32_t data){
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	0007      	movs	r7, r0
 80017cc:	000e      	movs	r6, r1

  uint32_t *ptr;
  BOOL flg_no_erase;
  uint16_t write_cnt = 0;

  FLASH_UNLOCK();
 80017ce:	f7ff ff41 	bl	8001654 <FLASH_UNLOCK>
  uint16_t write_cnt = 0;
 80017d2:	2500      	movs	r5, #0
 80017d4:	e00d      	b.n	80017f2 <ArhivStoreNote+0x2a>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;

    // Если указатель на начало страницы
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
//      DBG_OUT2_HI;
      FlashPageErase(ptr);
 80017d6:	0020      	movs	r0, r4
 80017d8:	f7ff ff9e 	bl	8001718 <FlashPageErase>
 80017dc:	e012      	b.n	8001804 <ArhivStoreNote+0x3c>
    }

    flg_no_erase = FlashProgram(ptr, stat, data);

    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 80017de:	3301      	adds	r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4a10      	ldr	r2, [pc, #64]	; (8001824 <ArhivStoreNote+0x5c>)
 80017e4:	8113      	strh	r3, [r2, #8]

    write_cnt++;
 80017e6:	3501      	adds	r5, #1
 80017e8:	b2ad      	uxth	r5, r5
    // Продолжать если была попытка записи в нестёртую ячейку и не превышен размер страницы
  }while((flg_no_erase == TRUE) && (write_cnt < (FLASH_PAGE_SIZE / ARHIV_SIZE_ITEM / 4)));
 80017ea:	2801      	cmp	r0, #1
 80017ec:	d116      	bne.n	800181c <ArhivStoreNote+0x54>
 80017ee:	2d0f      	cmp	r5, #15
 80017f0:	d814      	bhi.n	800181c <ArhivStoreNote+0x54>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <ArhivStoreNote+0x5c>)
 80017f4:	891c      	ldrh	r4, [r3, #8]
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <ArhivStoreNote+0x60>)
 80017fa:	469c      	mov	ip, r3
 80017fc:	4464      	add	r4, ip
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
 80017fe:	237f      	movs	r3, #127	; 0x7f
 8001800:	421c      	tst	r4, r3
 8001802:	d0e8      	beq.n	80017d6 <ArhivStoreNote+0xe>
    flg_no_erase = FlashProgram(ptr, stat, data);
 8001804:	0032      	movs	r2, r6
 8001806:	0039      	movs	r1, r7
 8001808:	0020      	movs	r0, r4
 800180a:	f7ff ffa5 	bl	8001758 <FlashProgram>
    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <ArhivStoreNote+0x5c>)
 8001810:	891b      	ldrh	r3, [r3, #8]
 8001812:	4a06      	ldr	r2, [pc, #24]	; (800182c <ArhivStoreNote+0x64>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d9e2      	bls.n	80017de <ArhivStoreNote+0x16>
 8001818:	2300      	movs	r3, #0
 800181a:	e7e2      	b.n	80017e2 <ArhivStoreNote+0x1a>

  FLASH_LOCK();
 800181c:	f7ff ff46 	bl	80016ac <FLASH_LOCK>

//  DBG_OUT2_LO;

  //	eeprom_config_write_sync();

}
 8001820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	200001c4 	.word	0x200001c4
 8001828:	08006000 	.word	0x08006000
 800182c:	000003fe 	.word	0x000003fe

08001830 <modbus_init>:

BOOL f_mbs_packet_rcv = FALSE;

void modbus_init(void){

	mbs_rx_cnt = 0;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <modbus_init+0x24>)
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <modbus_init+0x28>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2104      	movs	r1, #4
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	311c      	adds	r1, #28
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	391f      	subs	r1, #31
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

	LL_LPUART_EnableDirectionRx(MBS_LPUART);
	LL_LPUART_EnableIT_RXNE(MBS_LPUART);
	LL_LPUART_Enable(MBS_LPUART);

}
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	200003e0 	.word	0x200003e0
 8001858:	40004800 	.word	0x40004800

0800185c <Modbus_TO_timer>:

void Modbus_TO_timer(void){

	//memcpy(mbs_pkt_rx, mbs_buff_rx, mbs_rx_cnt);
	mbs_rx_pkt_len = mbs_rx_cnt;
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <Modbus_TO_timer+0x14>)
 800185e:	8819      	ldrh	r1, [r3, #0]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <Modbus_TO_timer+0x18>)
 8001862:	8011      	strh	r1, [r2, #0]

	mbs_rx_cnt = 0;
 8001864:	2200      	movs	r2, #0
 8001866:	801a      	strh	r2, [r3, #0]
	f_mbs_packet_rcv = TRUE;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <Modbus_TO_timer+0x1c>)
 800186a:	3201      	adds	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]

}
 800186e:	4770      	bx	lr
 8001870:	200003e0 	.word	0x200003e0
 8001874:	200003e4 	.word	0x200003e4
 8001878:	200000b1 	.word	0x200000b1

0800187c <Modbus_RXNEmpty_Callback>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <Modbus_RXNEmpty_Callback+0x34>)
 800187e:	6a59      	ldr	r1, [r3, #36]	; 0x24

void Modbus_RXNEmpty_Callback(void){

	uint8_t tmp = LL_USART_ReceiveData8(MBS_LPUART);

	mbs_pkt_rx[mbs_rx_cnt] = tmp;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <Modbus_RXNEmpty_Callback+0x38>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <Modbus_RXNEmpty_Callback+0x3c>)
 8001886:	54d1      	strb	r1, [r2, r3]

	if(mbs_rx_cnt < (MBS_RX_BUF_SIZE-1)){
 8001888:	2bfe      	cmp	r3, #254	; 0xfe
 800188a:	d802      	bhi.n	8001892 <Modbus_RXNEmpty_Callback+0x16>
		mbs_rx_cnt++;
 800188c:	3301      	adds	r3, #1
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <Modbus_RXNEmpty_Callback+0x38>)
 8001890:	8013      	strh	r3, [r2, #0]
	}

	if(mbs_rx_cnt == 1){
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <Modbus_RXNEmpty_Callback+0x38>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <Modbus_RXNEmpty_Callback+0x26>
		  LL_TIM_EnableCounter(TIM22);
	}

    TIM22->CNT = 0;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <Modbus_RXNEmpty_Callback+0x40>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

}
 80018a0:	4770      	bx	lr
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018a2:	4a06      	ldr	r2, [pc, #24]	; (80018bc <Modbus_RXNEmpty_Callback+0x40>)
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	e7f5      	b.n	800189a <Modbus_RXNEmpty_Callback+0x1e>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40004800 	.word	0x40004800
 80018b4:	200003e0 	.word	0x200003e0
 80018b8:	200002e0 	.word	0x200002e0
 80018bc:	40011400 	.word	0x40011400

080018c0 <Modbus_TXEmpty_Callback>:

void Modbus_TXEmpty_Callback(void){

	if(mbs_tx_cnt < mbs_tx_len){
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <Modbus_TXEmpty_Callback+0x38>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <Modbus_TXEmpty_Callback+0x3c>)
 80018c6:	8812      	ldrh	r2, [r2, #0]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d209      	bcs.n	80018e0 <Modbus_TXEmpty_Callback+0x20>

		LL_USART_TransmitData8(MBS_LPUART,mbs_pkt_tx[mbs_tx_cnt]);
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <Modbus_TXEmpty_Callback+0x40>)
 80018ce:	5cc8      	ldrb	r0, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <Modbus_TXEmpty_Callback+0x44>)
 80018d2:	6288      	str	r0, [r1, #40]	; 0x28
		mbs_tx_cnt++;
 80018d4:	3301      	adds	r3, #1
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <Modbus_TXEmpty_Callback+0x38>)
 80018da:	800b      	strh	r3, [r1, #0]

		if(mbs_tx_cnt == mbs_tx_len){
 80018dc:	429a      	cmp	r2, r3
 80018de:	d000      	beq.n	80018e2 <Modbus_TXEmpty_Callback+0x22>

		}

	}

}
 80018e0:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Modbus_TXEmpty_Callback+0x44>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	438a      	bics	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	3940      	subs	r1, #64	; 0x40
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e7f4      	b.n	80018e0 <Modbus_TXEmpty_Callback+0x20>
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	200003e2 	.word	0x200003e2
 80018fc:	200003e6 	.word	0x200003e6
 8001900:	200003e8 	.word	0x200003e8
 8001904:	40004800 	.word	0x40004800

08001908 <Modbus_LPUART_IRQHandler>:
void Modbus_LPUART_IRQHandler(void){
 8001908:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	069b      	lsls	r3, r3, #26
 8001910:	d505      	bpl.n	800191e <Modbus_LPUART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	069b      	lsls	r3, r3, #26
 8001918:	d501      	bpl.n	800191e <Modbus_LPUART_IRQHandler+0x16>
		Modbus_RXNEmpty_Callback();
 800191a:	f7ff ffaf 	bl	800187c <Modbus_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	061b      	lsls	r3, r3, #24
 8001924:	d505      	bpl.n	8001932 <Modbus_LPUART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	061b      	lsls	r3, r3, #24
 800192c:	d501      	bpl.n	8001932 <Modbus_LPUART_IRQHandler+0x2a>
		Modbus_TXEmpty_Callback();
 800192e:	f7ff ffc7 	bl	80018c0 <Modbus_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	065b      	lsls	r3, r3, #25
 8001938:	d50d      	bpl.n	8001956 <Modbus_LPUART_IRQHandler+0x4e>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	065b      	lsls	r3, r3, #25
 8001940:	d509      	bpl.n	8001956 <Modbus_LPUART_IRQHandler+0x4e>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001944:	2140      	movs	r1, #64	; 0x40
 8001946:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	438a      	bics	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	393c      	subs	r1, #60	; 0x3c
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	071b      	lsls	r3, r3, #28
 800195c:	d502      	bpl.n	8001964 <Modbus_LPUART_IRQHandler+0x5c>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 800195e:	4b02      	ldr	r3, [pc, #8]	; (8001968 <Modbus_LPUART_IRQHandler+0x60>)
 8001960:	2208      	movs	r2, #8
 8001962:	621a      	str	r2, [r3, #32]
}
 8001964:	bd10      	pop	{r4, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40004800 	.word	0x40004800

0800196c <Mipex_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <Mipex_TXEmpty_Callback+0x40>)
 800196e:	885a      	ldrh	r2, [r3, #2]
 8001970:	b292      	uxth	r2, r2
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
		LL_LPUART_ClearFlag_ORE(MIPEX_UART);
	}
}

static void Mipex_TXEmpty_Callback(void){
  if(ring_buffer_is_empty(&Mipex_ring_buff_tx)){
 8001976:	429a      	cmp	r2, r3
 8001978:	d010      	beq.n	800199c <Mipex_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <Mipex_TXEmpty_Callback+0x40>)
 800197c:	8853      	ldrh	r3, [r2, #2]
 800197e:	6891      	ldr	r1, [r2, #8]
 8001980:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 8001982:	8853      	ldrh	r3, [r2, #2]
 8001984:	b29b      	uxth	r3, r3
 8001986:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001988:	3a01      	subs	r2, #1
 800198a:	4293      	cmp	r3, r2
 800198c:	d00c      	beq.n	80019a8 <Mipex_TXEmpty_Callback+0x3c>
 800198e:	3301      	adds	r3, #1
 8001990:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <Mipex_TXEmpty_Callback+0x40>)
 8001994:	8053      	strh	r3, [r2, #2]
  LPUARTx->TDR = Value;
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <Mipex_TXEmpty_Callback+0x44>)
 8001998:	6299      	str	r1, [r3, #40]	; 0x28
    LL_LPUART_DisableIT_TXE(MIPEX_UART);
  }else{
    LL_LPUART_TransmitData8(MIPEX_UART, ring_buffer_get(&Mipex_ring_buff_tx));
  }
}
 800199a:	4770      	bx	lr
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <Mipex_TXEmpty_Callback+0x44>)
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	438b      	bics	r3, r1
 80019a4:	6013      	str	r3, [r2, #0]
}
 80019a6:	e7f8      	b.n	800199a <Mipex_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80019a8:	2300      	movs	r3, #0
 80019aa:	e7f2      	b.n	8001992 <Mipex_TXEmpty_Callback+0x26>
 80019ac:	200004f8 	.word	0x200004f8
 80019b0:	40004400 	.word	0x40004400

080019b4 <Mipex_crc>:
		Mipex_status_parcing = Mipex_parcing_commmand(command_for_IT);
	}
}

//==============================================================================
static uint8_t Mipex_crc(uint8_t *buf, int len){
 80019b4:	b510      	push	{r4, lr}
 80019b6:	0004      	movs	r4, r0
	uint8_t crc = (uint8_t)buf[0];
 80019b8:	7800      	ldrb	r0, [r0, #0]
	for (int pos = 1; pos < len; pos++){
 80019ba:	2301      	movs	r3, #1
 80019bc:	428b      	cmp	r3, r1
 80019be:	da03      	bge.n	80019c8 <Mipex_crc+0x14>
		crc ^= (uint8_t)buf[pos];
 80019c0:	5ce2      	ldrb	r2, [r4, r3]
 80019c2:	4050      	eors	r0, r2
	for (int pos = 1; pos < len; pos++){
 80019c4:	3301      	adds	r3, #1
 80019c6:	e7f9      	b.n	80019bc <Mipex_crc+0x8>
	}
	return crc;
}
 80019c8:	bd10      	pop	{r4, pc}

080019ca <strcompare>:

static int strcompare(const char* str1, const char* str2, uint8_t len){
 80019ca:	b570      	push	{r4, r5, r6, lr}
    uint16_t i = 0;
    for(i = 0; str1[i] && str2[i] && i < len; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	e001      	b.n	80019d4 <strcompare+0xa>
 80019d0:	3301      	adds	r3, #1
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	5cc4      	ldrb	r4, [r0, r3]
 80019d6:	2c00      	cmp	r4, #0
 80019d8:	d009      	beq.n	80019ee <strcompare+0x24>
 80019da:	5ccd      	ldrb	r5, [r1, r3]
 80019dc:	2d00      	cmp	r5, #0
 80019de:	d006      	beq.n	80019ee <strcompare+0x24>
 80019e0:	b296      	uxth	r6, r2
 80019e2:	429e      	cmp	r6, r3
 80019e4:	d903      	bls.n	80019ee <strcompare+0x24>
	{
		if(str1[i] != str2[i]){
 80019e6:	42ac      	cmp	r4, r5
 80019e8:	d0f2      	beq.n	80019d0 <strcompare+0x6>
			return 0;
 80019ea:	2000      	movs	r0, #0
 80019ec:	e003      	b.n	80019f6 <strcompare+0x2c>
		}
	}
    if(i != len){
 80019ee:	b292      	uxth	r2, r2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d101      	bne.n	80019f8 <strcompare+0x2e>
    	return 0;
    }
    return i;
 80019f4:	0018      	movs	r0, r3
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
    	return 0;
 80019f8:	2000      	movs	r0, #0
 80019fa:	e7fc      	b.n	80019f6 <strcompare+0x2c>

080019fc <Mipex_parcing_commmand>:

static ErrorStatus Mipex_parcing_commmand(CommandMipexType command){
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	0004      	movs	r4, r0
	ErrorStatus status = SUCCESS;
	uint8_t rc_buf[20];
	uint8_t len_rc_buf = 0;
	for(uint8_t i = 0; !ring_buffer_is_empty(&Mipex_ring_buff_rx); i++){
 8001a02:	2300      	movs	r3, #0
 8001a04:	e007      	b.n	8001a16 <Mipex_parcing_commmand+0x1a>
 8001a06:	3201      	adds	r2, #1
 8001a08:	b292      	uxth	r2, r2
  ring->read_offset = ring_buffer_get_next_read(ring);
 8001a0a:	4970      	ldr	r1, [pc, #448]	; (8001bcc <Mipex_parcing_commmand+0x1d0>)
 8001a0c:	804a      	strh	r2, [r1, #2]
		if(Mipex_repeater){
			mbs_pkt_tx[i] = ring_buffer_get(&Mipex_ring_buff_rx);
 8001a0e:	4a70      	ldr	r2, [pc, #448]	; (8001bd0 <Mipex_parcing_commmand+0x1d4>)
 8001a10:	5415      	strb	r5, [r2, r0]
	for(uint8_t i = 0; !ring_buffer_is_empty(&Mipex_ring_buff_rx); i++){
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2db      	uxtb	r3, r3
  return (ring->read_offset == ring->write_offset);
 8001a16:	4a6d      	ldr	r2, [pc, #436]	; (8001bcc <Mipex_parcing_commmand+0x1d0>)
 8001a18:	8851      	ldrh	r1, [r2, #2]
 8001a1a:	b289      	uxth	r1, r1
 8001a1c:	8812      	ldrh	r2, [r2, #0]
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	4291      	cmp	r1, r2
 8001a22:	d024      	beq.n	8001a6e <Mipex_parcing_commmand+0x72>
		if(Mipex_repeater){
 8001a24:	4a6b      	ldr	r2, [pc, #428]	; (8001bd4 <Mipex_parcing_commmand+0x1d8>)
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	2a00      	cmp	r2, #0
 8001a2a:	d00c      	beq.n	8001a46 <Mipex_parcing_commmand+0x4a>
			mbs_pkt_tx[i] = ring_buffer_get(&Mipex_ring_buff_rx);
 8001a2c:	0018      	movs	r0, r3
  uint8_t data = ring->buffer[ring->read_offset];
 8001a2e:	4967      	ldr	r1, [pc, #412]	; (8001bcc <Mipex_parcing_commmand+0x1d0>)
 8001a30:	884a      	ldrh	r2, [r1, #2]
 8001a32:	688d      	ldr	r5, [r1, #8]
 8001a34:	5cad      	ldrb	r5, [r5, r2]
  return get_next(ring->read_offset, ring->size);
 8001a36:	884a      	ldrh	r2, [r1, #2]
 8001a38:	b292      	uxth	r2, r2
 8001a3a:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001a3c:	3901      	subs	r1, #1
 8001a3e:	4291      	cmp	r1, r2
 8001a40:	d1e1      	bne.n	8001a06 <Mipex_parcing_commmand+0xa>
 8001a42:	2200      	movs	r2, #0
 8001a44:	e7e1      	b.n	8001a0a <Mipex_parcing_commmand+0xe>
		}
		else{
			rc_buf[i] = ring_buffer_get(&Mipex_ring_buff_rx);
 8001a46:	0018      	movs	r0, r3
  uint8_t data = ring->buffer[ring->read_offset];
 8001a48:	4960      	ldr	r1, [pc, #384]	; (8001bcc <Mipex_parcing_commmand+0x1d0>)
 8001a4a:	884a      	ldrh	r2, [r1, #2]
 8001a4c:	688d      	ldr	r5, [r1, #8]
 8001a4e:	5cad      	ldrb	r5, [r5, r2]
  return get_next(ring->read_offset, ring->size);
 8001a50:	884a      	ldrh	r2, [r1, #2]
 8001a52:	b292      	uxth	r2, r2
 8001a54:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001a56:	3901      	subs	r1, #1
 8001a58:	428a      	cmp	r2, r1
 8001a5a:	d006      	beq.n	8001a6a <Mipex_parcing_commmand+0x6e>
 8001a5c:	3201      	adds	r2, #1
 8001a5e:	b292      	uxth	r2, r2
  ring->read_offset = ring_buffer_get_next_read(ring);
 8001a60:	495a      	ldr	r1, [pc, #360]	; (8001bcc <Mipex_parcing_commmand+0x1d0>)
 8001a62:	804a      	strh	r2, [r1, #2]
 8001a64:	aa01      	add	r2, sp, #4
 8001a66:	5415      	strb	r5, [r2, r0]
			len_rc_buf++;
 8001a68:	e7d3      	b.n	8001a12 <Mipex_parcing_commmand+0x16>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	e7f8      	b.n	8001a60 <Mipex_parcing_commmand+0x64>
		}
	}

	if(Mipex_repeater){
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <Mipex_parcing_commmand+0x1d8>)
 8001a70:	781d      	ldrb	r5, [r3, #0]
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	d00c      	beq.n	8001a90 <Mipex_parcing_commmand+0x94>
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <Mipex_parcing_commmand+0x1dc>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	317c      	adds	r1, #124	; 0x7c
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
	ErrorStatus status = SUCCESS;
 8001a88:	2500      	movs	r5, #0
			status = ERROR;
		}

	}
	return status;
}
 8001a8a:	0028      	movs	r0, r5
 8001a8c:	b006      	add	sp, #24
 8001a8e:	bd70      	pop	{r4, r5, r6, pc}
		if(strcompare((char*)rc_buf, "OEM", 3)){
 8001a90:	2203      	movs	r2, #3
 8001a92:	4952      	ldr	r1, [pc, #328]	; (8001bdc <Mipex_parcing_commmand+0x1e0>)
 8001a94:	a801      	add	r0, sp, #4
 8001a96:	f7ff ff98 	bl	80019ca <strcompare>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d1f5      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(strcompare((char*)rc_buf, "USER", 4)){
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	494f      	ldr	r1, [pc, #316]	; (8001be0 <Mipex_parcing_commmand+0x1e4>)
 8001aa2:	a801      	add	r0, sp, #4
 8001aa4:	f7ff ff91 	bl	80019ca <strcompare>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d003      	beq.n	8001ab4 <Mipex_parcing_commmand+0xb8>
			if(command == COMMAND_OEM_XXXX){
 8001aac:	2c00      	cmp	r4, #0
 8001aae:	d1ec      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
				status = ERROR;
 8001ab0:	2501      	movs	r5, #1
 8001ab2:	e7ea      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(strcompare((char*)rc_buf, "INIT", 4)){
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	494b      	ldr	r1, [pc, #300]	; (8001be4 <Mipex_parcing_commmand+0x1e8>)
 8001ab8:	a801      	add	r0, sp, #4
 8001aba:	f7ff ff86 	bl	80019ca <strcompare>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d009      	beq.n	8001ad6 <Mipex_parcing_commmand+0xda>
			if(!strcompare((char*)&rc_buf[5], "OK", 2)){
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4948      	ldr	r1, [pc, #288]	; (8001be8 <Mipex_parcing_commmand+0x1ec>)
 8001ac6:	2009      	movs	r0, #9
 8001ac8:	4468      	add	r0, sp
 8001aca:	f7ff ff7e 	bl	80019ca <strcompare>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d1db      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
				status = ERROR;
 8001ad2:	2501      	movs	r5, #1
 8001ad4:	e7d9      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(strcompare((char*)rc_buf, "ZERO2", 5)){
 8001ad6:	2205      	movs	r2, #5
 8001ad8:	4944      	ldr	r1, [pc, #272]	; (8001bec <Mipex_parcing_commmand+0x1f0>)
 8001ada:	a801      	add	r0, sp, #4
 8001adc:	f7ff ff75 	bl	80019ca <strcompare>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d009      	beq.n	8001af8 <Mipex_parcing_commmand+0xfc>
			if(!strcompare((char*)&rc_buf[6], "OK", 2)){
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	4940      	ldr	r1, [pc, #256]	; (8001be8 <Mipex_parcing_commmand+0x1ec>)
 8001ae8:	200a      	movs	r0, #10
 8001aea:	4468      	add	r0, sp
 8001aec:	f7ff ff6d 	bl	80019ca <strcompare>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d1ca      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
				status = ERROR;
 8001af4:	2501      	movs	r5, #1
 8001af6:	e7c8      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(strcompare((char*)rc_buf, "CALB", 4)){
 8001af8:	2204      	movs	r2, #4
 8001afa:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <Mipex_parcing_commmand+0x1f4>)
 8001afc:	a801      	add	r0, sp, #4
 8001afe:	f7ff ff64 	bl	80019ca <strcompare>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d009      	beq.n	8001b1a <Mipex_parcing_commmand+0x11e>
			if(!strcompare((char*)&rc_buf[9], "OK", 2)){
 8001b06:	2202      	movs	r2, #2
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <Mipex_parcing_commmand+0x1ec>)
 8001b0a:	200d      	movs	r0, #13
 8001b0c:	4468      	add	r0, sp
 8001b0e:	f7ff ff5c 	bl	80019ca <strcompare>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d1b9      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
				status = ERROR;
 8001b16:	2501      	movs	r5, #1
 8001b18:	e7b7      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(strcompare((char*)rc_buf, "AZERO", 5)){
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <Mipex_parcing_commmand+0x1f8>)
 8001b1e:	a801      	add	r0, sp, #4
 8001b20:	f7ff ff53 	bl	80019ca <strcompare>
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d1b0      	bne.n	8001a8a <Mipex_parcing_commmand+0x8e>
		else if(Mipex_crc(rc_buf, 4) == rc_buf[4]){
 8001b28:	ae01      	add	r6, sp, #4
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	0030      	movs	r0, r6
 8001b2e:	f7ff ff41 	bl	80019b4 <Mipex_crc>
 8001b32:	7933      	ldrb	r3, [r6, #4]
 8001b34:	4298      	cmp	r0, r3
 8001b36:	d007      	beq.n	8001b48 <Mipex_parcing_commmand+0x14c>
		else if(command == COMMAND_ID){
 8001b38:	2c01      	cmp	r4, #1
 8001b3a:	d02a      	beq.n	8001b92 <Mipex_parcing_commmand+0x196>
		else if(command == COMMAND_RT){
 8001b3c:	2c02      	cmp	r4, #2
 8001b3e:	d02f      	beq.n	8001ba0 <Mipex_parcing_commmand+0x1a4>
		else if(command == COMMAND_SRAL){
 8001b40:	2c03      	cmp	r4, #3
 8001b42:	d041      	beq.n	8001bc8 <Mipex_parcing_commmand+0x1cc>
			status = ERROR;
 8001b44:	2501      	movs	r5, #1
 8001b46:	e7a0      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
			dev.RegInput.Value = (rc_buf[0]<<8) + rc_buf[1];
 8001b48:	aa01      	add	r2, sp, #4
 8001b4a:	7813      	ldrb	r3, [r2, #0]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	7851      	ldrb	r1, [r2, #1]
 8001b50:	185b      	adds	r3, r3, r1
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <Mipex_parcing_commmand+0x1fc>)
 8001b54:	21e2      	movs	r1, #226	; 0xe2
 8001b56:	5243      	strh	r3, [r0, r1]
			Mipexstate = (rc_buf[2]<<8) + rc_buf[3];
 8001b58:	7893      	ldrb	r3, [r2, #2]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	78d2      	ldrb	r2, [r2, #3]
 8001b5e:	189b      	adds	r3, r3, r2
			if(Mipexstate & MIPEX_STATE_ERR){
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <Mipex_parcing_commmand+0x200>)
 8001b62:	4213      	tst	r3, r2
 8001b64:	d008      	beq.n	8001b78 <Mipex_parcing_commmand+0x17c>
				dev.Status |= (1 << STATUS_BIT_SENSOR_ERROR);
 8001b66:	0001      	movs	r1, r0
 8001b68:	228c      	movs	r2, #140	; 0x8c
 8001b6a:	0052      	lsls	r2, r2, #1
 8001b6c:	5a80      	ldrh	r0, [r0, r2]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	01db      	lsls	r3, r3, #7
 8001b72:	4303      	orrs	r3, r0
 8001b74:	528b      	strh	r3, [r1, r2]
 8001b76:	e788      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
				dev.Status &= ~(1 << STATUS_BIT_SENSOR_ERROR);
 8001b78:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <Mipex_parcing_commmand+0x1fc>)
 8001b7a:	228c      	movs	r2, #140	; 0x8c
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	5a8b      	ldrh	r3, [r1, r2]
 8001b80:	481f      	ldr	r0, [pc, #124]	; (8001c00 <Mipex_parcing_commmand+0x204>)
 8001b82:	4003      	ands	r3, r0
 8001b84:	528b      	strh	r3, [r1, r2]
 8001b86:	e780      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
			for(uint8_t i = 0; i < 5; i++){
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d9fb      	bls.n	8001b88 <Mipex_parcing_commmand+0x18c>
 8001b90:	e77b      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
 8001b92:	002b      	movs	r3, r5
 8001b94:	e7fa      	b.n	8001b8c <Mipex_parcing_commmand+0x190>
			for(uint8_t i = 0; i < 5; i++){
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d9fb      	bls.n	8001b96 <Mipex_parcing_commmand+0x19a>
 8001b9e:	e774      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
 8001ba0:	002b      	movs	r3, r5
 8001ba2:	e7fa      	b.n	8001b9a <Mipex_parcing_commmand+0x19e>
				dev.Config.SNum[i] = (rc_buf[i*2]<<8) + rc_buf[i*2 + 1];
 8001ba4:	0059      	lsls	r1, r3, #1
 8001ba6:	a801      	add	r0, sp, #4
 8001ba8:	5c42      	ldrb	r2, [r0, r1]
 8001baa:	0212      	lsls	r2, r2, #8
 8001bac:	3101      	adds	r1, #1
 8001bae:	5c41      	ldrb	r1, [r0, r1]
 8001bb0:	1852      	adds	r2, r2, r1
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	3010      	adds	r0, #16
 8001bb6:	0040      	lsls	r0, r0, #1
 8001bb8:	490f      	ldr	r1, [pc, #60]	; (8001bf8 <Mipex_parcing_commmand+0x1fc>)
 8001bba:	1809      	adds	r1, r1, r0
 8001bbc:	804a      	strh	r2, [r1, #2]
			for(uint8_t i = 0; i < 4; i++){
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d9ee      	bls.n	8001ba4 <Mipex_parcing_commmand+0x1a8>
 8001bc6:	e760      	b.n	8001a8a <Mipex_parcing_commmand+0x8e>
 8001bc8:	002b      	movs	r3, r5
 8001bca:	e7fa      	b.n	8001bc2 <Mipex_parcing_commmand+0x1c6>
 8001bcc:	200004e8 	.word	0x200004e8
 8001bd0:	200003e8 	.word	0x200003e8
 8001bd4:	200000b2 	.word	0x200000b2
 8001bd8:	40004800 	.word	0x40004800
 8001bdc:	08003eb0 	.word	0x08003eb0
 8001be0:	08003eb4 	.word	0x08003eb4
 8001be4:	08003ebc 	.word	0x08003ebc
 8001be8:	08003ec4 	.word	0x08003ec4
 8001bec:	08003ec8 	.word	0x08003ec8
 8001bf0:	08003ed0 	.word	0x08003ed0
 8001bf4:	08003ed8 	.word	0x08003ed8
 8001bf8:	2000050c 	.word	0x2000050c
 8001bfc:	00000a86 	.word	0x00000a86
 8001c00:	ffffbfff 	.word	0xffffbfff

08001c04 <Mipex_RXNEmpty_Callback>:
static void Mipex_RXNEmpty_Callback(void){
 8001c04:	b510      	push	{r4, lr}
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <Mipex_RXNEmpty_Callback+0x3c>)
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	b2d2      	uxtb	r2, r2
  ring->buffer[ring->write_offset] = data;
 8001c0c:	490d      	ldr	r1, [pc, #52]	; (8001c44 <Mipex_RXNEmpty_Callback+0x40>)
 8001c0e:	880b      	ldrh	r3, [r1, #0]
 8001c10:	6888      	ldr	r0, [r1, #8]
 8001c12:	54c2      	strb	r2, [r0, r3]
  return get_next(ring->write_offset, ring->size);
 8001c14:	880b      	ldrh	r3, [r1, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001c1a:	3901      	subs	r1, #1
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d006      	beq.n	8001c2e <Mipex_RXNEmpty_Callback+0x2a>
 8001c20:	3301      	adds	r3, #1
 8001c22:	b29b      	uxth	r3, r3
  ring->write_offset = ring_buffer_get_next_write(ring);
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <Mipex_RXNEmpty_Callback+0x40>)
 8001c26:	800b      	strh	r3, [r1, #0]
	if(data == 0x0D){
 8001c28:	2a0d      	cmp	r2, #13
 8001c2a:	d002      	beq.n	8001c32 <Mipex_RXNEmpty_Callback+0x2e>
}
 8001c2c:	bd10      	pop	{r4, pc}
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e7f8      	b.n	8001c24 <Mipex_RXNEmpty_Callback+0x20>
		Mipex_status_parcing = Mipex_parcing_commmand(command_for_IT);
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <Mipex_RXNEmpty_Callback+0x44>)
 8001c34:	7818      	ldrb	r0, [r3, #0]
 8001c36:	f7ff fee1 	bl	80019fc <Mipex_parcing_commmand>
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <Mipex_RXNEmpty_Callback+0x48>)
 8001c3c:	7018      	strb	r0, [r3, #0]
}
 8001c3e:	e7f5      	b.n	8001c2c <Mipex_RXNEmpty_Callback+0x28>
 8001c40:	40004400 	.word	0x40004400
 8001c44:	200004e8 	.word	0x200004e8
 8001c48:	200000b6 	.word	0x200000b6
 8001c4c:	20000020 	.word	0x20000020

08001c50 <transmit_UART>:

static void transmit_UART(char* data, uint8_t len){
 8001c50:	b510      	push	{r4, lr}
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <transmit_UART+0x4c>)
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	2420      	movs	r4, #32
 8001c58:	4323      	orrs	r3, r4
 8001c5a:	6013      	str	r3, [r2, #0]
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <transmit_UART+0x50>)
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	2480      	movs	r4, #128	; 0x80
 8001c62:	0564      	lsls	r4, r4, #21
 8001c64:	50d4      	str	r4, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c6a:	f3bf 8f6f 	isb	sy
	LL_LPUART_EnableIT_RXNE(MIPEX_UART);
	NVIC_DisableIRQ(USART2_IRQn);
	for(uint16_t i = 0; i < len; i++){
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e004      	b.n	8001c7c <transmit_UART+0x2c>
		while(!LL_LPUART_IsActiveFlag_TXE(MIPEX_UART));
		LL_LPUART_TransmitData8(MIPEX_UART, data[i]);
 8001c72:	5cc4      	ldrb	r4, [r0, r3]
  LPUARTx->TDR = Value;
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <transmit_UART+0x4c>)
 8001c76:	6294      	str	r4, [r2, #40]	; 0x28
	for(uint16_t i = 0; i < len; i++){
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b28a      	uxth	r2, r1
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d904      	bls.n	8001c8c <transmit_UART+0x3c>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001c82:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <transmit_UART+0x4c>)
 8001c84:	69d2      	ldr	r2, [r2, #28]
 8001c86:	0612      	lsls	r2, r2, #24
 8001c88:	d5fb      	bpl.n	8001c82 <transmit_UART+0x32>
 8001c8a:	e7f2      	b.n	8001c72 <transmit_UART+0x22>
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <transmit_UART+0x4c>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	d5fb      	bpl.n	8001c8c <transmit_UART+0x3c>
  LPUARTx->TDR = Value;
 8001c94:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <transmit_UART+0x4c>)
 8001c96:	220d      	movs	r2, #13
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
	}
	while(!LL_LPUART_IsActiveFlag_TXE(MIPEX_UART));
	LL_LPUART_TransmitData8(MIPEX_UART, 0x0D);
}
 8001c9a:	bd10      	pop	{r4, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <receive_UART>:
	LL_LPUART_EnableIT_TXE(MIPEX_UART);
}

static uint8_t receive_UART(void){
	uint8_t data = 0;
	TimerRxMipex = TIME_RX_MIPEX;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <receive_UART+0x60>)
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	801a      	strh	r2, [r3, #0]
	uint8_t data = 0;
 8001caa:	2200      	movs	r2, #0

	while(TimerRxMipex && (data != 0x0D)){
 8001cac:	e00a      	b.n	8001cc4 <receive_UART+0x20>
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
  ring->write_offset = ring_buffer_get_next_write(ring);
 8001cb2:	4915      	ldr	r1, [pc, #84]	; (8001d08 <receive_UART+0x64>)
 8001cb4:	800b      	strh	r3, [r1, #0]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <receive_UART+0x68>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	071b      	lsls	r3, r3, #28
 8001cbc:	d502      	bpl.n	8001cc4 <receive_UART+0x20>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <receive_UART+0x68>)
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	6219      	str	r1, [r3, #32]
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <receive_UART+0x60>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d014      	beq.n	8001cf6 <receive_UART+0x52>
 8001ccc:	2a0d      	cmp	r2, #13
 8001cce:	d012      	beq.n	8001cf6 <receive_UART+0x52>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <receive_UART+0x68>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	069b      	lsls	r3, r3, #26
 8001cd6:	d5ee      	bpl.n	8001cb6 <receive_UART+0x12>
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <receive_UART+0x68>)
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	b2d2      	uxtb	r2, r2
  ring->buffer[ring->write_offset] = data;
 8001cde:	490a      	ldr	r1, [pc, #40]	; (8001d08 <receive_UART+0x64>)
 8001ce0:	880b      	ldrh	r3, [r1, #0]
 8001ce2:	6888      	ldr	r0, [r1, #8]
 8001ce4:	54c2      	strb	r2, [r0, r3]
  return get_next(ring->write_offset, ring->size);
 8001ce6:	880b      	ldrh	r3, [r1, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001cec:	3901      	subs	r1, #1
 8001cee:	428b      	cmp	r3, r1
 8001cf0:	d1dd      	bne.n	8001cae <receive_UART+0xa>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e7dd      	b.n	8001cb2 <receive_UART+0xe>
		}
		if(LL_LPUART_IsActiveFlag_ORE(MIPEX_UART)){
			LL_LPUART_ClearFlag_ORE(MIPEX_UART);
		}
	}
	if(data == 0x0D){
 8001cf6:	2a0d      	cmp	r2, #13
 8001cf8:	d001      	beq.n	8001cfe <receive_UART+0x5a>
		return 1;
	}
	return 0;
 8001cfa:	2000      	movs	r0, #0
}
 8001cfc:	4770      	bx	lr
		return 1;
 8001cfe:	2001      	movs	r0, #1
 8001d00:	e7fc      	b.n	8001cfc <receive_UART+0x58>
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	200004f4 	.word	0x200004f4
 8001d08:	200004e8 	.word	0x200004e8
 8001d0c:	40004400 	.word	0x40004400

08001d10 <Mipex_init_buff>:
void Mipex_init_buff(void){
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	b08b      	sub	sp, #44	; 0x2c
  ring.write_offset = 0;
 8001d14:	ab01      	add	r3, sp, #4
 8001d16:	2100      	movs	r1, #0
 8001d18:	8019      	strh	r1, [r3, #0]
  ring.read_offset = 0;
 8001d1a:	8059      	strh	r1, [r3, #2]
  ring.size = size;
 8001d1c:	2264      	movs	r2, #100	; 0x64
 8001d1e:	809a      	strh	r2, [r3, #4]
  ring.buffer = buffer;
 8001d20:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <Mipex_init_buff+0x40>)
 8001d22:	9203      	str	r2, [sp, #12]
  return ring;
 8001d24:	aa07      	add	r2, sp, #28
 8001d26:	0010      	movs	r0, r2
 8001d28:	001c      	movs	r4, r3
 8001d2a:	cce0      	ldmia	r4!, {r5, r6, r7}
 8001d2c:	c0e0      	stmia	r0!, {r5, r6, r7}
  Mipex_ring_buff_tx = ring_buffer_init(tx_buffer, BUF_SIZE);
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <Mipex_init_buff+0x44>)
 8001d30:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d32:	c070      	stmia	r0!, {r4, r5, r6}
  ring.write_offset = 0;
 8001d34:	8019      	strh	r1, [r3, #0]
  ring.read_offset = 0;
 8001d36:	8059      	strh	r1, [r3, #2]
  ring.buffer = buffer;
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <Mipex_init_buff+0x48>)
 8001d3a:	9203      	str	r2, [sp, #12]
  return ring;
 8001d3c:	aa04      	add	r2, sp, #16
 8001d3e:	0011      	movs	r1, r2
 8001d40:	cb31      	ldmia	r3!, {r0, r4, r5}
 8001d42:	c131      	stmia	r1!, {r0, r4, r5}
  Mipex_ring_buff_rx = ring_buffer_init(rx_buffer, BUF_SIZE);
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <Mipex_init_buff+0x4c>)
 8001d46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d48:	c313      	stmia	r3!, {r0, r1, r4}
}
 8001d4a:	b00b      	add	sp, #44	; 0x2c
 8001d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	2000011c 	.word	0x2000011c
 8001d54:	200004f8 	.word	0x200004f8
 8001d58:	200000b8 	.word	0x200000b8
 8001d5c:	200004e8 	.word	0x200004e8

08001d60 <Mipex_UART_IRQHandler>:
void Mipex_UART_IRQHandler(void){
 8001d60:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	061b      	lsls	r3, r3, #24
 8001d68:	d505      	bpl.n	8001d76 <Mipex_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	d501      	bpl.n	8001d76 <Mipex_UART_IRQHandler+0x16>
		Mipex_TXEmpty_Callback();
 8001d72:	f7ff fdfb 	bl	800196c <Mipex_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	d505      	bpl.n	8001d8a <Mipex_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	d501      	bpl.n	8001d8a <Mipex_UART_IRQHandler+0x2a>
		Mipex_RXNEmpty_Callback();
 8001d86:	f7ff ff3d 	bl	8001c04 <Mipex_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	071b      	lsls	r3, r3, #28
 8001d90:	d502      	bpl.n	8001d98 <Mipex_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001d92:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <Mipex_UART_IRQHandler+0x3c>)
 8001d94:	2208      	movs	r2, #8
 8001d96:	621a      	str	r2, [r3, #32]
}
 8001d98:	bd10      	pop	{r4, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	40004400 	.word	0x40004400

08001da0 <Mipex_transmit_commmand>:

void Mipex_transmit_commmand(CommandMipexType command){
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	0004      	movs	r4, r0
	Mipex_status_parcing = ERROR;
 8001da6:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <Mipex_transmit_commmand+0x150>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
	uint8_t tr_buf[15];
	uint16_t data = 0;
	if(!Mipex_repeater){
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <Mipex_transmit_commmand+0x154>)
 8001dae:	781d      	ldrb	r5, [r3, #0]
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	d12d      	bne.n	8001e10 <Mipex_transmit_commmand+0x70>
		switch(command){
 8001db4:	280a      	cmp	r0, #10
 8001db6:	d826      	bhi.n	8001e06 <Mipex_transmit_commmand+0x66>
 8001db8:	0083      	lsls	r3, r0, #2
 8001dba:	4a4f      	ldr	r2, [pc, #316]	; (8001ef8 <Mipex_transmit_commmand+0x158>)
 8001dbc:	58d3      	ldr	r3, [r2, r3]
 8001dbe:	469f      	mov	pc, r3
		case COMMAND_OEM_XXXX:
			data = Password;
 8001dc0:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <Mipex_transmit_commmand+0x15c>)
 8001dc2:	881e      	ldrh	r6, [r3, #0]
			tr_buf[0] = 'O';tr_buf[1] = 'E';tr_buf[2] = 'M';tr_buf[3] = ' ';
 8001dc4:	234f      	movs	r3, #79	; 0x4f
 8001dc6:	466a      	mov	r2, sp
 8001dc8:	7013      	strb	r3, [r2, #0]
 8001dca:	3b0a      	subs	r3, #10
 8001dcc:	7053      	strb	r3, [r2, #1]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	7093      	strb	r3, [r2, #2]
 8001dd2:	3b2d      	subs	r3, #45	; 0x2d
 8001dd4:	70d3      	strb	r3, [r2, #3]
			for(uint8_t i = 0; i < 4; i++){
 8001dd6:	0005      	movs	r5, r0
 8001dd8:	e00f      	b.n	8001dfa <Mipex_transmit_commmand+0x5a>
				tr_buf[6 - i] = (data % 10) + 0x30;
 8001dda:	2706      	movs	r7, #6
 8001ddc:	1b7f      	subs	r7, r7, r5
 8001dde:	210a      	movs	r1, #10
 8001de0:	0030      	movs	r0, r6
 8001de2:	f7fe fa29 	bl	8000238 <__aeabi_uidivmod>
 8001de6:	3130      	adds	r1, #48	; 0x30
 8001de8:	466b      	mov	r3, sp
 8001dea:	55d9      	strb	r1, [r3, r7]
				data /= 10;
 8001dec:	210a      	movs	r1, #10
 8001dee:	0030      	movs	r0, r6
 8001df0:	f7fe f99c 	bl	800012c <__udivsi3>
 8001df4:	b286      	uxth	r6, r0
			for(uint8_t i = 0; i < 4; i++){
 8001df6:	3501      	adds	r5, #1
 8001df8:	b2ed      	uxtb	r5, r5
 8001dfa:	2d03      	cmp	r5, #3
 8001dfc:	d9ed      	bls.n	8001dda <Mipex_transmit_commmand+0x3a>
			}
			transmit_UART((char*)tr_buf, 8);
 8001dfe:	2108      	movs	r1, #8
 8001e00:	4668      	mov	r0, sp
 8001e02:	f7ff ff25 	bl	8001c50 <transmit_UART>
			transmit_UART("DATAE2", 6);
			break;
		default:
			break;
		}
		if(receive_UART()){
 8001e06:	f7ff ff4d 	bl	8001ca4 <receive_UART>
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	d000      	beq.n	8001e10 <Mipex_transmit_commmand+0x70>
 8001e0e:	e068      	b.n	8001ee2 <Mipex_transmit_commmand+0x142>
			Mipex_status_parcing = Mipex_parcing_commmand(command);
		}
	}
}
 8001e10:	b005      	add	sp, #20
 8001e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			transmit_UART("ID?", 3);
 8001e14:	2103      	movs	r1, #3
 8001e16:	483a      	ldr	r0, [pc, #232]	; (8001f00 <Mipex_transmit_commmand+0x160>)
 8001e18:	f7ff ff1a 	bl	8001c50 <transmit_UART>
			break;
 8001e1c:	e7f3      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("RT?", 3);
 8001e1e:	2103      	movs	r1, #3
 8001e20:	4838      	ldr	r0, [pc, #224]	; (8001f04 <Mipex_transmit_commmand+0x164>)
 8001e22:	f7ff ff15 	bl	8001c50 <transmit_UART>
			break;
 8001e26:	e7ee      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("SRAL?", 5);
 8001e28:	2105      	movs	r1, #5
 8001e2a:	4837      	ldr	r0, [pc, #220]	; (8001f08 <Mipex_transmit_commmand+0x168>)
 8001e2c:	f7ff ff10 	bl	8001c50 <transmit_UART>
			break;
 8001e30:	e7e9      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("AZERO?", 6);
 8001e32:	2106      	movs	r1, #6
 8001e34:	4835      	ldr	r0, [pc, #212]	; (8001f0c <Mipex_transmit_commmand+0x16c>)
 8001e36:	f7ff ff0b 	bl	8001c50 <transmit_UART>
			break;
 8001e3a:	e7e4      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("AZERO OFF", 9);
 8001e3c:	2109      	movs	r1, #9
 8001e3e:	4834      	ldr	r0, [pc, #208]	; (8001f10 <Mipex_transmit_commmand+0x170>)
 8001e40:	f7ff ff06 	bl	8001c50 <transmit_UART>
			break;
 8001e44:	e7df      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("AZERO ON", 8);
 8001e46:	2108      	movs	r1, #8
 8001e48:	4832      	ldr	r0, [pc, #200]	; (8001f14 <Mipex_transmit_commmand+0x174>)
 8001e4a:	f7ff ff01 	bl	8001c50 <transmit_UART>
			break;
 8001e4e:	e7da      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("INIT", 4);
 8001e50:	2104      	movs	r1, #4
 8001e52:	4831      	ldr	r0, [pc, #196]	; (8001f18 <Mipex_transmit_commmand+0x178>)
 8001e54:	f7ff fefc 	bl	8001c50 <transmit_UART>
			break;
 8001e58:	e7d5      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("ZERO2", 5);
 8001e5a:	2105      	movs	r1, #5
 8001e5c:	482f      	ldr	r0, [pc, #188]	; (8001f1c <Mipex_transmit_commmand+0x17c>)
 8001e5e:	f7ff fef7 	bl	8001c50 <transmit_UART>
			break;
 8001e62:	e7d0      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			data = dev.Config.ValueCalib;
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <Mipex_transmit_commmand+0x180>)
 8001e66:	899e      	ldrh	r6, [r3, #12]
			if(dev.Config.Unit & (1 << CFG_UNIT_VALUE_lel)){
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	071b      	lsls	r3, r3, #28
 8001e6c:	d507      	bpl.n	8001e7e <Mipex_transmit_commmand+0xde>
				data = (data*10)/dev.Config.ScaleKoef;
 8001e6e:	00b0      	lsls	r0, r6, #2
 8001e70:	1980      	adds	r0, r0, r6
 8001e72:	0040      	lsls	r0, r0, #1
 8001e74:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <Mipex_transmit_commmand+0x180>)
 8001e76:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 8001e78:	f7fe f9e2 	bl	8000240 <__divsi3>
 8001e7c:	b286      	uxth	r6, r0
			for(uint8_t i = 0; i < 4; i++){
 8001e7e:	002b      	movs	r3, r5
 8001e80:	e005      	b.n	8001e8e <Mipex_transmit_commmand+0xee>
					data *= 10;
 8001e82:	00b0      	lsls	r0, r6, #2
 8001e84:	1836      	adds	r6, r6, r0
 8001e86:	0076      	lsls	r6, r6, #1
 8001e88:	b2b6      	uxth	r6, r6
				for(uint8_t i = disc; i < MIPEX_DISC; i++){
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d9f7      	bls.n	8001e82 <Mipex_transmit_commmand+0xe2>
			tr_buf[0] = 'C';tr_buf[1] = 'A';tr_buf[2] = 'L';tr_buf[3] = 'B';tr_buf[4] = ' ';
 8001e92:	2343      	movs	r3, #67	; 0x43
 8001e94:	466a      	mov	r2, sp
 8001e96:	7013      	strb	r3, [r2, #0]
 8001e98:	3b02      	subs	r3, #2
 8001e9a:	7053      	strb	r3, [r2, #1]
 8001e9c:	330b      	adds	r3, #11
 8001e9e:	7093      	strb	r3, [r2, #2]
 8001ea0:	3b0a      	subs	r3, #10
 8001ea2:	70d3      	strb	r3, [r2, #3]
 8001ea4:	3b22      	subs	r3, #34	; 0x22
 8001ea6:	7113      	strb	r3, [r2, #4]
			for(uint8_t i = 0; i < 4; i++){
 8001ea8:	e00f      	b.n	8001eca <Mipex_transmit_commmand+0x12a>
				tr_buf[8 - i] = (data % 10) + 0x30;
 8001eaa:	2708      	movs	r7, #8
 8001eac:	1b7f      	subs	r7, r7, r5
 8001eae:	210a      	movs	r1, #10
 8001eb0:	0030      	movs	r0, r6
 8001eb2:	f7fe f9c1 	bl	8000238 <__aeabi_uidivmod>
 8001eb6:	3130      	adds	r1, #48	; 0x30
 8001eb8:	466b      	mov	r3, sp
 8001eba:	55d9      	strb	r1, [r3, r7]
				data /= 10;
 8001ebc:	210a      	movs	r1, #10
 8001ebe:	0030      	movs	r0, r6
 8001ec0:	f7fe f934 	bl	800012c <__udivsi3>
 8001ec4:	b286      	uxth	r6, r0
			for(uint8_t i = 0; i < 4; i++){
 8001ec6:	3501      	adds	r5, #1
 8001ec8:	b2ed      	uxtb	r5, r5
 8001eca:	2d03      	cmp	r5, #3
 8001ecc:	d9ed      	bls.n	8001eaa <Mipex_transmit_commmand+0x10a>
			transmit_UART((char*)tr_buf, 9);
 8001ece:	2109      	movs	r1, #9
 8001ed0:	4668      	mov	r0, sp
 8001ed2:	f7ff febd 	bl	8001c50 <transmit_UART>
			break;
 8001ed6:	e796      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			transmit_UART("DATAE2", 6);
 8001ed8:	2106      	movs	r1, #6
 8001eda:	4812      	ldr	r0, [pc, #72]	; (8001f24 <Mipex_transmit_commmand+0x184>)
 8001edc:	f7ff feb8 	bl	8001c50 <transmit_UART>
			break;
 8001ee0:	e791      	b.n	8001e06 <Mipex_transmit_commmand+0x66>
			Mipex_status_parcing = Mipex_parcing_commmand(command);
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	f7ff fd8a 	bl	80019fc <Mipex_parcing_commmand>
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <Mipex_transmit_commmand+0x150>)
 8001eea:	7018      	strb	r0, [r3, #0]
}
 8001eec:	e790      	b.n	8001e10 <Mipex_transmit_commmand+0x70>
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000020 	.word	0x20000020
 8001ef4:	200000b2 	.word	0x200000b2
 8001ef8:	08003f18 	.word	0x08003f18
 8001efc:	200000b4 	.word	0x200000b4
 8001f00:	08003ee0 	.word	0x08003ee0
 8001f04:	08003ee4 	.word	0x08003ee4
 8001f08:	08003ee8 	.word	0x08003ee8
 8001f0c:	08003ef0 	.word	0x08003ef0
 8001f10:	08003ef8 	.word	0x08003ef8
 8001f14:	08003f04 	.word	0x08003f04
 8001f18:	08003ebc 	.word	0x08003ebc
 8001f1c:	08003ec8 	.word	0x08003ec8
 8001f20:	2000050c 	.word	0x2000050c
 8001f24:	08003f10 	.word	0x08003f10

08001f28 <Mipex_Init>:
void Mipex_Init(void){
 8001f28:	b510      	push	{r4, lr}
	Mipex_init_buff();
 8001f2a:	f7ff fef1 	bl	8001d10 <Mipex_init_buff>
	for(uint8_t count = 0; (count < 5) && (Mipex_status_parcing == ERROR); count++){
 8001f2e:	2400      	movs	r4, #0
 8001f30:	2c04      	cmp	r4, #4
 8001f32:	d809      	bhi.n	8001f48 <Mipex_Init+0x20>
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <Mipex_Init+0x28>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <Mipex_Init+0x20>
		Mipex_transmit_commmand(COMMAND_OEM_XXXX);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff ff2f 	bl	8001da0 <Mipex_transmit_commmand>
	for(uint8_t count = 0; (count < 5) && (Mipex_status_parcing == ERROR); count++){
 8001f42:	3401      	adds	r4, #1
 8001f44:	b2e4      	uxtb	r4, r4
 8001f46:	e7f3      	b.n	8001f30 <Mipex_Init+0x8>
	Mipex_transmit_commmand(COMMAND_SRAL);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f7ff ff29 	bl	8001da0 <Mipex_transmit_commmand>
}
 8001f4e:	bd10      	pop	{r4, pc}
 8001f50:	20000020 	.word	0x20000020

08001f54 <Mipex_Restart>:
void Mipex_Restart(void){
 8001f54:	b510      	push	{r4, lr}
	Mipex_transmit_commmand(COMMAND_INIT);
 8001f56:	2007      	movs	r0, #7
 8001f58:	f7ff ff22 	bl	8001da0 <Mipex_transmit_commmand>
}
 8001f5c:	bd10      	pop	{r4, pc}
	...

08001f60 <timer_1_128>:

BOOL f_readADC = FALSE;

void timer_1_128(void){

	Cnt_1_128++;
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <timer_1_128+0x9c>)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	6013      	str	r3, [r2, #0]
	///000
	if(TimerRxMipex){
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <timer_1_128+0xa0>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <timer_1_128+0x16>
		TimerRxMipex--;
 8001f70:	3b01      	subs	r3, #1
 8001f72:	4a23      	ldr	r2, [pc, #140]	; (8002000 <timer_1_128+0xa0>)
 8001f74:	8013      	strh	r3, [r2, #0]
	}
	if(CntTo250ms < (32-1)){
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <timer_1_128+0xa4>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b1e      	cmp	r3, #30
 8001f7c:	d803      	bhi.n	8001f86 <timer_1_128+0x26>

		CntTo250ms++;
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <timer_1_128+0xa4>)
 8001f82:	7013      	strb	r3, [r2, #0]
		}

		CntTo500ms ^= 1;

	}
}
 8001f84:	4770      	bx	lr
		f_Time250ms = TRUE;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <timer_1_128+0xa8>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
		CntTo250ms = 0;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <timer_1_128+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
		if(CntTo500ms == 0){
 8001f92:	4b1e      	ldr	r3, [pc, #120]	; (800200c <timer_1_128+0xac>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11c      	bne.n	8001fd4 <timer_1_128+0x74>
			f_Time500ms = TRUE;
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <timer_1_128+0xb0>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	7011      	strb	r1, [r2, #0]
			CntToSec ^= 1;
 8001fa0:	491c      	ldr	r1, [pc, #112]	; (8002014 <timer_1_128+0xb4>)
 8001fa2:	780a      	ldrb	r2, [r1, #0]
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	4042      	eors	r2, r0
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	700a      	strb	r2, [r1, #0]
			if(CntToSec == 0){
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d111      	bne.n	8001fd4 <timer_1_128+0x74>
				CntSec++;
 8001fb0:	4919      	ldr	r1, [pc, #100]	; (8002018 <timer_1_128+0xb8>)
 8001fb2:	680a      	ldr	r2, [r1, #0]
 8001fb4:	3201      	adds	r2, #1
 8001fb6:	600a      	str	r2, [r1, #0]
				CntTo3s++;
 8001fb8:	4918      	ldr	r1, [pc, #96]	; (800201c <timer_1_128+0xbc>)
 8001fba:	780a      	ldrb	r2, [r1, #0]
 8001fbc:	3201      	adds	r2, #1
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	700a      	strb	r2, [r1, #0]
				if(CntTo3s == 3){// 2 секунды
 8001fc2:	2a03      	cmp	r2, #3
 8001fc4:	d00b      	beq.n	8001fde <timer_1_128+0x7e>
				CntTo2min++;
 8001fc6:	4916      	ldr	r1, [pc, #88]	; (8002020 <timer_1_128+0xc0>)
 8001fc8:	780a      	ldrb	r2, [r1, #0]
 8001fca:	3201      	adds	r2, #1
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	700a      	strb	r2, [r1, #0]
				if(CntTo2min == 120){// 2 минуты
 8001fd0:	2a78      	cmp	r2, #120	; 0x78
 8001fd2:	d00b      	beq.n	8001fec <timer_1_128+0x8c>
		CntTo500ms ^= 1;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	; (800200c <timer_1_128+0xac>)
 8001fda:	7013      	strb	r3, [r2, #0]
}
 8001fdc:	e7d2      	b.n	8001f84 <timer_1_128+0x24>
					CntTo3s = 0;
 8001fde:	000a      	movs	r2, r1
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	7011      	strb	r1, [r2, #0]
					f_Time3s = TRUE;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <timer_1_128+0xc4>)
 8001fe6:	3101      	adds	r1, #1
 8001fe8:	7011      	strb	r1, [r2, #0]
 8001fea:	e7ec      	b.n	8001fc6 <timer_1_128+0x66>
					CntTo2min = 0;
 8001fec:	000a      	movs	r2, r1
 8001fee:	2100      	movs	r1, #0
 8001ff0:	7011      	strb	r1, [r2, #0]
					f_Time2min = TRUE;
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <timer_1_128+0xc8>)
 8001ff4:	3101      	adds	r1, #1
 8001ff6:	7011      	strb	r1, [r2, #0]
 8001ff8:	e7ec      	b.n	8001fd4 <timer_1_128+0x74>
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	20000188 	.word	0x20000188
 8002000:	200004f4 	.word	0x200004f4
 8002004:	20000628 	.word	0x20000628
 8002008:	20000191 	.word	0x20000191
 800200c:	20000629 	.word	0x20000629
 8002010:	20000192 	.word	0x20000192
 8002014:	20000186 	.word	0x20000186
 8002018:	20000180 	.word	0x20000180
 800201c:	20000185 	.word	0x20000185
 8002020:	20000184 	.word	0x20000184
 8002024:	20000029 	.word	0x20000029
 8002028:	20000028 	.word	0x20000028

0800202c <serviceTimerStart>:
	}

}

void serviceTimerStart(uint16_t time){
	serviceTimer = time;
 800202c:	4b01      	ldr	r3, [pc, #4]	; (8002034 <serviceTimerStart+0x8>)
 800202e:	8018      	strh	r0, [r3, #0]
}
 8002030:	4770      	bx	lr
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	20000638 	.word	0x20000638

08002038 <serviceTimerStop>:

void serviceTimerStop(void){
 8002038:	b510      	push	{r4, lr}

	mbServiceMode = FALSE;
 800203a:	2300      	movs	r3, #0
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <serviceTimerStop+0x28>)
 800203e:	7013      	strb	r3, [r2, #0]
	dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 8002040:	4808      	ldr	r0, [pc, #32]	; (8002064 <serviceTimerStop+0x2c>)
 8002042:	218c      	movs	r1, #140	; 0x8c
 8002044:	0049      	lsls	r1, r1, #1
 8002046:	5a42      	ldrh	r2, [r0, r1]
 8002048:	2404      	movs	r4, #4
 800204a:	43a2      	bics	r2, r4
 800204c:	5242      	strh	r2, [r0, r1]
	mbHoldDevStatus = dev.Status;
 800204e:	4906      	ldr	r1, [pc, #24]	; (8002068 <serviceTimerStop+0x30>)
 8002050:	800a      	strh	r2, [r1, #0]

	mbUnlock = FALSE;
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <serviceTimerStop+0x34>)
 8002054:	7013      	strb	r3, [r2, #0]
	AccessCode = 0;
 8002056:	4a06      	ldr	r2, [pc, #24]	; (8002070 <serviceTimerStop+0x38>)
 8002058:	8013      	strh	r3, [r2, #0]

	serviceTimer = 0;
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <serviceTimerStop+0x3c>)
 800205c:	8013      	strh	r3, [r2, #0]
}
 800205e:	bd10      	pop	{r4, pc}
 8002060:	2000063a 	.word	0x2000063a
 8002064:	2000050c 	.word	0x2000050c
 8002068:	2000063c 	.word	0x2000063c
 800206c:	20000644 	.word	0x20000644
 8002070:	20000640 	.word	0x20000640
 8002074:	20000638 	.word	0x20000638

08002078 <serviceTimerProc>:
void serviceTimerProc(void){
 8002078:	b510      	push	{r4, lr}
	if(serviceTimer > 1){
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <serviceTimerProc+0x1c>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d903      	bls.n	800208a <serviceTimerProc+0x12>
		serviceTimer--;
 8002082:	3b01      	subs	r3, #1
 8002084:	4a03      	ldr	r2, [pc, #12]	; (8002094 <serviceTimerProc+0x1c>)
 8002086:	8013      	strh	r3, [r2, #0]
}
 8002088:	bd10      	pop	{r4, pc}
		if(serviceTimer == 1){
 800208a:	2b01      	cmp	r3, #1
 800208c:	d1fc      	bne.n	8002088 <serviceTimerProc+0x10>
			serviceTimerStop();
 800208e:	f7ff ffd3 	bl	8002038 <serviceTimerStop>
}
 8002092:	e7f9      	b.n	8002088 <serviceTimerProc+0x10>
 8002094:	20000638 	.word	0x20000638

08002098 <dev_set_config_default>:

#ifdef CONFIG_MIPEX
	//	dev.Config.TypeSensor = 0;
	//	dev.Config.Unit = 0;

	dev.Config.ValueLow = 0x0200|(1 << CFG_UNIT_VALUE_lel);
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <dev_set_config_default+0x18>)
 800209a:	2282      	movs	r2, #130	; 0x82
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	811a      	strh	r2, [r3, #8]
	dev.Config.ValueHigh = 10000;
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <dev_set_config_default+0x1c>)
 80020a2:	815a      	strh	r2, [r3, #10]

	dev.Config.ScaleKoef = 10;
 80020a4:	220a      	movs	r2, #10
 80020a6:	865a      	strh	r2, [r3, #50]	; 0x32
	dev.Config.FID = ADS_CONFIG_REG_PGA_1_024V;
 80020a8:	22c0      	movs	r2, #192	; 0xc0
 80020aa:	00d2      	lsls	r2, r2, #3
 80020ac:	86da      	strh	r2, [r3, #54]	; 0x36
#endif


}
 80020ae:	4770      	bx	lr
 80020b0:	2000050c 	.word	0x2000050c
 80020b4:	00002710 	.word	0x00002710

080020b8 <dev_init>:

void dev_init(void){

//	dev_set_config_default();

	dev.RegInput.cod_8216 = 8216;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <dev_init+0x24>)
 80020ba:	22d8      	movs	r2, #216	; 0xd8
 80020bc:	4908      	ldr	r1, [pc, #32]	; (80020e0 <dev_init+0x28>)
 80020be:	5299      	strh	r1, [r3, r2]

	dev.RegInput.VerSW = 0x0101;
 80020c0:	3202      	adds	r2, #2
 80020c2:	2102      	movs	r1, #2
 80020c4:	31ff      	adds	r1, #255	; 0xff
 80020c6:	5299      	strh	r1, [r3, r2]
	dev.RegInput.VerSW_Build = 0x0001;
 80020c8:	3ad9      	subs	r2, #217	; 0xd9
 80020ca:	3925      	subs	r1, #37	; 0x25
 80020cc:	525a      	strh	r2, [r3, r1]

	dev.Status = (1 << STATUS_BIT_MAIN_INIT);
 80020ce:	313c      	adds	r1, #60	; 0x3c
 80020d0:	525a      	strh	r2, [r3, r1]

	dev.RegInput.TimeToOffHeat = INIT_MODE_TIME;
 80020d2:	3204      	adds	r2, #4
 80020d4:	32ff      	adds	r2, #255	; 0xff
 80020d6:	39dc      	subs	r1, #220	; 0xdc
 80020d8:	5299      	strh	r1, [r3, r2]
}
 80020da:	4770      	bx	lr
 80020dc:	2000050c 	.word	0x2000050c
 80020e0:	00002018 	.word	0x00002018

080020e4 <dev_proc>:

}
#endif
//==============================================================================

void dev_proc(void){
 80020e4:	b510      	push	{r4, lr}

	if(dev.RegInput.TimeToOffHeat != 0)
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <dev_proc+0x5c>)
 80020e8:	2382      	movs	r3, #130	; 0x82
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	5ad3      	ldrh	r3, [r2, r3]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <dev_proc+0x1e>
		dev.RegInput.TimeToOffHeat = INIT_MODE_TIME - CntSec;
 80020f2:	4b14      	ldr	r3, [pc, #80]	; (8002144 <dev_proc+0x60>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	233c      	movs	r3, #60	; 0x3c
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	4911      	ldr	r1, [pc, #68]	; (8002140 <dev_proc+0x5c>)
 80020fc:	2282      	movs	r2, #130	; 0x82
 80020fe:	0052      	lsls	r2, r2, #1
 8002100:	528b      	strh	r3, [r1, r2]

	// Если окончен режим инициализации
	if(((dev.Status & (1 << STATUS_BIT_MAIN_INIT)) != 0) && (CntSec >= INIT_MODE_TIME)){
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <dev_proc+0x5c>)
 8002104:	238c      	movs	r3, #140	; 0x8c
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	5ad3      	ldrh	r3, [r2, r3]
 800210a:	07da      	lsls	r2, r3, #31
 800210c:	d50f      	bpl.n	800212e <dev_proc+0x4a>
 800210e:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <dev_proc+0x60>)
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	2a3b      	cmp	r2, #59	; 0x3b
 8002114:	dd0b      	ble.n	800212e <dev_proc+0x4a>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_INIT);
 8002116:	2201      	movs	r2, #1
 8002118:	4393      	bics	r3, r2
		dev.Status |= (1 << STATUS_BIT_MAIN_RUN);
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <dev_proc+0x5c>)
 800211c:	2102      	movs	r1, #2
 800211e:	430b      	orrs	r3, r1
 8002120:	218c      	movs	r1, #140	; 0x8c
 8002122:	0049      	lsls	r1, r1, #1
 8002124:	5253      	strh	r3, [r2, r1]
		dev.RegInput.TimeToOffHeat = 0;
 8002126:	2382      	movs	r3, #130	; 0x82
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2100      	movs	r1, #0
 800212c:	52d1      	strh	r1, [r2, r3]
	}

	serviceTimerProc();
 800212e:	f7ff ffa3 	bl	8002078 <serviceTimerProc>

	mbHoldDevStatus = dev.Status;
 8002132:	4a03      	ldr	r2, [pc, #12]	; (8002140 <dev_proc+0x5c>)
 8002134:	238c      	movs	r3, #140	; 0x8c
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	5ad2      	ldrh	r2, [r2, r3]
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <dev_proc+0x64>)
 800213c:	801a      	strh	r2, [r3, #0]
		d_printf("\n\r");
		d_printf("(%04X %04X) %04X %04X", ADC_in_Temper, ADC_in[0], ADC_in[1], ADC_in[2]);
		d_printf(" |  (TV:%05d) TIA:%05d V:%05d T_LMP:%02d (T_MPU:%02d)", ADC_in_mVolt_Temper, ADC_in_mVolt_TIA,  ADC_in_RefVoltage, LMP_temper, ADC_in_Celsius);
#endif

}
 800213e:	bd10      	pop	{r4, pc}
 8002140:	2000050c 	.word	0x2000050c
 8002144:	20000180 	.word	0x20000180
 8002148:	2000063c 	.word	0x2000063c

0800214c <Adc_Eoc_Callback>:
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <Adc_Eoc_Callback+0x38>)
 800214e:	681b      	ldr	r3, [r3, #0]

//==============================================================================

void Adc_Eoc_Callback(void){

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	d502      	bpl.n	800215a <Adc_Eoc_Callback+0xe>
		adc_cnt = 2;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <Adc_Eoc_Callback+0x3c>)
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
	}

	ADC_in[adc_cnt] = LL_ADC_REG_ReadConversionData12(ADC1);
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <Adc_Eoc_Callback+0x3c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <Adc_Eoc_Callback+0x38>)
 8002160:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8002162:	005a      	lsls	r2, r3, #1
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <Adc_Eoc_Callback+0x40>)
 8002166:	5288      	strh	r0, [r1, r2]

	if(adc_cnt >= 2){
 8002168:	2b01      	cmp	r3, #1
 800216a:	d906      	bls.n	800217a <Adc_Eoc_Callback+0x2e>

		f_AdcCycleEnd = TRUE;
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <Adc_Eoc_Callback+0x44>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
		adc_cnt = 0;
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <Adc_Eoc_Callback+0x3c>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]

		adc_cnt++;

	}

}
 8002178:	4770      	bx	lr
		adc_cnt++;
 800217a:	3301      	adds	r3, #1
 800217c:	4a02      	ldr	r2, [pc, #8]	; (8002188 <Adc_Eoc_Callback+0x3c>)
 800217e:	7013      	strb	r3, [r2, #0]
}
 8002180:	e7fa      	b.n	8002178 <Adc_Eoc_Callback+0x2c>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	40012400 	.word	0x40012400
 8002188:	20000190 	.word	0x20000190
 800218c:	20000504 	.word	0x20000504
 8002190:	2000062b 	.word	0x2000062b

08002194 <Adc_read_data>:

}
#endif

#ifdef CONFIG_MIPEX
void Adc_read_data(void){
 8002194:	b570      	push	{r4, r5, r6, lr}
 8002196:	b082      	sub	sp, #8
	ADC_in_RefVoltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_in[1], LL_ADC_RESOLUTION_12B);
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <Adc_read_data+0xb4>)
 800219a:	8818      	ldrh	r0, [r3, #0]
 800219c:	4c2b      	ldr	r4, [pc, #172]	; (800224c <Adc_read_data+0xb8>)
 800219e:	4360      	muls	r0, r4
 80021a0:	4d2b      	ldr	r5, [pc, #172]	; (8002250 <Adc_read_data+0xbc>)
 80021a2:	8869      	ldrh	r1, [r5, #2]
 80021a4:	f7fd ffc2 	bl	800012c <__udivsi3>
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <Adc_read_data+0xc0>)
 80021aa:	6018      	str	r0, [r3, #0]
	ADC_in_Celsius = 10 * __LL_ADC_CALC_TEMPERATURE(ADC_in_RefVoltage, ADC_in[2], LL_ADC_RESOLUTION_12B);
 80021ac:	88ab      	ldrh	r3, [r5, #4]
 80021ae:	4358      	muls	r0, r3
 80021b0:	0021      	movs	r1, r4
 80021b2:	f7fd ffbb 	bl	800012c <__udivsi3>
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <Adc_read_data+0xc4>)
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	1a83      	subs	r3, r0, r2
 80021bc:	2064      	movs	r0, #100	; 0x64
 80021be:	4358      	muls	r0, r3
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <Adc_read_data+0xc8>)
 80021c2:	8819      	ldrh	r1, [r3, #0]
 80021c4:	1a89      	subs	r1, r1, r2
 80021c6:	f7fe f83b 	bl	8000240 <__divsi3>
 80021ca:	0083      	lsls	r3, r0, #2
 80021cc:	18c0      	adds	r0, r0, r3
 80021ce:	0040      	lsls	r0, r0, #1
 80021d0:	302d      	adds	r0, #45	; 0x2d
 80021d2:	30ff      	adds	r0, #255	; 0xff
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <Adc_read_data+0xcc>)
 80021d6:	8018      	strh	r0, [r3, #0]

	// 2 минуты
	if(f_Time2min){
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <Adc_read_data+0xd0>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <Adc_read_data+0x58>
	d_printf("MSIFreqCalib %d", MSIFrequencyCalib);
	d_printf("\n\r");
#endif
	}
	// 3 секунды
	if(f_Time3s){
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <Adc_read_data+0xd4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <Adc_read_data+0x68>
	d_printf("\n\r");
#endif

//	SetGasValueMipex();

}
 80021e8:	b002      	add	sp, #8
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
		f_Time2min = FALSE;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <Adc_read_data+0xd0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
		MSI_CalibrateFixedError(20000, &MSIFrequencyCalib);
 80021f2:	a901      	add	r1, sp, #4
 80021f4:	481d      	ldr	r0, [pc, #116]	; (800226c <Adc_read_data+0xd8>)
 80021f6:	f000 fcf5 	bl	8002be4 <MSI_CalibrateFixedError>
 80021fa:	e7f1      	b.n	80021e0 <Adc_read_data+0x4c>
		f_Time3s = FALSE;
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <Adc_read_data+0xd4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
		Mipex_transmit_commmand(COMMAND_DATAE2);
 8002202:	200a      	movs	r0, #10
 8002204:	f7ff fdcc 	bl	8001da0 <Mipex_transmit_commmand>
		if(dev.Config.Unit & (1 << CFG_UNIT_VALUE_lel)){
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <Adc_read_data+0xdc>)
 800220a:	88db      	ldrh	r3, [r3, #6]
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	d508      	bpl.n	8002222 <Adc_read_data+0x8e>
			dev.RegInput.Value = (dev.RegInput.Value*dev.Config.ScaleKoef)/10;
 8002210:	4c17      	ldr	r4, [pc, #92]	; (8002270 <Adc_read_data+0xdc>)
 8002212:	25e2      	movs	r5, #226	; 0xe2
 8002214:	5b63      	ldrh	r3, [r4, r5]
 8002216:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8002218:	4358      	muls	r0, r3
 800221a:	210a      	movs	r1, #10
 800221c:	f7fe f810 	bl	8000240 <__divsi3>
 8002220:	5360      	strh	r0, [r4, r5]
void Adc_read_data(void){
 8002222:	2400      	movs	r4, #0
 8002224:	e008      	b.n	8002238 <Adc_read_data+0xa4>
				dev.RegInput.Value /= 10;
 8002226:	4e12      	ldr	r6, [pc, #72]	; (8002270 <Adc_read_data+0xdc>)
 8002228:	25e2      	movs	r5, #226	; 0xe2
 800222a:	5b70      	ldrh	r0, [r6, r5]
 800222c:	210a      	movs	r1, #10
 800222e:	f7fd ff7d 	bl	800012c <__udivsi3>
 8002232:	5370      	strh	r0, [r6, r5]
			for(uint8_t i = disc; i < MIPEX_DISC; i++){
 8002234:	3401      	adds	r4, #1
 8002236:	b2e4      	uxtb	r4, r4
 8002238:	2c01      	cmp	r4, #1
 800223a:	d9f4      	bls.n	8002226 <Adc_read_data+0x92>
		dev.RegInput.TempSensor = ADC_in_Celsius;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <Adc_read_data+0xcc>)
 800223e:	8819      	ldrh	r1, [r3, #0]
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <Adc_read_data+0xdc>)
 8002242:	23e8      	movs	r3, #232	; 0xe8
 8002244:	52d1      	strh	r1, [r2, r3]
}
 8002246:	e7cf      	b.n	80021e8 <Adc_read_data+0x54>
 8002248:	1ff80078 	.word	0x1ff80078
 800224c:	00000bb8 	.word	0x00000bb8
 8002250:	20000504 	.word	0x20000504
 8002254:	20000024 	.word	0x20000024
 8002258:	1ff8007a 	.word	0x1ff8007a
 800225c:	1ff8007e 	.word	0x1ff8007e
 8002260:	2000062c 	.word	0x2000062c
 8002264:	20000028 	.word	0x20000028
 8002268:	20000029 	.word	0x20000029
 800226c:	00004e20 	.word	0x00004e20
 8002270:	2000050c 	.word	0x2000050c

08002274 <mb_crc>:
}

//==============================================================================

uint16_t mb_crc(uint8_t *buf, int len)
{
 8002274:	b530      	push	{r4, r5, lr}
 8002276:	0005      	movs	r5, r0
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++)
 8002278:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 800227a:	480a      	ldr	r0, [pc, #40]	; (80022a4 <mb_crc+0x30>)
	for (int pos = 0; pos < len; pos++)
 800227c:	e00b      	b.n	8002296 <mb_crc+0x22>
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
				crc >>= 1;
 800227e:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {
 8002280:	3b01      	subs	r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d006      	beq.n	8002294 <mb_crc+0x20>
			if ((crc & 0x0001) != 0) {
 8002286:	07c2      	lsls	r2, r0, #31
 8002288:	d5f9      	bpl.n	800227e <mb_crc+0xa>
				crc >>= 1;
 800228a:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <mb_crc+0x34>)
 800228e:	4050      	eors	r0, r2
 8002290:	b280      	uxth	r0, r0
 8002292:	e7f5      	b.n	8002280 <mb_crc+0xc>
	for (int pos = 0; pos < len; pos++)
 8002294:	3401      	adds	r4, #1
 8002296:	428c      	cmp	r4, r1
 8002298:	da03      	bge.n	80022a2 <mb_crc+0x2e>
		crc ^= (uint16_t)buf[pos];
 800229a:	5d2b      	ldrb	r3, [r5, r4]
 800229c:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {
 800229e:	2308      	movs	r3, #8
 80022a0:	e7ef      	b.n	8002282 <mb_crc+0xe>
		}
	}

	return crc;
}
 80022a2:	bd30      	pop	{r4, r5, pc}
 80022a4:	0000ffff 	.word	0x0000ffff
 80022a8:	ffffa001 	.word	0xffffa001

080022ac <modbusSet>:

//==============================================================================

void modbusSet(void){

	if(mbUnlock){
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <modbusSet+0x4c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d014      	beq.n	80022de <modbusSet+0x32>
		AccessCode = 1;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <modbusSet+0x50>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	801a      	strh	r2, [r3, #0]
	else{
		AccessCode = 0;
	}


	if(mbServiceMode){
 80022ba:	4b11      	ldr	r3, [pc, #68]	; (8002300 <modbusSet+0x54>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d011      	beq.n	80022e6 <modbusSet+0x3a>
		dev.Status |= (1 << STATUS_BIT_MAIN_MODE);
 80022c2:	4910      	ldr	r1, [pc, #64]	; (8002304 <modbusSet+0x58>)
 80022c4:	228c      	movs	r2, #140	; 0x8c
 80022c6:	0052      	lsls	r2, r2, #1
 80022c8:	5a8b      	ldrh	r3, [r1, r2]
 80022ca:	2004      	movs	r0, #4
 80022cc:	4303      	orrs	r3, r0
 80022ce:	528b      	strh	r3, [r1, r2]
	}else{
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
	}

	mbHoldDevStatus = dev.Status;
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <modbusSet+0x58>)
 80022d2:	238c      	movs	r3, #140	; 0x8c
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	5ad2      	ldrh	r2, [r2, r3]
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <modbusSet+0x5c>)
 80022da:	801a      	strh	r2, [r3, #0]

}
 80022dc:	4770      	bx	lr
		AccessCode = 0;
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <modbusSet+0x50>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e7e9      	b.n	80022ba <modbusSet+0xe>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 80022e6:	4907      	ldr	r1, [pc, #28]	; (8002304 <modbusSet+0x58>)
 80022e8:	228c      	movs	r2, #140	; 0x8c
 80022ea:	0052      	lsls	r2, r2, #1
 80022ec:	5a8b      	ldrh	r3, [r1, r2]
 80022ee:	2004      	movs	r0, #4
 80022f0:	4383      	bics	r3, r0
 80022f2:	528b      	strh	r3, [r1, r2]
 80022f4:	e7ec      	b.n	80022d0 <modbusSet+0x24>
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	20000644 	.word	0x20000644
 80022fc:	20000640 	.word	0x20000640
 8002300:	2000063a 	.word	0x2000063a
 8002304:	2000050c 	.word	0x2000050c
 8002308:	2000063c 	.word	0x2000063c

0800230c <__CMD_PUT_WORD>:

//==============================================================================

void __CMD_PUT_WORD(uint16_t DATA)
{
	Value[0] = HIBYTE(DATA);
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__CMD_PUT_WORD+0x34>)
 800230e:	680b      	ldr	r3, [r1, #0]
 8002310:	0a02      	lsrs	r2, r0, #8
 8002312:	701a      	strb	r2, [r3, #0]
	Value[1] = LOBYTE(DATA);
 8002314:	7058      	strb	r0, [r3, #1]

	(*CountByte) += 2;		Count --;	Value +=2;	AnswerLen += 2;
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <__CMD_PUT_WORD+0x38>)
 8002318:	6810      	ldr	r0, [r2, #0]
 800231a:	7802      	ldrb	r2, [r0, #0]
 800231c:	3202      	adds	r2, #2
 800231e:	7002      	strb	r2, [r0, #0]
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <__CMD_PUT_WORD+0x3c>)
 8002322:	8802      	ldrh	r2, [r0, #0]
 8002324:	3a01      	subs	r2, #1
 8002326:	8002      	strh	r2, [r0, #0]
 8002328:	3302      	adds	r3, #2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <__CMD_PUT_WORD+0x40>)
 800232e:	7813      	ldrb	r3, [r2, #0]
 8002330:	3302      	adds	r3, #2
 8002332:	7013      	strb	r3, [r2, #0]
	Address ++;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <__CMD_PUT_WORD+0x44>)
 8002336:	8813      	ldrh	r3, [r2, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	8013      	strh	r3, [r2, #0]
}
 800233c:	4770      	bx	lr
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	200001a4 	.word	0x200001a4
 8002344:	2000019c 	.word	0x2000019c
 8002348:	20000198 	.word	0x20000198
 800234c:	20000196 	.word	0x20000196
 8002350:	20000194 	.word	0x20000194

08002354 <CmdFunc3>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Чтение группы регистров HOLD

uint32_t CmdFunc3(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002354:	b510      	push	{r4, lr}
 8002356:	0014      	movs	r4, r2
	//	tmp = 0;
	//	wModeCalib = st_dgs_state.ModeCalib;

	out[0] = mas[0];	// Адрес устройства
 8002358:	7803      	ldrb	r3, [r0, #0]
 800235a:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 800235c:	7843      	ldrb	r3, [r0, #1]
 800235e:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);	// Адрес начального регистра
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <CmdFunc3+0xb4>)
 8002362:	7882      	ldrb	r2, [r0, #2]
 8002364:	705a      	strb	r2, [r3, #1]
 8002366:	78c2      	ldrb	r2, [r0, #3]
 8002368:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);	// Количество регистров
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <CmdFunc3+0xb8>)
 800236c:	7902      	ldrb	r2, [r0, #4]
 800236e:	705a      	strb	r2, [r3, #1]
 8002370:	7942      	ldrb	r2, [r0, #5]
 8002372:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);	// Выходной поток
 8002374:	1ce1      	adds	r1, r4, #3
 8002376:	4a26      	ldr	r2, [pc, #152]	; (8002410 <CmdFunc3+0xbc>)
 8002378:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);		// Счётчик
 800237a:	1ca1      	adds	r1, r4, #2
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <CmdFunc3+0xc0>)
 800237e:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;				// Длина ответа (в байтах)
 8002380:	4a25      	ldr	r2, [pc, #148]	; (8002418 <CmdFunc3+0xc4>)
 8002382:	2103      	movs	r1, #3
 8002384:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 8002386:	2200      	movs	r2, #0
 8002388:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 800238a:	881a      	ldrh	r2, [r3, #0]
 800238c:	1e53      	subs	r3, r2, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b7c      	cmp	r3, #124	; 0x7c
 8002392:	d814      	bhi.n	80023be <CmdFunc3+0x6a>
	}
	//------------------------------------------------------------------------------------------------------------------
	do
	{
#if DEF_REG_ADR_BASE_x03 > 0
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <CmdFunc3+0xb4>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	0149      	lsls	r1, r1, #5
 800239c:	428b      	cmp	r3, r1
 800239e:	d323      	bcc.n	80023e8 <CmdFunc3+0x94>
#endif
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80023a0:	491e      	ldr	r1, [pc, #120]	; (800241c <CmdFunc3+0xc8>)
 80023a2:	428b      	cmp	r3, r1
 80023a4:	d820      	bhi.n	80023e8 <CmdFunc3+0x94>
		if( Count > DEF_REG_CNT_x03 ) break;
 80023a6:	2a70      	cmp	r2, #112	; 0x70
 80023a8:	d81e      	bhi.n	80023e8 <CmdFunc3+0x94>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80023aa:	189a      	adds	r2, r3, r2
 80023ac:	491c      	ldr	r1, [pc, #112]	; (8002420 <CmdFunc3+0xcc>)
 80023ae:	428a      	cmp	r2, r1
 80023b0:	dc1a      	bgt.n	80023e8 <CmdFunc3+0x94>
#if DEF_REG_ADR_BASE_x03 > 0
		Address -= DEF_REG_ADR_BASE_x03;
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <CmdFunc3+0xd0>)
 80023b4:	4694      	mov	ip, r2
 80023b6:	4463      	add	r3, ip
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <CmdFunc3+0xb4>)
 80023ba:	8013      	strh	r3, [r2, #0]
		//#define MB_READ_DBG

#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 3 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		while( Count )
 80023bc:	e010      	b.n	80023e0 <CmdFunc3+0x8c>
		out[1] |= 0x80;
 80023be:	7862      	ldrb	r2, [r4, #1]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	425b      	negs	r3, r3
 80023c4:	4313      	orrs	r3, r2
 80023c6:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80023c8:	2302      	movs	r3, #2
 80023ca:	70a3      	strb	r3, [r4, #2]
		return(3);
 80023cc:	2003      	movs	r0, #3
 80023ce:	e011      	b.n	80023f4 <CmdFunc3+0xa0>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x03[ Address ].pVar);
#endif
			CMD_PUT_WORD( *reg_x03[ Address ].pVar );
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <CmdFunc3+0xb4>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4a14      	ldr	r2, [pc, #80]	; (8002428 <CmdFunc3+0xd4>)
 80023d8:	589b      	ldr	r3, [r3, r2]
 80023da:	8818      	ldrh	r0, [r3, #0]
 80023dc:	f7ff ff96 	bl	800230c <__CMD_PUT_WORD>
		while( Count )
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <CmdFunc3+0xb8>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f3      	bne.n	80023d0 <CmdFunc3+0x7c>
		}

	} while(0);
	//------------------------------------------------------------------------------------------------------------------
	if( Count )
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <CmdFunc3+0xb8>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <CmdFunc3+0xa2>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return( AnswerLen );
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <CmdFunc3+0xc4>)
 80023f2:	7818      	ldrb	r0, [r3, #0]
}
 80023f4:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 80023f6:	7862      	ldrb	r2, [r4, #1]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	425b      	negs	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002400:	2302      	movs	r3, #2
 8002402:	70a3      	strb	r3, [r4, #2]
		return(3);
 8002404:	2003      	movs	r0, #3
 8002406:	e7f5      	b.n	80023f4 <CmdFunc3+0xa0>
 8002408:	20000194 	.word	0x20000194
 800240c:	20000198 	.word	0x20000198
 8002410:	200001a4 	.word	0x200001a4
 8002414:	2000019c 	.word	0x2000019c
 8002418:	20000196 	.word	0x20000196
 800241c:	0000106f 	.word	0x0000106f
 8002420:	00001070 	.word	0x00001070
 8002424:	fffff000 	.word	0xfffff000
 8002428:	0800402c 	.word	0x0800402c

0800242c <CmdFunc4>:

//======================================================================================================================================
// Чтение группы регистров INPUT

uint32_t CmdFunc4(uint8_t *mas, uint32_t len, uint8_t *out)
{
 800242c:	b510      	push	{r4, lr}
 800242e:	0014      	movs	r4, r2

	//	tmp = 0;
	out[0] = mas[0];	// Адрес устройства
 8002430:	7803      	ldrb	r3, [r0, #0]
 8002432:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 8002434:	7843      	ldrb	r3, [r0, #1]
 8002436:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);		// Адрес начального регистра
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <CmdFunc4+0xa0>)
 800243a:	7882      	ldrb	r2, [r0, #2]
 800243c:	705a      	strb	r2, [r3, #1]
 800243e:	78c2      	ldrb	r2, [r0, #3]
 8002440:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);		// Количество регистров
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <CmdFunc4+0xa4>)
 8002444:	7902      	ldrb	r2, [r0, #4]
 8002446:	705a      	strb	r2, [r3, #1]
 8002448:	7942      	ldrb	r2, [r0, #5]
 800244a:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);		// Выходной поток
 800244c:	1ce1      	adds	r1, r4, #3
 800244e:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <CmdFunc4+0xa8>)
 8002450:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);			// Счётчик
 8002452:	1ca1      	adds	r1, r4, #2
 8002454:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <CmdFunc4+0xac>)
 8002456:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;					// Длина ответа (в байтах)
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <CmdFunc4+0xb0>)
 800245a:	2103      	movs	r1, #3
 800245c:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 800245e:	2200      	movs	r2, #0
 8002460:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	1e53      	subs	r3, r2, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b7c      	cmp	r3, #124	; 0x7c
 800246a:	d815      	bhi.n	8002498 <CmdFunc4+0x6c>
	{
		/*if( Count > DEF_REG_CNT_x04 ) break;
		if( (Address + Count) > DEF_REG_CNT_x04 ) break;*/

		if( Address < DEF_REG_ADR_BASE_x04 ) break;
		if( Address >= (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <CmdFunc4+0xa0>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	2b31      	cmp	r3, #49	; 0x31
 8002472:	d81a      	bhi.n	80024aa <CmdFunc4+0x7e>
		if( Count > DEF_REG_CNT_x04 ) break;
 8002474:	2a32      	cmp	r2, #50	; 0x32
 8002476:	d818      	bhi.n	80024aa <CmdFunc4+0x7e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 8002478:	189a      	adds	r2, r3, r2
 800247a:	2a32      	cmp	r2, #50	; 0x32
 800247c:	dc15      	bgt.n	80024aa <CmdFunc4+0x7e>
#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 4 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		Address -= DEF_REG_ADR_BASE_x04;

		while( Count )
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <CmdFunc4+0xa4>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d011      	beq.n	80024aa <CmdFunc4+0x7e>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x04[ Address ]);
#endif
			CMD_PUT_WORD( *reg_x04[ Address ] );
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <CmdFunc4+0xa0>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <CmdFunc4+0xb4>)
 800248e:	589b      	ldr	r3, [r3, r2]
 8002490:	8818      	ldrh	r0, [r3, #0]
 8002492:	f7ff ff3b 	bl	800230c <__CMD_PUT_WORD>
 8002496:	e7f2      	b.n	800247e <CmdFunc4+0x52>
		out[1] |= 0x80;
 8002498:	7862      	ldrb	r2, [r4, #1]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	425b      	negs	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80024a2:	2302      	movs	r3, #2
 80024a4:	70a3      	strb	r3, [r4, #2]
		return(3);
 80024a6:	2003      	movs	r0, #3
 80024a8:	e005      	b.n	80024b6 <CmdFunc4+0x8a>
		}
	} while(0);
	//-----------------------------------------------------------------------------------------------------------------
	if(Count)
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <CmdFunc4+0xa4>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <CmdFunc4+0x8c>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return(AnswerLen);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <CmdFunc4+0xb0>)
 80024b4:	7818      	ldrb	r0, [r3, #0]
}
 80024b6:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 80024b8:	7862      	ldrb	r2, [r4, #1]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	425b      	negs	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80024c2:	2302      	movs	r3, #2
 80024c4:	70a3      	strb	r3, [r4, #2]
		return(3);
 80024c6:	2003      	movs	r0, #3
 80024c8:	e7f5      	b.n	80024b6 <CmdFunc4+0x8a>
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	20000194 	.word	0x20000194
 80024d0:	20000198 	.word	0x20000198
 80024d4:	200001a4 	.word	0x200001a4
 80024d8:	2000019c 	.word	0x2000019c
 80024dc:	20000196 	.word	0x20000196
 80024e0:	080043ac 	.word	0x080043ac

080024e4 <__CMD_SAVE_WORD>:
void __CMD_SAVE_WORD(TVAR *var)
{
#define DATA	*(var->pVar)
#define SAVE	var->bSave

	HIBYTE(DATA)	= Value[0];
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <__CMD_SAVE_WORD+0x34>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	6801      	ldr	r1, [r0, #0]
 80024ec:	704a      	strb	r2, [r1, #1]
	LOBYTE(DATA)	= Value[1];
 80024ee:	785a      	ldrb	r2, [r3, #1]
 80024f0:	6801      	ldr	r1, [r0, #0]
 80024f2:	700a      	strb	r2, [r1, #0]
	if(SAVE) Save	= SAVE;
 80024f4:	7902      	ldrb	r2, [r0, #4]
 80024f6:	2a00      	cmp	r2, #0
 80024f8:	d001      	beq.n	80024fe <__CMD_SAVE_WORD+0x1a>
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__CMD_SAVE_WORD+0x38>)
 80024fc:	700a      	strb	r2, [r1, #0]
	Address ++;
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__CMD_SAVE_WORD+0x3c>)
 8002500:	880a      	ldrh	r2, [r1, #0]
 8002502:	3201      	adds	r2, #1
 8002504:	800a      	strh	r2, [r1, #0]
	Count --;
 8002506:	4907      	ldr	r1, [pc, #28]	; (8002524 <__CMD_SAVE_WORD+0x40>)
 8002508:	880a      	ldrh	r2, [r1, #0]
 800250a:	3a01      	subs	r2, #1
 800250c:	800a      	strh	r2, [r1, #0]
	Value += 2;
 800250e:	3302      	adds	r3, #2
 8002510:	4a01      	ldr	r2, [pc, #4]	; (8002518 <__CMD_SAVE_WORD+0x34>)
 8002512:	6013      	str	r3, [r2, #0]

#undef DATA
#undef SAVE
}
 8002514:	4770      	bx	lr
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	200001a4 	.word	0x200001a4
 800251c:	200001a0 	.word	0x200001a0
 8002520:	20000194 	.word	0x20000194
 8002524:	20000198 	.word	0x20000198

08002528 <check_block>:
//======================================================================================================================================


// Защита от случайной порчи настроек

BOOL check_block(void){
 8002528:	b500      	push	{lr}
 800252a:	b083      	sub	sp, #12

	uint16_t tmp;

	if(		( !mbServiceMode && (Address != 0x1000)) || \
 800252c:	4b2a      	ldr	r3, [pc, #168]	; (80025d8 <check_block+0xb0>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <check_block+0x1e>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <check_block+0xb4>)
 8002536:	781b      	ldrb	r3, [r3, #0]
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <check_block+0x2a>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <check_block+0xb8>)
 800253e:	881a      	ldrh	r2, [r3, #0]
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <check_block+0xbc>)
 8002542:	429a      	cmp	r2, r3
 8002544:	d005      	beq.n	8002552 <check_block+0x2a>
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <check_block+0xb8>)
 8002548:	881a      	ldrh	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	015b      	lsls	r3, r3, #5
 800254e:	429a      	cmp	r2, r3
 8002550:	d13e      	bne.n	80025d0 <check_block+0xa8>
		return(FALSE);
	}

	// *}

	HIBYTE(tmp)	= Value[0];
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <check_block+0xc0>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	7811      	ldrb	r1, [r2, #0]
 8002558:	466b      	mov	r3, sp
 800255a:	71d9      	strb	r1, [r3, #7]
	LOBYTE(tmp)	= Value[1];
 800255c:	7852      	ldrb	r2, [r2, #1]
 800255e:	719a      	strb	r2, [r3, #6]

	if(Address == 0x1001){
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <check_block+0xb8>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <check_block+0xbc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d011      	beq.n	800258e <check_block+0x66>
			return(FALSE);
		}

	}

	if(Address == 0x1000){
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	0152      	lsls	r2, r2, #5
 800256e:	4293      	cmp	r3, r2
 8002570:	d022      	beq.n	80025b8 <check_block+0x90>
			serviceTimerStop();
		}

	}

	if( mbServiceMode || mbUnlock)
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <check_block+0xb0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d103      	bne.n	8002582 <check_block+0x5a>
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <check_block+0xb4>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d028      	beq.n	80025d4 <check_block+0xac>
	{ // Преобразователь в сервисном режиме, продлеваем время
		serviceTimerStart( SERVICE_TIME_MODBUS );
 8002582:	20f1      	movs	r0, #241	; 0xf1
 8002584:	f7ff fd52 	bl	800202c <serviceTimerStart>
	}


	return(TRUE);
 8002588:	2001      	movs	r0, #1
}
 800258a:	b003      	add	sp, #12
 800258c:	bd00      	pop	{pc}
		if((tmp == 0xFACD)){
 800258e:	466a      	mov	r2, sp
 8002590:	3206      	adds	r2, #6
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	4915      	ldr	r1, [pc, #84]	; (80025ec <check_block+0xc4>)
 8002596:	428a      	cmp	r2, r1
 8002598:	d005      	beq.n	80025a6 <check_block+0x7e>
		}else if(tmp == 0){
 800259a:	2a00      	cmp	r2, #0
 800259c:	d107      	bne.n	80025ae <check_block+0x86>
			mbUnlock = FALSE;
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <check_block+0xb4>)
 80025a0:	2100      	movs	r1, #0
 80025a2:	7011      	strb	r1, [r2, #0]
 80025a4:	e7e1      	b.n	800256a <check_block+0x42>
			mbUnlock = TRUE;
 80025a6:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <check_block+0xb4>)
 80025a8:	2101      	movs	r1, #1
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	e7dd      	b.n	800256a <check_block+0x42>
		}else if(!mbUnlock){
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <check_block+0xb4>)
 80025b0:	7810      	ldrb	r0, [r2, #0]
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d1d9      	bne.n	800256a <check_block+0x42>
 80025b6:	e7e8      	b.n	800258a <check_block+0x62>
		if( TESTBIT( tmp, STATUS_BIT_MAIN_MODE))
 80025b8:	466b      	mov	r3, sp
 80025ba:	3306      	adds	r3, #6
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	075b      	lsls	r3, r3, #29
 80025c0:	d503      	bpl.n	80025ca <check_block+0xa2>
			mbServiceMode = TRUE;
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <check_block+0xb0>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e7d3      	b.n	8002572 <check_block+0x4a>
			serviceTimerStop();
 80025ca:	f7ff fd35 	bl	8002038 <serviceTimerStop>
 80025ce:	e7d0      	b.n	8002572 <check_block+0x4a>
		return(FALSE);
 80025d0:	2000      	movs	r0, #0
 80025d2:	e7da      	b.n	800258a <check_block+0x62>
	return(TRUE);
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7d8      	b.n	800258a <check_block+0x62>
 80025d8:	2000063a 	.word	0x2000063a
 80025dc:	20000644 	.word	0x20000644
 80025e0:	20000194 	.word	0x20000194
 80025e4:	00001001 	.word	0x00001001
 80025e8:	200001a4 	.word	0x200001a4
 80025ec:	0000facd 	.word	0x0000facd

080025f0 <modbusCMD>:

//==============================================================================

void modbusCMD(void){
 80025f0:	b500      	push	{lr}
 80025f2:	b083      	sub	sp, #12

	uint16_t cmd;

	if(Address != 0x1001)
 80025f4:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <modbusCMD+0x84>)
 80025f6:	881a      	ldrh	r2, [r3, #0]
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <modbusCMD+0x88>)
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d121      	bne.n	8002642 <modbusCMD+0x52>
		return;

	HIBYTE(cmd)	= Value[0];
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <modbusCMD+0x8c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	7811      	ldrb	r1, [r2, #0]
 8002604:	466b      	mov	r3, sp
 8002606:	71d9      	strb	r1, [r3, #7]
	LOBYTE(cmd)	= Value[1];
 8002608:	7852      	ldrb	r2, [r2, #1]
 800260a:	719a      	strb	r2, [r3, #6]
	HIBYTE(cmd)	= Value[0];
 800260c:	3306      	adds	r3, #6

	switch(cmd){
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <modbusCMD+0x90>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d027      	beq.n	8002666 <modbusCMD+0x76>
 8002616:	d816      	bhi.n	8002646 <modbusCMD+0x56>
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <modbusCMD+0x94>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01c      	beq.n	8002658 <modbusCMD+0x68>
 800261e:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <modbusCMD+0x98>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d102      	bne.n	800262a <modbusCMD+0x3a>
		break;
#endif
		///000
#ifdef CONFIG_MIPEX
	case DEF_CODE_MODE_INIT_MIPEX:
		Mipex_Restart();
 8002624:	f7ff fc96 	bl	8001f54 <Mipex_Restart>
		break;
 8002628:	e00b      	b.n	8002642 <modbusCMD+0x52>
	switch(cmd){
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <modbusCMD+0x9c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <modbusCMD+0x52>
		d_printf("\n\rCalib Zero");
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <modbusCMD+0xa0>)
 8002632:	f7fe fe2f 	bl	8001294 <d_printf>
		Mipex_transmit_commmand(COMMAND_INIT);
 8002636:	2007      	movs	r0, #7
 8002638:	f7ff fbb2 	bl	8001da0 <Mipex_transmit_commmand>
		Mipex_transmit_commmand(COMMAND_ZERO2);
 800263c:	2008      	movs	r0, #8
 800263e:	f7ff fbaf 	bl	8001da0 <Mipex_transmit_commmand>
#endif
	default:
		break;
	}

}
 8002642:	b003      	add	sp, #12
 8002644:	bd00      	pop	{pc}
	switch(cmd){
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <modbusCMD+0xa4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00f      	beq.n	800266c <modbusCMD+0x7c>
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <modbusCMD+0xa8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d1f7      	bne.n	8002642 <modbusCMD+0x52>
		factory_config_read();
 8002652:	f7fe ff29 	bl	80014a8 <factory_config_read>
		break;
 8002656:	e7f4      	b.n	8002642 <modbusCMD+0x52>
		d_printf("\n\rCalib Conc");
 8002658:	4810      	ldr	r0, [pc, #64]	; (800269c <modbusCMD+0xac>)
 800265a:	f7fe fe1b 	bl	8001294 <d_printf>
		Mipex_transmit_commmand(COMMAND_CALB_AAAA);
 800265e:	2009      	movs	r0, #9
 8002660:	f7ff fb9e 	bl	8001da0 <Mipex_transmit_commmand>
		break;
 8002664:	e7ed      	b.n	8002642 <modbusCMD+0x52>
		factory_config_write();
 8002666:	f7fe ff15 	bl	8001494 <factory_config_write>
		break;
 800266a:	e7ea      	b.n	8002642 <modbusCMD+0x52>
		Mipex_repeater = 1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <modbusCMD+0xb0>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
		break;
 8002672:	e7e6      	b.n	8002642 <modbusCMD+0x52>
 8002674:	20000194 	.word	0x20000194
 8002678:	00001001 	.word	0x00001001
 800267c:	200001a4 	.word	0x200001a4
 8002680:	0000abce 	.word	0x0000abce
 8002684:	000064c4 	.word	0x000064c4
 8002688:	000093be 	.word	0x000093be
 800268c:	0000185d 	.word	0x0000185d
 8002690:	08003f44 	.word	0x08003f44
 8002694:	0000bc53 	.word	0x0000bc53
 8002698:	0000ce4b 	.word	0x0000ce4b
 800269c:	08003f54 	.word	0x08003f54
 80026a0:	200000b2 	.word	0x200000b2

080026a4 <CmdFunc6>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Запись одного регистра
uint32_t CmdFunc6(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	0004      	movs	r4, r0
 80026a8:	0015      	movs	r5, r2
	Address 	= TO_M_WORD(mas+2);			// Адрес сохраняемого регистра
 80026aa:	7883      	ldrb	r3, [r0, #2]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	78c2      	ldrb	r2, [r0, #3]
 80026b0:	189b      	adds	r3, r3, r2
 80026b2:	4a30      	ldr	r2, [pc, #192]	; (8002774 <CmdFunc6+0xd0>)
 80026b4:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[4]);			// Значение регистра
 80026b6:	1d02      	adds	r2, r0, #4
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <CmdFunc6+0xd4>)
 80026ba:	601a      	str	r2, [r3, #0]
	Count   	= 1;						// Количество регистров
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <CmdFunc6+0xd8>)
 80026be:	2201      	movs	r2, #1
 80026c0:	801a      	strh	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 80026c2:	3205      	adds	r2, #5
 80026c4:	0001      	movs	r1, r0
 80026c6:	0028      	movs	r0, r5
 80026c8:	f000 ff3c 	bl	8003544 <memcpy>
	Save = FALSE;
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <CmdFunc6+0xdc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
	{
		__NOP();
	} else
	 */

	if(!check_block()){
 80026d2:	f7ff ff29 	bl	8002528 <check_block>
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d108      	bne.n	80026ec <CmdFunc6+0x48>

		out[1] |= 0x80;
 80026da:	786a      	ldrb	r2, [r5, #1]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	425b      	negs	r3, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 80026e4:	2304      	movs	r3, #4
 80026e6:	70ab      	strb	r3, [r5, #2]
		return(3);
 80026e8:	3003      	adds	r0, #3
		stMain.bUpDate = TRUE;
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 80026ea:	bd70      	pop	{r4, r5, r6, pc}
	modbusCMD();
 80026ec:	f7ff ff80 	bl	80025f0 <modbusCMD>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 80026f0:	4b20      	ldr	r3, [pc, #128]	; (8002774 <CmdFunc6+0xd0>)
 80026f2:	881a      	ldrh	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d30a      	bcc.n	8002712 <CmdFunc6+0x6e>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <CmdFunc6+0xe0>)
 80026fe:	429a      	cmp	r2, r3
 8002700:	d807      	bhi.n	8002712 <CmdFunc6+0x6e>
		if( Count > DEF_REG_CNT_x03 ) break;
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <CmdFunc6+0xd8>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2b70      	cmp	r3, #112	; 0x70
 8002708:	d803      	bhi.n	8002712 <CmdFunc6+0x6e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 800270a:	18d3      	adds	r3, r2, r3
 800270c:	491e      	ldr	r1, [pc, #120]	; (8002788 <CmdFunc6+0xe4>)
 800270e:	428b      	cmp	r3, r1
 8002710:	dd0c      	ble.n	800272c <CmdFunc6+0x88>
	if( Count )
 8002712:	4b1a      	ldr	r3, [pc, #104]	; (800277c <CmdFunc6+0xd8>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d020      	beq.n	800275c <CmdFunc6+0xb8>
		out[1] |= 0x80;
 800271a:	786a      	ldrb	r2, [r5, #1]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	425b      	negs	r3, r3
 8002720:	4313      	orrs	r3, r2
 8002722:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002724:	2302      	movs	r3, #2
 8002726:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002728:	2003      	movs	r0, #3
 800272a:	e7de      	b.n	80026ea <CmdFunc6+0x46>
		Address -= DEF_REG_ADR_BASE_x03;
 800272c:	4b17      	ldr	r3, [pc, #92]	; (800278c <CmdFunc6+0xe8>)
 800272e:	469c      	mov	ip, r3
 8002730:	4462      	add	r2, ip
 8002732:	b292      	uxth	r2, r2
 8002734:	4e0f      	ldr	r6, [pc, #60]	; (8002774 <CmdFunc6+0xd0>)
 8002736:	8032      	strh	r2, [r6, #0]
		d_printf("\n\r%02x CMD Modbus 6 : write adr %03x : data ", mas[0], Address);
 8002738:	7821      	ldrb	r1, [r4, #0]
 800273a:	4815      	ldr	r0, [pc, #84]	; (8002790 <CmdFunc6+0xec>)
 800273c:	f7fe fdaa 	bl	8001294 <d_printf>
		d_printf(" %02x%02x", Value[0], Value[1]);
 8002740:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <CmdFunc6+0xd4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	7819      	ldrb	r1, [r3, #0]
 8002746:	785a      	ldrb	r2, [r3, #1]
 8002748:	4812      	ldr	r0, [pc, #72]	; (8002794 <CmdFunc6+0xf0>)
 800274a:	f7fe fda3 	bl	8001294 <d_printf>
		CMD_SAVE_WORD( &reg_x03[ Address ] );
 800274e:	8830      	ldrh	r0, [r6, #0]
 8002750:	00c0      	lsls	r0, r0, #3
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <CmdFunc6+0xf4>)
 8002754:	18c0      	adds	r0, r0, r3
 8002756:	f7ff fec5 	bl	80024e4 <__CMD_SAVE_WORD>
 800275a:	e7da      	b.n	8002712 <CmdFunc6+0x6e>
	modbusSet();
 800275c:	f7ff fda6 	bl	80022ac <modbusSet>
	if(Save)
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <CmdFunc6+0xdc>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <CmdFunc6+0xc8>
	return(6);
 8002768:	2006      	movs	r0, #6
 800276a:	e7be      	b.n	80026ea <CmdFunc6+0x46>
		eeprom_config_write();
 800276c:	f7fe fe72 	bl	8001454 <eeprom_config_write>
	return(6);
 8002770:	2006      	movs	r0, #6
 8002772:	e7ba      	b.n	80026ea <CmdFunc6+0x46>
 8002774:	20000194 	.word	0x20000194
 8002778:	200001a4 	.word	0x200001a4
 800277c:	20000198 	.word	0x20000198
 8002780:	200001a0 	.word	0x200001a0
 8002784:	0000106f 	.word	0x0000106f
 8002788:	00001070 	.word	0x00001070
 800278c:	fffff000 	.word	0xfffff000
 8002790:	08003f64 	.word	0x08003f64
 8002794:	08003f94 	.word	0x08003f94
 8002798:	0800402c 	.word	0x0800402c

0800279c <CmdFunc8>:
//======================================================================================================================================
// Эхо
uint32_t CmdFunc8(uint8_t *mas, uint32_t len, uint8_t *out)
{
 800279c:	b510      	push	{r4, lr}
 800279e:	0001      	movs	r1, r0
 80027a0:	0010      	movs	r0, r2
	memcpy((char*)out, (char*)mas, 6);
 80027a2:	2206      	movs	r2, #6
 80027a4:	f000 fece 	bl	8003544 <memcpy>
	return(6);
}
 80027a8:	2006      	movs	r0, #6
 80027aa:	bd10      	pop	{r4, pc}

080027ac <CmdFunc12>:
//======================================================================================================================================
// Передача памяти архива
uint32_t CmdFunc12(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80027ac:	b510      	push	{r4, lr}
 80027ae:	b082      	sub	sp, #8

	int i;
	uint16_t num_p;
	uint32_t ptr;

	CMD_LOAD_WORD(mas+2, num_p);		// Номер пакета
 80027b0:	466b      	mov	r3, sp
 80027b2:	7881      	ldrb	r1, [r0, #2]
 80027b4:	71d9      	strb	r1, [r3, #7]
 80027b6:	78c1      	ldrb	r1, [r0, #3]
 80027b8:	7199      	strb	r1, [r3, #6]
 80027ba:	3306      	adds	r3, #6

	if( num_p >=  (ARHIV_NUM_ITEMS * ARHIV_SIZE_ITEM * 4) / 128)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	2b3f      	cmp	r3, #63	; 0x3f
 80027c0:	d80f      	bhi.n	80027e2 <CmdFunc12+0x36>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Value;
		return(3);
	}

	for(i=0; i < 32; i++){
 80027c2:	2100      	movs	r1, #0
 80027c4:	291f      	cmp	r1, #31
 80027c6:	dc15      	bgt.n	80027f4 <CmdFunc12+0x48>
		ptr = ARHIV_BASE_ADR + 128 * num_p + i * 4;
 80027c8:	466b      	mov	r3, sp
 80027ca:	3306      	adds	r3, #6
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	01db      	lsls	r3, r3, #7
 80027d0:	0088      	lsls	r0, r1, #2
 80027d2:	181b      	adds	r3, r3, r0
 80027d4:	4c09      	ldr	r4, [pc, #36]	; (80027fc <CmdFunc12+0x50>)
 80027d6:	46a4      	mov	ip, r4
 80027d8:	4463      	add	r3, ip
		((uint32_t *)out)[i] = *(__IO uint32_t *)((uint32_t)ptr);
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	5013      	str	r3, [r2, r0]
	for(i=0; i < 32; i++){
 80027de:	3101      	adds	r1, #1
 80027e0:	e7f0      	b.n	80027c4 <CmdFunc12+0x18>
		out[1] |= 0x80;
 80027e2:	7851      	ldrb	r1, [r2, #1]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	425b      	negs	r3, r3
 80027e8:	430b      	orrs	r3, r1
 80027ea:	7053      	strb	r3, [r2, #1]
		out[2] = ERROR_Illegal_Data_Value;
 80027ec:	2303      	movs	r3, #3
 80027ee:	7093      	strb	r3, [r2, #2]
		return(3);
 80027f0:	2003      	movs	r0, #3
 80027f2:	e000      	b.n	80027f6 <CmdFunc12+0x4a>
	}
	return(3+128);
 80027f4:	2083      	movs	r0, #131	; 0x83
}
 80027f6:	b002      	add	sp, #8
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	08006000 	.word	0x08006000

08002800 <CmdFunc16>:

//======================================================================================================================================
// Запись группы регистров
uint32_t CmdFunc16(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002800:	b530      	push	{r4, r5, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	0004      	movs	r4, r0
 8002806:	0015      	movs	r5, r2
	wModeCalib = 0;

	Address 	= TO_M_WORD(mas+2);			// Адрес первого сохраняемого регистра
 8002808:	7883      	ldrb	r3, [r0, #2]
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	78c2      	ldrb	r2, [r0, #3]
 800280e:	189b      	adds	r3, r3, r2
 8002810:	4a3d      	ldr	r2, [pc, #244]	; (8002908 <CmdFunc16+0x108>)
 8002812:	8013      	strh	r3, [r2, #0]
	Count	 	= TO_M_WORD(mas+4);			// Количество регистров
 8002814:	7903      	ldrb	r3, [r0, #4]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	7942      	ldrb	r2, [r0, #5]
 800281a:	189b      	adds	r3, r3, r2
 800281c:	4a3b      	ldr	r2, [pc, #236]	; (800290c <CmdFunc16+0x10c>)
 800281e:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[7]);			// Значение регистра
 8002820:	1dc2      	adds	r2, r0, #7
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <CmdFunc16+0x110>)
 8002824:	601a      	str	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8002826:	2206      	movs	r2, #6
 8002828:	0001      	movs	r1, r0
 800282a:	0028      	movs	r0, r5
 800282c:	f000 fe8a 	bl	8003544 <memcpy>
	Save = FALSE;
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <CmdFunc16+0x114>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	//TSGMPoint *sgm = &SGMpoint[0];
	//------------------------------------------------------------------------------------------------------------------
#ifdef BLOCK_MODBUS

	if(!check_block()){
 8002836:	f7ff fe77 	bl	8002528 <check_block>
 800283a:	2800      	cmp	r0, #0
 800283c:	d109      	bne.n	8002852 <CmdFunc16+0x52>

		out[1] |= 0x80;
 800283e:	786a      	ldrb	r2, [r5, #1]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	425b      	negs	r3, r3
 8002844:	4313      	orrs	r3, r2
 8002846:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8002848:	2304      	movs	r3, #4
 800284a:	70ab      	strb	r3, [r5, #2]
		return(3);
 800284c:	3003      	adds	r0, #3
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 800284e:	b003      	add	sp, #12
 8002850:	bd30      	pop	{r4, r5, pc}
	modbusCMD();
 8002852:	f7ff fecd 	bl	80025f0 <modbusCMD>
	if( !Count || (Count > 125) )
 8002856:	4b2d      	ldr	r3, [pc, #180]	; (800290c <CmdFunc16+0x10c>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	1e53      	subs	r3, r2, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b7c      	cmp	r3, #124	; 0x7c
 8002860:	d81b      	bhi.n	800289a <CmdFunc16+0x9a>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <CmdFunc16+0x108>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0149      	lsls	r1, r1, #5
 800286a:	428b      	cmp	r3, r1
 800286c:	d308      	bcc.n	8002880 <CmdFunc16+0x80>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 800286e:	492a      	ldr	r1, [pc, #168]	; (8002918 <CmdFunc16+0x118>)
 8002870:	428b      	cmp	r3, r1
 8002872:	d805      	bhi.n	8002880 <CmdFunc16+0x80>
		if( Count > DEF_REG_CNT_x03 ) break;
 8002874:	2a70      	cmp	r2, #112	; 0x70
 8002876:	d803      	bhi.n	8002880 <CmdFunc16+0x80>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002878:	1899      	adds	r1, r3, r2
 800287a:	4828      	ldr	r0, [pc, #160]	; (800291c <CmdFunc16+0x11c>)
 800287c:	4281      	cmp	r1, r0
 800287e:	dd15      	ble.n	80028ac <CmdFunc16+0xac>
	if( Count )
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <CmdFunc16+0x10c>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d033      	beq.n	80028f0 <CmdFunc16+0xf0>
		out[1] |= 0x80;
 8002888:	786a      	ldrb	r2, [r5, #1]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	425b      	negs	r3, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002892:	2302      	movs	r3, #2
 8002894:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002896:	2003      	movs	r0, #3
 8002898:	e7d9      	b.n	800284e <CmdFunc16+0x4e>
		out[1] |= 0x80;
 800289a:	786a      	ldrb	r2, [r5, #1]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	425b      	negs	r3, r3
 80028a0:	4313      	orrs	r3, r2
 80028a2:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80028a4:	2302      	movs	r3, #2
 80028a6:	70ab      	strb	r3, [r5, #2]
		return(3);
 80028a8:	2003      	movs	r0, #3
 80028aa:	e7d0      	b.n	800284e <CmdFunc16+0x4e>
		Address -= DEF_REG_ADR_BASE_x03;
 80028ac:	491c      	ldr	r1, [pc, #112]	; (8002920 <CmdFunc16+0x120>)
 80028ae:	468c      	mov	ip, r1
 80028b0:	4463      	add	r3, ip
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4914      	ldr	r1, [pc, #80]	; (8002908 <CmdFunc16+0x108>)
 80028b6:	800b      	strh	r3, [r1, #0]
		d_printf("\n\r%02x CMD Modbus 16 (%02d) : write adr %03x : data ", mas[0], Count, Address, *Value);
 80028b8:	7821      	ldrb	r1, [r4, #0]
 80028ba:	4815      	ldr	r0, [pc, #84]	; (8002910 <CmdFunc16+0x110>)
 80028bc:	6800      	ldr	r0, [r0, #0]
 80028be:	7800      	ldrb	r0, [r0, #0]
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	4818      	ldr	r0, [pc, #96]	; (8002924 <CmdFunc16+0x124>)
 80028c4:	f7fe fce6 	bl	8001294 <d_printf>
		while( Count )
 80028c8:	e00d      	b.n	80028e6 <CmdFunc16+0xe6>
			d_printf(" %02x%02x", Value[0], Value[1]);
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <CmdFunc16+0x110>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	7819      	ldrb	r1, [r3, #0]
 80028d0:	785a      	ldrb	r2, [r3, #1]
 80028d2:	4815      	ldr	r0, [pc, #84]	; (8002928 <CmdFunc16+0x128>)
 80028d4:	f7fe fcde 	bl	8001294 <d_printf>
			CMD_SAVE_WORD( &reg_x03[ Address ] );
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <CmdFunc16+0x108>)
 80028da:	8818      	ldrh	r0, [r3, #0]
 80028dc:	00c0      	lsls	r0, r0, #3
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <CmdFunc16+0x12c>)
 80028e0:	18c0      	adds	r0, r0, r3
 80028e2:	f7ff fdff 	bl	80024e4 <__CMD_SAVE_WORD>
		while( Count )
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <CmdFunc16+0x10c>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1ed      	bne.n	80028ca <CmdFunc16+0xca>
 80028ee:	e7c7      	b.n	8002880 <CmdFunc16+0x80>
	modbusSet();
 80028f0:	f7ff fcdc 	bl	80022ac <modbusSet>
	if(Save)
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <CmdFunc16+0x114>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <CmdFunc16+0x100>
	return(6);
 80028fc:	2006      	movs	r0, #6
 80028fe:	e7a6      	b.n	800284e <CmdFunc16+0x4e>
		eeprom_config_write();
 8002900:	f7fe fda8 	bl	8001454 <eeprom_config_write>
	return(6);
 8002904:	2006      	movs	r0, #6
 8002906:	e7a2      	b.n	800284e <CmdFunc16+0x4e>
 8002908:	20000194 	.word	0x20000194
 800290c:	20000198 	.word	0x20000198
 8002910:	200001a4 	.word	0x200001a4
 8002914:	200001a0 	.word	0x200001a0
 8002918:	0000106f 	.word	0x0000106f
 800291c:	00001070 	.word	0x00001070
 8002920:	fffff000 	.word	0xfffff000
 8002924:	08003fa0 	.word	0x08003fa0
 8002928:	08003f94 	.word	0x08003f94
 800292c:	0800402c 	.word	0x0800402c

08002930 <cmdModbusRTU>:
{
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	0014      	movs	r4, r2
	out[0] = mas[0];
 8002934:	7803      	ldrb	r3, [r0, #0]
 8002936:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];
 8002938:	7843      	ldrb	r3, [r0, #1]
 800293a:	7053      	strb	r3, [r2, #1]
	switch (mas[1])
 800293c:	3b03      	subs	r3, #3
 800293e:	b2da      	uxtb	r2, r3
 8002940:	2a0d      	cmp	r2, #13
 8002942:	d82e      	bhi.n	80029a2 <cmdModbusRTU+0x72>
 8002944:	0093      	lsls	r3, r2, #2
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <cmdModbusRTU+0x8c>)
 8002948:	58d3      	ldr	r3, [r2, r3]
 800294a:	469f      	mov	pc, r3
		AnswerLen = CmdFunc3(mas, len, out);
 800294c:	0022      	movs	r2, r4
 800294e:	f7ff fd01 	bl	8002354 <CmdFunc3>
 8002952:	0005      	movs	r5, r0
	if(AnswerLen)
 8002954:	2d00      	cmp	r5, #0
 8002956:	d009      	beq.n	800296c <cmdModbusRTU+0x3c>
		crc = mb_crc(out, AnswerLen);
 8002958:	0029      	movs	r1, r5
 800295a:	0020      	movs	r0, r4
 800295c:	f7ff fc8a 	bl	8002274 <mb_crc>
		out[AnswerLen]   = LOBYTE(crc);
 8002960:	5560      	strb	r0, [r4, r5]
		out[AnswerLen+1] = HIBYTE(crc);
 8002962:	1c6b      	adds	r3, r5, #1
 8002964:	0400      	lsls	r0, r0, #16
 8002966:	0e00      	lsrs	r0, r0, #24
 8002968:	54e0      	strb	r0, [r4, r3]
		AnswerLen += 2;
 800296a:	3502      	adds	r5, #2
}
 800296c:	0028      	movs	r0, r5
 800296e:	bd70      	pop	{r4, r5, r6, pc}
		AnswerLen = CmdFunc4(mas, len, out);
 8002970:	0022      	movs	r2, r4
 8002972:	f7ff fd5b 	bl	800242c <CmdFunc4>
 8002976:	0005      	movs	r5, r0
		break;
 8002978:	e7ec      	b.n	8002954 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc6(mas, len, out);
 800297a:	0022      	movs	r2, r4
 800297c:	f7ff fe92 	bl	80026a4 <CmdFunc6>
 8002980:	0005      	movs	r5, r0
		break;
 8002982:	e7e7      	b.n	8002954 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc8(mas, len, out);
 8002984:	0022      	movs	r2, r4
 8002986:	f7ff ff09 	bl	800279c <CmdFunc8>
 800298a:	0005      	movs	r5, r0
		break;
 800298c:	e7e2      	b.n	8002954 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc12(mas, len, out);
 800298e:	0022      	movs	r2, r4
 8002990:	f7ff ff0c 	bl	80027ac <CmdFunc12>
 8002994:	0005      	movs	r5, r0
		break;
 8002996:	e7dd      	b.n	8002954 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc16(mas, len, out);
 8002998:	0022      	movs	r2, r4
 800299a:	f7ff ff31 	bl	8002800 <CmdFunc16>
 800299e:	0005      	movs	r5, r0
		break;
 80029a0:	e7d8      	b.n	8002954 <cmdModbusRTU+0x24>
		d_printf("\n\r\n\r ERROR_Illegal_Function");
 80029a2:	4807      	ldr	r0, [pc, #28]	; (80029c0 <cmdModbusRTU+0x90>)
 80029a4:	f7fe fc76 	bl	8001294 <d_printf>
		out[1] |= 0x80;
 80029a8:	7862      	ldrb	r2, [r4, #1]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	425b      	negs	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Function;
 80029b2:	2301      	movs	r3, #1
 80029b4:	70a3      	strb	r3, [r4, #2]
		AnswerLen = 3;
 80029b6:	2503      	movs	r5, #3
 80029b8:	e7ce      	b.n	8002958 <cmdModbusRTU+0x28>
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	08003ff4 	.word	0x08003ff4
 80029c0:	08003fd8 	.word	0x08003fd8

080029c4 <mb_proc>:
void mb_proc(void){
 80029c4:	b570      	push	{r4, r5, r6, lr}
	if(!f_mbs_packet_rcv)
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <mb_proc+0x64>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <mb_proc+0x26>
	f_mbs_packet_rcv = FALSE;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <mb_proc+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
	uint16_t crc = mb_crc(mbs_pkt_rx,mbs_rx_pkt_len-2);
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <mb_proc+0x68>)
 80029d6:	881e      	ldrh	r6, [r3, #0]
 80029d8:	1eb5      	subs	r5, r6, #2
 80029da:	4c15      	ldr	r4, [pc, #84]	; (8002a30 <mb_proc+0x6c>)
 80029dc:	0029      	movs	r1, r5
 80029de:	0020      	movs	r0, r4
 80029e0:	f7ff fc48 	bl	8002274 <mb_crc>
	if((mbs_pkt_rx[0] == 0x55) && \
 80029e4:	7823      	ldrb	r3, [r4, #0]
 80029e6:	2b55      	cmp	r3, #85	; 0x55
 80029e8:	d000      	beq.n	80029ec <mb_proc+0x28>
}
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 80029ec:	5d62      	ldrb	r2, [r4, r5]
 80029ee:	b2c3      	uxtb	r3, r0
	if((mbs_pkt_rx[0] == 0x55) && \
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1fa      	bne.n	80029ea <mb_proc+0x26>
			(mbs_pkt_rx[mbs_rx_pkt_len-1] == HIBYTE(crc))){
 80029f4:	1e73      	subs	r3, r6, #1
 80029f6:	5ce3      	ldrb	r3, [r4, r3]
 80029f8:	0400      	lsls	r0, r0, #16
 80029fa:	0e00      	lsrs	r0, r0, #24
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 80029fc:	4283      	cmp	r3, r0
 80029fe:	d1f4      	bne.n	80029ea <mb_proc+0x26>
		mbs_tx_len = cmdModbusRTU(mbs_pkt_rx, mbs_rx_pkt_len, mbs_pkt_tx);
 8002a00:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <mb_proc+0x70>)
 8002a02:	0031      	movs	r1, r6
 8002a04:	0020      	movs	r0, r4
 8002a06:	f7ff ff93 	bl	8002930 <cmdModbusRTU>
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <mb_proc+0x74>)
 8002a0c:	8018      	strh	r0, [r3, #0]
		mbs_tx_cnt = 0;
 8002a0e:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <mb_proc+0x78>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <mb_proc+0x7c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2104      	movs	r1, #4
 8002a1a:	438a      	bics	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	317c      	adds	r1, #124	; 0x7c
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	e7e0      	b.n	80029ea <mb_proc+0x26>
 8002a28:	200000b1 	.word	0x200000b1
 8002a2c:	200003e4 	.word	0x200003e4
 8002a30:	200002e0 	.word	0x200002e0
 8002a34:	200003e8 	.word	0x200003e8
 8002a38:	200003e6 	.word	0x200003e6
 8002a3c:	200003e2 	.word	0x200003e2
 8002a40:	40004800 	.word	0x40004800

08002a44 <MSI_TurnClock>:
#endif
}

// Включение и выключение периферии
static void MSI_TurnClock(StateTurnClockPerif StateTurnClock)
{
 8002a44:	b088      	sub	sp, #32
#ifdef LL_CONFIG_TIM
	if(StateTurnClock == ENABLE_CLOCK){
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d13e      	bne.n	8002ac8 <MSI_TurnClock+0x84>
  SET_BIT(RCC->IOPENR, Periphs);
 8002a4a:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <MSI_TurnClock+0xc4>)
 8002a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4311      	orrs	r1, r2
 8002a52:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a56:	400a      	ands	r2, r1
 8002a58:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
 8002a5a:	9a07      	ldr	r2, [sp, #28]
  SET_BIT(RCC->IOPENR, Periphs);
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4311      	orrs	r1, r2
 8002a62:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a66:	400a      	ands	r2, r1
 8002a68:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 8002a6a:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->IOPENR, Periphs);
 8002a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6e:	2204      	movs	r2, #4
 8002a70:	4311      	orrs	r1, r2
 8002a72:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a76:	400a      	ands	r2, r1
 8002a78:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8002a7a:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a7c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a7e:	2080      	movs	r0, #128	; 0x80
 8002a80:	0380      	lsls	r0, r0, #14
 8002a82:	4301      	orrs	r1, r0
 8002a84:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a88:	4002      	ands	r2, r0
 8002a8a:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002a8c:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a90:	2080      	movs	r0, #128	; 0x80
 8002a92:	0280      	lsls	r0, r0, #10
 8002a94:	4301      	orrs	r1, r0
 8002a96:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9a:	4002      	ands	r2, r0
 8002a9c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8002a9e:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa2:	2080      	movs	r0, #128	; 0x80
 8002aa4:	0080      	lsls	r0, r0, #2
 8002aa6:	4301      	orrs	r1, r0
 8002aa8:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aac:	4002      	ands	r2, r0
 8002aae:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002ab0:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8002ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0149      	lsls	r1, r1, #5
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	400b      	ands	r3, r1
 8002ac0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002ac2:	9b01      	ldr	r3, [sp, #4]
	}
#endif
#ifdef HAL_CONFIG_TIM

#endif
}
 8002ac4:	b008      	add	sp, #32
 8002ac6:	4770      	bx	lr
	else if(StateTurnClock == DISABLE_CLOCK){
 8002ac8:	2801      	cmp	r0, #1
 8002aca:	d1fb      	bne.n	8002ac4 <MSI_TurnClock+0x80>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->IOPENR, Periphs);
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <MSI_TurnClock+0xc4>)
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad8:	3101      	adds	r1, #1
 8002ada:	438a      	bics	r2, r1
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	3102      	adds	r1, #2
 8002ae2:	438a      	bics	r2, r1
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae8:	4908      	ldr	r1, [pc, #32]	; (8002b0c <MSI_TurnClock+0xc8>)
 8002aea:	400a      	ands	r2, r1
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
 8002aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <MSI_TurnClock+0xcc>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af8:	4906      	ldr	r1, [pc, #24]	; (8002b14 <MSI_TurnClock+0xd0>)
 8002afa:	400a      	ands	r2, r1
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
  CLEAR_BIT(RCC->AHBENR, Periphs);
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	4905      	ldr	r1, [pc, #20]	; (8002b18 <MSI_TurnClock+0xd4>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b06:	e7dd      	b.n	8002ac4 <MSI_TurnClock+0x80>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	ffdfffff 	.word	0xffdfffff
 8002b10:	fffdffff 	.word	0xfffdffff
 8002b14:	fffffdff 	.word	0xfffffdff
 8002b18:	ffffefff 	.word	0xffffefff

08002b1c <MSI_RCC_AdjustCalibrationValue>:
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <MSI_RCC_AdjustCalibrationValue+0x10>)
 8002b1e:	6853      	ldr	r3, [r2, #4]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	0600      	lsls	r0, r0, #24
 8002b26:	4303      	orrs	r3, r0
 8002b28:	6053      	str	r3, [r2, #4]
  */
static void MSI_RCC_AdjustCalibrationValue(uint8_t TrimmingValue)
{
	LL_RCC_MSI_SetCalibTrimming(TrimmingValue);
//  __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(TrimmingValue);
}
 8002b2a:	4770      	bx	lr
 8002b2c:	40021000 	.word	0x40021000

08002b30 <MSI_FreqMeasure>:
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
  uint32_t  timeout = MSI_TIMEOUT;
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <MSI_FreqMeasure+0x94>)
  loopcounter = 0;
 8002b34:	2100      	movs	r1, #0
  measuredfrequency = 0;
 8002b36:	2000      	movs	r0, #0
  while (loopcounter <= MSI_NUMBER_OF_LOOPS)
 8002b38:	e01f      	b.n	8002b7a <MSI_FreqMeasure+0x4a>
 8002b3a:	4c23      	ldr	r4, [pc, #140]	; (8002bc8 <MSI_FreqMeasure+0x98>)
 8002b3c:	327d      	adds	r2, #125	; 0x7d
 8002b3e:	2580      	movs	r5, #128	; 0x80
 8002b40:	036d      	lsls	r5, r5, #13
 8002b42:	50a5      	str	r5, [r4, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b48:	f3bf 8f6f 	isb	sy
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <MSI_FreqMeasure+0x9c>)
 8002b4e:	68d4      	ldr	r4, [r2, #12]
 8002b50:	2502      	movs	r5, #2
 8002b52:	43ac      	bics	r4, r5
 8002b54:	60d4      	str	r4, [r2, #12]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002b56:	6a14      	ldr	r4, [r2, #32]
 8002b58:	3d01      	subs	r5, #1
 8002b5a:	43ac      	bics	r4, r5
 8002b5c:	6214      	str	r4, [r2, #32]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b5e:	6814      	ldr	r4, [r2, #0]
 8002b60:	43ac      	bics	r4, r5
 8002b62:	6014      	str	r4, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002b64:	2403      	movs	r4, #3
 8002b66:	4264      	negs	r4, r4
 8002b68:	6114      	str	r4, [r2, #16]
    if (loopcounter != 0)
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d003      	beq.n	8002b76 <MSI_FreqMeasure+0x46>
      measuredfrequency += (uint32_t) (MSI_REFERENCE_FREQUENCY * Capture);
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <MSI_FreqMeasure+0xa0>)
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	0312      	lsls	r2, r2, #12
 8002b74:	1880      	adds	r0, r0, r2
    loopcounter++;
 8002b76:	3101      	adds	r1, #1
 8002b78:	b2c9      	uxtb	r1, r1
  while (loopcounter <= MSI_NUMBER_OF_LOOPS)
 8002b7a:	2932      	cmp	r1, #50	; 0x32
 8002b7c:	d81a      	bhi.n	8002bb4 <MSI_FreqMeasure+0x84>
    CaptureState = CAPTURE_START;
 8002b7e:	2501      	movs	r5, #1
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <MSI_FreqMeasure+0xa4>)
 8002b82:	6015      	str	r5, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <MSI_FreqMeasure+0x9c>)
 8002b86:	68d4      	ldr	r4, [r2, #12]
 8002b88:	2602      	movs	r6, #2
 8002b8a:	4334      	orrs	r4, r6
 8002b8c:	60d4      	str	r4, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8002b8e:	6a14      	ldr	r4, [r2, #32]
 8002b90:	432c      	orrs	r4, r5
 8002b92:	6214      	str	r4, [r2, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b94:	6814      	ldr	r4, [r2, #0]
 8002b96:	432c      	orrs	r4, r5
 8002b98:	6014      	str	r4, [r2, #0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <MSI_FreqMeasure+0x98>)
 8002b9c:	2480      	movs	r4, #128	; 0x80
 8002b9e:	0364      	lsls	r4, r4, #13
 8002ba0:	6014      	str	r4, [r2, #0]
    while (CaptureState != CAPTURE_COMPLETED)
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <MSI_FreqMeasure+0xa4>)
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	2a03      	cmp	r2, #3
 8002ba8:	d0c7      	beq.n	8002b3a <MSI_FreqMeasure+0xa>
      if (--timeout == 0)
 8002baa:	3b01      	subs	r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f8      	bne.n	8002ba2 <MSI_FreqMeasure+0x72>
        return ERROR;
 8002bb0:	2001      	movs	r0, #1
}
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_REG(TIMx->PSC));
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <MSI_FreqMeasure+0x9c>)
 8002bb6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  measuredfrequency = (uint32_t)((LL_TIM_GetPrescaler(TIMx) + 1) * (measuredfrequency / MSI_NUMBER_OF_LOOPS));
 8002bb8:	3401      	adds	r4, #1
 8002bba:	2132      	movs	r1, #50	; 0x32
 8002bbc:	f7fd fab6 	bl	800012c <__udivsi3>
 8002bc0:	4360      	muls	r0, r4
  return measuredfrequency;
 8002bc2:	e7f6      	b.n	8002bb2 <MSI_FreqMeasure+0x82>
 8002bc4:	00ffffff 	.word	0x00ffffff
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	200001a8 	.word	0x200001a8
 8002bd4:	200001ac 	.word	0x200001ac

08002bd8 <MSI_MeasurementInit>:
	StartCalibration = 1;
 8002bd8:	4b01      	ldr	r3, [pc, #4]	; (8002be0 <MSI_MeasurementInit+0x8>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
}
 8002bde:	4770      	bx	lr
 8002be0:	200001b8 	.word	0x200001b8

08002be4 <MSI_CalibrateFixedError>:
{
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be6:	46de      	mov	lr, fp
 8002be8:	4657      	mov	r7, sl
 8002bea:	464e      	mov	r6, r9
 8002bec:	4645      	mov	r5, r8
 8002bee:	b5e0      	push	{r5, r6, r7, lr}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	4681      	mov	r9, r0
 8002bf4:	468b      	mov	fp, r1
  MSI_TurnClock(DISABLE_CLOCK);
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	f7ff ff24 	bl	8002a44 <MSI_TurnClock>
  MSI_MeasurementInit();
 8002bfc:	f7ff ffec 	bl	8002bd8 <MSI_MeasurementInit>
  LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002c00:	4668      	mov	r0, sp
 8002c02:	f000 fa99 	bl	8003138 <LL_RCC_GetSystemClocksFreq>
  sysclockfrequency = RCC_Clocks.SYSCLK_Frequency;
 8002c06:	9b00      	ldr	r3, [sp, #0]
 8002c08:	469a      	mov	sl, r3
  MSI_RCC_AdjustCalibrationValue(numbersteps / 2);
 8002c0a:	2080      	movs	r0, #128	; 0x80
 8002c0c:	f7ff ff86 	bl	8002b1c <MSI_RCC_AdjustCalibrationValue>
  ErrorStatus calibrationstatus = ERROR;
 8002c10:	2601      	movs	r6, #1
  uint32_t  trimmingindex = 0;
 8002c12:	2500      	movs	r5, #0
  uint32_t 	min = 0x00;
 8002c14:	2300      	movs	r3, #0
 8002c16:	4698      	mov	r8, r3
  uint32_t 	max = 0xFF; 	/* number of steps is 2^8 = 256 */
 8002c18:	27ff      	movs	r7, #255	; 0xff
  while ((trimmingindex < 256) && (calibrationstatus == ERROR))
 8002c1a:	e003      	b.n	8002c24 <MSI_CalibrateFixedError+0x40>
    else if (frequencyerror < 0)
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db18      	blt.n	8002c52 <MSI_CalibrateFixedError+0x6e>
      max = mid;
 8002c20:	0027      	movs	r7, r4
    trimmingindex++;
 8002c22:	3501      	adds	r5, #1
  while ((trimmingindex < 256) && (calibrationstatus == ERROR))
 8002c24:	2dff      	cmp	r5, #255	; 0xff
 8002c26:	d816      	bhi.n	8002c56 <MSI_CalibrateFixedError+0x72>
 8002c28:	2e01      	cmp	r6, #1
 8002c2a:	d114      	bne.n	8002c56 <MSI_CalibrateFixedError+0x72>
    mid = ((max + min) >> 1);
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	18fc      	adds	r4, r7, r3
 8002c30:	0864      	lsrs	r4, r4, #1
    MSI_RCC_AdjustCalibrationValue(trimmingvalue);
 8002c32:	b2e0      	uxtb	r0, r4
 8002c34:	f7ff ff72 	bl	8002b1c <MSI_RCC_AdjustCalibrationValue>
    measuredfrequency = MSI_FreqMeasure();
 8002c38:	f7ff ff7a 	bl	8002b30 <MSI_FreqMeasure>
    frequencyerror = (measuredfrequency - sysclockfrequency);
 8002c3c:	4653      	mov	r3, sl
 8002c3e:	1ac3      	subs	r3, r0, r3
    absfrequencyerror = ABS_RETURN(frequencyerror);
 8002c40:	17d9      	asrs	r1, r3, #31
 8002c42:	185a      	adds	r2, r3, r1
 8002c44:	404a      	eors	r2, r1
    if (absfrequencyerror < MaxAllowedError)
 8002c46:	454a      	cmp	r2, r9
 8002c48:	d2e8      	bcs.n	8002c1c <MSI_CalibrateFixedError+0x38>
      *Freq = measuredfrequency;
 8002c4a:	465b      	mov	r3, fp
 8002c4c:	6018      	str	r0, [r3, #0]
      calibrationstatus = SUCCESS;
 8002c4e:	2600      	movs	r6, #0
 8002c50:	e7e7      	b.n	8002c22 <MSI_CalibrateFixedError+0x3e>
      min = mid;
 8002c52:	46a0      	mov	r8, r4
 8002c54:	e7e5      	b.n	8002c22 <MSI_CalibrateFixedError+0x3e>
  if (calibrationstatus == ERROR)
 8002c56:	2e01      	cmp	r6, #1
 8002c58:	d00a      	beq.n	8002c70 <MSI_CalibrateFixedError+0x8c>
  MSI_TurnClock(ENABLE_CLOCK);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7ff fef2 	bl	8002a44 <MSI_TurnClock>
}
 8002c60:	0030      	movs	r0, r6
 8002c62:	b005      	add	sp, #20
 8002c64:	bcf0      	pop	{r4, r5, r6, r7}
 8002c66:	46bb      	mov	fp, r7
 8002c68:	46b2      	mov	sl, r6
 8002c6a:	46a9      	mov	r9, r5
 8002c6c:	46a0      	mov	r8, r4
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  MSI_RCC_AdjustCalibrationValue(numbersteps / 2);
 8002c70:	2080      	movs	r0, #128	; 0x80
 8002c72:	f7ff ff53 	bl	8002b1c <MSI_RCC_AdjustCalibrationValue>
 8002c76:	e7f0      	b.n	8002c5a <MSI_CalibrateFixedError+0x76>

08002c78 <MSI_Callback_Capture_Timer>:

// Обработчик прерывания таймера
void MSI_Callback_Capture_Timer(void)
{
 8002c78:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <MSI_Callback_Capture_Timer+0x6c>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	079b      	lsls	r3, r3, #30
 8002c80:	d503      	bpl.n	8002c8a <MSI_Callback_Capture_Timer+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MSI_Callback_Capture_Timer+0x6c>)
 8002c84:	2203      	movs	r2, #3
 8002c86:	4252      	negs	r2, r2
 8002c88:	611a      	str	r2, [r3, #16]
#ifdef LL_CONFIG_TIM
  if(LL_TIM_IsActiveFlag_CC1(TIMx) == 1)
  {
  	LL_TIM_ClearFlag_CC1(TIMx);
  }
  if (CaptureState == CAPTURE_START)
 8002c8a:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <MSI_Callback_Capture_Timer+0x70>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d004      	beq.n	8002c9c <MSI_Callback_Capture_Timer+0x24>
  {
	  /* Get the 1st Input Capture value */
	  IC1ReadValue1 = LL_TIM_IC_GetCaptureCH1(TIMx);
	  CaptureState = CAPTURE_ONGOING;
  }
  else if (CaptureState == CAPTURE_ONGOING)
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <MSI_Callback_Capture_Timer+0x70>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d008      	beq.n	8002cac <MSI_Callback_Capture_Timer+0x34>
		  Error_Handler();
	  }
	  CaptureState = CAPTURE_COMPLETED;
  }
#endif
}
 8002c9a:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MSI_Callback_Capture_Timer+0x6c>)
 8002c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	  IC1ReadValue1 = LL_TIM_IC_GetCaptureCH1(TIMx);
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <MSI_Callback_Capture_Timer+0x74>)
 8002ca2:	601a      	str	r2, [r3, #0]
	  CaptureState = CAPTURE_ONGOING;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <MSI_Callback_Capture_Timer+0x70>)
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e7f6      	b.n	8002c9a <MSI_Callback_Capture_Timer+0x22>
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <MSI_Callback_Capture_Timer+0x6c>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	  IC1ReadValue2 = LL_TIM_IC_GetCaptureCH1(TIMx);
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	; (8002cf0 <MSI_Callback_Capture_Timer+0x78>)
 8002cb2:	6013      	str	r3, [r2, #0]
	  if (IC1ReadValue2 > IC1ReadValue1)
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <MSI_Callback_Capture_Timer+0x74>)
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d206      	bcs.n	8002cca <MSI_Callback_Capture_Timer+0x52>
		  Capture = (IC1ReadValue2 - IC1ReadValue1);
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <MSI_Callback_Capture_Timer+0x7c>)
 8002cc0:	6013      	str	r3, [r2, #0]
	  CaptureState = CAPTURE_COMPLETED;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <MSI_Callback_Capture_Timer+0x70>)
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	601a      	str	r2, [r3, #0]
}
 8002cc8:	e7e7      	b.n	8002c9a <MSI_Callback_Capture_Timer+0x22>
	  else if (IC1ReadValue2 < IC1ReadValue1)
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d906      	bls.n	8002cdc <MSI_Callback_Capture_Timer+0x64>
		  Capture = ((0xFFFF - IC1ReadValue1) + IC1ReadValue2);
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <MSI_Callback_Capture_Timer+0x80>)
 8002cd2:	4694      	mov	ip, r2
 8002cd4:	4463      	add	r3, ip
 8002cd6:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <MSI_Callback_Capture_Timer+0x7c>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e7f2      	b.n	8002cc2 <MSI_Callback_Capture_Timer+0x4a>
		  Error_Handler();
 8002cdc:	f7fe f870 	bl	8000dc0 <Error_Handler>
 8002ce0:	e7ef      	b.n	8002cc2 <MSI_Callback_Capture_Timer+0x4a>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	200001ac 	.word	0x200001ac
 8002cec:	200001b0 	.word	0x200001b0
 8002cf0:	200001b4 	.word	0x200001b4
 8002cf4:	200001a8 	.word	0x200001a8
 8002cf8:	0000ffff 	.word	0x0000ffff

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002cfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d02:	490e      	ldr	r1, [pc, #56]	; (8002d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d04:	4a0e      	ldr	r2, [pc, #56]	; (8002d40 <LoopForever+0xe>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d18:	4c0b      	ldr	r4, [pc, #44]	; (8002d48 <LoopForever+0x16>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d26:	f7fe f8d9 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f000 fbe7 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7fd ff69 	bl	8000c04 <main>

08002d32 <LoopForever>:

LoopForever:
    b LoopForever
 8002d32:	e7fe      	b.n	8002d32 <LoopForever>
   ldr   r0, =_estack
 8002d34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002d40:	080044b8 	.word	0x080044b8
  ldr r2, =_sbss
 8002d44:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002d48:	20000658 	.word	0x20000658

08002d4c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <DMA1_Channel1_IRQHandler>
	...

08002d50 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002d50:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002d52:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002d54:	07db      	lsls	r3, r3, #31
 8002d56:	d411      	bmi.n	8002d7c <LL_ADC_Init+0x2c>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002d58:	68c3      	ldr	r3, [r0, #12]
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <LL_ADC_Init+0x30>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	684a      	ldr	r2, [r1, #4]
 8002d60:	688c      	ldr	r4, [r1, #8]
 8002d62:	4322      	orrs	r2, r4
 8002d64:	68cc      	ldr	r4, [r1, #12]
 8002d66:	4322      	orrs	r2, r4
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60c3      	str	r3, [r0, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002d6c:	6903      	ldr	r3, [r0, #16]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	680a      	ldr	r2, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 8002d78:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002d7a:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	e7fc      	b.n	8002d7a <LL_ADC_Init+0x2a>
 8002d80:	ffff3fc7 	.word	0xffff3fc7

08002d84 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002d84:	b510      	push	{r4, lr}
 8002d86:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002d88:	07db      	lsls	r3, r3, #31
 8002d8a:	d40f      	bmi.n	8002dac <LL_ADC_REG_Init+0x28>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002d8c:	68c3      	ldr	r3, [r0, #12]
 8002d8e:	4a08      	ldr	r2, [pc, #32]	; (8002db0 <LL_ADC_REG_Init+0x2c>)
 8002d90:	401a      	ands	r2, r3
 8002d92:	680b      	ldr	r3, [r1, #0]
 8002d94:	684c      	ldr	r4, [r1, #4]
 8002d96:	4323      	orrs	r3, r4
 8002d98:	688c      	ldr	r4, [r1, #8]
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	68cc      	ldr	r4, [r1, #12]
 8002d9e:	4323      	orrs	r3, r4
 8002da0:	6909      	ldr	r1, [r1, #16]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8002da8:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002daa:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002dac:	2001      	movs	r0, #1
 8002dae:	e7fc      	b.n	8002daa <LL_ADC_REG_Init+0x26>
 8002db0:	fffec23c 	.word	0xfffec23c

08002db4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002db4:	b510      	push	{r4, lr}
 8002db6:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002db8:	7900      	ldrb	r0, [r0, #4]
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d050      	beq.n	8002e60 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d057      	beq.n	8002e74 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8002dc4:	7958      	ldrb	r0, [r3, #5]
 8002dc6:	2801      	cmp	r0, #1
 8002dc8:	d018      	beq.n	8002dfc <LL_EXTI_Init+0x48>
 8002dca:	2802      	cmp	r0, #2
 8002dcc:	d020      	beq.n	8002e10 <LL_EXTI_Init+0x5c>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d00b      	beq.n	8002dea <LL_EXTI_Init+0x36>
 8002dd2:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002dd4:	799a      	ldrb	r2, [r3, #6]
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d04b      	beq.n	8002e72 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 8002dda:	2a02      	cmp	r2, #2
 8002ddc:	d02c      	beq.n	8002e38 <LL_EXTI_Init+0x84>
 8002dde:	2a03      	cmp	r2, #3
 8002de0:	d034      	beq.n	8002e4c <LL_EXTI_Init+0x98>
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	d01e      	beq.n	8002e24 <LL_EXTI_Init+0x70>
 8002de6:	2001      	movs	r0, #1
 8002de8:	e043      	b.n	8002e72 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002dea:	4923      	ldr	r1, [pc, #140]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002dec:	684c      	ldr	r4, [r1, #4]
 8002dee:	4394      	bics	r4, r2
 8002df0:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002df2:	680a      	ldr	r2, [r1, #0]
 8002df4:	681c      	ldr	r4, [r3, #0]
 8002df6:	4322      	orrs	r2, r4
 8002df8:	600a      	str	r2, [r1, #0]
}
 8002dfa:	e7eb      	b.n	8002dd4 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002dfc:	491e      	ldr	r1, [pc, #120]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002dfe:	6808      	ldr	r0, [r1, #0]
 8002e00:	4390      	bics	r0, r2
 8002e02:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002e04:	684a      	ldr	r2, [r1, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8002e0c:	2000      	movs	r0, #0
}
 8002e0e:	e7e1      	b.n	8002dd4 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 8002e10:	4919      	ldr	r1, [pc, #100]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002e12:	6808      	ldr	r0, [r1, #0]
 8002e14:	4302      	orrs	r2, r0
 8002e16:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002e18:	684a      	ldr	r2, [r1, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4302      	orrs	r2, r0
 8002e1e:	604a      	str	r2, [r1, #4]
 8002e20:	2000      	movs	r0, #0
}
 8002e22:	e7d7      	b.n	8002dd4 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002e24:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002e26:	68d1      	ldr	r1, [r2, #12]
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	43a1      	bics	r1, r4
 8002e2c:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002e2e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002e30:	6891      	ldr	r1, [r2, #8]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	6093      	str	r3, [r2, #8]
}
 8002e36:	e01c      	b.n	8002e72 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002e3a:	6891      	ldr	r1, [r2, #8]
 8002e3c:	681c      	ldr	r4, [r3, #0]
 8002e3e:	43a1      	bics	r1, r4
 8002e40:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002e42:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002e44:	68d1      	ldr	r1, [r2, #12]
 8002e46:	430b      	orrs	r3, r1
 8002e48:	60d3      	str	r3, [r2, #12]
}
 8002e4a:	e012      	b.n	8002e72 <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002e4e:	6891      	ldr	r1, [r2, #8]
 8002e50:	681c      	ldr	r4, [r3, #0]
 8002e52:	4321      	orrs	r1, r4
 8002e54:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002e56:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002e58:	68d1      	ldr	r1, [r2, #12]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]
}
 8002e5e:	e008      	b.n	8002e72 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002e60:	4a05      	ldr	r2, [pc, #20]	; (8002e78 <LL_EXTI_Init+0xc4>)
 8002e62:	6811      	ldr	r1, [r2, #0]
 8002e64:	681c      	ldr	r4, [r3, #0]
 8002e66:	43a1      	bics	r1, r4
 8002e68:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e6a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002e6c:	6853      	ldr	r3, [r2, #4]
 8002e6e:	438b      	bics	r3, r1
 8002e70:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8002e72:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7fc      	b.n	8002e72 <LL_EXTI_Init+0xbe>
 8002e78:	40010400 	.word	0x40010400

08002e7c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8002e7e:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e80:	e027      	b.n	8002ed2 <LL_GPIO_Init+0x56>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002e82:	6883      	ldr	r3, [r0, #8]
 8002e84:	002c      	movs	r4, r5
 8002e86:	436c      	muls	r4, r5
 8002e88:	0066      	lsls	r6, r4, #1
 8002e8a:	1936      	adds	r6, r6, r4
 8002e8c:	43b3      	bics	r3, r6
 8002e8e:	688e      	ldr	r6, [r1, #8]
 8002e90:	4374      	muls	r4, r6
 8002e92:	4323      	orrs	r3, r4
 8002e94:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002e96:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e98:	6843      	ldr	r3, [r0, #4]
 8002e9a:	43a3      	bics	r3, r4
 8002e9c:	68ce      	ldr	r6, [r1, #12]
 8002e9e:	4374      	muls	r4, r6
 8002ea0:	4323      	orrs	r3, r4
 8002ea2:	6043      	str	r3, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002ea4:	68c6      	ldr	r6, [r0, #12]
 8002ea6:	002b      	movs	r3, r5
 8002ea8:	436b      	muls	r3, r5
 8002eaa:	005f      	lsls	r7, r3, #1
 8002eac:	18ff      	adds	r7, r7, r3
 8002eae:	43fc      	mvns	r4, r7
 8002eb0:	46a4      	mov	ip, r4
 8002eb2:	43be      	bics	r6, r7
 8002eb4:	690f      	ldr	r7, [r1, #16]
 8002eb6:	435f      	muls	r7, r3
 8002eb8:	433e      	orrs	r6, r7
 8002eba:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ebc:	684c      	ldr	r4, [r1, #4]
 8002ebe:	2c02      	cmp	r4, #2
 8002ec0:	d016      	beq.n	8002ef0 <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002ec2:	6804      	ldr	r4, [r0, #0]
 8002ec4:	4665      	mov	r5, ip
 8002ec6:	402c      	ands	r4, r5
 8002ec8:	684d      	ldr	r5, [r1, #4]
 8002eca:	436b      	muls	r3, r5
 8002ecc:	4323      	orrs	r3, r4
 8002ece:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8002ed0:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ed2:	680c      	ldr	r4, [r1, #0]
 8002ed4:	0023      	movs	r3, r4
 8002ed6:	40d3      	lsrs	r3, r2
 8002ed8:	d026      	beq.n	8002f28 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002eda:	2301      	movs	r3, #1
 8002edc:	4093      	lsls	r3, r2
 8002ede:	0025      	movs	r5, r4
 8002ee0:	401d      	ands	r5, r3
    if (currentpin)
 8002ee2:	421c      	tst	r4, r3
 8002ee4:	d0f4      	beq.n	8002ed0 <LL_GPIO_Init+0x54>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002ee6:	684b      	ldr	r3, [r1, #4]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d8da      	bhi.n	8002ea4 <LL_GPIO_Init+0x28>
 8002eee:	e7c8      	b.n	8002e82 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8002ef0:	2dff      	cmp	r5, #255	; 0xff
 8002ef2:	d80b      	bhi.n	8002f0c <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002ef4:	6a06      	ldr	r6, [r0, #32]
 8002ef6:	001c      	movs	r4, r3
 8002ef8:	436c      	muls	r4, r5
 8002efa:	4365      	muls	r5, r4
 8002efc:	012c      	lsls	r4, r5, #4
 8002efe:	1b64      	subs	r4, r4, r5
 8002f00:	43a6      	bics	r6, r4
 8002f02:	694c      	ldr	r4, [r1, #20]
 8002f04:	4365      	muls	r5, r4
 8002f06:	4335      	orrs	r5, r6
 8002f08:	6205      	str	r5, [r0, #32]
}
 8002f0a:	e7da      	b.n	8002ec2 <LL_GPIO_Init+0x46>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002f0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002f0e:	0a2d      	lsrs	r5, r5, #8
 8002f10:	002c      	movs	r4, r5
 8002f12:	436c      	muls	r4, r5
 8002f14:	436c      	muls	r4, r5
 8002f16:	4365      	muls	r5, r4
 8002f18:	012c      	lsls	r4, r5, #4
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	43a6      	bics	r6, r4
 8002f1e:	694c      	ldr	r4, [r1, #20]
 8002f20:	4365      	muls	r5, r4
 8002f22:	4335      	orrs	r5, r6
 8002f24:	6245      	str	r5, [r0, #36]	; 0x24
}
 8002f26:	e7cc      	b.n	8002ec2 <LL_GPIO_Init+0x46>
  }


  return (SUCCESS);
}
 8002f28:	2000      	movs	r0, #0
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f2c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002f2c:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002f2e:	6802      	ldr	r2, [r0, #0]
 8002f30:	2401      	movs	r4, #1
 8002f32:	43a2      	bics	r2, r4
 8002f34:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <LL_I2C_Init+0x6c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	68ca      	ldr	r2, [r1, #12]
 8002f3e:	0212      	lsls	r2, r2, #8
 8002f40:	688d      	ldr	r5, [r1, #8]
 8002f42:	432a      	orrs	r2, r5
 8002f44:	4313      	orrs	r3, r2
 8002f46:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002f48:	684b      	ldr	r3, [r1, #4]
 8002f4a:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002f4c:	6803      	ldr	r3, [r0, #0]
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002f52:	6883      	ldr	r3, [r0, #8]
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <LL_I2C_Init+0x70>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002f5a:	6883      	ldr	r3, [r0, #8]
 8002f5c:	0adb      	lsrs	r3, r3, #11
 8002f5e:	02db      	lsls	r3, r3, #11
 8002f60:	690a      	ldr	r2, [r1, #16]
 8002f62:	698c      	ldr	r4, [r1, #24]
 8002f64:	4322      	orrs	r2, r4
 8002f66:	4313      	orrs	r3, r2
 8002f68:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002f6a:	690b      	ldr	r3, [r1, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002f70:	6882      	ldr	r2, [r0, #8]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	4313      	orrs	r3, r2
 8002f78:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	4a08      	ldr	r2, [pc, #32]	; (8002fa0 <LL_I2C_Init+0x74>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	680a      	ldr	r2, [r1, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002f86:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002f88:	6842      	ldr	r2, [r0, #4]
 8002f8a:	4904      	ldr	r1, [pc, #16]	; (8002f9c <LL_I2C_Init+0x70>)
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	bd30      	pop	{r4, r5, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	ffffe0ff 	.word	0xffffe0ff
 8002f9c:	ffff7fff 	.word	0xffff7fff
 8002fa0:	ffcfffff 	.word	0xffcfffff

08002fa4 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	0004      	movs	r4, r0
 8002fa8:	000d      	movs	r5, r1
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002faa:	6803      	ldr	r3, [r0, #0]
 8002fac:	07db      	lsls	r3, r3, #31
 8002fae:	d42c      	bmi.n	800300a <LL_LPUART_Init+0x66>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8002fb0:	6803      	ldr	r3, [r0, #0]
 8002fb2:	4a19      	ldr	r2, [pc, #100]	; (8003018 <LL_LPUART_Init+0x74>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	684a      	ldr	r2, [r1, #4]
 8002fb8:	68c9      	ldr	r1, [r1, #12]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	6929      	ldr	r1, [r5, #16]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8002fc4:	6843      	ldr	r3, [r0, #4]
 8002fc6:	4a15      	ldr	r2, [pc, #84]	; (800301c <LL_LPUART_Init+0x78>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68aa      	ldr	r2, [r5, #8]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002fd0:	6883      	ldr	r3, [r0, #8]
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <LL_LPUART_Init+0x7c>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	696a      	ldr	r2, [r5, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	6083      	str	r3, [r0, #8]
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8002fdc:	20c0      	movs	r0, #192	; 0xc0
 8002fde:	0100      	lsls	r0, r0, #4
 8002fe0:	f000 f8fe 	bl	80031e0 <LL_RCC_GetLPUARTClockFreq>

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d012      	beq.n	800300e <LL_LPUART_Init+0x6a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8002fe8:	682a      	ldr	r2, [r5, #0]
 8002fea:	2a00      	cmp	r2, #0
 8002fec:	d011      	beq.n	8003012 <LL_LPUART_Init+0x6e>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8002fee:	0e07      	lsrs	r7, r0, #24
 8002ff0:	0206      	lsls	r6, r0, #8
 8002ff2:	0850      	lsrs	r0, r2, #1
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	1980      	adds	r0, r0, r6
 8002ff8:	4179      	adcs	r1, r7
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f7fd fa0c 	bl	8000418 <__aeabi_uldivmod>
 8003000:	0300      	lsls	r0, r0, #12
 8003002:	0b00      	lsrs	r0, r0, #12
 8003004:	60e0      	str	r0, [r4, #12]
    {
      status = SUCCESS;
 8003006:	2000      	movs	r0, #0
}
 8003008:	e000      	b.n	800300c <LL_LPUART_Init+0x68>
  ErrorStatus status = ERROR;
 800300a:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ErrorStatus status = ERROR;
 800300e:	2001      	movs	r0, #1
 8003010:	e7fc      	b.n	800300c <LL_LPUART_Init+0x68>
 8003012:	2001      	movs	r0, #1
 8003014:	e7fa      	b.n	800300c <LL_LPUART_Init+0x68>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	efffe9f3 	.word	0xefffe9f3
 800301c:	ffffcfff 	.word	0xffffcfff
 8003020:	fffffcff 	.word	0xfffffcff

08003024 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <RCC_GetHCLKClockFreq+0x14>)
 8003026:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003028:	0912      	lsrs	r2, r2, #4
 800302a:	230f      	movs	r3, #15
 800302c:	4013      	ands	r3, r2
 800302e:	4a03      	ldr	r2, [pc, #12]	; (800303c <RCC_GetHCLKClockFreq+0x18>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	40d8      	lsrs	r0, r3
}
 8003034:	4770      	bx	lr
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021000 	.word	0x40021000
 800303c:	08003e1c 	.word	0x08003e1c

08003040 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003040:	4b04      	ldr	r3, [pc, #16]	; (8003054 <RCC_GetPCLK1ClockFreq+0x14>)
 8003042:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003044:	0a12      	lsrs	r2, r2, #8
 8003046:	2307      	movs	r3, #7
 8003048:	4013      	ands	r3, r2
 800304a:	4a03      	ldr	r2, [pc, #12]	; (8003058 <RCC_GetPCLK1ClockFreq+0x18>)
 800304c:	5cd3      	ldrb	r3, [r2, r3]
 800304e:	40d8      	lsrs	r0, r3
}
 8003050:	4770      	bx	lr
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021000 	.word	0x40021000
 8003058:	08003e2c 	.word	0x08003e2c

0800305c <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <RCC_GetPCLK2ClockFreq+0x14>)
 800305e:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003060:	0ad2      	lsrs	r2, r2, #11
 8003062:	2307      	movs	r3, #7
 8003064:	4013      	ands	r3, r2
 8003066:	4a03      	ldr	r2, [pc, #12]	; (8003074 <RCC_GetPCLK2ClockFreq+0x18>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	40d8      	lsrs	r0, r3
}
 800306c:	4770      	bx	lr
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	08003e2c 	.word	0x08003e2c

08003078 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003078:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800307c:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800307e:	03db      	lsls	r3, r3, #15
 8003080:	d405      	bmi.n	800308e <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	06db      	lsls	r3, r3, #27
 8003088:	d512      	bpl.n	80030b0 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800308c:	e000      	b.n	8003090 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800308e:	480b      	ldr	r0, [pc, #44]	; (80030bc <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8003092:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8003094:	0c92      	lsrs	r2, r2, #18
 8003096:	230f      	movs	r3, #15
 8003098:	4013      	ands	r3, r2
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 80030a0:	68cb      	ldr	r3, [r1, #12]
 80030a2:	0d9b      	lsrs	r3, r3, #22
 80030a4:	2103      	movs	r1, #3
 80030a6:	4019      	ands	r1, r3
 80030a8:	3101      	adds	r1, #1
 80030aa:	f7fd f83f 	bl	800012c <__udivsi3>
}
 80030ae:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 80030b0:	4804      	ldr	r0, [pc, #16]	; (80030c4 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 80030b2:	e7ed      	b.n	8003090 <RCC_PLL_GetFreqDomain_SYS+0x18>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	003d0900 	.word	0x003d0900
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	08003e34 	.word	0x08003e34
 80030c4:	00f42400 	.word	0x00f42400

080030c8 <RCC_GetSystemClockFreq>:
{
 80030c8:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <RCC_GetSystemClockFreq+0x60>)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	230c      	movs	r3, #12
 80030d0:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d023      	beq.n	800311e <RCC_GetSystemClockFreq+0x56>
 80030d6:	d809      	bhi.n	80030ec <RCC_GetSystemClockFreq+0x24>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00c      	beq.n	80030f6 <RCC_GetSystemClockFreq+0x2e>
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d114      	bne.n	800310a <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <RCC_GetSystemClockFreq+0x60>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	06db      	lsls	r3, r3, #27
 80030e6:	d51c      	bpl.n	8003122 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 80030e8:	4810      	ldr	r0, [pc, #64]	; (800312c <RCC_GetSystemClockFreq+0x64>)
 80030ea:	e019      	b.n	8003120 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 80030ec:	2b0c      	cmp	r3, #12
 80030ee:	d10c      	bne.n	800310a <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80030f0:	f7ff ffc2 	bl	8003078 <RCC_PLL_GetFreqDomain_SYS>
      break;
 80030f4:	e014      	b.n	8003120 <RCC_GetSystemClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80030f6:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <RCC_GetSystemClockFreq+0x60>)
 80030f8:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80030fa:	0b52      	lsrs	r2, r2, #13
 80030fc:	2307      	movs	r3, #7
 80030fe:	4013      	ands	r3, r2
 8003100:	3301      	adds	r3, #1
 8003102:	2080      	movs	r0, #128	; 0x80
 8003104:	0200      	lsls	r0, r0, #8
 8003106:	4098      	lsls	r0, r3
      break;
 8003108:	e00a      	b.n	8003120 <RCC_GetSystemClockFreq+0x58>
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <RCC_GetSystemClockFreq+0x60>)
 800310c:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800310e:	0b52      	lsrs	r2, r2, #13
 8003110:	2307      	movs	r3, #7
 8003112:	4013      	ands	r3, r2
 8003114:	3301      	adds	r3, #1
 8003116:	2080      	movs	r0, #128	; 0x80
 8003118:	0200      	lsls	r0, r0, #8
 800311a:	4098      	lsls	r0, r3
      break;
 800311c:	e000      	b.n	8003120 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 800311e:	4804      	ldr	r0, [pc, #16]	; (8003130 <RCC_GetSystemClockFreq+0x68>)
}
 8003120:	bd10      	pop	{r4, pc}
        frequency = HSI_VALUE;
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8003124:	e7fc      	b.n	8003120 <RCC_GetSystemClockFreq+0x58>
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40021000 	.word	0x40021000
 800312c:	003d0900 	.word	0x003d0900
 8003130:	007a1200 	.word	0x007a1200
 8003134:	00f42400 	.word	0x00f42400

08003138 <LL_RCC_GetSystemClocksFreq>:
{
 8003138:	b510      	push	{r4, lr}
 800313a:	0004      	movs	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800313c:	f7ff ffc4 	bl	80030c8 <RCC_GetSystemClockFreq>
 8003140:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003142:	f7ff ff6f 	bl	8003024 <RCC_GetHCLKClockFreq>
 8003146:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003148:	f7ff ff7a 	bl	8003040 <RCC_GetPCLK1ClockFreq>
 800314c:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800314e:	6860      	ldr	r0, [r4, #4]
 8003150:	f7ff ff84 	bl	800305c <RCC_GetPCLK2ClockFreq>
 8003154:	60e0      	str	r0, [r4, #12]
}
 8003156:	bd10      	pop	{r4, pc}

08003158 <LL_RCC_GetUSARTClockFreq>:
{
 8003158:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800315a:	280c      	cmp	r0, #12
 800315c:	d001      	beq.n	8003162 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800315e:	2000      	movs	r0, #0
}
 8003160:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	4003      	ands	r3, r0
 8003168:	0400      	lsls	r0, r0, #16
 800316a:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <LL_RCC_GetUSARTClockFreq+0x74>)
 800316e:	4298      	cmp	r0, r3
 8003170:	d00f      	beq.n	8003192 <LL_RCC_GetUSARTClockFreq+0x3a>
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <LL_RCC_GetUSARTClockFreq+0x78>)
 8003174:	4298      	cmp	r0, r3
 8003176:	d019      	beq.n	80031ac <LL_RCC_GetUSARTClockFreq+0x54>
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <LL_RCC_GetUSARTClockFreq+0x7c>)
 800317a:	4298      	cmp	r0, r3
 800317c:	d006      	beq.n	800318c <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800317e:	f7ff ffa3 	bl	80030c8 <RCC_GetSystemClockFreq>
 8003182:	f7ff ff4f 	bl	8003024 <RCC_GetHCLKClockFreq>
 8003186:	f7ff ff5b 	bl	8003040 <RCC_GetPCLK1ClockFreq>
        break;
 800318a:	e7e9      	b.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 800318c:	f7ff ff9c 	bl	80030c8 <RCC_GetSystemClockFreq>
        break;
 8003190:	e7e6      	b.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2204      	movs	r2, #4
 8003198:	0010      	movs	r0, r2
 800319a:	4018      	ands	r0, r3
 800319c:	421a      	tst	r2, r3
 800319e:	d0df      	beq.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <LL_RCC_GetUSARTClockFreq+0x70>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	06db      	lsls	r3, r3, #27
 80031a6:	d40c      	bmi.n	80031c2 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 80031a8:	480b      	ldr	r0, [pc, #44]	; (80031d8 <LL_RCC_GetUSARTClockFreq+0x80>)
 80031aa:	e7d9      	b.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <LL_RCC_GetUSARTClockFreq+0x70>)
 80031ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	0010      	movs	r0, r2
 80031b6:	4018      	ands	r0, r3
 80031b8:	421a      	tst	r2, r3
 80031ba:	d0d1      	beq.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 80031bc:	2080      	movs	r0, #128	; 0x80
 80031be:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 80031c0:	e7ce      	b.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 80031c2:	4806      	ldr	r0, [pc, #24]	; (80031dc <LL_RCC_GetUSARTClockFreq+0x84>)
 80031c4:	e7cc      	b.n	8003160 <LL_RCC_GetUSARTClockFreq+0x8>
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	40021000 	.word	0x40021000
 80031cc:	000c0008 	.word	0x000c0008
 80031d0:	000c000c 	.word	0x000c000c
 80031d4:	000c0004 	.word	0x000c0004
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	003d0900 	.word	0x003d0900

080031e0 <LL_RCC_GetLPUARTClockFreq>:
{
 80031e0:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <LL_RCC_GetLPUARTClockFreq+0x68>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e6:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4298      	cmp	r0, r3
 80031ee:	d011      	beq.n	8003214 <LL_RCC_GetLPUARTClockFreq+0x34>
 80031f0:	23c0      	movs	r3, #192	; 0xc0
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	4298      	cmp	r0, r3
 80031f6:	d01a      	beq.n	800322e <LL_RCC_GetLPUARTClockFreq+0x4e>
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4298      	cmp	r0, r3
 80031fe:	d006      	beq.n	800320e <LL_RCC_GetLPUARTClockFreq+0x2e>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003200:	f7ff ff62 	bl	80030c8 <RCC_GetSystemClockFreq>
 8003204:	f7ff ff0e 	bl	8003024 <RCC_GetHCLKClockFreq>
 8003208:	f7ff ff1a 	bl	8003040 <RCC_GetPCLK1ClockFreq>
      break;
 800320c:	e001      	b.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
      lpuart_frequency = RCC_GetSystemClockFreq();
 800320e:	f7ff ff5b 	bl	80030c8 <RCC_GetSystemClockFreq>
}
 8003212:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2204      	movs	r2, #4
 800321a:	0010      	movs	r0, r2
 800321c:	4018      	ands	r0, r3
 800321e:	421a      	tst	r2, r3
 8003220:	d0f7      	beq.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	06db      	lsls	r3, r3, #27
 8003228:	d40c      	bmi.n	8003244 <LL_RCC_GetLPUARTClockFreq+0x64>
          lpuart_frequency = HSI_VALUE;
 800322a:	4808      	ldr	r0, [pc, #32]	; (800324c <LL_RCC_GetLPUARTClockFreq+0x6c>)
 800322c:	e7f1      	b.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8003230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	0010      	movs	r0, r2
 8003238:	4018      	ands	r0, r3
 800323a:	421a      	tst	r2, r3
 800323c:	d0e9      	beq.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
        lpuart_frequency = LSE_VALUE;
 800323e:	2080      	movs	r0, #128	; 0x80
 8003240:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 8003242:	e7e6      	b.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
          lpuart_frequency = (HSI_VALUE >> 2U);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <LL_RCC_GetLPUARTClockFreq+0x70>)
 8003246:	e7e4      	b.n	8003212 <LL_RCC_GetLPUARTClockFreq+0x32>
 8003248:	40021000 	.word	0x40021000
 800324c:	00f42400 	.word	0x00f42400
 8003250:	003d0900 	.word	0x003d0900

08003254 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003254:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003256:	6a03      	ldr	r3, [r0, #32]
 8003258:	2401      	movs	r4, #1
 800325a:	43a3      	bics	r3, r4
 800325c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800325e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003260:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003262:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003264:	2673      	movs	r6, #115	; 0x73
 8003266:	43b2      	bics	r2, r6
 8003268:	680e      	ldr	r6, [r1, #0]
 800326a:	4332      	orrs	r2, r6

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800326c:	2602      	movs	r6, #2
 800326e:	43b3      	bics	r3, r6
 8003270:	68ce      	ldr	r6, [r1, #12]
 8003272:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003274:	43a3      	bics	r3, r4
 8003276:	684c      	ldr	r4, [r1, #4]
 8003278:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800327a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800327c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800327e:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003280:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003282:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8003284:	2000      	movs	r0, #0
 8003286:	bd70      	pop	{r4, r5, r6, pc}

08003288 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003288:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800328a:	6a03      	ldr	r3, [r0, #32]
 800328c:	2610      	movs	r6, #16
 800328e:	43b3      	bics	r3, r6
 8003290:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003292:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003294:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003296:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003298:	4c0a      	ldr	r4, [pc, #40]	; (80032c4 <OC2Config+0x3c>)
 800329a:	4022      	ands	r2, r4
 800329c:	680c      	ldr	r4, [r1, #0]
 800329e:	0224      	lsls	r4, r4, #8
 80032a0:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80032a2:	2420      	movs	r4, #32
 80032a4:	43a3      	bics	r3, r4
 80032a6:	68cc      	ldr	r4, [r1, #12]
 80032a8:	0124      	lsls	r4, r4, #4
 80032aa:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80032ac:	43b3      	bics	r3, r6
 80032ae:	684c      	ldr	r4, [r1, #4]
 80032b0:	0124      	lsls	r4, r4, #4
 80032b2:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032b4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80032b6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80032b8:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80032ba:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032bc:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80032be:	2000      	movs	r0, #0
 80032c0:	bd70      	pop	{r4, r5, r6, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	ffff8cff 	.word	0xffff8cff

080032c8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032c8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80032ca:	6a02      	ldr	r2, [r0, #32]
 80032cc:	4e0c      	ldr	r6, [pc, #48]	; (8003300 <OC3Config+0x38>)
 80032ce:	4032      	ands	r2, r6
 80032d0:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80032d2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032d4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80032d6:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80032d8:	2473      	movs	r4, #115	; 0x73
 80032da:	43a2      	bics	r2, r4
 80032dc:	680c      	ldr	r4, [r1, #0]
 80032de:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80032e0:	4c08      	ldr	r4, [pc, #32]	; (8003304 <OC3Config+0x3c>)
 80032e2:	4023      	ands	r3, r4
 80032e4:	68cc      	ldr	r4, [r1, #12]
 80032e6:	0224      	lsls	r4, r4, #8
 80032e8:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80032ea:	4033      	ands	r3, r6
 80032ec:	684c      	ldr	r4, [r1, #4]
 80032ee:	0224      	lsls	r4, r4, #8
 80032f0:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032f2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80032f4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032f6:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80032f8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032fa:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80032fc:	2000      	movs	r0, #0
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	fffffeff 	.word	0xfffffeff
 8003304:	fffffdff 	.word	0xfffffdff

08003308 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003308:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800330a:	6a02      	ldr	r2, [r0, #32]
 800330c:	4e0d      	ldr	r6, [pc, #52]	; (8003344 <OC4Config+0x3c>)
 800330e:	4032      	ands	r2, r6
 8003310:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003312:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003314:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003316:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003318:	4c0b      	ldr	r4, [pc, #44]	; (8003348 <OC4Config+0x40>)
 800331a:	4022      	ands	r2, r4
 800331c:	680c      	ldr	r4, [r1, #0]
 800331e:	0224      	lsls	r4, r4, #8
 8003320:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003322:	4c0a      	ldr	r4, [pc, #40]	; (800334c <OC4Config+0x44>)
 8003324:	4023      	ands	r3, r4
 8003326:	68cc      	ldr	r4, [r1, #12]
 8003328:	0324      	lsls	r4, r4, #12
 800332a:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800332c:	4033      	ands	r3, r6
 800332e:	684c      	ldr	r4, [r1, #4]
 8003330:	0324      	lsls	r4, r4, #12
 8003332:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003334:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003336:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003338:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800333a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800333c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800333e:	2000      	movs	r0, #0
 8003340:	bd70      	pop	{r4, r5, r6, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	ffffefff 	.word	0xffffefff
 8003348:	ffff8cff 	.word	0xffff8cff
 800334c:	ffffdfff 	.word	0xffffdfff

08003350 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003350:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	05d2      	lsls	r2, r2, #23
 8003356:	4290      	cmp	r0, r2
 8003358:	d005      	beq.n	8003366 <LL_TIM_Init+0x16>
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <LL_TIM_Init+0x50>)
 800335c:	4290      	cmp	r0, r2
 800335e:	d002      	beq.n	8003366 <LL_TIM_Init+0x16>
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <LL_TIM_Init+0x54>)
 8003362:	4290      	cmp	r0, r2
 8003364:	d103      	bne.n	800336e <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003366:	2270      	movs	r2, #112	; 0x70
 8003368:	4393      	bics	r3, r2
 800336a:	684a      	ldr	r2, [r1, #4]
 800336c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	2280      	movs	r2, #128	; 0x80
 8003370:	05d2      	lsls	r2, r2, #23
 8003372:	4290      	cmp	r0, r2
 8003374:	d005      	beq.n	8003382 <LL_TIM_Init+0x32>
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <LL_TIM_Init+0x50>)
 8003378:	4290      	cmp	r0, r2
 800337a:	d002      	beq.n	8003382 <LL_TIM_Init+0x32>
 800337c:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <LL_TIM_Init+0x54>)
 800337e:	4290      	cmp	r0, r2
 8003380:	d103      	bne.n	800338a <LL_TIM_Init+0x3a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <LL_TIM_Init+0x58>)
 8003384:	4013      	ands	r3, r2
 8003386:	68ca      	ldr	r2, [r1, #12]
 8003388:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800338a:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800338c:	688b      	ldr	r3, [r1, #8]
 800338e:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003390:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003392:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003394:	6943      	ldr	r3, [r0, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	4313      	orrs	r3, r2
 800339a:	6143      	str	r3, [r0, #20]
}
 800339c:	2000      	movs	r0, #0
 800339e:	4770      	bx	lr
 80033a0:	40010800 	.word	0x40010800
 80033a4:	40011400 	.word	0x40011400
 80033a8:	fffffcff 	.word	0xfffffcff

080033ac <LL_TIM_OC_Init>:
{
 80033ac:	b510      	push	{r4, lr}
 80033ae:	000b      	movs	r3, r1
 80033b0:	0011      	movs	r1, r2
  switch (Channel)
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	0052      	lsls	r2, r2, #1
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d015      	beq.n	80033e6 <LL_TIM_OC_Init+0x3a>
 80033ba:	d808      	bhi.n	80033ce <LL_TIM_OC_Init+0x22>
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d00f      	beq.n	80033e0 <LL_TIM_OC_Init+0x34>
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d102      	bne.n	80033ca <LL_TIM_OC_Init+0x1e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80033c4:	f7ff ff60 	bl	8003288 <OC2Config>
      break;
 80033c8:	e009      	b.n	80033de <LL_TIM_OC_Init+0x32>
  switch (Channel)
 80033ca:	2001      	movs	r0, #1
 80033cc:	e007      	b.n	80033de <LL_TIM_OC_Init+0x32>
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0152      	lsls	r2, r2, #5
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d102      	bne.n	80033dc <LL_TIM_OC_Init+0x30>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80033d6:	f7ff ff97 	bl	8003308 <OC4Config>
      break;
 80033da:	e000      	b.n	80033de <LL_TIM_OC_Init+0x32>
  switch (Channel)
 80033dc:	2001      	movs	r0, #1
}
 80033de:	bd10      	pop	{r4, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80033e0:	f7ff ff38 	bl	8003254 <OC1Config>
      break;
 80033e4:	e7fb      	b.n	80033de <LL_TIM_OC_Init+0x32>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80033e6:	f7ff ff6f 	bl	80032c8 <OC3Config>
      break;
 80033ea:	e7f8      	b.n	80033de <LL_TIM_OC_Init+0x32>

080033ec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	0004      	movs	r4, r0
 80033f0:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80033f2:	6803      	ldr	r3, [r0, #0]
 80033f4:	07db      	lsls	r3, r3, #31
 80033f6:	d440      	bmi.n	800347a <LL_USART_Init+0x8e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80033f8:	6803      	ldr	r3, [r0, #0]
 80033fa:	4a23      	ldr	r2, [pc, #140]	; (8003488 <LL_USART_Init+0x9c>)
 80033fc:	401a      	ands	r2, r3
 80033fe:	684b      	ldr	r3, [r1, #4]
 8003400:	68c9      	ldr	r1, [r1, #12]
 8003402:	430b      	orrs	r3, r1
 8003404:	6929      	ldr	r1, [r5, #16]
 8003406:	430b      	orrs	r3, r1
 8003408:	69a9      	ldr	r1, [r5, #24]
 800340a:	430b      	orrs	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003410:	6843      	ldr	r3, [r0, #4]
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <LL_USART_Init+0xa0>)
 8003414:	4013      	ands	r3, r2
 8003416:	68aa      	ldr	r2, [r5, #8]
 8003418:	4313      	orrs	r3, r2
 800341a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800341c:	6883      	ldr	r3, [r0, #8]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <LL_USART_Init+0xa4>)
 8003420:	4013      	ands	r3, r2
 8003422:	696a      	ldr	r2, [r5, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8003428:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <LL_USART_Init+0xa8>)
 800342a:	4298      	cmp	r0, r3
 800342c:	d001      	beq.n	8003432 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 800342e:	2001      	movs	r0, #1
 8003430:	e024      	b.n	800347c <LL_USART_Init+0x90>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003432:	200c      	movs	r0, #12
 8003434:	f7ff fe90 	bl	8003158 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003438:	2800      	cmp	r0, #0
 800343a:	d020      	beq.n	800347e <LL_USART_Init+0x92>
        && (USART_InitStruct->BaudRate != 0U))
 800343c:	6829      	ldr	r1, [r5, #0]
 800343e:	2900      	cmp	r1, #0
 8003440:	d01f      	beq.n	8003482 <LL_USART_Init+0x96>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8003442:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	429a      	cmp	r2, r3
 800344a:	d008      	beq.n	800345e <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800344c:	084b      	lsrs	r3, r1, #1
 800344e:	18c0      	adds	r0, r0, r3
 8003450:	f7fc fe6c 	bl	800012c <__udivsi3>
 8003454:	0400      	lsls	r0, r0, #16
 8003456:	0c00      	lsrs	r0, r0, #16
 8003458:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 800345a:	2000      	movs	r0, #0
 800345c:	e00e      	b.n	800347c <LL_USART_Init+0x90>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800345e:	0040      	lsls	r0, r0, #1
 8003460:	084b      	lsrs	r3, r1, #1
 8003462:	18c0      	adds	r0, r0, r3
 8003464:	f7fc fe62 	bl	800012c <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <LL_USART_Init+0xac>)
 800346a:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346c:	0840      	lsrs	r0, r0, #1
 800346e:	2207      	movs	r2, #7
 8003470:	4010      	ands	r0, r2
 8003472:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8003474:	60e0      	str	r0, [r4, #12]
 8003476:	2000      	movs	r0, #0
 8003478:	e000      	b.n	800347c <LL_USART_Init+0x90>
  ErrorStatus status = ERROR;
 800347a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800347c:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 800347e:	2001      	movs	r0, #1
 8003480:	e7fc      	b.n	800347c <LL_USART_Init+0x90>
 8003482:	2001      	movs	r0, #1
 8003484:	e7fa      	b.n	800347c <LL_USART_Init+0x90>
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	efff69f3 	.word	0xefff69f3
 800348c:	ffffcfff 	.word	0xffffcfff
 8003490:	fffffcff 	.word	0xfffffcff
 8003494:	40004400 	.word	0x40004400
 8003498:	0000fff0 	.word	0x0000fff0

0800349c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800349c:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800349e:	21fa      	movs	r1, #250	; 0xfa
 80034a0:	0089      	lsls	r1, r1, #2
 80034a2:	f7fc fe43 	bl	800012c <__udivsi3>
 80034a6:	3801      	subs	r0, #1
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <LL_Init1msTick+0x1c>)
 80034aa:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b0:	3205      	adds	r2, #5
 80034b2:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	e000e010 	.word	0xe000e010

080034bc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80034bc:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <LL_mDelay+0x24>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80034c4:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80034c6:	1c43      	adds	r3, r0, #1
 80034c8:	d000      	beq.n	80034cc <LL_mDelay+0x10>
  {
    Delay++;
 80034ca:	3001      	adds	r0, #1
  }

  while (Delay)
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d005      	beq.n	80034dc <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <LL_mDelay+0x24>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	03db      	lsls	r3, r3, #15
 80034d6:	d5f9      	bpl.n	80034cc <LL_mDelay+0x10>
    {
      Delay--;
 80034d8:	3801      	subs	r0, #1
 80034da:	e7f7      	b.n	80034cc <LL_mDelay+0x10>
    }
  }
}
 80034dc:	b002      	add	sp, #8
 80034de:	4770      	bx	lr
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034e4:	4b01      	ldr	r3, [pc, #4]	; (80034ec <LL_SetSystemCoreClock+0x8>)
 80034e6:	6018      	str	r0, [r3, #0]
}
 80034e8:	4770      	bx	lr
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	2000001c 	.word	0x2000001c

080034f0 <__errno>:
 80034f0:	4b01      	ldr	r3, [pc, #4]	; (80034f8 <__errno+0x8>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	4770      	bx	lr
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	2000002c 	.word	0x2000002c

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	2600      	movs	r6, #0
 8003500:	4d0c      	ldr	r5, [pc, #48]	; (8003534 <__libc_init_array+0x38>)
 8003502:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003504:	1b64      	subs	r4, r4, r5
 8003506:	10a4      	asrs	r4, r4, #2
 8003508:	42a6      	cmp	r6, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	2600      	movs	r6, #0
 800350e:	f000 fc5d 	bl	8003dcc <_init>
 8003512:	4d0a      	ldr	r5, [pc, #40]	; (800353c <__libc_init_array+0x40>)
 8003514:	4c0a      	ldr	r4, [pc, #40]	; (8003540 <__libc_init_array+0x44>)
 8003516:	1b64      	subs	r4, r4, r5
 8003518:	10a4      	asrs	r4, r4, #2
 800351a:	42a6      	cmp	r6, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	00b3      	lsls	r3, r6, #2
 8003522:	58eb      	ldr	r3, [r5, r3]
 8003524:	4798      	blx	r3
 8003526:	3601      	adds	r6, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	00b3      	lsls	r3, r6, #2
 800352c:	58eb      	ldr	r3, [r5, r3]
 800352e:	4798      	blx	r3
 8003530:	3601      	adds	r6, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	080044b0 	.word	0x080044b0
 8003538:	080044b0 	.word	0x080044b0
 800353c:	080044b0 	.word	0x080044b0
 8003540:	080044b4 	.word	0x080044b4

08003544 <memcpy>:
 8003544:	2300      	movs	r3, #0
 8003546:	b510      	push	{r4, lr}
 8003548:	429a      	cmp	r2, r3
 800354a:	d100      	bne.n	800354e <memcpy+0xa>
 800354c:	bd10      	pop	{r4, pc}
 800354e:	5ccc      	ldrb	r4, [r1, r3]
 8003550:	54c4      	strb	r4, [r0, r3]
 8003552:	3301      	adds	r3, #1
 8003554:	e7f8      	b.n	8003548 <memcpy+0x4>

08003556 <memset>:
 8003556:	0003      	movs	r3, r0
 8003558:	1882      	adds	r2, r0, r2
 800355a:	4293      	cmp	r3, r2
 800355c:	d100      	bne.n	8003560 <memset+0xa>
 800355e:	4770      	bx	lr
 8003560:	7019      	strb	r1, [r3, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	e7f9      	b.n	800355a <memset+0x4>

08003566 <_vsniprintf_r>:
 8003566:	b530      	push	{r4, r5, lr}
 8003568:	0014      	movs	r4, r2
 800356a:	0005      	movs	r5, r0
 800356c:	001a      	movs	r2, r3
 800356e:	b09b      	sub	sp, #108	; 0x6c
 8003570:	2c00      	cmp	r4, #0
 8003572:	da05      	bge.n	8003580 <_vsniprintf_r+0x1a>
 8003574:	238b      	movs	r3, #139	; 0x8b
 8003576:	6003      	str	r3, [r0, #0]
 8003578:	2001      	movs	r0, #1
 800357a:	4240      	negs	r0, r0
 800357c:	b01b      	add	sp, #108	; 0x6c
 800357e:	bd30      	pop	{r4, r5, pc}
 8003580:	2382      	movs	r3, #130	; 0x82
 8003582:	4668      	mov	r0, sp
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	8183      	strh	r3, [r0, #12]
 8003588:	2300      	movs	r3, #0
 800358a:	9100      	str	r1, [sp, #0]
 800358c:	9104      	str	r1, [sp, #16]
 800358e:	429c      	cmp	r4, r3
 8003590:	d000      	beq.n	8003594 <_vsniprintf_r+0x2e>
 8003592:	1e63      	subs	r3, r4, #1
 8003594:	9302      	str	r3, [sp, #8]
 8003596:	9305      	str	r3, [sp, #20]
 8003598:	2301      	movs	r3, #1
 800359a:	4669      	mov	r1, sp
 800359c:	425b      	negs	r3, r3
 800359e:	81cb      	strh	r3, [r1, #14]
 80035a0:	0028      	movs	r0, r5
 80035a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80035a4:	f000 f878 	bl	8003698 <_svfiprintf_r>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	da01      	bge.n	80035b0 <_vsniprintf_r+0x4a>
 80035ac:	238b      	movs	r3, #139	; 0x8b
 80035ae:	602b      	str	r3, [r5, #0]
 80035b0:	2c00      	cmp	r4, #0
 80035b2:	d0e3      	beq.n	800357c <_vsniprintf_r+0x16>
 80035b4:	2300      	movs	r3, #0
 80035b6:	9a00      	ldr	r2, [sp, #0]
 80035b8:	7013      	strb	r3, [r2, #0]
 80035ba:	e7df      	b.n	800357c <_vsniprintf_r+0x16>

080035bc <vsniprintf>:
 80035bc:	b507      	push	{r0, r1, r2, lr}
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	0013      	movs	r3, r2
 80035c2:	000a      	movs	r2, r1
 80035c4:	0001      	movs	r1, r0
 80035c6:	4802      	ldr	r0, [pc, #8]	; (80035d0 <vsniprintf+0x14>)
 80035c8:	6800      	ldr	r0, [r0, #0]
 80035ca:	f7ff ffcc 	bl	8003566 <_vsniprintf_r>
 80035ce:	bd0e      	pop	{r1, r2, r3, pc}
 80035d0:	2000002c 	.word	0x2000002c

080035d4 <__ssputs_r>:
 80035d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d6:	688e      	ldr	r6, [r1, #8]
 80035d8:	b085      	sub	sp, #20
 80035da:	0007      	movs	r7, r0
 80035dc:	000c      	movs	r4, r1
 80035de:	9203      	str	r2, [sp, #12]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	429e      	cmp	r6, r3
 80035e4:	d83c      	bhi.n	8003660 <__ssputs_r+0x8c>
 80035e6:	2390      	movs	r3, #144	; 0x90
 80035e8:	898a      	ldrh	r2, [r1, #12]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	421a      	tst	r2, r3
 80035ee:	d034      	beq.n	800365a <__ssputs_r+0x86>
 80035f0:	2503      	movs	r5, #3
 80035f2:	6909      	ldr	r1, [r1, #16]
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	1a5b      	subs	r3, r3, r1
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	6963      	ldr	r3, [r4, #20]
 80035fc:	9802      	ldr	r0, [sp, #8]
 80035fe:	435d      	muls	r5, r3
 8003600:	0feb      	lsrs	r3, r5, #31
 8003602:	195d      	adds	r5, r3, r5
 8003604:	9b01      	ldr	r3, [sp, #4]
 8003606:	106d      	asrs	r5, r5, #1
 8003608:	3301      	adds	r3, #1
 800360a:	181b      	adds	r3, r3, r0
 800360c:	42ab      	cmp	r3, r5
 800360e:	d900      	bls.n	8003612 <__ssputs_r+0x3e>
 8003610:	001d      	movs	r5, r3
 8003612:	0553      	lsls	r3, r2, #21
 8003614:	d532      	bpl.n	800367c <__ssputs_r+0xa8>
 8003616:	0029      	movs	r1, r5
 8003618:	0038      	movs	r0, r7
 800361a:	f000 fb27 	bl	8003c6c <_malloc_r>
 800361e:	1e06      	subs	r6, r0, #0
 8003620:	d109      	bne.n	8003636 <__ssputs_r+0x62>
 8003622:	230c      	movs	r3, #12
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	2340      	movs	r3, #64	; 0x40
 8003628:	2001      	movs	r0, #1
 800362a:	89a2      	ldrh	r2, [r4, #12]
 800362c:	4240      	negs	r0, r0
 800362e:	4313      	orrs	r3, r2
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	b005      	add	sp, #20
 8003634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003636:	9a02      	ldr	r2, [sp, #8]
 8003638:	6921      	ldr	r1, [r4, #16]
 800363a:	f7ff ff83 	bl	8003544 <memcpy>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <__ssputs_r+0xc0>)
 8003642:	401a      	ands	r2, r3
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	4313      	orrs	r3, r2
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	9b02      	ldr	r3, [sp, #8]
 800364c:	6126      	str	r6, [r4, #16]
 800364e:	18f6      	adds	r6, r6, r3
 8003650:	6026      	str	r6, [r4, #0]
 8003652:	6165      	str	r5, [r4, #20]
 8003654:	9e01      	ldr	r6, [sp, #4]
 8003656:	1aed      	subs	r5, r5, r3
 8003658:	60a5      	str	r5, [r4, #8]
 800365a:	9b01      	ldr	r3, [sp, #4]
 800365c:	429e      	cmp	r6, r3
 800365e:	d900      	bls.n	8003662 <__ssputs_r+0x8e>
 8003660:	9e01      	ldr	r6, [sp, #4]
 8003662:	0032      	movs	r2, r6
 8003664:	9903      	ldr	r1, [sp, #12]
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	f000 faa3 	bl	8003bb2 <memmove>
 800366c:	68a3      	ldr	r3, [r4, #8]
 800366e:	2000      	movs	r0, #0
 8003670:	1b9b      	subs	r3, r3, r6
 8003672:	60a3      	str	r3, [r4, #8]
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	199e      	adds	r6, r3, r6
 8003678:	6026      	str	r6, [r4, #0]
 800367a:	e7da      	b.n	8003632 <__ssputs_r+0x5e>
 800367c:	002a      	movs	r2, r5
 800367e:	0038      	movs	r0, r7
 8003680:	f000 fb52 	bl	8003d28 <_realloc_r>
 8003684:	1e06      	subs	r6, r0, #0
 8003686:	d1e0      	bne.n	800364a <__ssputs_r+0x76>
 8003688:	0038      	movs	r0, r7
 800368a:	6921      	ldr	r1, [r4, #16]
 800368c:	f000 faa4 	bl	8003bd8 <_free_r>
 8003690:	e7c7      	b.n	8003622 <__ssputs_r+0x4e>
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	fffffb7f 	.word	0xfffffb7f

08003698 <_svfiprintf_r>:
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	b0a1      	sub	sp, #132	; 0x84
 800369c:	9003      	str	r0, [sp, #12]
 800369e:	001d      	movs	r5, r3
 80036a0:	898b      	ldrh	r3, [r1, #12]
 80036a2:	000f      	movs	r7, r1
 80036a4:	0016      	movs	r6, r2
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	d511      	bpl.n	80036ce <_svfiprintf_r+0x36>
 80036aa:	690b      	ldr	r3, [r1, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10e      	bne.n	80036ce <_svfiprintf_r+0x36>
 80036b0:	2140      	movs	r1, #64	; 0x40
 80036b2:	f000 fadb 	bl	8003c6c <_malloc_r>
 80036b6:	6038      	str	r0, [r7, #0]
 80036b8:	6138      	str	r0, [r7, #16]
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d105      	bne.n	80036ca <_svfiprintf_r+0x32>
 80036be:	230c      	movs	r3, #12
 80036c0:	9a03      	ldr	r2, [sp, #12]
 80036c2:	3801      	subs	r0, #1
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	b021      	add	sp, #132	; 0x84
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	ac08      	add	r4, sp, #32
 80036d2:	6163      	str	r3, [r4, #20]
 80036d4:	3320      	adds	r3, #32
 80036d6:	7663      	strb	r3, [r4, #25]
 80036d8:	3310      	adds	r3, #16
 80036da:	76a3      	strb	r3, [r4, #26]
 80036dc:	9507      	str	r5, [sp, #28]
 80036de:	0035      	movs	r5, r6
 80036e0:	782b      	ldrb	r3, [r5, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <_svfiprintf_r+0x52>
 80036e6:	2b25      	cmp	r3, #37	; 0x25
 80036e8:	d147      	bne.n	800377a <_svfiprintf_r+0xe2>
 80036ea:	1bab      	subs	r3, r5, r6
 80036ec:	9305      	str	r3, [sp, #20]
 80036ee:	42b5      	cmp	r5, r6
 80036f0:	d00c      	beq.n	800370c <_svfiprintf_r+0x74>
 80036f2:	0032      	movs	r2, r6
 80036f4:	0039      	movs	r1, r7
 80036f6:	9803      	ldr	r0, [sp, #12]
 80036f8:	f7ff ff6c 	bl	80035d4 <__ssputs_r>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d100      	bne.n	8003702 <_svfiprintf_r+0x6a>
 8003700:	e0ae      	b.n	8003860 <_svfiprintf_r+0x1c8>
 8003702:	6962      	ldr	r2, [r4, #20]
 8003704:	9b05      	ldr	r3, [sp, #20]
 8003706:	4694      	mov	ip, r2
 8003708:	4463      	add	r3, ip
 800370a:	6163      	str	r3, [r4, #20]
 800370c:	782b      	ldrb	r3, [r5, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d100      	bne.n	8003714 <_svfiprintf_r+0x7c>
 8003712:	e0a5      	b.n	8003860 <_svfiprintf_r+0x1c8>
 8003714:	2201      	movs	r2, #1
 8003716:	2300      	movs	r3, #0
 8003718:	4252      	negs	r2, r2
 800371a:	6062      	str	r2, [r4, #4]
 800371c:	a904      	add	r1, sp, #16
 800371e:	3254      	adds	r2, #84	; 0x54
 8003720:	1852      	adds	r2, r2, r1
 8003722:	1c6e      	adds	r6, r5, #1
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	60e3      	str	r3, [r4, #12]
 8003728:	60a3      	str	r3, [r4, #8]
 800372a:	7013      	strb	r3, [r2, #0]
 800372c:	65a3      	str	r3, [r4, #88]	; 0x58
 800372e:	2205      	movs	r2, #5
 8003730:	7831      	ldrb	r1, [r6, #0]
 8003732:	4854      	ldr	r0, [pc, #336]	; (8003884 <_svfiprintf_r+0x1ec>)
 8003734:	f000 fa32 	bl	8003b9c <memchr>
 8003738:	1c75      	adds	r5, r6, #1
 800373a:	2800      	cmp	r0, #0
 800373c:	d11f      	bne.n	800377e <_svfiprintf_r+0xe6>
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	06d3      	lsls	r3, r2, #27
 8003742:	d504      	bpl.n	800374e <_svfiprintf_r+0xb6>
 8003744:	2353      	movs	r3, #83	; 0x53
 8003746:	a904      	add	r1, sp, #16
 8003748:	185b      	adds	r3, r3, r1
 800374a:	2120      	movs	r1, #32
 800374c:	7019      	strb	r1, [r3, #0]
 800374e:	0713      	lsls	r3, r2, #28
 8003750:	d504      	bpl.n	800375c <_svfiprintf_r+0xc4>
 8003752:	2353      	movs	r3, #83	; 0x53
 8003754:	a904      	add	r1, sp, #16
 8003756:	185b      	adds	r3, r3, r1
 8003758:	212b      	movs	r1, #43	; 0x2b
 800375a:	7019      	strb	r1, [r3, #0]
 800375c:	7833      	ldrb	r3, [r6, #0]
 800375e:	2b2a      	cmp	r3, #42	; 0x2a
 8003760:	d016      	beq.n	8003790 <_svfiprintf_r+0xf8>
 8003762:	0035      	movs	r5, r6
 8003764:	2100      	movs	r1, #0
 8003766:	200a      	movs	r0, #10
 8003768:	68e3      	ldr	r3, [r4, #12]
 800376a:	782a      	ldrb	r2, [r5, #0]
 800376c:	1c6e      	adds	r6, r5, #1
 800376e:	3a30      	subs	r2, #48	; 0x30
 8003770:	2a09      	cmp	r2, #9
 8003772:	d94e      	bls.n	8003812 <_svfiprintf_r+0x17a>
 8003774:	2900      	cmp	r1, #0
 8003776:	d111      	bne.n	800379c <_svfiprintf_r+0x104>
 8003778:	e017      	b.n	80037aa <_svfiprintf_r+0x112>
 800377a:	3501      	adds	r5, #1
 800377c:	e7b0      	b.n	80036e0 <_svfiprintf_r+0x48>
 800377e:	4b41      	ldr	r3, [pc, #260]	; (8003884 <_svfiprintf_r+0x1ec>)
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	1ac0      	subs	r0, r0, r3
 8003784:	2301      	movs	r3, #1
 8003786:	4083      	lsls	r3, r0
 8003788:	4313      	orrs	r3, r2
 800378a:	002e      	movs	r6, r5
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	e7ce      	b.n	800372e <_svfiprintf_r+0x96>
 8003790:	9b07      	ldr	r3, [sp, #28]
 8003792:	1d19      	adds	r1, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	9107      	str	r1, [sp, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db01      	blt.n	80037a0 <_svfiprintf_r+0x108>
 800379c:	930b      	str	r3, [sp, #44]	; 0x2c
 800379e:	e004      	b.n	80037aa <_svfiprintf_r+0x112>
 80037a0:	425b      	negs	r3, r3
 80037a2:	60e3      	str	r3, [r4, #12]
 80037a4:	2302      	movs	r3, #2
 80037a6:	4313      	orrs	r3, r2
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	782b      	ldrb	r3, [r5, #0]
 80037ac:	2b2e      	cmp	r3, #46	; 0x2e
 80037ae:	d10a      	bne.n	80037c6 <_svfiprintf_r+0x12e>
 80037b0:	786b      	ldrb	r3, [r5, #1]
 80037b2:	2b2a      	cmp	r3, #42	; 0x2a
 80037b4:	d135      	bne.n	8003822 <_svfiprintf_r+0x18a>
 80037b6:	9b07      	ldr	r3, [sp, #28]
 80037b8:	3502      	adds	r5, #2
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db2b      	blt.n	800381c <_svfiprintf_r+0x184>
 80037c4:	9309      	str	r3, [sp, #36]	; 0x24
 80037c6:	4e30      	ldr	r6, [pc, #192]	; (8003888 <_svfiprintf_r+0x1f0>)
 80037c8:	2203      	movs	r2, #3
 80037ca:	0030      	movs	r0, r6
 80037cc:	7829      	ldrb	r1, [r5, #0]
 80037ce:	f000 f9e5 	bl	8003b9c <memchr>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d006      	beq.n	80037e4 <_svfiprintf_r+0x14c>
 80037d6:	2340      	movs	r3, #64	; 0x40
 80037d8:	1b80      	subs	r0, r0, r6
 80037da:	4083      	lsls	r3, r0
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	3501      	adds	r5, #1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	7829      	ldrb	r1, [r5, #0]
 80037e6:	2206      	movs	r2, #6
 80037e8:	4828      	ldr	r0, [pc, #160]	; (800388c <_svfiprintf_r+0x1f4>)
 80037ea:	1c6e      	adds	r6, r5, #1
 80037ec:	7621      	strb	r1, [r4, #24]
 80037ee:	f000 f9d5 	bl	8003b9c <memchr>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d03c      	beq.n	8003870 <_svfiprintf_r+0x1d8>
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <_svfiprintf_r+0x1f8>)
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d125      	bne.n	8003848 <_svfiprintf_r+0x1b0>
 80037fc:	2207      	movs	r2, #7
 80037fe:	9b07      	ldr	r3, [sp, #28]
 8003800:	3307      	adds	r3, #7
 8003802:	4393      	bics	r3, r2
 8003804:	3308      	adds	r3, #8
 8003806:	9307      	str	r3, [sp, #28]
 8003808:	6963      	ldr	r3, [r4, #20]
 800380a:	9a04      	ldr	r2, [sp, #16]
 800380c:	189b      	adds	r3, r3, r2
 800380e:	6163      	str	r3, [r4, #20]
 8003810:	e765      	b.n	80036de <_svfiprintf_r+0x46>
 8003812:	4343      	muls	r3, r0
 8003814:	0035      	movs	r5, r6
 8003816:	2101      	movs	r1, #1
 8003818:	189b      	adds	r3, r3, r2
 800381a:	e7a6      	b.n	800376a <_svfiprintf_r+0xd2>
 800381c:	2301      	movs	r3, #1
 800381e:	425b      	negs	r3, r3
 8003820:	e7d0      	b.n	80037c4 <_svfiprintf_r+0x12c>
 8003822:	2300      	movs	r3, #0
 8003824:	200a      	movs	r0, #10
 8003826:	001a      	movs	r2, r3
 8003828:	3501      	adds	r5, #1
 800382a:	6063      	str	r3, [r4, #4]
 800382c:	7829      	ldrb	r1, [r5, #0]
 800382e:	1c6e      	adds	r6, r5, #1
 8003830:	3930      	subs	r1, #48	; 0x30
 8003832:	2909      	cmp	r1, #9
 8003834:	d903      	bls.n	800383e <_svfiprintf_r+0x1a6>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c5      	beq.n	80037c6 <_svfiprintf_r+0x12e>
 800383a:	9209      	str	r2, [sp, #36]	; 0x24
 800383c:	e7c3      	b.n	80037c6 <_svfiprintf_r+0x12e>
 800383e:	4342      	muls	r2, r0
 8003840:	0035      	movs	r5, r6
 8003842:	2301      	movs	r3, #1
 8003844:	1852      	adds	r2, r2, r1
 8003846:	e7f1      	b.n	800382c <_svfiprintf_r+0x194>
 8003848:	ab07      	add	r3, sp, #28
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	003a      	movs	r2, r7
 800384e:	0021      	movs	r1, r4
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_svfiprintf_r+0x1fc>)
 8003852:	9803      	ldr	r0, [sp, #12]
 8003854:	e000      	b.n	8003858 <_svfiprintf_r+0x1c0>
 8003856:	bf00      	nop
 8003858:	9004      	str	r0, [sp, #16]
 800385a:	9b04      	ldr	r3, [sp, #16]
 800385c:	3301      	adds	r3, #1
 800385e:	d1d3      	bne.n	8003808 <_svfiprintf_r+0x170>
 8003860:	89bb      	ldrh	r3, [r7, #12]
 8003862:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003864:	065b      	lsls	r3, r3, #25
 8003866:	d400      	bmi.n	800386a <_svfiprintf_r+0x1d2>
 8003868:	e72d      	b.n	80036c6 <_svfiprintf_r+0x2e>
 800386a:	2001      	movs	r0, #1
 800386c:	4240      	negs	r0, r0
 800386e:	e72a      	b.n	80036c6 <_svfiprintf_r+0x2e>
 8003870:	ab07      	add	r3, sp, #28
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	003a      	movs	r2, r7
 8003876:	0021      	movs	r1, r4
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <_svfiprintf_r+0x1fc>)
 800387a:	9803      	ldr	r0, [sp, #12]
 800387c:	f000 f87c 	bl	8003978 <_printf_i>
 8003880:	e7ea      	b.n	8003858 <_svfiprintf_r+0x1c0>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	08004474 	.word	0x08004474
 8003888:	0800447a 	.word	0x0800447a
 800388c:	0800447e 	.word	0x0800447e
 8003890:	00000000 	.word	0x00000000
 8003894:	080035d5 	.word	0x080035d5

08003898 <_printf_common>:
 8003898:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800389a:	0015      	movs	r5, r2
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	688a      	ldr	r2, [r1, #8]
 80038a0:	690b      	ldr	r3, [r1, #16]
 80038a2:	000c      	movs	r4, r1
 80038a4:	9000      	str	r0, [sp, #0]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	da00      	bge.n	80038ac <_printf_common+0x14>
 80038aa:	0013      	movs	r3, r2
 80038ac:	0022      	movs	r2, r4
 80038ae:	602b      	str	r3, [r5, #0]
 80038b0:	3243      	adds	r2, #67	; 0x43
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	2a00      	cmp	r2, #0
 80038b6:	d001      	beq.n	80038bc <_printf_common+0x24>
 80038b8:	3301      	adds	r3, #1
 80038ba:	602b      	str	r3, [r5, #0]
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	d502      	bpl.n	80038c8 <_printf_common+0x30>
 80038c2:	682b      	ldr	r3, [r5, #0]
 80038c4:	3302      	adds	r3, #2
 80038c6:	602b      	str	r3, [r5, #0]
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	2306      	movs	r3, #6
 80038cc:	0017      	movs	r7, r2
 80038ce:	401f      	ands	r7, r3
 80038d0:	421a      	tst	r2, r3
 80038d2:	d027      	beq.n	8003924 <_printf_common+0x8c>
 80038d4:	0023      	movs	r3, r4
 80038d6:	3343      	adds	r3, #67	; 0x43
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	4193      	sbcs	r3, r2
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	0692      	lsls	r2, r2, #26
 80038e2:	d430      	bmi.n	8003946 <_printf_common+0xae>
 80038e4:	0022      	movs	r2, r4
 80038e6:	9901      	ldr	r1, [sp, #4]
 80038e8:	9800      	ldr	r0, [sp, #0]
 80038ea:	9e08      	ldr	r6, [sp, #32]
 80038ec:	3243      	adds	r2, #67	; 0x43
 80038ee:	47b0      	blx	r6
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d025      	beq.n	8003940 <_printf_common+0xa8>
 80038f4:	2306      	movs	r3, #6
 80038f6:	6820      	ldr	r0, [r4, #0]
 80038f8:	682a      	ldr	r2, [r5, #0]
 80038fa:	68e1      	ldr	r1, [r4, #12]
 80038fc:	2500      	movs	r5, #0
 80038fe:	4003      	ands	r3, r0
 8003900:	2b04      	cmp	r3, #4
 8003902:	d103      	bne.n	800390c <_printf_common+0x74>
 8003904:	1a8d      	subs	r5, r1, r2
 8003906:	43eb      	mvns	r3, r5
 8003908:	17db      	asrs	r3, r3, #31
 800390a:	401d      	ands	r5, r3
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	6922      	ldr	r2, [r4, #16]
 8003910:	4293      	cmp	r3, r2
 8003912:	dd01      	ble.n	8003918 <_printf_common+0x80>
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	18ed      	adds	r5, r5, r3
 8003918:	2700      	movs	r7, #0
 800391a:	42bd      	cmp	r5, r7
 800391c:	d120      	bne.n	8003960 <_printf_common+0xc8>
 800391e:	2000      	movs	r0, #0
 8003920:	e010      	b.n	8003944 <_printf_common+0xac>
 8003922:	3701      	adds	r7, #1
 8003924:	68e3      	ldr	r3, [r4, #12]
 8003926:	682a      	ldr	r2, [r5, #0]
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	42bb      	cmp	r3, r7
 800392c:	ddd2      	ble.n	80038d4 <_printf_common+0x3c>
 800392e:	0022      	movs	r2, r4
 8003930:	2301      	movs	r3, #1
 8003932:	9901      	ldr	r1, [sp, #4]
 8003934:	9800      	ldr	r0, [sp, #0]
 8003936:	9e08      	ldr	r6, [sp, #32]
 8003938:	3219      	adds	r2, #25
 800393a:	47b0      	blx	r6
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d1f0      	bne.n	8003922 <_printf_common+0x8a>
 8003940:	2001      	movs	r0, #1
 8003942:	4240      	negs	r0, r0
 8003944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003946:	2030      	movs	r0, #48	; 0x30
 8003948:	18e1      	adds	r1, r4, r3
 800394a:	3143      	adds	r1, #67	; 0x43
 800394c:	7008      	strb	r0, [r1, #0]
 800394e:	0021      	movs	r1, r4
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	3145      	adds	r1, #69	; 0x45
 8003954:	7809      	ldrb	r1, [r1, #0]
 8003956:	18a2      	adds	r2, r4, r2
 8003958:	3243      	adds	r2, #67	; 0x43
 800395a:	3302      	adds	r3, #2
 800395c:	7011      	strb	r1, [r2, #0]
 800395e:	e7c1      	b.n	80038e4 <_printf_common+0x4c>
 8003960:	0022      	movs	r2, r4
 8003962:	2301      	movs	r3, #1
 8003964:	9901      	ldr	r1, [sp, #4]
 8003966:	9800      	ldr	r0, [sp, #0]
 8003968:	9e08      	ldr	r6, [sp, #32]
 800396a:	321a      	adds	r2, #26
 800396c:	47b0      	blx	r6
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d0e6      	beq.n	8003940 <_printf_common+0xa8>
 8003972:	3701      	adds	r7, #1
 8003974:	e7d1      	b.n	800391a <_printf_common+0x82>
	...

08003978 <_printf_i>:
 8003978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397a:	b08b      	sub	sp, #44	; 0x2c
 800397c:	9206      	str	r2, [sp, #24]
 800397e:	000a      	movs	r2, r1
 8003980:	3243      	adds	r2, #67	; 0x43
 8003982:	9307      	str	r3, [sp, #28]
 8003984:	9005      	str	r0, [sp, #20]
 8003986:	9204      	str	r2, [sp, #16]
 8003988:	7e0a      	ldrb	r2, [r1, #24]
 800398a:	000c      	movs	r4, r1
 800398c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800398e:	2a78      	cmp	r2, #120	; 0x78
 8003990:	d806      	bhi.n	80039a0 <_printf_i+0x28>
 8003992:	2a62      	cmp	r2, #98	; 0x62
 8003994:	d808      	bhi.n	80039a8 <_printf_i+0x30>
 8003996:	2a00      	cmp	r2, #0
 8003998:	d100      	bne.n	800399c <_printf_i+0x24>
 800399a:	e0c0      	b.n	8003b1e <_printf_i+0x1a6>
 800399c:	2a58      	cmp	r2, #88	; 0x58
 800399e:	d052      	beq.n	8003a46 <_printf_i+0xce>
 80039a0:	0026      	movs	r6, r4
 80039a2:	3642      	adds	r6, #66	; 0x42
 80039a4:	7032      	strb	r2, [r6, #0]
 80039a6:	e022      	b.n	80039ee <_printf_i+0x76>
 80039a8:	0010      	movs	r0, r2
 80039aa:	3863      	subs	r0, #99	; 0x63
 80039ac:	2815      	cmp	r0, #21
 80039ae:	d8f7      	bhi.n	80039a0 <_printf_i+0x28>
 80039b0:	f7fc fbb2 	bl	8000118 <__gnu_thumb1_case_shi>
 80039b4:	001f0016 	.word	0x001f0016
 80039b8:	fff6fff6 	.word	0xfff6fff6
 80039bc:	fff6fff6 	.word	0xfff6fff6
 80039c0:	fff6001f 	.word	0xfff6001f
 80039c4:	fff6fff6 	.word	0xfff6fff6
 80039c8:	00a8fff6 	.word	0x00a8fff6
 80039cc:	009a0036 	.word	0x009a0036
 80039d0:	fff6fff6 	.word	0xfff6fff6
 80039d4:	fff600b9 	.word	0xfff600b9
 80039d8:	fff60036 	.word	0xfff60036
 80039dc:	009efff6 	.word	0x009efff6
 80039e0:	0026      	movs	r6, r4
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	3642      	adds	r6, #66	; 0x42
 80039e6:	1d11      	adds	r1, r2, #4
 80039e8:	6019      	str	r1, [r3, #0]
 80039ea:	6813      	ldr	r3, [r2, #0]
 80039ec:	7033      	strb	r3, [r6, #0]
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0a7      	b.n	8003b42 <_printf_i+0x1ca>
 80039f2:	6808      	ldr	r0, [r1, #0]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	1d0a      	adds	r2, r1, #4
 80039f8:	0605      	lsls	r5, r0, #24
 80039fa:	d50b      	bpl.n	8003a14 <_printf_i+0x9c>
 80039fc:	680d      	ldr	r5, [r1, #0]
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	da03      	bge.n	8003a0c <_printf_i+0x94>
 8003a04:	232d      	movs	r3, #45	; 0x2d
 8003a06:	9a04      	ldr	r2, [sp, #16]
 8003a08:	426d      	negs	r5, r5
 8003a0a:	7013      	strb	r3, [r2, #0]
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <_printf_i+0x21c>)
 8003a0e:	270a      	movs	r7, #10
 8003a10:	9303      	str	r3, [sp, #12]
 8003a12:	e032      	b.n	8003a7a <_printf_i+0x102>
 8003a14:	680d      	ldr	r5, [r1, #0]
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	0641      	lsls	r1, r0, #25
 8003a1a:	d5f1      	bpl.n	8003a00 <_printf_i+0x88>
 8003a1c:	b22d      	sxth	r5, r5
 8003a1e:	e7ef      	b.n	8003a00 <_printf_i+0x88>
 8003a20:	680d      	ldr	r5, [r1, #0]
 8003a22:	6819      	ldr	r1, [r3, #0]
 8003a24:	1d08      	adds	r0, r1, #4
 8003a26:	6018      	str	r0, [r3, #0]
 8003a28:	062e      	lsls	r6, r5, #24
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0xb8>
 8003a2c:	680d      	ldr	r5, [r1, #0]
 8003a2e:	e003      	b.n	8003a38 <_printf_i+0xc0>
 8003a30:	066d      	lsls	r5, r5, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0xb4>
 8003a34:	680d      	ldr	r5, [r1, #0]
 8003a36:	b2ad      	uxth	r5, r5
 8003a38:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <_printf_i+0x21c>)
 8003a3a:	270a      	movs	r7, #10
 8003a3c:	9303      	str	r3, [sp, #12]
 8003a3e:	2a6f      	cmp	r2, #111	; 0x6f
 8003a40:	d117      	bne.n	8003a72 <_printf_i+0xfa>
 8003a42:	2708      	movs	r7, #8
 8003a44:	e015      	b.n	8003a72 <_printf_i+0xfa>
 8003a46:	3145      	adds	r1, #69	; 0x45
 8003a48:	700a      	strb	r2, [r1, #0]
 8003a4a:	4a52      	ldr	r2, [pc, #328]	; (8003b94 <_printf_i+0x21c>)
 8003a4c:	9203      	str	r2, [sp, #12]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6821      	ldr	r1, [r4, #0]
 8003a52:	ca20      	ldmia	r2!, {r5}
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	0608      	lsls	r0, r1, #24
 8003a58:	d550      	bpl.n	8003afc <_printf_i+0x184>
 8003a5a:	07cb      	lsls	r3, r1, #31
 8003a5c:	d502      	bpl.n	8003a64 <_printf_i+0xec>
 8003a5e:	2320      	movs	r3, #32
 8003a60:	4319      	orrs	r1, r3
 8003a62:	6021      	str	r1, [r4, #0]
 8003a64:	2710      	movs	r7, #16
 8003a66:	2d00      	cmp	r5, #0
 8003a68:	d103      	bne.n	8003a72 <_printf_i+0xfa>
 8003a6a:	2320      	movs	r3, #32
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	439a      	bics	r2, r3
 8003a70:	6022      	str	r2, [r4, #0]
 8003a72:	0023      	movs	r3, r4
 8003a74:	2200      	movs	r2, #0
 8003a76:	3343      	adds	r3, #67	; 0x43
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	6863      	ldr	r3, [r4, #4]
 8003a7c:	60a3      	str	r3, [r4, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	db03      	blt.n	8003a8a <_printf_i+0x112>
 8003a82:	2204      	movs	r2, #4
 8003a84:	6821      	ldr	r1, [r4, #0]
 8003a86:	4391      	bics	r1, r2
 8003a88:	6021      	str	r1, [r4, #0]
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	d102      	bne.n	8003a94 <_printf_i+0x11c>
 8003a8e:	9e04      	ldr	r6, [sp, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <_printf_i+0x136>
 8003a94:	9e04      	ldr	r6, [sp, #16]
 8003a96:	0028      	movs	r0, r5
 8003a98:	0039      	movs	r1, r7
 8003a9a:	f7fc fbcd 	bl	8000238 <__aeabi_uidivmod>
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	3e01      	subs	r6, #1
 8003aa2:	5c5b      	ldrb	r3, [r3, r1]
 8003aa4:	7033      	strb	r3, [r6, #0]
 8003aa6:	002b      	movs	r3, r5
 8003aa8:	0005      	movs	r5, r0
 8003aaa:	429f      	cmp	r7, r3
 8003aac:	d9f3      	bls.n	8003a96 <_printf_i+0x11e>
 8003aae:	2f08      	cmp	r7, #8
 8003ab0:	d109      	bne.n	8003ac6 <_printf_i+0x14e>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	07db      	lsls	r3, r3, #31
 8003ab6:	d506      	bpl.n	8003ac6 <_printf_i+0x14e>
 8003ab8:	6863      	ldr	r3, [r4, #4]
 8003aba:	6922      	ldr	r2, [r4, #16]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	dc02      	bgt.n	8003ac6 <_printf_i+0x14e>
 8003ac0:	2330      	movs	r3, #48	; 0x30
 8003ac2:	3e01      	subs	r6, #1
 8003ac4:	7033      	strb	r3, [r6, #0]
 8003ac6:	9b04      	ldr	r3, [sp, #16]
 8003ac8:	1b9b      	subs	r3, r3, r6
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	9b07      	ldr	r3, [sp, #28]
 8003ace:	0021      	movs	r1, r4
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	9805      	ldr	r0, [sp, #20]
 8003ad4:	9b06      	ldr	r3, [sp, #24]
 8003ad6:	aa09      	add	r2, sp, #36	; 0x24
 8003ad8:	f7ff fede 	bl	8003898 <_printf_common>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d135      	bne.n	8003b4c <_printf_i+0x1d4>
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	4240      	negs	r0, r0
 8003ae4:	b00b      	add	sp, #44	; 0x2c
 8003ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae8:	2220      	movs	r2, #32
 8003aea:	6809      	ldr	r1, [r1, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	6022      	str	r2, [r4, #0]
 8003af0:	0022      	movs	r2, r4
 8003af2:	2178      	movs	r1, #120	; 0x78
 8003af4:	3245      	adds	r2, #69	; 0x45
 8003af6:	7011      	strb	r1, [r2, #0]
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <_printf_i+0x220>)
 8003afa:	e7a7      	b.n	8003a4c <_printf_i+0xd4>
 8003afc:	0648      	lsls	r0, r1, #25
 8003afe:	d5ac      	bpl.n	8003a5a <_printf_i+0xe2>
 8003b00:	b2ad      	uxth	r5, r5
 8003b02:	e7aa      	b.n	8003a5a <_printf_i+0xe2>
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	680d      	ldr	r5, [r1, #0]
 8003b08:	1d10      	adds	r0, r2, #4
 8003b0a:	6949      	ldr	r1, [r1, #20]
 8003b0c:	6018      	str	r0, [r3, #0]
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	062e      	lsls	r6, r5, #24
 8003b12:	d501      	bpl.n	8003b18 <_printf_i+0x1a0>
 8003b14:	6019      	str	r1, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <_printf_i+0x1a6>
 8003b18:	066d      	lsls	r5, r5, #25
 8003b1a:	d5fb      	bpl.n	8003b14 <_printf_i+0x19c>
 8003b1c:	8019      	strh	r1, [r3, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	9e04      	ldr	r6, [sp, #16]
 8003b22:	6123      	str	r3, [r4, #16]
 8003b24:	e7d2      	b.n	8003acc <_printf_i+0x154>
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	1d11      	adds	r1, r2, #4
 8003b2a:	6019      	str	r1, [r3, #0]
 8003b2c:	6816      	ldr	r6, [r2, #0]
 8003b2e:	2100      	movs	r1, #0
 8003b30:	0030      	movs	r0, r6
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	f000 f832 	bl	8003b9c <memchr>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d001      	beq.n	8003b40 <_printf_i+0x1c8>
 8003b3c:	1b80      	subs	r0, r0, r6
 8003b3e:	6060      	str	r0, [r4, #4]
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	6123      	str	r3, [r4, #16]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9a04      	ldr	r2, [sp, #16]
 8003b48:	7013      	strb	r3, [r2, #0]
 8003b4a:	e7bf      	b.n	8003acc <_printf_i+0x154>
 8003b4c:	6923      	ldr	r3, [r4, #16]
 8003b4e:	0032      	movs	r2, r6
 8003b50:	9906      	ldr	r1, [sp, #24]
 8003b52:	9805      	ldr	r0, [sp, #20]
 8003b54:	9d07      	ldr	r5, [sp, #28]
 8003b56:	47a8      	blx	r5
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d0c1      	beq.n	8003ae0 <_printf_i+0x168>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	079b      	lsls	r3, r3, #30
 8003b60:	d415      	bmi.n	8003b8e <_printf_i+0x216>
 8003b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b64:	68e0      	ldr	r0, [r4, #12]
 8003b66:	4298      	cmp	r0, r3
 8003b68:	dabc      	bge.n	8003ae4 <_printf_i+0x16c>
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	e7ba      	b.n	8003ae4 <_printf_i+0x16c>
 8003b6e:	0022      	movs	r2, r4
 8003b70:	2301      	movs	r3, #1
 8003b72:	9906      	ldr	r1, [sp, #24]
 8003b74:	9805      	ldr	r0, [sp, #20]
 8003b76:	9e07      	ldr	r6, [sp, #28]
 8003b78:	3219      	adds	r2, #25
 8003b7a:	47b0      	blx	r6
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d0af      	beq.n	8003ae0 <_printf_i+0x168>
 8003b80:	3501      	adds	r5, #1
 8003b82:	68e3      	ldr	r3, [r4, #12]
 8003b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	42ab      	cmp	r3, r5
 8003b8a:	dcf0      	bgt.n	8003b6e <_printf_i+0x1f6>
 8003b8c:	e7e9      	b.n	8003b62 <_printf_i+0x1ea>
 8003b8e:	2500      	movs	r5, #0
 8003b90:	e7f7      	b.n	8003b82 <_printf_i+0x20a>
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	08004485 	.word	0x08004485
 8003b98:	08004496 	.word	0x08004496

08003b9c <memchr>:
 8003b9c:	b2c9      	uxtb	r1, r1
 8003b9e:	1882      	adds	r2, r0, r2
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d101      	bne.n	8003ba8 <memchr+0xc>
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	4770      	bx	lr
 8003ba8:	7803      	ldrb	r3, [r0, #0]
 8003baa:	428b      	cmp	r3, r1
 8003bac:	d0fb      	beq.n	8003ba6 <memchr+0xa>
 8003bae:	3001      	adds	r0, #1
 8003bb0:	e7f6      	b.n	8003ba0 <memchr+0x4>

08003bb2 <memmove>:
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	4288      	cmp	r0, r1
 8003bb6:	d902      	bls.n	8003bbe <memmove+0xc>
 8003bb8:	188b      	adds	r3, r1, r2
 8003bba:	4298      	cmp	r0, r3
 8003bbc:	d303      	bcc.n	8003bc6 <memmove+0x14>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e007      	b.n	8003bd2 <memmove+0x20>
 8003bc2:	5c8b      	ldrb	r3, [r1, r2]
 8003bc4:	5483      	strb	r3, [r0, r2]
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	d2fb      	bcs.n	8003bc2 <memmove+0x10>
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	5ccc      	ldrb	r4, [r1, r3]
 8003bce:	54c4      	strb	r4, [r0, r3]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d1fa      	bne.n	8003bcc <memmove+0x1a>
 8003bd6:	e7f8      	b.n	8003bca <memmove+0x18>

08003bd8 <_free_r>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	0005      	movs	r5, r0
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d010      	beq.n	8003c02 <_free_r+0x2a>
 8003be0:	1f0c      	subs	r4, r1, #4
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	da00      	bge.n	8003bea <_free_r+0x12>
 8003be8:	18e4      	adds	r4, r4, r3
 8003bea:	0028      	movs	r0, r5
 8003bec:	f000 f8d4 	bl	8003d98 <__malloc_lock>
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <_free_r+0x90>)
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <_free_r+0x2c>
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	6014      	str	r4, [r2, #0]
 8003bfc:	0028      	movs	r0, r5
 8003bfe:	f000 f8d3 	bl	8003da8 <__malloc_unlock>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	42a3      	cmp	r3, r4
 8003c06:	d908      	bls.n	8003c1a <_free_r+0x42>
 8003c08:	6821      	ldr	r1, [r4, #0]
 8003c0a:	1860      	adds	r0, r4, r1
 8003c0c:	4283      	cmp	r3, r0
 8003c0e:	d1f3      	bne.n	8003bf8 <_free_r+0x20>
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	1841      	adds	r1, r0, r1
 8003c16:	6021      	str	r1, [r4, #0]
 8003c18:	e7ee      	b.n	8003bf8 <_free_r+0x20>
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <_free_r+0x4e>
 8003c22:	42a3      	cmp	r3, r4
 8003c24:	d9f9      	bls.n	8003c1a <_free_r+0x42>
 8003c26:	6811      	ldr	r1, [r2, #0]
 8003c28:	1850      	adds	r0, r2, r1
 8003c2a:	42a0      	cmp	r0, r4
 8003c2c:	d10b      	bne.n	8003c46 <_free_r+0x6e>
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	1809      	adds	r1, r1, r0
 8003c32:	1850      	adds	r0, r2, r1
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	4283      	cmp	r3, r0
 8003c38:	d1e0      	bne.n	8003bfc <_free_r+0x24>
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	1841      	adds	r1, r0, r1
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	6053      	str	r3, [r2, #4]
 8003c44:	e7da      	b.n	8003bfc <_free_r+0x24>
 8003c46:	42a0      	cmp	r0, r4
 8003c48:	d902      	bls.n	8003c50 <_free_r+0x78>
 8003c4a:	230c      	movs	r3, #12
 8003c4c:	602b      	str	r3, [r5, #0]
 8003c4e:	e7d5      	b.n	8003bfc <_free_r+0x24>
 8003c50:	6821      	ldr	r1, [r4, #0]
 8003c52:	1860      	adds	r0, r4, r1
 8003c54:	4283      	cmp	r3, r0
 8003c56:	d103      	bne.n	8003c60 <_free_r+0x88>
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	1841      	adds	r1, r0, r1
 8003c5e:	6021      	str	r1, [r4, #0]
 8003c60:	6063      	str	r3, [r4, #4]
 8003c62:	6054      	str	r4, [r2, #4]
 8003c64:	e7ca      	b.n	8003bfc <_free_r+0x24>
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	200001bc 	.word	0x200001bc

08003c6c <_malloc_r>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	2303      	movs	r3, #3
 8003c70:	1ccd      	adds	r5, r1, #3
 8003c72:	439d      	bics	r5, r3
 8003c74:	3508      	adds	r5, #8
 8003c76:	0006      	movs	r6, r0
 8003c78:	2d0c      	cmp	r5, #12
 8003c7a:	d21f      	bcs.n	8003cbc <_malloc_r+0x50>
 8003c7c:	250c      	movs	r5, #12
 8003c7e:	42a9      	cmp	r1, r5
 8003c80:	d81e      	bhi.n	8003cc0 <_malloc_r+0x54>
 8003c82:	0030      	movs	r0, r6
 8003c84:	f000 f888 	bl	8003d98 <__malloc_lock>
 8003c88:	4925      	ldr	r1, [pc, #148]	; (8003d20 <_malloc_r+0xb4>)
 8003c8a:	680a      	ldr	r2, [r1, #0]
 8003c8c:	0014      	movs	r4, r2
 8003c8e:	2c00      	cmp	r4, #0
 8003c90:	d11a      	bne.n	8003cc8 <_malloc_r+0x5c>
 8003c92:	4f24      	ldr	r7, [pc, #144]	; (8003d24 <_malloc_r+0xb8>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <_malloc_r+0x38>
 8003c9a:	0021      	movs	r1, r4
 8003c9c:	0030      	movs	r0, r6
 8003c9e:	f000 f869 	bl	8003d74 <_sbrk_r>
 8003ca2:	6038      	str	r0, [r7, #0]
 8003ca4:	0029      	movs	r1, r5
 8003ca6:	0030      	movs	r0, r6
 8003ca8:	f000 f864 	bl	8003d74 <_sbrk_r>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d12b      	bne.n	8003d08 <_malloc_r+0x9c>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	0030      	movs	r0, r6
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	f000 f877 	bl	8003da8 <__malloc_unlock>
 8003cba:	e003      	b.n	8003cc4 <_malloc_r+0x58>
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	dade      	bge.n	8003c7e <_malloc_r+0x12>
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	1b5b      	subs	r3, r3, r5
 8003ccc:	d419      	bmi.n	8003d02 <_malloc_r+0x96>
 8003cce:	2b0b      	cmp	r3, #11
 8003cd0:	d903      	bls.n	8003cda <_malloc_r+0x6e>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	18e4      	adds	r4, r4, r3
 8003cd6:	6025      	str	r5, [r4, #0]
 8003cd8:	e003      	b.n	8003ce2 <_malloc_r+0x76>
 8003cda:	6863      	ldr	r3, [r4, #4]
 8003cdc:	42a2      	cmp	r2, r4
 8003cde:	d10e      	bne.n	8003cfe <_malloc_r+0x92>
 8003ce0:	600b      	str	r3, [r1, #0]
 8003ce2:	0030      	movs	r0, r6
 8003ce4:	f000 f860 	bl	8003da8 <__malloc_unlock>
 8003ce8:	0020      	movs	r0, r4
 8003cea:	2207      	movs	r2, #7
 8003cec:	300b      	adds	r0, #11
 8003cee:	1d23      	adds	r3, r4, #4
 8003cf0:	4390      	bics	r0, r2
 8003cf2:	1ac2      	subs	r2, r0, r3
 8003cf4:	4298      	cmp	r0, r3
 8003cf6:	d0e6      	beq.n	8003cc6 <_malloc_r+0x5a>
 8003cf8:	1a1b      	subs	r3, r3, r0
 8003cfa:	50a3      	str	r3, [r4, r2]
 8003cfc:	e7e3      	b.n	8003cc6 <_malloc_r+0x5a>
 8003cfe:	6053      	str	r3, [r2, #4]
 8003d00:	e7ef      	b.n	8003ce2 <_malloc_r+0x76>
 8003d02:	0022      	movs	r2, r4
 8003d04:	6864      	ldr	r4, [r4, #4]
 8003d06:	e7c2      	b.n	8003c8e <_malloc_r+0x22>
 8003d08:	2303      	movs	r3, #3
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	439c      	bics	r4, r3
 8003d0e:	42a0      	cmp	r0, r4
 8003d10:	d0e1      	beq.n	8003cd6 <_malloc_r+0x6a>
 8003d12:	1a21      	subs	r1, r4, r0
 8003d14:	0030      	movs	r0, r6
 8003d16:	f000 f82d 	bl	8003d74 <_sbrk_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	d1db      	bne.n	8003cd6 <_malloc_r+0x6a>
 8003d1e:	e7c7      	b.n	8003cb0 <_malloc_r+0x44>
 8003d20:	200001bc 	.word	0x200001bc
 8003d24:	200001c0 	.word	0x200001c0

08003d28 <_realloc_r>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	0007      	movs	r7, r0
 8003d2c:	000d      	movs	r5, r1
 8003d2e:	0016      	movs	r6, r2
 8003d30:	2900      	cmp	r1, #0
 8003d32:	d105      	bne.n	8003d40 <_realloc_r+0x18>
 8003d34:	0011      	movs	r1, r2
 8003d36:	f7ff ff99 	bl	8003c6c <_malloc_r>
 8003d3a:	0004      	movs	r4, r0
 8003d3c:	0020      	movs	r0, r4
 8003d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d103      	bne.n	8003d4c <_realloc_r+0x24>
 8003d44:	f7ff ff48 	bl	8003bd8 <_free_r>
 8003d48:	0034      	movs	r4, r6
 8003d4a:	e7f7      	b.n	8003d3c <_realloc_r+0x14>
 8003d4c:	f000 f834 	bl	8003db8 <_malloc_usable_size_r>
 8003d50:	002c      	movs	r4, r5
 8003d52:	42b0      	cmp	r0, r6
 8003d54:	d2f2      	bcs.n	8003d3c <_realloc_r+0x14>
 8003d56:	0031      	movs	r1, r6
 8003d58:	0038      	movs	r0, r7
 8003d5a:	f7ff ff87 	bl	8003c6c <_malloc_r>
 8003d5e:	1e04      	subs	r4, r0, #0
 8003d60:	d0ec      	beq.n	8003d3c <_realloc_r+0x14>
 8003d62:	0029      	movs	r1, r5
 8003d64:	0032      	movs	r2, r6
 8003d66:	f7ff fbed 	bl	8003544 <memcpy>
 8003d6a:	0029      	movs	r1, r5
 8003d6c:	0038      	movs	r0, r7
 8003d6e:	f7ff ff33 	bl	8003bd8 <_free_r>
 8003d72:	e7e3      	b.n	8003d3c <_realloc_r+0x14>

08003d74 <_sbrk_r>:
 8003d74:	2300      	movs	r3, #0
 8003d76:	b570      	push	{r4, r5, r6, lr}
 8003d78:	4d06      	ldr	r5, [pc, #24]	; (8003d94 <_sbrk_r+0x20>)
 8003d7a:	0004      	movs	r4, r0
 8003d7c:	0008      	movs	r0, r1
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	f7fd f888 	bl	8000e94 <_sbrk>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d103      	bne.n	8003d90 <_sbrk_r+0x1c>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d000      	beq.n	8003d90 <_sbrk_r+0x1c>
 8003d8e:	6023      	str	r3, [r4, #0]
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	20000648 	.word	0x20000648

08003d98 <__malloc_lock>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4802      	ldr	r0, [pc, #8]	; (8003da4 <__malloc_lock+0xc>)
 8003d9c:	f000 f814 	bl	8003dc8 <__retarget_lock_acquire_recursive>
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	20000650 	.word	0x20000650

08003da8 <__malloc_unlock>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4802      	ldr	r0, [pc, #8]	; (8003db4 <__malloc_unlock+0xc>)
 8003dac:	f000 f80d 	bl	8003dca <__retarget_lock_release_recursive>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	20000650 	.word	0x20000650

08003db8 <_malloc_usable_size_r>:
 8003db8:	1f0b      	subs	r3, r1, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	1f18      	subs	r0, r3, #4
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da01      	bge.n	8003dc6 <_malloc_usable_size_r+0xe>
 8003dc2:	580b      	ldr	r3, [r1, r0]
 8003dc4:	18c0      	adds	r0, r0, r3
 8003dc6:	4770      	bx	lr

08003dc8 <__retarget_lock_acquire_recursive>:
 8003dc8:	4770      	bx	lr

08003dca <__retarget_lock_release_recursive>:
 8003dca:	4770      	bx	lr

08003dcc <_init>:
 8003dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd2:	bc08      	pop	{r3}
 8003dd4:	469e      	mov	lr, r3
 8003dd6:	4770      	bx	lr

08003dd8 <_fini>:
 8003dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dde:	bc08      	pop	{r3}
 8003de0:	469e      	mov	lr, r3
 8003de2:	4770      	bx	lr
