
Smart-Pwr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac8  08003ac8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000008c  08003b5c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08003b5c  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b98  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ffb  00000000  00000000  00033c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000054f8  00000000  00000000  00037c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0003d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0003d850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f61e  00000000  00000000  0003dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e745  00000000  00000000  0004d5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004c8f6  00000000  00000000  0005bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000a8629  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000012a4  00000000  00000000  000a867c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800344c 	.word	0x0800344c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	0800344c 	.word	0x0800344c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	1c08      	adds	r0, r1, #0
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	a80d      	add	r0, sp, #52	; 0x34
 800064e:	f002 fac2 	bl	8002bd6 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000652:	2210      	movs	r2, #16
 8000654:	2100      	movs	r1, #0
 8000656:	a809      	add	r0, sp, #36	; 0x24
 8000658:	f002 fabd 	bl	8002bd6 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2210      	movs	r2, #16
 800065e:	2100      	movs	r1, #0
 8000660:	a805      	add	r0, sp, #20
 8000662:	f002 fab8 	bl	8002bd6 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <MX_ADC_Init+0x154>)
 8000668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	0080      	lsls	r0, r0, #2
 800066e:	4301      	orrs	r1, r0
 8000670:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000674:	4002      	ands	r2, r0
 8000676:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000678:	9a02      	ldr	r2, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	2701      	movs	r7, #1
 800067e:	433a      	orrs	r2, r7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000684:	403b      	ands	r3, r7
 8000686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000688:	9b01      	ldr	r3, [sp, #4]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800068a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000690:	2500      	movs	r5, #0
 8000692:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	3861      	subs	r0, #97	; 0x61
 8000696:	38ff      	subs	r0, #255	; 0xff
 8000698:	a903      	add	r1, sp, #12
 800069a:	05c0      	lsls	r0, r0, #23
 800069c:	f001 ff4c 	bl	8002538 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <MX_ADC_Init+0x158>)
 80006a2:	21c3      	movs	r1, #195	; 0xc3
 80006a4:	0089      	lsls	r1, r1, #2
 80006a6:	585a      	ldr	r2, [r3, r1]
 80006a8:	20ff      	movs	r0, #255	; 0xff
 80006aa:	4382      	bics	r2, r0
 80006ac:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0152      	lsls	r2, r2, #5
 80006b2:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006b4:	4c3a      	ldr	r4, [pc, #232]	; (80007a0 <MX_ADC_Init+0x15c>)
 80006b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b8:	433b      	orrs	r3, r7
 80006ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80006bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	02db      	lsls	r3, r3, #11
 80006c2:	4313      	orrs	r3, r2
 80006c4:	62a3      	str	r3, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006c6:	4e37      	ldr	r6, [pc, #220]	; (80007a4 <MX_ADC_Init+0x160>)
 80006c8:	6830      	ldr	r0, [r6, #0]
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <MX_ADC_Init+0x164>)
 80006cc:	4010      	ands	r0, r2
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0409      	lsls	r1, r1, #16
 80006d2:	4301      	orrs	r1, r0
 80006d4:	6031      	str	r1, [r6, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	4319      	orrs	r1, r3
 80006de:	62a1      	str	r1, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	401a      	ands	r2, r3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	03db      	lsls	r3, r3, #15
 80006e8:	4313      	orrs	r3, r2
 80006ea:	6033      	str	r3, [r6, #0]
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006ec:	950d      	str	r5, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	930e      	str	r3, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006f4:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006f6:	9510      	str	r5, [sp, #64]	; 0x40
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80006f8:	9511      	str	r5, [sp, #68]	; 0x44
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006fa:	a90d      	add	r1, sp, #52	; 0x34
 80006fc:	0020      	movs	r0, r4
 80006fe:	f001 fe9f 	bl	8002440 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	2207      	movs	r2, #7
 8000706:	4393      	bics	r3, r2
 8000708:	3a02      	subs	r2, #2
 800070a:	4313      	orrs	r3, r2
 800070c:	6163      	str	r3, [r4, #20]
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800070e:	6923      	ldr	r3, [r4, #16]
 8000710:	43bb      	bics	r3, r7
 8000712:	431f      	orrs	r7, r3
 8000714:	6127      	str	r7, [r4, #16]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <MX_ADC_Init+0x168>)
 800071a:	401a      	ands	r2, r3
 800071c:	238e      	movs	r3, #142	; 0x8e
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4313      	orrs	r3, r2
 8000722:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_ADC_Init+0x16c>)
 8000728:	4013      	ands	r3, r2
 800072a:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800072c:	68e3      	ldr	r3, [r4, #12]
 800072e:	2104      	movs	r1, #4
 8000730:	438b      	bics	r3, r1
 8000732:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_ADC_Init+0x170>)
 8000738:	401a      	ands	r2, r3
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	049b      	lsls	r3, r3, #18
 800073e:	4313      	orrs	r3, r2
 8000740:	6033      	str	r3, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000742:	6863      	ldr	r3, [r4, #4]
 8000744:	438b      	bics	r3, r1
 8000746:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000748:	6863      	ldr	r3, [r4, #4]
 800074a:	2208      	movs	r2, #8
 800074c:	4393      	bics	r3, r2
 800074e:	6063      	str	r3, [r4, #4]
  LL_ADC_SetOverSamplingDiscont(ADC1, LL_ADC_OVS_REG_CONT);
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
  LL_ADC_DisableIT_EOC(ADC1);
  LL_ADC_DisableIT_EOS(ADC1);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000750:	2380      	movs	r3, #128	; 0x80
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000756:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000758:	950b      	str	r5, [sp, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800075a:	950c      	str	r5, [sp, #48]	; 0x30
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800075c:	a909      	add	r1, sp, #36	; 0x24
 800075e:	0020      	movs	r0, r4
 8000760:	f001 fe54 	bl	800240c <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8000764:	68a3      	ldr	r3, [r4, #8]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_ADC_Init+0x174>)
 8000768:	401a      	ands	r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	055b      	lsls	r3, r3, #21
 800076e:	4313      	orrs	r3, r2
 8000770:	60a3      	str	r3, [r4, #8]
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC_Init+0x178>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	4912      	ldr	r1, [pc, #72]	; (80007c0 <MX_ADC_Init+0x17c>)
 8000778:	f7ff fcd8 	bl	800012c <__udivsi3>
 800077c:	0003      	movs	r3, r0
 800077e:	0080      	lsls	r0, r0, #2
 8000780:	18c0      	adds	r0, r0, r3
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	210a      	movs	r1, #10
 8000786:	f7ff fcd1 	bl	800012c <__udivsi3>
  while(wait_loop_index != 0)
 800078a:	2800      	cmp	r0, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC_Init+0x14e>
  {
    wait_loop_index--;
 800078e:	3801      	subs	r0, #1
 8000790:	e7fb      	b.n	800078a <MX_ADC_Init+0x146>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000792:	b013      	add	sp, #76	; 0x4c
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	40012400 	.word	0x40012400
 80007a4:	40012708 	.word	0x40012708
 80007a8:	ff3fffff 	.word	0xff3fffff
 80007ac:	fffffe03 	.word	0xfffffe03
 80007b0:	fffffdff 	.word	0xfffffdff
 80007b4:	fdffffff 	.word	0xfdffffff
 80007b8:	6fffffe8 	.word	0x6fffffe8
 80007bc:	2000001c 	.word	0x2000001c
 80007c0:	00030d40 	.word	0x00030d40

080007c4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_CRC_Init+0x40>)
 80007c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	0140      	lsls	r0, r0, #5
 80007ce:	4301      	orrs	r1, r0
 80007d0:	6311      	str	r1, [r2, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80007d4:	4003      	ands	r3, r0
 80007d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007d8:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_CRC_Init+0x44>)
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	2160      	movs	r1, #96	; 0x60
 80007e0:	438a      	bics	r2, r1
 80007e2:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	3120      	adds	r1, #32
 80007e8:	438a      	bics	r2, r1
 80007ea:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <MX_CRC_Init+0x48>)
 80007ee:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	3968      	subs	r1, #104	; 0x68
 80007f4:	438a      	bics	r2, r1
 80007f6:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4252      	negs	r2, r2
 80007fc:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	40023000 	.word	0x40023000
 800080c:	04c11db7 	.word	0x04c11db7

08000810 <CalcCRC>:

/* USER CODE BEGIN 1 */

uint32_t CalcCRC(uint32_t* buff, uint8_t len){
 8000810:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <CalcCRC+0x28>)
 8000814:	6893      	ldr	r3, [r2, #8]
 8000816:	2401      	movs	r4, #1
 8000818:	4323      	orrs	r3, r4
 800081a:	6093      	str	r3, [r2, #8]
  uint8_t i;
  uint32_t tmp;

  LL_CRC_ResetCRCCalculationUnit(CRC);

  for(i = 0; i < len; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	428b      	cmp	r3, r1
 8000820:	d206      	bcs.n	8000830 <CalcCRC+0x20>
    LL_CRC_FeedData32(CRC,buff[i]);
 8000822:	009a      	lsls	r2, r3, #2
 8000824:	5884      	ldr	r4, [r0, r2]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <CalcCRC+0x28>)
 8000828:	6014      	str	r4, [r2, #0]
  for(i = 0; i < len; i++){
 800082a:	3301      	adds	r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	e7f6      	b.n	800081e <CalcCRC+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8000830:	4b01      	ldr	r3, [pc, #4]	; (8000838 <CalcCRC+0x28>)
 8000832:	6818      	ldr	r0, [r3, #0]
  }

  tmp = LL_CRC_ReadData32(CRC);
  return(tmp);

}
 8000834:	bd10      	pop	{r4, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40023000 	.word	0x40023000

0800083c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	46c6      	mov	lr, r8
 8000840:	b500      	push	{lr}
 8000842:	b08c      	sub	sp, #48	; 0x30

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000844:	ad0a      	add	r5, sp, #40	; 0x28
 8000846:	2208      	movs	r2, #8
 8000848:	2100      	movs	r1, #0
 800084a:	0028      	movs	r0, r5
 800084c:	f002 f9c3 	bl	8002bd6 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2218      	movs	r2, #24
 8000852:	2100      	movs	r1, #0
 8000854:	a804      	add	r0, sp, #16
 8000856:	f002 f9be 	bl	8002bd6 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xb0>)
 800085c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800085e:	2204      	movs	r2, #4
 8000860:	4311      	orrs	r1, r2
 8000862:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000866:	400a      	ands	r2, r1
 8000868:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800086a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 800086c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086e:	2401      	movs	r4, #1
 8000870:	4322      	orrs	r2, r4
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4022      	ands	r2, r4
 8000878:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800087c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087e:	2702      	movs	r7, #2
 8000880:	433a      	orrs	r2, r7
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	403b      	ands	r3, r7
 8000888:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088a:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_GPIO_Init+0xb4>)
 800088e:	4698      	mov	r8, r3
 8000890:	629f      	str	r7, [r3, #40]	; 0x28
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_GPIO_Init+0xb8>)
 8000894:	68d3      	ldr	r3, [r2, #12]
 8000896:	210f      	movs	r1, #15
 8000898:	438b      	bics	r3, r1
 800089a:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	68d9      	ldr	r1, [r3, #12]
 80008a2:	4815      	ldr	r0, [pc, #84]	; (80008f8 <MX_GPIO_Init+0xbc>)
 80008a4:	4001      	ands	r1, r0
 80008a6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4002      	ands	r2, r0
 80008ac:	601a      	str	r2, [r3, #0]

  /**/
  LL_GPIO_SetPinMode(RDY_ADS1115_GPIO_Port, RDY_ADS1115_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80008ae:	2310      	movs	r3, #16
 80008b0:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80008b2:	712c      	strb	r4, [r5, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008b4:	2600      	movs	r6, #0
 80008b6:	716e      	strb	r6, [r5, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80008b8:	71ac      	strb	r4, [r5, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008ba:	0028      	movs	r0, r5
 80008bc:	f001 fdd8 	bl	8002470 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = HEAT_GPIO_Output_Pin;
 80008c0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008c4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008c6:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008c8:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(HEAT_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 80008ca:	a904      	add	r1, sp, #16
 80008cc:	4640      	mov	r0, r8
 80008ce:	f001 fe33 	bl	8002538 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <MX_GPIO_Init+0xc0>)
 80008d4:	21c1      	movs	r1, #193	; 0xc1
 80008d6:	0089      	lsls	r1, r1, #2
 80008d8:	5853      	ldr	r3, [r2, r1]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 80008e4:	b00c      	add	sp, #48	; 0x30
 80008e6:	bc80      	pop	{r7}
 80008e8:	46b8      	mov	r8, r7
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	50000400 	.word	0x50000400
 80008f4:	40010000 	.word	0x40010000
 80008f8:	fffffcff 	.word	0xfffffcff
 80008fc:	e000e100 	.word	0xe000e100

08000900 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000902:	46c6      	mov	lr, r8
 8000904:	b500      	push	{lr}
 8000906:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000908:	221c      	movs	r2, #28
 800090a:	2100      	movs	r1, #0
 800090c:	a809      	add	r0, sp, #36	; 0x24
 800090e:	f002 f962 	bl	8002bd6 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8000912:	4c2a      	ldr	r4, [pc, #168]	; (80009bc <MX_I2C1_Init+0xbc>)
 8000914:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000916:	2602      	movs	r6, #2
 8000918:	4333      	orrs	r3, r6
 800091a:	62e3      	str	r3, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800091c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800091e:	4033      	ands	r3, r6
 8000920:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000922:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000928:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	3b3d      	subs	r3, #61	; 0x3d
 800092c:	4698      	mov	r8, r3
 800092e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000930:	2501      	movs	r5, #1
 8000932:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000934:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000936:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	4f21      	ldr	r7, [pc, #132]	; (80009c0 <MX_I2C1_Init+0xc0>)
 800093a:	a903      	add	r1, sp, #12
 800093c:	0038      	movs	r0, r7
 800093e:	f001 fdfb 	bl	8002538 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000946:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	4643      	mov	r3, r8
 800094a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800094c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800094e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000950:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	a903      	add	r1, sp, #12
 8000954:	0038      	movs	r0, r7
 8000956:	f001 fdef 	bl	8002538 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800095a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0389      	lsls	r1, r1, #14
 8000960:	430a      	orrs	r2, r1
 8000962:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000966:	400b      	ands	r3, r1
 8000968:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800096a:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800096c:	4c15      	ldr	r4, [pc, #84]	; (80009c4 <MX_I2C1_Init+0xc4>)
 800096e:	6862      	ldr	r2, [r4, #4]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	049b      	lsls	r3, r3, #18
 8000974:	4313      	orrs	r3, r2
 8000976:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000978:	68e3      	ldr	r3, [r4, #12]
 800097a:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <MX_I2C1_Init+0xc8>)
 800097c:	4013      	ands	r3, r2
 800097e:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_I2C1_Init+0xcc>)
 8000984:	4013      	ands	r3, r2
 8000986:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MX_I2C1_Init+0xd0>)
 800098c:	4013      	ands	r3, r2
 800098e:	6023      	str	r3, [r4, #0]
  */
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000990:	2300      	movs	r3, #0
 8000992:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x00000004;
 8000994:	2204      	movs	r2, #4
 8000996:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000998:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 800099a:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 800099c:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800099e:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009a0:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009a2:	a909      	add	r1, sp, #36	; 0x24
 80009a4:	0020      	movs	r0, r4
 80009a6:	f001 fe1f 	bl	80025e8 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009aa:	68e3      	ldr	r3, [r4, #12]
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <MX_I2C1_Init+0xd4>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	60e3      	str	r3, [r4, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b2:	b010      	add	sp, #64	; 0x40
 80009b4:	bc80      	pop	{r7}
 80009b6:	46b8      	mov	r8, r7
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40021000 	.word	0x40021000
 80009c0:	50000400 	.word	0x50000400
 80009c4:	40005400 	.word	0x40005400
 80009c8:	ffff7fff 	.word	0xffff7fff
 80009cc:	fff7ffff 	.word	0xfff7ffff
 80009d0:	fffdffff 	.word	0xfffdffff
 80009d4:	fffff801 	.word	0xfffff801

080009d8 <printUID>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printUID(void){
 80009d8:	b500      	push	{lr}
 80009da:	b087      	sub	sp, #28
	uint32_t *idBase = (uint32_t*)(UID_BASE);
	uint8_t s[4];
	int i;
	//memcpy(s0,(uint8_t*)idBase0,3);
	for(i = 0; i < 3; i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	e008      	b.n	80009f2 <printUID+0x1a>
		s[2-i] = (*idBase >> (8 * i)) & 0xff;
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <printUID+0x5c>)
 80009e2:	6811      	ldr	r1, [r2, #0]
 80009e4:	00da      	lsls	r2, r3, #3
 80009e6:	40d1      	lsrs	r1, r2
 80009e8:	2202      	movs	r2, #2
 80009ea:	1ad2      	subs	r2, r2, r3
 80009ec:	a805      	add	r0, sp, #20
 80009ee:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 3; i++)
 80009f0:	3301      	adds	r3, #1
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	ddf4      	ble.n	80009e0 <printUID+0x8>
	s[3]= 0;
 80009f6:	ab05      	add	r3, sp, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	70da      	strb	r2, [r3, #3]

	uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
	uint8_t s2[5];

	for(i = 0; i < 4; i++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	e008      	b.n	8000a12 <printUID+0x3a>
		s2[3-i] = (*idBase2 >> (8 * i)) & 0xff;
 8000a00:	4a0d      	ldr	r2, [pc, #52]	; (8000a38 <printUID+0x60>)
 8000a02:	6811      	ldr	r1, [r2, #0]
 8000a04:	00da      	lsls	r2, r3, #3
 8000a06:	40d1      	lsrs	r1, r2
 8000a08:	2203      	movs	r2, #3
 8000a0a:	1ad2      	subs	r2, r2, r3
 8000a0c:	a803      	add	r0, sp, #12
 8000a0e:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 4; i++)
 8000a10:	3301      	adds	r3, #1
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	ddf4      	ble.n	8000a00 <printUID+0x28>
	s2[4]= 0;
 8000a16:	ab03      	add	r3, sp, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	711a      	strb	r2, [r3, #4]

	idBase = (uint32_t*)(UID_BASE + 0x14);

	d_printf("\n\rUID %02X-\"%s\"-\"%s\"-%08lx", (*idBase >> 24) & 0xff, s, s2, *idBase2);
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <printUID+0x64>)
 8000a1e:	78d1      	ldrb	r1, [r2, #3]
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <printUID+0x60>)
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	aa05      	add	r2, sp, #20
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <printUID+0x68>)
 8000a2a:	f001 fb0f 	bl	800204c <d_printf>

}
 8000a2e:	b007      	add	sp, #28
 8000a30:	bd00      	pop	{pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	1ff80050 	.word	0x1ff80050
 8000a38:	1ff80054 	.word	0x1ff80054
 8000a3c:	1ff80064 	.word	0x1ff80064
 8000a40:	08003464 	.word	0x08003464

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a46:	4a3c      	ldr	r2, [pc, #240]	; (8000b38 <SystemClock_Config+0xf4>)
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	438b      	bics	r3, r1
 8000a4e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a50:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <SystemClock_Config+0xf4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000a54:	07db      	lsls	r3, r3, #31
 8000a56:	d4fb      	bmi.n	8000a50 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000a58:	4938      	ldr	r1, [pc, #224]	; (8000b3c <SystemClock_Config+0xf8>)
 8000a5a:	680b      	ldr	r3, [r1, #0]
 8000a5c:	4a38      	ldr	r2, [pc, #224]	; (8000b40 <SystemClock_Config+0xfc>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a68:	4a36      	ldr	r2, [pc, #216]	; (8000b44 <SystemClock_Config+0x100>)
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	430b      	orrs	r3, r1
 8000a70:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000a72:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <SystemClock_Config+0x100>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	075b      	lsls	r3, r3, #29
 8000a78:	d5fb      	bpl.n	8000a72 <SystemClock_Config+0x2e>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000a7a:	4b32      	ldr	r3, [pc, #200]	; (8000b44 <SystemClock_Config+0x100>)
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4932      	ldr	r1, [pc, #200]	; (8000b48 <SystemClock_Config+0x104>)
 8000a80:	4011      	ands	r1, r2
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	0152      	lsls	r2, r2, #5
 8000a86:	430a      	orrs	r2, r1
 8000a88:	605a      	str	r2, [r3, #4]
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	0052      	lsls	r2, r2, #1
 8000a90:	430a      	orrs	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <SystemClock_Config+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	059b      	lsls	r3, r3, #22
 8000a9a:	d5fb      	bpl.n	8000a94 <SystemClock_Config+0x50>
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <SystemClock_Config+0x100>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	492a      	ldr	r1, [pc, #168]	; (8000b4c <SystemClock_Config+0x108>)
 8000aa2:	4011      	ands	r1, r2
 8000aa4:	22c0      	movs	r2, #192	; 0xc0
 8000aa6:	01d2      	lsls	r2, r2, #7
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	605a      	str	r2, [r3, #4]
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	0212      	lsls	r2, r2, #8
 8000ab0:	0a12      	lsrs	r2, r2, #8
 8000ab2:	605a      	str	r2, [r3, #4]
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <SystemClock_Config+0xf8>)
 8000ab6:	6801      	ldr	r1, [r0, #0]
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	0052      	lsls	r2, r2, #1
 8000abc:	4311      	orrs	r1, r2
 8000abe:	6001      	str	r1, [r0, #0]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8000ac0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <SystemClock_Config+0xfc>)
 8000ac4:	4001      	ands	r1, r0
 8000ac6:	6519      	str	r1, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000ac8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000aca:	430a      	orrs	r2, r1
 8000acc:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <SystemClock_Config+0x100>)
 8000ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ad2:	059b      	lsls	r3, r3, #22
 8000ad4:	d5fb      	bpl.n	8000ace <SystemClock_Config+0x8a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <SystemClock_Config+0x100>)
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	21f0      	movs	r1, #240	; 0xf0
 8000adc:	438a      	bics	r2, r1
 8000ade:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	491b      	ldr	r1, [pc, #108]	; (8000b50 <SystemClock_Config+0x10c>)
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	491a      	ldr	r1, [pc, #104]	; (8000b54 <SystemClock_Config+0x110>)
 8000aec:	400a      	ands	r2, r1
 8000aee:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	2103      	movs	r1, #3
 8000af4:	438a      	bics	r2, r1
 8000af6:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <SystemClock_Config+0x100>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	220c      	movs	r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000afe:	421a      	tst	r2, r3
 8000b00:	d1fa      	bne.n	8000af8 <SystemClock_Config+0xb4>
  {

  }

  LL_Init1msTick(524288);
 8000b02:	2480      	movs	r4, #128	; 0x80
 8000b04:	0324      	lsls	r4, r4, #12
 8000b06:	0020      	movs	r0, r4
 8000b08:	f002 f808 	bl	8002b1c <LL_Init1msTick>

  LL_SetSystemCoreClock(524288);
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f002 f829 	bl	8002b64 <LL_SetSystemCoreClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <SystemClock_Config+0x100>)
 8000b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b16:	210c      	movs	r1, #12
 8000b18:	438a      	bics	r2, r1
 8000b1a:	3904      	subs	r1, #4
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000b20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <SystemClock_Config+0x114>)
 8000b24:	4011      	ands	r1, r2
 8000b26:	22c0      	movs	r2, #192	; 0xc0
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b30:	490a      	ldr	r1, [pc, #40]	; (8000b5c <SystemClock_Config+0x118>)
 8000b32:	400a      	ands	r2, r1
 8000b34:	64da      	str	r2, [r3, #76]	; 0x4c
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_HSI);
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_LSE);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
}
 8000b36:	bd10      	pop	{r4, pc}
 8000b38:	40022000 	.word	0x40022000
 8000b3c:	40007000 	.word	0x40007000
 8000b40:	ffffe7ff 	.word	0xffffe7ff
 8000b44:	40021000 	.word	0x40021000
 8000b48:	ffffe0ff 	.word	0xffffe0ff
 8000b4c:	ffff1fff 	.word	0xffff1fff
 8000b50:	fffff8ff 	.word	0xfffff8ff
 8000b54:	ffffc7ff 	.word	0xffffc7ff
 8000b58:	fffff3ff 	.word	0xfffff3ff
 8000b5c:	ffffcfff 	.word	0xffffcfff

08000b60 <main>:
{
 8000b60:	b500      	push	{lr}
 8000b62:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b64:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <main+0x148>)
 8000b66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4311      	orrs	r1, r2
 8000b6c:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b70:	400a      	ands	r2, r1
 8000b72:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000b74:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0549      	lsls	r1, r1, #21
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b82:	400b      	ands	r3, r1
 8000b84:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000b86:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 8000b88:	f7ff ff5c 	bl	8000a44 <SystemClock_Config>
  MX_GPIO_Init();
 8000b8c:	f7ff fe56 	bl	800083c <MX_GPIO_Init>
  MX_ADC_Init();
 8000b90:	f7ff fd58 	bl	8000644 <MX_ADC_Init>
  MX_I2C1_Init();
 8000b94:	f7ff feb4 	bl	8000900 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000b98:	f000 f9c6 	bl	8000f28 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000b9c:	f000 fa2e 	bl	8000ffc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ba0:	f000 f92a 	bl	8000df8 <MX_TIM2_Init>
  MX_TIM22_Init();
 8000ba4:	f000 f968 	bl	8000e78 <MX_TIM22_Init>
  MX_CRC_Init();
 8000ba8:	f7ff fe0c 	bl	80007c4 <MX_CRC_Init>
	debug_init();
 8000bac:	f001 fa20 	bl	8001ff0 <debug_init>
	d_printf("\n\r\n\r%s %s", date, time);
 8000bb0:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <main+0x14c>)
 8000bb2:	493f      	ldr	r1, [pc, #252]	; (8000cb0 <main+0x150>)
 8000bb4:	483f      	ldr	r0, [pc, #252]	; (8000cb4 <main+0x154>)
 8000bb6:	f001 fa49 	bl	800204c <d_printf>
	printUID();
 8000bba:	f7ff ff0d 	bl	80009d8 <printUID>
	ADC1_COMMON->CCR |= LL_ADC_PATH_INTERNAL_TEMPSENSOR;
 8000bbe:	4a3e      	ldr	r2, [pc, #248]	; (8000cb8 <main+0x158>)
 8000bc0:	6811      	ldr	r1, [r2, #0]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	041b      	lsls	r3, r3, #16
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000bca:	493c      	ldr	r1, [pc, #240]	; (8000cbc <main+0x15c>)
 8000bcc:	688b      	ldr	r3, [r1, #8]
 8000bce:	4a3c      	ldr	r2, [pc, #240]	; (8000cc0 <main+0x160>)
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	061b      	lsls	r3, r3, #24
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000bda:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <main+0x15c>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dbfb      	blt.n	8000bda <main+0x7a>
	LL_mDelay(2);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f001 ffaa 	bl	8002b3c <LL_mDelay>
	read_config_from_eeprom();
 8000be8:	f000 fbec 	bl	80013c4 <read_config_from_eeprom>
	dev_init();
 8000bec:	f001 fb44 	bl	8002278 <dev_init>
	d_printf("\n\rSN %09lu", stMain.Serial);
 8000bf0:	4b34      	ldr	r3, [pc, #208]	; (8000cc4 <main+0x164>)
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	4834      	ldr	r0, [pc, #208]	; (8000cc8 <main+0x168>)
 8000bf6:	f001 fa29 	bl	800204c <d_printf>
	modbus_init();
 8000bfa:	f001 f82d 	bl	8001c58 <modbus_init>
	ADS_Init(dev.Config.LMP_Gain);
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <main+0x16c>)
 8000c00:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8000c02:	f001 f975 	bl	8001ef0 <ADS_Init>
  MODIFY_REG(ADCx->CR,
 8000c06:	4a2d      	ldr	r2, [pc, #180]	; (8000cbc <main+0x15c>)
 8000c08:	6893      	ldr	r3, [r2, #8]
 8000c0a:	492d      	ldr	r1, [pc, #180]	; (8000cc0 <main+0x160>)
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	2101      	movs	r1, #1
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6093      	str	r3, [r2, #8]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000c14:	6853      	ldr	r3, [r2, #4]
 8000c16:	2004      	movs	r0, #4
 8000c18:	4303      	orrs	r3, r0
 8000c1a:	6053      	str	r3, [r2, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	05db      	lsls	r3, r3, #23
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	430a      	orrs	r2, r1
 8000c24:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <main+0x170>)
 8000c2e:	68d3      	ldr	r3, [r2, #12]
 8000c30:	3101      	adds	r1, #1
 8000c32:	430b      	orrs	r3, r1
 8000c34:	60d3      	str	r3, [r2, #12]
	HourTimer = CntSec;
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <main+0x174>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <main+0x178>)
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	e012      	b.n	8000c66 <main+0x106>
			f_Time500ms = FALSE;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <main+0x17c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
			dev_proc();
 8000c46:	f001 fb29 	bl	800229c <dev_proc>
 8000c4a:	e012      	b.n	8000c72 <main+0x112>
		if(f_AdcCycleEnd){
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <main+0x180>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11d      	bne.n	8000c90 <main+0x130>
		if((uint32_t)(CntSec - HourTimer) >= SEC_PER_HOUR){
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <main+0x174>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <main+0x178>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	21e1      	movs	r1, #225	; 0xe1
 8000c60:	0109      	lsls	r1, r1, #4
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d21a      	bcs.n	8000c9c <main+0x13c>
		mb_proc();
 8000c66:	f000 ffb7 	bl	8001bd8 <mb_proc>
		if(f_Time500ms){
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <main+0x17c>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1e6      	bne.n	8000c40 <main+0xe0>
		if(f_Time250ms){
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <main+0x184>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0e8      	beq.n	8000c4c <main+0xec>
			f_Time250ms = FALSE;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <main+0x184>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <main+0x15c>)
 8000c82:	6893      	ldr	r3, [r2, #8]
 8000c84:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <main+0x160>)
 8000c86:	400b      	ands	r3, r1
 8000c88:	2104      	movs	r1, #4
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	6093      	str	r3, [r2, #8]
}
 8000c8e:	e7dd      	b.n	8000c4c <main+0xec>
			f_AdcCycleEnd = FALSE;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <main+0x180>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			Adc_read_data();
 8000c96:	f001 fb2b 	bl	80022f0 <Adc_read_data>
 8000c9a:	e7db      	b.n	8000c54 <main+0xf4>
			HourTimer = CntSec;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <main+0x178>)
 8000c9e:	601a      	str	r2, [r3, #0]
			d_printf("\n\rHour Tick");
 8000ca0:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <main+0x188>)
 8000ca2:	f001 f9d3 	bl	800204c <d_printf>
 8000ca6:	e7de      	b.n	8000c66 <main+0x106>
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	20000010 	.word	0x20000010
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	08003480 	.word	0x08003480
 8000cb8:	40012708 	.word	0x40012708
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	7fffffe8 	.word	0x7fffffe8
 8000cc4:	2000052c 	.word	0x2000052c
 8000cc8:	0800348c 	.word	0x0800348c
 8000ccc:	20000414 	.word	0x20000414
 8000cd0:	40011400 	.word	0x40011400
 8000cd4:	200001d0 	.word	0x200001d0
 8000cd8:	200001d8 	.word	0x200001d8
 8000cdc:	200001de 	.word	0x200001de
 8000ce0:	20000538 	.word	0x20000538
 8000ce4:	200001dd 	.word	0x200001dd
 8000ce8:	08003498 	.word	0x08003498

08000cec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler>

08000cee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler>

08000cf0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	4770      	bx	lr
	...

08000cf8 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <EXTI4_15_IRQHandler+0x10>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000cfc:	06db      	lsls	r3, r3, #27
 8000cfe:	d502      	bpl.n	8000d06 <EXTI4_15_IRQHandler+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000d00:	4b01      	ldr	r3, [pc, #4]	; (8000d08 <EXTI4_15_IRQHandler+0x10>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d06:	4770      	bx	lr
 8000d08:	40010400 	.word	0x40010400

08000d0c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000d0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	__NOP();
 8000d0e:	46c0      	nop			; (mov r8, r8)

	Adc_Eoc_Callback();
 8000d10:	f001 fad2 	bl	80022b8 <Adc_Eoc_Callback>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP));
 8000d14:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <ADC1_COMP_IRQHandler+0x40>)
 8000d16:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000d18:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000d1a:	681b      	ldr	r3, [r3, #0]

	if(LL_ADC_IsActiveFlag_OVR(ADC1)){
		//		LL_ADC_ClearFlag_OVR(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 8000d1c:	075b      	lsls	r3, r3, #29
 8000d1e:	d502      	bpl.n	8000d26 <ADC1_COMP_IRQHandler+0x1a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <ADC1_COMP_IRQHandler+0x40>)
 8000d22:	2204      	movs	r2, #4
 8000d24:	601a      	str	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <ADC1_COMP_IRQHandler+0x40>)
 8000d28:	681b      	ldr	r3, [r3, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8000d2a:	071b      	lsls	r3, r3, #28
 8000d2c:	d506      	bpl.n	8000d3c <ADC1_COMP_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <ADC1_COMP_IRQHandler+0x40>)
 8000d30:	2208      	movs	r2, #8
 8000d32:	601a      	str	r2, [r3, #0]
		LL_ADC_ClearFlag_EOS(ADC1);
		adc_cnt = 0;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <ADC1_COMP_IRQHandler+0x44>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000d3a:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->CR,
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <ADC1_COMP_IRQHandler+0x40>)
 8000d3e:	6893      	ldr	r3, [r2, #8]
 8000d40:	4904      	ldr	r1, [pc, #16]	; (8000d54 <ADC1_COMP_IRQHandler+0x48>)
 8000d42:	400b      	ands	r3, r1
 8000d44:	2104      	movs	r1, #4
 8000d46:	430b      	orrs	r3, r1
 8000d48:	6093      	str	r3, [r2, #8]
 8000d4a:	e7f6      	b.n	8000d3a <ADC1_COMP_IRQHandler+0x2e>
 8000d4c:	40012400 	.word	0x40012400
 8000d50:	200001dc 	.word	0x200001dc
 8000d54:	7fffffe8 	.word	0x7fffffe8

08000d58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d58:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	07db      	lsls	r3, r3, #31
 8000d62:	d504      	bpl.n	8000d6e <TIM2_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2202      	movs	r2, #2
 8000d6a:	4252      	negs	r2, r2
 8000d6c:	611a      	str	r2, [r3, #16]
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2) == 1)
	{
		LL_TIM_ClearFlag_UPDATE(TIM2);
	}

	timer_1_128();
 8000d6e:	f001 f9f1 	bl	8002154 <timer_1_128>

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d72:	bd10      	pop	{r4, pc}

08000d74 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000d74:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <TIM22_IRQHandler+0x24>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	079b      	lsls	r3, r3, #30
 8000d7c:	d503      	bpl.n	8000d86 <TIM22_IRQHandler+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <TIM22_IRQHandler+0x24>)
 8000d80:	2203      	movs	r2, #3
 8000d82:	4252      	negs	r2, r2
 8000d84:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_CC1(TIM22);
	}


	Modbus_TO_timer();
 8000d86:	f000 ff7d 	bl	8001c84 <Modbus_TO_timer>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d8a:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <TIM22_IRQHandler+0x24>)
 8000d8c:	6813      	ldr	r3, [r2, #0]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	438b      	bics	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM22_IRQn 0 */
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40011400 	.word	0x40011400

08000d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

	Debug_UART_IRQHandler();
 8000d9e:	f001 f9b9 	bl	8002114 <Debug_UART_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da2:	bd10      	pop	{r4, pc}

08000da4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000da4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	Modbus_LPUART_IRQHandler();
 8000da6:	f000 ffc3 	bl	8001d30 <Modbus_LPUART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000daa:	bd10      	pop	{r4, pc}

08000dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dac:	b510      	push	{r4, lr}
 8000dae:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <_sbrk+0x38>)
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <_sbrk+0x3c>)
 8000db4:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <_sbrk+0x40>)
 8000db8:	6809      	ldr	r1, [r1, #0]
 8000dba:	2900      	cmp	r1, #0
 8000dbc:	d007      	beq.n	8000dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	490b      	ldr	r1, [pc, #44]	; (8000dec <_sbrk+0x40>)
 8000dc0:	6808      	ldr	r0, [r1, #0]
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d806      	bhi.n	8000dd6 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <_sbrk+0x40>)
 8000dca:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000dcc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000dce:	4907      	ldr	r1, [pc, #28]	; (8000dec <_sbrk+0x40>)
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <_sbrk+0x44>)
 8000dd2:	6008      	str	r0, [r1, #0]
 8000dd4:	e7f3      	b.n	8000dbe <_sbrk+0x12>
    errno = ENOMEM;
 8000dd6:	f001 fecb 	bl	8002b70 <__errno>
 8000dda:	230c      	movs	r3, #12
 8000ddc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000dde:	2001      	movs	r0, #1
 8000de0:	4240      	negs	r0, r0
 8000de2:	e7f3      	b.n	8000dcc <_sbrk+0x20>
 8000de4:	20002000 	.word	0x20002000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000a8 	.word	0x200000a8
 8000df0:	20000560 	.word	0x20000560

08000df4 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	4770      	bx	lr
	...

08000df8 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000df8:	b510      	push	{r4, lr}
 8000dfa:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	466b      	mov	r3, sp
 8000e00:	815a      	strh	r2, [r3, #10]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e02:	4919      	ldr	r1, [pc, #100]	; (8000e68 <MX_TIM2_Init+0x70>)
 8000e04:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8000e06:	2301      	movs	r3, #1
 8000e08:	4318      	orrs	r0, r3
 8000e0a:	6388      	str	r0, [r1, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e0c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8000e0e:	400b      	ands	r3, r1
 8000e10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e12:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e14:	4915      	ldr	r1, [pc, #84]	; (8000e6c <MX_TIM2_Init+0x74>)
 8000e16:	20c3      	movs	r0, #195	; 0xc3
 8000e18:	0080      	lsls	r0, r0, #2
 8000e1a:	580b      	ldr	r3, [r1, r0]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	500b      	str	r3, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	2380      	movs	r3, #128	; 0x80
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	600b      	str	r3, [r1, #0]
  NVIC_EnableIRQ(TIM2_IRQn);

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000e28:	466b      	mov	r3, sp
 8000e2a:	811a      	strh	r2, [r3, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e2c:	9203      	str	r2, [sp, #12]
  TIM_InitStruct.Autoreload = 4095;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_TIM2_Init+0x78>)
 8000e30:	9304      	str	r3, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e32:	9205      	str	r2, [sp, #20]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e34:	2480      	movs	r4, #128	; 0x80
 8000e36:	05e4      	lsls	r4, r4, #23
 8000e38:	a902      	add	r1, sp, #8
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	f001 fdc8 	bl	80029d0 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e48:	68a3      	ldr	r3, [r4, #8]
 8000e4a:	490a      	ldr	r1, [pc, #40]	; (8000e74 <MX_TIM2_Init+0x7c>)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	2170      	movs	r1, #112	; 0x70
 8000e54:	438b      	bics	r3, r1
 8000e56:	3960      	subs	r1, #96	; 0x60
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e5c:	68a3      	ldr	r3, [r4, #8]
 8000e5e:	4393      	bics	r3, r2
 8000e60:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM2);
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e62:	b006      	add	sp, #24
 8000e64:	bd10      	pop	{r4, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	00000fff 	.word	0x00000fff
 8000e74:	ffffbff8 	.word	0xffffbff8

08000e78 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	466b      	mov	r3, sp
 8000e80:	835d      	strh	r5, [r3, #26]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e82:	2210      	movs	r2, #16
 8000e84:	2100      	movs	r1, #0
 8000e86:	a802      	add	r0, sp, #8
 8000e88:	f001 fea5 	bl	8002bd6 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e8c:	4a20      	ldr	r2, [pc, #128]	; (8000f10 <MX_TIM22_Init+0x98>)
 8000e8e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000e90:	2320      	movs	r3, #32
 8000e92:	4319      	orrs	r1, r3
 8000e94:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e98:	4013      	ands	r3, r2
 8000e9a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e9c:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_TIM22_Init+0x9c>)
 8000ea0:	21c5      	movs	r1, #197	; 0xc5
 8000ea2:	0089      	lsls	r1, r1, #2
 8000ea4:	585a      	ldr	r2, [r3, r1]
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <MX_TIM22_Init+0xa0>)
 8000ea8:	4002      	ands	r2, r0
 8000eaa:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	03d2      	lsls	r2, r2, #15
 8000eb0:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM22_IRQn);

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000eb2:	466b      	mov	r3, sp
 8000eb4:	831d      	strh	r5, [r3, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000eb6:	9507      	str	r5, [sp, #28]
  TIM_InitStruct.Autoreload = 1911;
 8000eb8:	4f18      	ldr	r7, [pc, #96]	; (8000f1c <MX_TIM22_Init+0xa4>)
 8000eba:	9708      	str	r7, [sp, #32]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ebc:	9509      	str	r5, [sp, #36]	; 0x24
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8000ebe:	4c18      	ldr	r4, [pc, #96]	; (8000f20 <MX_TIM22_Init+0xa8>)
 8000ec0:	a906      	add	r1, sp, #24
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f001 fd84 	bl	80029d0 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	2680      	movs	r6, #128	; 0x80
 8000ecc:	43b3      	bics	r3, r6
 8000ece:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000ed0:	68a3      	ldr	r3, [r4, #8]
 8000ed2:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <MX_TIM22_Init+0xac>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM22);
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000ed8:	9502      	str	r5, [sp, #8]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000eda:	9503      	str	r5, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 1911;
 8000edc:	9704      	str	r7, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ede:	9505      	str	r5, [sp, #20]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ee0:	aa02      	add	r2, sp, #8
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	0020      	movs	r0, r4
 8000ee6:	f001 fda1 	bl	8002a2c <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000eea:	69a3      	ldr	r3, [r4, #24]
 8000eec:	2204      	movs	r2, #4
 8000eee:	4393      	bics	r3, r2
 8000ef0:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	3204      	adds	r2, #4
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000efc:	6863      	ldr	r3, [r4, #4]
 8000efe:	3268      	adds	r2, #104	; 0x68
 8000f00:	4393      	bics	r3, r2
 8000f02:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f04:	68a3      	ldr	r3, [r4, #8]
 8000f06:	43b3      	bics	r3, r6
 8000f08:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM22);
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000f0a:	b00b      	add	sp, #44	; 0x2c
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	40021000 	.word	0x40021000
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	ff00ffff 	.word	0xff00ffff
 8000f1c:	00000777 	.word	0x00000777
 8000f20:	40011400 	.word	0x40011400
 8000f24:	ffffbff8 	.word	0xffffbff8

08000f28 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000f28:	b530      	push	{r4, r5, lr}
 8000f2a:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000f2c:	2218      	movs	r2, #24
 8000f2e:	2100      	movs	r1, #0
 8000f30:	a808      	add	r0, sp, #32
 8000f32:	f001 fe50 	bl	8002bd6 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <MX_LPUART1_UART_Init+0xb8>)
 8000f38:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f3a:	2080      	movs	r0, #128	; 0x80
 8000f3c:	02c0      	lsls	r0, r0, #11
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f44:	4002      	ands	r2, r0
 8000f46:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000f48:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4c:	2501      	movs	r5, #1
 8000f4e:	432a      	orrs	r2, r5
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	402b      	ands	r3, r5
 8000f56:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f58:	9b00      	ldr	r3, [sp, #0]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f5e:	3b02      	subs	r3, #2
 8000f60:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	3301      	adds	r3, #1
 8000f64:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000f66:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f68:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	20a0      	movs	r0, #160	; 0xa0
 8000f70:	a902      	add	r1, sp, #8
 8000f72:	05c0      	lsls	r0, r0, #23
 8000f74:	f001 fae0 	bl	8002538 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_LPUART1_UART_Init+0xbc>)
 8000f7a:	21c7      	movs	r1, #199	; 0xc7
 8000f7c:	0089      	lsls	r1, r1, #2
 8000f7e:	585a      	ldr	r2, [r3, r1]
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <MX_LPUART1_UART_Init+0xc0>)
 8000f82:	4002      	ands	r2, r0
 8000f84:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0592      	lsls	r2, r2, #22
 8000f8a:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(LPUART1_IRQn);

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 8000f8c:	2396      	movs	r3, #150	; 0x96
 8000f8e:	019b      	lsls	r3, r3, #6
 8000f90:	9308      	str	r3, [sp, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8000f92:	2300      	movs	r3, #0
 8000f94:	9309      	str	r3, [sp, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8000f96:	930a      	str	r3, [sp, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8000f98:	930b      	str	r3, [sp, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8000f9a:	330c      	adds	r3, #12
 8000f9c:	930c      	str	r3, [sp, #48]	; 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8000f9e:	4c13      	ldr	r4, [pc, #76]	; (8000fec <MX_LPUART1_UART_Init+0xc4>)
 8000fa0:	a908      	add	r1, sp, #32
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f001 fb5c 	bl	8002660 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR3, USART_CR3_HDSEL);
 8000fa8:	68a3      	ldr	r3, [r4, #8]
 8000faa:	2208      	movs	r2, #8
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_RTSE);
 8000fb0:	68a3      	ldr	r3, [r4, #8]
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_LPUART1_UART_Init+0xc8>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60a3      	str	r3, [r4, #8]
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSIE);
 8000fb8:	68a3      	ldr	r3, [r4, #8]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <MX_LPUART1_UART_Init+0xcc>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60a3      	str	r3, [r4, #8]
  SET_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 8000fc0:	68a2      	ldr	r2, [r4, #8]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8000fca:	68a3      	ldr	r3, [r4, #8]
 8000fcc:	43ab      	bics	r3, r5
 8000fce:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 8000fd0:	68a3      	ldr	r3, [r4, #8]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <MX_LPUART1_UART_Init+0xd0>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
 8000fd8:	69e3      	ldr	r3, [r4, #28]
  LL_LPUART_IsActiveFlag_CTS(LPUART1);
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000fda:	b00f      	add	sp, #60	; 0x3c
 8000fdc:	bd30      	pop	{r4, r5, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	ffff00ff 	.word	0xffff00ff
 8000fec:	40004800 	.word	0x40004800
 8000ff0:	fffffeff 	.word	0xfffffeff
 8000ff4:	fffffbff 	.word	0xfffffbff
 8000ff8:	fffffdff 	.word	0xfffffdff

08000ffc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	46ce      	mov	lr, r9
 8001000:	4647      	mov	r7, r8
 8001002:	b580      	push	{r7, lr}
 8001004:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001006:	221c      	movs	r2, #28
 8001008:	2100      	movs	r1, #0
 800100a:	a809      	add	r0, sp, #36	; 0x24
 800100c:	f001 fde3 	bl	8002bd6 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <MX_USART2_UART_Init+0xd4>)
 8001012:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001014:	2080      	movs	r0, #128	; 0x80
 8001016:	0280      	lsls	r0, r0, #10
 8001018:	4301      	orrs	r1, r0
 800101a:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800101c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101e:	4002      	ands	r2, r0
 8001020:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001022:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8001024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001026:	2501      	movs	r5, #1
 8001028:	432a      	orrs	r2, r5
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	402b      	ands	r3, r5
 8001030:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001032:	9b01      	ldr	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA9   ------> USART2_TX
  PA10   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DEBUG_USART2_TX_Pin;
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800103a:	3bff      	subs	r3, #255	; 0xff
 800103c:	3bff      	subs	r3, #255	; 0xff
 800103e:	4699      	mov	r9, r3
 8001040:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	3301      	adds	r3, #1
 8001044:	4698      	mov	r8, r3
 8001046:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001048:	2400      	movs	r4, #0
 800104a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800104e:	2704      	movs	r7, #4
 8001050:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001052:	26a0      	movs	r6, #160	; 0xa0
 8001054:	05f6      	lsls	r6, r6, #23
 8001056:	a903      	add	r1, sp, #12
 8001058:	0030      	movs	r0, r6
 800105a:	f001 fa6d 	bl	8002538 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = DEBUG_USART2_RX_Pin;
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001064:	464b      	mov	r3, r9
 8001066:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	4643      	mov	r3, r8
 800106a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800106c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800106e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001070:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001072:	a903      	add	r1, sp, #12
 8001074:	0030      	movs	r0, r6
 8001076:	f001 fa5f 	bl	8002538 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <MX_USART2_UART_Init+0xd8>)
 800107c:	21c7      	movs	r1, #199	; 0xc7
 800107e:	0089      	lsls	r1, r1, #2
 8001080:	5853      	ldr	r3, [r2, r1]
 8001082:	20ff      	movs	r0, #255	; 0xff
 8001084:	4383      	bics	r3, r0
 8001086:	387f      	subs	r0, #127	; 0x7f
 8001088:	4303      	orrs	r3, r0
 800108a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	055b      	lsls	r3, r3, #21
 8001090:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001092:	23e1      	movs	r3, #225	; 0xe1
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001098:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800109a:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800109c:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800109e:	230c      	movs	r3, #12
 80010a0:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010a2:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010a4:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80010a6:	4c0c      	ldr	r4, [pc, #48]	; (80010d8 <MX_USART2_UART_Init+0xdc>)
 80010a8:	a909      	add	r1, sp, #36	; 0x24
 80010aa:	0020      	movs	r0, r4
 80010ac:	f001 fcde 	bl	8002a6c <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010b0:	6863      	ldr	r3, [r4, #4]
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <MX_USART2_UART_Init+0xe0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	222a      	movs	r2, #42	; 0x2a
 80010bc:	4393      	bics	r3, r2
 80010be:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	432b      	orrs	r3, r5
 80010c4:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	b011      	add	sp, #68	; 0x44
 80010c8:	bcc0      	pop	{r6, r7}
 80010ca:	46b9      	mov	r9, r7
 80010cc:	46b0      	mov	r8, r6
 80010ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	40004400 	.word	0x40004400
 80010dc:	ffffb7ff 	.word	0xffffb7ff

080010e0 <CalibGasZero>:
#include "calculations.h"
#include "device.h"

void CalibGasZero(void){

	dev.Config.CalibZeroTemper = dev.RegInput.TempSensor;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <CalibGasZero+0x14>)
 80010e2:	22e8      	movs	r2, #232	; 0xe8
 80010e4:	5a99      	ldrh	r1, [r3, r2]
 80010e6:	3a22      	subs	r2, #34	; 0x22
 80010e8:	5299      	strh	r1, [r3, r2]
	dev.Config.CalibZeroADC = dev.RegInput.ADC_0;
 80010ea:	3248      	adds	r2, #72	; 0x48
 80010ec:	5a99      	ldrh	r1, [r3, r2]
 80010ee:	3a46      	subs	r2, #70	; 0x46
 80010f0:	5299      	strh	r1, [r3, r2]

}
 80010f2:	4770      	bx	lr
 80010f4:	20000414 	.word	0x20000414

080010f8 <CalibGasConc>:

void CalibGasConc(void){

	dev.Config.CalibConcTemper = dev.RegInput.TempSensor;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <CalibGasConc+0x14>)
 80010fa:	22e8      	movs	r2, #232	; 0xe8
 80010fc:	5a99      	ldrh	r1, [r3, r2]
 80010fe:	3a1e      	subs	r2, #30
 8001100:	5299      	strh	r1, [r3, r2]
	dev.Config.CalibConcADC = dev.RegInput.ADC_0;
 8001102:	3244      	adds	r2, #68	; 0x44
 8001104:	5a99      	ldrh	r1, [r3, r2]
 8001106:	3a42      	subs	r2, #66	; 0x42
 8001108:	5299      	strh	r1, [r3, r2]

}
 800110a:	4770      	bx	lr
 800110c:	20000414 	.word	0x20000414

08001110 <get_koef_temper_conc>:

#define K_MUL 1

uint32_t get_koef_temper_conc(int16_t temperat){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	46ce      	mov	lr, r9
 8001114:	4647      	mov	r7, r8
 8001116:	b580      	push	{r7, lr}
 8001118:	b083      	sub	sp, #12
	BOOL find_null = FALSE;

	int16_t dt, temper_1, temper_2;
	uint32_t dk, koef_1, koef_2;

	temper_1 = dev.Config.temp_corr_conc[0].Temp;
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <get_koef_temper_conc+0xbc>)
 800111c:	2266      	movs	r2, #102	; 0x66
 800111e:	5e99      	ldrsh	r1, [r3, r2]
	koef_1 = dev.Config.temp_corr_conc[0].Koef;
 8001120:	2268      	movs	r2, #104	; 0x68
 8001122:	5a9e      	ldrh	r6, [r3, r2]

	temper_2 = dev.Config.temp_corr_conc[1].Temp;
 8001124:	3202      	adds	r2, #2
 8001126:	5e9c      	ldrsh	r4, [r3, r2]
 8001128:	46a4      	mov	ip, r4
	koef_2 = dev.Config.temp_corr_conc[1].Koef;
 800112a:	226c      	movs	r2, #108	; 0x6c
 800112c:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 800112e:	2e00      	cmp	r6, #0
 8001130:	d042      	beq.n	80011b8 <get_koef_temper_conc+0xa8>

		return temper_koef;

	}

	if(koef_2 == 0){
 8001132:	2a00      	cmp	r2, #0
 8001134:	d042      	beq.n	80011bc <get_koef_temper_conc+0xac>

		return temper_koef;

	}

	if(temperat < temper_1){
 8001136:	4281      	cmp	r1, r0
 8001138:	dc40      	bgt.n	80011bc <get_koef_temper_conc+0xac>
		temper_koef = koef_1 * K_MUL;

		return temper_koef;
	}

	if((temperat >= temper_1) && (temperat <= temper_2))
 800113a:	4284      	cmp	r4, r0
 800113c:	da07      	bge.n	800114e <get_koef_temper_conc+0x3e>
	BOOL find_temper = FALSE;
 800113e:	2700      	movs	r7, #0
			temper_koef = koef_1 * K_MUL;
			find_null = TRUE;
		}

		if((temperat >= temper_1) && (temperat <= temper_2))
			find_temper = TRUE;
 8001140:	2300      	movs	r3, #0
 8001142:	4699      	mov	r9, r3
 8001144:	3301      	adds	r3, #1
 8001146:	24fa      	movs	r4, #250	; 0xfa
 8001148:	00a4      	lsls	r4, r4, #2
 800114a:	9401      	str	r4, [sp, #4]
 800114c:	e003      	b.n	8001156 <get_koef_temper_conc+0x46>
		find_temper = TRUE;
 800114e:	2701      	movs	r7, #1
 8001150:	e7f6      	b.n	8001140 <get_koef_temper_conc+0x30>
	for(i = 1; (i < 6) && (!find_temper) && (!find_null); i++){
 8001152:	3301      	adds	r3, #1
 8001154:	b29b      	uxth	r3, r3
 8001156:	2b05      	cmp	r3, #5
 8001158:	d81e      	bhi.n	8001198 <get_koef_temper_conc+0x88>
 800115a:	003c      	movs	r4, r7
 800115c:	464d      	mov	r5, r9
 800115e:	432c      	orrs	r4, r5
 8001160:	d11a      	bne.n	8001198 <get_koef_temper_conc+0x88>
		temper_1 = dev.Config.temp_corr_conc[i].Temp;
 8001162:	4c1a      	ldr	r4, [pc, #104]	; (80011cc <get_koef_temper_conc+0xbc>)
 8001164:	001a      	movs	r2, r3
 8001166:	3218      	adds	r2, #24
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	18a2      	adds	r2, r4, r2
 800116c:	2606      	movs	r6, #6
 800116e:	5f91      	ldrsh	r1, [r2, r6]
		koef_1 = dev.Config.temp_corr_conc[i].Koef;
 8001170:	8916      	ldrh	r6, [r2, #8]
		temper_2 = dev.Config.temp_corr_conc[i+1].Temp;
 8001172:	001a      	movs	r2, r3
 8001174:	3219      	adds	r2, #25
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	18a2      	adds	r2, r4, r2
 800117a:	2406      	movs	r4, #6
 800117c:	5f15      	ldrsh	r5, [r2, r4]
 800117e:	46ac      	mov	ip, r5
		koef_2 = dev.Config.temp_corr_conc[i+1].Koef;
 8001180:	8912      	ldrh	r2, [r2, #8]
		if(koef_2 == 0){
 8001182:	2a00      	cmp	r2, #0
 8001184:	d102      	bne.n	800118c <get_koef_temper_conc+0x7c>
			temper_koef = koef_1 * K_MUL;
 8001186:	9601      	str	r6, [sp, #4]
			find_null = TRUE;
 8001188:	2401      	movs	r4, #1
 800118a:	46a1      	mov	r9, r4
		if((temperat >= temper_1) && (temperat <= temper_2))
 800118c:	4288      	cmp	r0, r1
 800118e:	dbe0      	blt.n	8001152 <get_koef_temper_conc+0x42>
 8001190:	4560      	cmp	r0, ip
 8001192:	dcde      	bgt.n	8001152 <get_koef_temper_conc+0x42>
			find_temper = TRUE;
 8001194:	2701      	movs	r7, #1
 8001196:	e7dc      	b.n	8001152 <get_koef_temper_conc+0x42>

	}

	if(find_temper){
 8001198:	2f00      	cmp	r7, #0
 800119a:	d009      	beq.n	80011b0 <get_koef_temper_conc+0xa0>

		dt = temperat - temper_1;
 800119c:	1a40      	subs	r0, r0, r1
 800119e:	b203      	sxth	r3, r0

		dk = (koef_2 - koef_1) * dt * K_MUL / (temper_2 - temper_1);
 80011a0:	1b90      	subs	r0, r2, r6
 80011a2:	4358      	muls	r0, r3
 80011a4:	4663      	mov	r3, ip
 80011a6:	1a59      	subs	r1, r3, r1
 80011a8:	f7fe ffc0 	bl	800012c <__udivsi3>

		temper_koef =  (koef_1 * K_MUL) + dk;
 80011ac:	1836      	adds	r6, r6, r0
 80011ae:	e005      	b.n	80011bc <get_koef_temper_conc+0xac>

	}else if(temperat > temper_2){
 80011b0:	4584      	cmp	ip, r0
 80011b2:	db09      	blt.n	80011c8 <get_koef_temper_conc+0xb8>
 80011b4:	9e01      	ldr	r6, [sp, #4]
 80011b6:	e001      	b.n	80011bc <get_koef_temper_conc+0xac>
		return temper_koef;
 80011b8:	26fa      	movs	r6, #250	; 0xfa
 80011ba:	00b6      	lsls	r6, r6, #2
		temper_koef = koef_2 * K_MUL;

	}

	return temper_koef;
}
 80011bc:	0030      	movs	r0, r6
 80011be:	b003      	add	sp, #12
 80011c0:	bcc0      	pop	{r6, r7}
 80011c2:	46b9      	mov	r9, r7
 80011c4:	46b0      	mov	r8, r6
 80011c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temper_koef = koef_2 * K_MUL;
 80011c8:	0016      	movs	r6, r2
 80011ca:	e7f7      	b.n	80011bc <get_koef_temper_conc+0xac>
 80011cc:	20000414 	.word	0x20000414

080011d0 <SetGasValue>:


}
*/

void SetGasValue(void){
 80011d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t koef_tc;

//	dev.RegInput.ADC_0 = dev.Config.CalibConcADC;
//	dev.RegInput.TempSensor = dev.Config.CalibConcTemper;

	if(dev.RegInput.ADC_0 > dev.Config.CalibZeroADC)
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <SetGasValue+0x70>)
 80011d4:	2287      	movs	r2, #135	; 0x87
 80011d6:	0052      	lsls	r2, r2, #1
 80011d8:	5a9c      	ldrh	r4, [r3, r2]
 80011da:	3a46      	subs	r2, #70	; 0x46
 80011dc:	5a9b      	ldrh	r3, [r3, r2]
 80011de:	429c      	cmp	r4, r3
 80011e0:	d92a      	bls.n	8001238 <SetGasValue+0x68>
		val = dev.RegInput.ADC_0 - dev.Config.CalibZeroADC;
 80011e2:	1ae4      	subs	r4, r4, r3
	else
		val = 0;

	if((dev.Config.CalibConcADC - dev.Config.CalibZeroADC) > 0)
 80011e4:	4916      	ldr	r1, [pc, #88]	; (8001240 <SetGasValue+0x70>)
 80011e6:	22cc      	movs	r2, #204	; 0xcc
 80011e8:	5a89      	ldrh	r1, [r1, r2]
 80011ea:	1ac9      	subs	r1, r1, r3
 80011ec:	2900      	cmp	r1, #0
 80011ee:	dd25      	ble.n	800123c <SetGasValue+0x6c>
		k = dev.Config.ValueCalib  * 10000/ (dev.Config.CalibConcADC - dev.Config.CalibZeroADC);
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <SetGasValue+0x70>)
 80011f2:	899b      	ldrh	r3, [r3, #12]
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <SetGasValue+0x74>)
 80011f6:	4358      	muls	r0, r3
 80011f8:	f7ff f822 	bl	8000240 <__divsi3>
	else
		k = 10000;

	val *= k;
 80011fc:	4360      	muls	r0, r4
	val += 5000;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <SetGasValue+0x78>)
 8001200:	469c      	mov	ip, r3
 8001202:	4460      	add	r0, ip
	val /= 10000;
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <SetGasValue+0x74>)
 8001206:	f7fe ff91 	bl	800012c <__udivsi3>
 800120a:	0006      	movs	r6, r0

	dev.RegInput.Value_0 = val;
 800120c:	4d0c      	ldr	r5, [pc, #48]	; (8001240 <SetGasValue+0x70>)
 800120e:	2386      	movs	r3, #134	; 0x86
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	52e8      	strh	r0, [r5, r3]

	kc = get_koef_temper_conc(dev.Config.CalibConcTemper);
 8001214:	3b42      	subs	r3, #66	; 0x42
 8001216:	5ee8      	ldrsh	r0, [r5, r3]
 8001218:	f7ff ff7a 	bl	8001110 <get_koef_temper_conc>
 800121c:	0004      	movs	r4, r0
	koef_tc = get_koef_temper_conc(dev.RegInput.TempSensor);
 800121e:	23e8      	movs	r3, #232	; 0xe8
 8001220:	5ee8      	ldrsh	r0, [r5, r3]
 8001222:	f7ff ff75 	bl	8001110 <get_koef_temper_conc>
 8001226:	0001      	movs	r1, r0

	val *= kc;
 8001228:	4374      	muls	r4, r6
	val += (koef_tc >> 1);
 800122a:	0840      	lsrs	r0, r0, #1
 800122c:	1900      	adds	r0, r0, r4
	val /= koef_tc;
 800122e:	f7fe ff7d 	bl	800012c <__udivsi3>

	dev.RegInput.Value = val;
 8001232:	23e2      	movs	r3, #226	; 0xe2
 8001234:	52e8      	strh	r0, [r5, r3]
#ifdef DEBUG_CALC
	d_printf("\n\r");
	d_printf("Val: %04d, Val_0 %04d", dev.RegInput.Value,dev.RegInput.Value_0);
#endif

}
 8001236:	bd70      	pop	{r4, r5, r6, pc}
		val = 0;
 8001238:	2400      	movs	r4, #0
 800123a:	e7d3      	b.n	80011e4 <SetGasValue+0x14>
		k = 10000;
 800123c:	4801      	ldr	r0, [pc, #4]	; (8001244 <SetGasValue+0x74>)
 800123e:	e7dd      	b.n	80011fc <SetGasValue+0x2c>
 8001240:	20000414 	.word	0x20000414
 8001244:	00002710 	.word	0x00002710
 8001248:	00001388 	.word	0x00001388

0800124c <EEPROM_WaitEOP>:
// Ожидание завершения операции (стирание или записи) EEPROM с таймаутом
//
void EEPROM_WaitEOP(){

	// Таймаут 10 мсек
	uint32_t Timeout = 10;
 800124c:	220a      	movs	r2, #10

	while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <EEPROM_WaitEOP+0x24>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	079b      	lsls	r3, r3, #30
 8001254:	d408      	bmi.n	8001268 <EEPROM_WaitEOP+0x1c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <EEPROM_WaitEOP+0x28>)
 8001258:	681b      	ldr	r3, [r3, #0]

		if (LL_SYSTICK_IsActiveCounterFlag())
 800125a:	03db      	lsls	r3, r3, #15
 800125c:	d5f7      	bpl.n	800124e <EEPROM_WaitEOP+0x2>
		{
			if(Timeout-- == 0)
 800125e:	1e53      	subs	r3, r2, #1
 8001260:	2a00      	cmp	r2, #0
 8001262:	d004      	beq.n	800126e <EEPROM_WaitEOP+0x22>
 8001264:	001a      	movs	r2, r3
 8001266:	e7f2      	b.n	800124e <EEPROM_WaitEOP+0x2>
			}
		}

	}

	FLASH->SR = FLASH_SR_EOP;
 8001268:	4b01      	ldr	r3, [pc, #4]	; (8001270 <EEPROM_WaitEOP+0x24>)
 800126a:	2202      	movs	r2, #2
 800126c:	619a      	str	r2, [r3, #24]

}
 800126e:	4770      	bx	lr
 8001270:	40022000 	.word	0x40022000
 8001274:	e000e010 	.word	0xe000e010

08001278 <writeWordToEEPROM>:

void writeWordToEEPROM(uint16_t address, uint32_t data) {
 8001278:	b510      	push	{r4, lr}

	if(*(__IO uint32_t *) (EEPROM_BASE_ADR + address) != data){
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <writeWordToEEPROM+0x18>)
 800127c:	469c      	mov	ip, r3
 800127e:	4460      	add	r0, ip
 8001280:	6803      	ldr	r3, [r0, #0]
 8001282:	428b      	cmp	r3, r1
 8001284:	d100      	bne.n	8001288 <writeWordToEEPROM+0x10>

		EEPROM_WaitEOP();

	}

}
 8001286:	bd10      	pop	{r4, pc}
		*(__IO uint32_t *) (EEPROM_BASE_ADR + address) = data;
 8001288:	6001      	str	r1, [r0, #0]
		EEPROM_WaitEOP();
 800128a:	f7ff ffdf 	bl	800124c <EEPROM_WaitEOP>
}
 800128e:	e7fa      	b.n	8001286 <writeWordToEEPROM+0xe>
 8001290:	08080000 	.word	0x08080000

08001294 <write_mem_to_eeprom>:

void write_mem_to_eeprom(uint16_t address, uint32_t *ptr, uint8_t len){
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	0007      	movs	r7, r0
 8001298:	000e      	movs	r6, r1
 800129a:	0015      	movs	r5, r2

	int i;

	for(i=0;i<len;i++){
 800129c:	2400      	movs	r4, #0
 800129e:	42a5      	cmp	r5, r4
 80012a0:	dd07      	ble.n	80012b2 <write_mem_to_eeprom+0x1e>

		writeWordToEEPROM(address + i*4, ptr[i]);
 80012a2:	00a3      	lsls	r3, r4, #2
 80012a4:	58f1      	ldr	r1, [r6, r3]
 80012a6:	18f8      	adds	r0, r7, r3
 80012a8:	b280      	uxth	r0, r0
 80012aa:	f7ff ffe5 	bl	8001278 <writeWordToEEPROM>
	for(i=0;i<len;i++){
 80012ae:	3401      	adds	r4, #1
 80012b0:	e7f5      	b.n	800129e <write_mem_to_eeprom+0xa>

	}

}
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012b4 <eeprom_config_write_bank>:

void eeprom_config_write_bank(uint8_t bank){
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	0004      	movs	r4, r0

	dev.Config.crc = CalcCRC((uint32_t*)&dev.Config,(sizeof(Config_td)/4)-1);
 80012b8:	4e0e      	ldr	r6, [pc, #56]	; (80012f4 <eeprom_config_write_bank+0x40>)
 80012ba:	2135      	movs	r1, #53	; 0x35
 80012bc:	0030      	movs	r0, r6
 80012be:	f7ff faa7 	bl	8000810 <CalcCRC>
 80012c2:	23d4      	movs	r3, #212	; 0xd4
 80012c4:	50f0      	str	r0, [r6, r3]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012c6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i

	__enter_critical();

	FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 80012cc:	4d0a      	ldr	r5, [pc, #40]	; (80012f8 <eeprom_config_write_bank+0x44>)
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <eeprom_config_write_bank+0x48>)
 80012d0:	60ea      	str	r2, [r5, #12]
	FLASH->PEKEYR = (uint32_t) 0x02030405U;
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <eeprom_config_write_bank+0x4c>)
 80012d4:	60ea      	str	r2, [r5, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012d6:	f383 8810 	msr	PRIMASK, r3

	__exit_critical();

	write_mem_to_eeprom(EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * bank,
 80012da:	20d8      	movs	r0, #216	; 0xd8
 80012dc:	4360      	muls	r0, r4
 80012de:	b280      	uxth	r0, r0
 80012e0:	2236      	movs	r2, #54	; 0x36
 80012e2:	0031      	movs	r1, r6
 80012e4:	f7ff ffd6 	bl	8001294 <write_mem_to_eeprom>
			(uint32_t*)&dev.Config,sizeof(Config_td)/4);


	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80012e8:	686b      	ldr	r3, [r5, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4313      	orrs	r3, r2
 80012ee:	606b      	str	r3, [r5, #4]

}
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	20000414 	.word	0x20000414
 80012f8:	40022000 	.word	0x40022000
 80012fc:	89abcdef 	.word	0x89abcdef
 8001300:	02030405 	.word	0x02030405

08001304 <eeprom_config_write>:

void eeprom_config_write(void) {
 8001304:	b510      	push	{r4, lr}

	dev.Config.Counter++;
 8001306:	4a08      	ldr	r2, [pc, #32]	; (8001328 <eeprom_config_write+0x24>)
 8001308:	6813      	ldr	r3, [r2, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	6013      	str	r3, [r2, #0]

	eeprom_config_write_bank(nConfigBank);
 800130e:	4c07      	ldr	r4, [pc, #28]	; (800132c <eeprom_config_write+0x28>)
 8001310:	7820      	ldrb	r0, [r4, #0]
 8001312:	f7ff ffcf 	bl	80012b4 <eeprom_config_write_bank>

	nConfigBank ^= 1;
 8001316:	7823      	ldrb	r3, [r4, #0]
 8001318:	2201      	movs	r2, #1
 800131a:	4053      	eors	r3, r2
 800131c:	7023      	strb	r3, [r4, #0]
	d_printf("\n\rConfig write");
 800131e:	4804      	ldr	r0, [pc, #16]	; (8001330 <eeprom_config_write+0x2c>)
 8001320:	f000 fe94 	bl	800204c <d_printf>

}
 8001324:	bd10      	pop	{r4, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000414 	.word	0x20000414
 800132c:	200000ac 	.word	0x200000ac
 8001330:	080034c8 	.word	0x080034c8

08001334 <factory_config_write>:
}

//==============================================================================
// Запись заводских настроек во FLASH
//
void factory_config_write(void){
 8001334:	b510      	push	{r4, lr}

	eeprom_config_write_bank(2);
 8001336:	2002      	movs	r0, #2
 8001338:	f7ff ffbc 	bl	80012b4 <eeprom_config_write_bank>
	d_printf("\n\rFactory config write");
 800133c:	4801      	ldr	r0, [pc, #4]	; (8001344 <factory_config_write+0x10>)
 800133e:	f000 fe85 	bl	800204c <d_printf>

}
 8001342:	bd10      	pop	{r4, pc}
 8001344:	080034d8 	.word	0x080034d8

08001348 <factory_config_read>:

//==============================================================================
// Чтение заводских настроек из FLASH
//
BOOL factory_config_read(void){
 8001348:	b510      	push	{r4, lr}
 800134a:	b0b6      	sub	sp, #216	; 0xd8

	uint32_t tmp;

	// Чтение заводских настроек во временную структуру

	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 800134c:	2300      	movs	r3, #0
 800134e:	e007      	b.n	8001360 <factory_config_read+0x18>

		((uint32_t*) &ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * 2 + (i * 4)));
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <factory_config_read+0x6c>)
 8001354:	1859      	adds	r1, r3, r1
 8001356:	6809      	ldr	r1, [r1, #0]
 8001358:	4668      	mov	r0, sp
 800135a:	50c1      	str	r1, [r0, r3]
	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 800135c:	3201      	adds	r2, #1
 800135e:	b253      	sxtb	r3, r2
 8001360:	b2da      	uxtb	r2, r3
 8001362:	2a35      	cmp	r2, #53	; 0x35
 8001364:	d9f4      	bls.n	8001350 <factory_config_read+0x8>
	}

	// Проверка CRC

	crc = CalcCRC((uint32_t*)&ConfigTmp, (EEPROM_CONFIG_LEN/4)-1);
 8001366:	2135      	movs	r1, #53	; 0x35
 8001368:	4668      	mov	r0, sp
 800136a:	f7ff fa51 	bl	8000810 <CalcCRC>

	if( ConfigTmp.crc != crc){
 800136e:	23d4      	movs	r3, #212	; 0xd4
 8001370:	466a      	mov	r2, sp
 8001372:	58d3      	ldr	r3, [r2, r3]
 8001374:	4283      	cmp	r3, r0
 8001376:	d006      	beq.n	8001386 <factory_config_read+0x3e>
		d_printf("\n\rNo Data Factory",0);
 8001378:	2100      	movs	r1, #0
 800137a:	480f      	ldr	r0, [pc, #60]	; (80013b8 <factory_config_read+0x70>)
 800137c:	f000 fe66 	bl	800204c <d_printf>
		return FALSE;
 8001380:	2000      	movs	r0, #0

	eeprom_config_write();

	return TRUE;

}
 8001382:	b036      	add	sp, #216	; 0xd8
 8001384:	bd10      	pop	{r4, pc}
	d_printf("\n\rLoad Factory");
 8001386:	480d      	ldr	r0, [pc, #52]	; (80013bc <factory_config_read+0x74>)
 8001388:	f000 fe60 	bl	800204c <d_printf>
	tmp = dev.Config.Counter;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <factory_config_read+0x78>)
 800138e:	681c      	ldr	r4, [r3, #0]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8001390:	2300      	movs	r3, #0
 8001392:	e006      	b.n	80013a2 <factory_config_read+0x5a>
		((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp)[i];
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4669      	mov	r1, sp
 8001398:	58c8      	ldr	r0, [r1, r3]
 800139a:	4909      	ldr	r1, [pc, #36]	; (80013c0 <factory_config_read+0x78>)
 800139c:	50c8      	str	r0, [r1, r3]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 800139e:	3201      	adds	r2, #1
 80013a0:	b253      	sxtb	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	2a35      	cmp	r2, #53	; 0x35
 80013a6:	d9f5      	bls.n	8001394 <factory_config_read+0x4c>
	dev.Config.Counter = tmp;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <factory_config_read+0x78>)
 80013aa:	601c      	str	r4, [r3, #0]
	eeprom_config_write();
 80013ac:	f7ff ffaa 	bl	8001304 <eeprom_config_write>
	return TRUE;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e7e6      	b.n	8001382 <factory_config_read+0x3a>
 80013b4:	080801b0 	.word	0x080801b0
 80013b8:	080034f0 	.word	0x080034f0
 80013bc:	08003504 	.word	0x08003504
 80013c0:	20000414 	.word	0x20000414

080013c4 <read_config_from_eeprom>:
void read_config_from_eeprom(void){
 80013c4:	b530      	push	{r4, r5, lr}
 80013c6:	b0ef      	sub	sp, #444	; 0x1bc
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	2a6b      	cmp	r2, #107	; 0x6b
 80013ce:	d808      	bhi.n	80013e2 <read_config_from_eeprom+0x1e>
		((uint32_t*) ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + (i * 4)));
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4941      	ldr	r1, [pc, #260]	; (80014d8 <read_config_from_eeprom+0x114>)
 80013d4:	1859      	adds	r1, r3, r1
 80013d6:	6808      	ldr	r0, [r1, #0]
 80013d8:	a902      	add	r1, sp, #8
 80013da:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 80013dc:	3201      	adds	r2, #1
 80013de:	b253      	sxtb	r3, r2
 80013e0:	e7f3      	b.n	80013ca <read_config_from_eeprom+0x6>
	for(int8_t i = 0; i < 2; i++){
 80013e2:	2400      	movs	r4, #0
 80013e4:	e004      	b.n	80013f0 <read_config_from_eeprom+0x2c>
			fValid[i] = TRUE;
 80013e6:	ab01      	add	r3, sp, #4
 80013e8:	2201      	movs	r2, #1
 80013ea:	551a      	strb	r2, [r3, r4]
	for(int8_t i = 0; i < 2; i++){
 80013ec:	3401      	adds	r4, #1
 80013ee:	b264      	sxtb	r4, r4
 80013f0:	2c01      	cmp	r4, #1
 80013f2:	dc12      	bgt.n	800141a <read_config_from_eeprom+0x56>
		crc = CalcCRC((uint32_t*)&ConfigTmp[i], (EEPROM_CONFIG_LEN/4)-1);
 80013f4:	25d8      	movs	r5, #216	; 0xd8
 80013f6:	4365      	muls	r5, r4
 80013f8:	ab02      	add	r3, sp, #8
 80013fa:	1958      	adds	r0, r3, r5
 80013fc:	2135      	movs	r1, #53	; 0x35
 80013fe:	f7ff fa07 	bl	8000810 <CalcCRC>
		if( ConfigTmp[i].crc == crc){
 8001402:	ab02      	add	r3, sp, #8
 8001404:	469c      	mov	ip, r3
 8001406:	4465      	add	r5, ip
 8001408:	002b      	movs	r3, r5
 800140a:	33d4      	adds	r3, #212	; 0xd4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4283      	cmp	r3, r0
 8001410:	d0e9      	beq.n	80013e6 <read_config_from_eeprom+0x22>
			fValid[i] = FALSE;
 8001412:	ab01      	add	r3, sp, #4
 8001414:	2200      	movs	r2, #0
 8001416:	551a      	strb	r2, [r3, r4]
 8001418:	e7e8      	b.n	80013ec <read_config_from_eeprom+0x28>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 800141a:	ab01      	add	r3, sp, #4
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d010      	beq.n	8001444 <read_config_from_eeprom+0x80>
	}else if((fValid[0] == FALSE) && (fValid[1] == TRUE)){
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <read_config_from_eeprom+0x6a>
 8001426:	aa01      	add	r2, sp, #4
 8001428:	7852      	ldrb	r2, [r2, #1]
 800142a:	2a01      	cmp	r2, #1
 800142c:	d01e      	beq.n	800146c <read_config_from_eeprom+0xa8>
		nConfigBank = 0;
 800142e:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <read_config_from_eeprom+0x118>)
 8001430:	2100      	movs	r1, #0
 8001432:	7011      	strb	r1, [r2, #0]
	if((fValid[0] == FALSE) && (fValid[1] == FALSE)){
 8001434:	2b00      	cmp	r3, #0
 8001436:	d14c      	bne.n	80014d2 <read_config_from_eeprom+0x10e>
 8001438:	ab01      	add	r3, sp, #4
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d019      	beq.n	8001474 <read_config_from_eeprom+0xb0>
 8001440:	2300      	movs	r3, #0
 8001442:	e035      	b.n	80014b0 <read_config_from_eeprom+0xec>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 8001444:	aa01      	add	r2, sp, #4
 8001446:	7852      	ldrb	r2, [r2, #1]
 8001448:	2a01      	cmp	r2, #1
 800144a:	d1ea      	bne.n	8001422 <read_config_from_eeprom+0x5e>
		if(ConfigTmp[0].Counter < ConfigTmp[1].Counter){
 800144c:	32d7      	adds	r2, #215	; 0xd7
 800144e:	4669      	mov	r1, sp
 8001450:	2008      	movs	r0, #8
 8001452:	1809      	adds	r1, r1, r0
 8001454:	588a      	ldr	r2, [r1, r2]
 8001456:	9902      	ldr	r1, [sp, #8]
 8001458:	4291      	cmp	r1, r2
 800145a:	d203      	bcs.n	8001464 <read_config_from_eeprom+0xa0>
			nConfigBank = 1;
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <read_config_from_eeprom+0x118>)
 800145e:	2101      	movs	r1, #1
 8001460:	7011      	strb	r1, [r2, #0]
 8001462:	e7e7      	b.n	8001434 <read_config_from_eeprom+0x70>
			nConfigBank = 0;
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <read_config_from_eeprom+0x118>)
 8001466:	2100      	movs	r1, #0
 8001468:	7011      	strb	r1, [r2, #0]
 800146a:	e7e3      	b.n	8001434 <read_config_from_eeprom+0x70>
		nConfigBank = 1;
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <read_config_from_eeprom+0x118>)
 800146e:	2101      	movs	r1, #1
 8001470:	7011      	strb	r1, [r2, #0]
 8001472:	e7df      	b.n	8001434 <read_config_from_eeprom+0x70>
		if(!factory_config_read()){
 8001474:	f7ff ff68 	bl	8001348 <factory_config_read>
 8001478:	2800      	cmp	r0, #0
 800147a:	d123      	bne.n	80014c4 <read_config_from_eeprom+0x100>
			dev_set_config_default();
 800147c:	f000 feea 	bl	8002254 <dev_set_config_default>
			d_printf("\n\r%SetDef",0);
 8001480:	2100      	movs	r1, #0
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <read_config_from_eeprom+0x11c>)
 8001484:	f000 fde2 	bl	800204c <d_printf>
			nConfigBank = 0;
 8001488:	4c14      	ldr	r4, [pc, #80]	; (80014dc <read_config_from_eeprom+0x118>)
 800148a:	2500      	movs	r5, #0
 800148c:	7025      	strb	r5, [r4, #0]
			eeprom_config_write();
 800148e:	f7ff ff39 	bl	8001304 <eeprom_config_write>
			nConfigBank = 0;
 8001492:	7025      	strb	r5, [r4, #0]
 8001494:	e016      	b.n	80014c4 <read_config_from_eeprom+0x100>
			((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp[nConfigBank])[i];
 8001496:	4911      	ldr	r1, [pc, #68]	; (80014dc <read_config_from_eeprom+0x118>)
 8001498:	7808      	ldrb	r0, [r1, #0]
 800149a:	21d8      	movs	r1, #216	; 0xd8
 800149c:	4341      	muls	r1, r0
 800149e:	a802      	add	r0, sp, #8
 80014a0:	4684      	mov	ip, r0
 80014a2:	4461      	add	r1, ip
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	58c8      	ldr	r0, [r1, r3]
 80014a8:	490e      	ldr	r1, [pc, #56]	; (80014e4 <read_config_from_eeprom+0x120>)
 80014aa:	50c8      	str	r0, [r1, r3]
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80014ac:	3201      	adds	r2, #1
 80014ae:	b253      	sxtb	r3, r2
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	2a35      	cmp	r2, #53	; 0x35
 80014b4:	d9ef      	bls.n	8001496 <read_config_from_eeprom+0xd2>
		d_printf("\n\rConfigBank-%d, CNT-%d", nConfigBank, dev.Config.Counter);
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <read_config_from_eeprom+0x120>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <read_config_from_eeprom+0x118>)
 80014bc:	7819      	ldrb	r1, [r3, #0]
 80014be:	480a      	ldr	r0, [pc, #40]	; (80014e8 <read_config_from_eeprom+0x124>)
 80014c0:	f000 fdc4 	bl	800204c <d_printf>
	nConfigBank ^= 1;
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <read_config_from_eeprom+0x118>)
 80014c6:	7813      	ldrb	r3, [r2, #0]
 80014c8:	2101      	movs	r1, #1
 80014ca:	404b      	eors	r3, r1
 80014cc:	7013      	strb	r3, [r2, #0]
}
 80014ce:	b06f      	add	sp, #444	; 0x1bc
 80014d0:	bd30      	pop	{r4, r5, pc}
 80014d2:	2300      	movs	r3, #0
 80014d4:	e7ec      	b.n	80014b0 <read_config_from_eeprom+0xec>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	08080000 	.word	0x08080000
 80014dc:	200000ac 	.word	0x200000ac
 80014e0:	08003514 	.word	0x08003514
 80014e4:	20000414 	.word	0x20000414
 80014e8:	08003520 	.word	0x08003520

080014ec <mb_crc>:
}

//==============================================================================

uint16_t mb_crc(uint8_t *buf, int len)
{
 80014ec:	b530      	push	{r4, r5, lr}
 80014ee:	0005      	movs	r5, r0
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++)
 80014f0:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 80014f2:	480a      	ldr	r0, [pc, #40]	; (800151c <mb_crc+0x30>)
	for (int pos = 0; pos < len; pos++)
 80014f4:	e00b      	b.n	800150e <mb_crc+0x22>
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
				crc >>= 1;
 80014f6:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {
 80014f8:	3b01      	subs	r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <mb_crc+0x20>
			if ((crc & 0x0001) != 0) {
 80014fe:	07c2      	lsls	r2, r0, #31
 8001500:	d5f9      	bpl.n	80014f6 <mb_crc+0xa>
				crc >>= 1;
 8001502:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <mb_crc+0x34>)
 8001506:	4050      	eors	r0, r2
 8001508:	b280      	uxth	r0, r0
 800150a:	e7f5      	b.n	80014f8 <mb_crc+0xc>
	for (int pos = 0; pos < len; pos++)
 800150c:	3401      	adds	r4, #1
 800150e:	428c      	cmp	r4, r1
 8001510:	da03      	bge.n	800151a <mb_crc+0x2e>
		crc ^= (uint16_t)buf[pos];
 8001512:	5d2b      	ldrb	r3, [r5, r4]
 8001514:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {
 8001516:	2308      	movs	r3, #8
 8001518:	e7ef      	b.n	80014fa <mb_crc+0xe>
		}
	}

	return crc;
}
 800151a:	bd30      	pop	{r4, r5, pc}
 800151c:	0000ffff 	.word	0x0000ffff
 8001520:	ffffa001 	.word	0xffffa001

08001524 <modbusSet>:

//==============================================================================

void modbusSet(void){

	if(mbUnlock){
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <modbusSet+0x4c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d014      	beq.n	8001556 <modbusSet+0x32>
		AccessCode = 1;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <modbusSet+0x50>)
 800152e:	2201      	movs	r2, #1
 8001530:	801a      	strh	r2, [r3, #0]
	else{
		AccessCode = 0;
	}


	if(mbServiceMode){
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <modbusSet+0x54>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d011      	beq.n	800155e <modbusSet+0x3a>
		dev.Status |= (1 << STATUS_BIT_MAIN_MODE);
 800153a:	4910      	ldr	r1, [pc, #64]	; (800157c <modbusSet+0x58>)
 800153c:	2288      	movs	r2, #136	; 0x88
 800153e:	0052      	lsls	r2, r2, #1
 8001540:	5a8b      	ldrh	r3, [r1, r2]
 8001542:	2004      	movs	r0, #4
 8001544:	4303      	orrs	r3, r0
 8001546:	528b      	strh	r3, [r1, r2]
	}else{
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
	}

	mbDevStatus = dev.Status;
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <modbusSet+0x58>)
 800154a:	2388      	movs	r3, #136	; 0x88
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	5ad2      	ldrh	r2, [r2, r3]
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <modbusSet+0x5c>)
 8001552:	801a      	strh	r2, [r3, #0]

}
 8001554:	4770      	bx	lr
		AccessCode = 0;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <modbusSet+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
 800155c:	e7e9      	b.n	8001532 <modbusSet+0xe>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 800155e:	4907      	ldr	r1, [pc, #28]	; (800157c <modbusSet+0x58>)
 8001560:	2288      	movs	r2, #136	; 0x88
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	5a8b      	ldrh	r3, [r1, r2]
 8001566:	2004      	movs	r0, #4
 8001568:	4383      	bics	r3, r0
 800156a:	528b      	strh	r3, [r1, r2]
 800156c:	e7ec      	b.n	8001548 <modbusSet+0x24>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	200001f2 	.word	0x200001f2
 8001574:	200001ee 	.word	0x200001ee
 8001578:	200001e8 	.word	0x200001e8
 800157c:	20000414 	.word	0x20000414
 8001580:	200001ea 	.word	0x200001ea

08001584 <__CMD_PUT_WORD>:

//==============================================================================

void __CMD_PUT_WORD(uint16_t DATA)
{
	Value[0] = HIBYTE(DATA);
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__CMD_PUT_WORD+0x34>)
 8001586:	680b      	ldr	r3, [r1, #0]
 8001588:	0a02      	lsrs	r2, r0, #8
 800158a:	701a      	strb	r2, [r3, #0]
	Value[1] = LOBYTE(DATA);
 800158c:	7058      	strb	r0, [r3, #1]

	(*CountByte) += 2;		Count --;	Value +=2;	AnswerLen += 2;
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <__CMD_PUT_WORD+0x38>)
 8001590:	6810      	ldr	r0, [r2, #0]
 8001592:	7802      	ldrb	r2, [r0, #0]
 8001594:	3202      	adds	r2, #2
 8001596:	7002      	strb	r2, [r0, #0]
 8001598:	4809      	ldr	r0, [pc, #36]	; (80015c0 <__CMD_PUT_WORD+0x3c>)
 800159a:	8802      	ldrh	r2, [r0, #0]
 800159c:	3a01      	subs	r2, #1
 800159e:	8002      	strh	r2, [r0, #0]
 80015a0:	3302      	adds	r3, #2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <__CMD_PUT_WORD+0x40>)
 80015a6:	7813      	ldrb	r3, [r2, #0]
 80015a8:	3302      	adds	r3, #2
 80015aa:	7013      	strb	r3, [r2, #0]
	Address ++;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <__CMD_PUT_WORD+0x44>)
 80015ae:	8813      	ldrh	r3, [r2, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	8013      	strh	r3, [r2, #0]
}
 80015b4:	4770      	bx	lr
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	200000bc 	.word	0x200000bc
 80015bc:	200000b4 	.word	0x200000b4
 80015c0:	200000b2 	.word	0x200000b2
 80015c4:	200000b0 	.word	0x200000b0
 80015c8:	200000ae 	.word	0x200000ae

080015cc <CmdFunc3>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Чтение группы регистров HOLD

uint32_t CmdFunc3(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80015cc:	b510      	push	{r4, lr}
 80015ce:	0014      	movs	r4, r2
	//	tmp = 0;
	//	wModeCalib = st_dgs_state.ModeCalib;

	out[0] = mas[0];	// Адрес устройства
 80015d0:	7803      	ldrb	r3, [r0, #0]
 80015d2:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 80015d4:	7843      	ldrb	r3, [r0, #1]
 80015d6:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);	// Адрес начального регистра
 80015d8:	4b29      	ldr	r3, [pc, #164]	; (8001680 <CmdFunc3+0xb4>)
 80015da:	7882      	ldrb	r2, [r0, #2]
 80015dc:	705a      	strb	r2, [r3, #1]
 80015de:	78c2      	ldrb	r2, [r0, #3]
 80015e0:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);	// Количество регистров
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <CmdFunc3+0xb8>)
 80015e4:	7902      	ldrb	r2, [r0, #4]
 80015e6:	705a      	strb	r2, [r3, #1]
 80015e8:	7942      	ldrb	r2, [r0, #5]
 80015ea:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);	// Выходной поток
 80015ec:	1ce1      	adds	r1, r4, #3
 80015ee:	4a26      	ldr	r2, [pc, #152]	; (8001688 <CmdFunc3+0xbc>)
 80015f0:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);		// Счётчик
 80015f2:	1ca1      	adds	r1, r4, #2
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <CmdFunc3+0xc0>)
 80015f6:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;				// Длина ответа (в байтах)
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <CmdFunc3+0xc4>)
 80015fa:	2103      	movs	r1, #3
 80015fc:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 80015fe:	2200      	movs	r2, #0
 8001600:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	1e53      	subs	r3, r2, #1
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b7c      	cmp	r3, #124	; 0x7c
 800160a:	d814      	bhi.n	8001636 <CmdFunc3+0x6a>
	}
	//------------------------------------------------------------------------------------------------------------------
	do
	{
#if DEF_REG_ADR_BASE_x03 > 0
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 800160c:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <CmdFunc3+0xb4>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0149      	lsls	r1, r1, #5
 8001614:	428b      	cmp	r3, r1
 8001616:	d323      	bcc.n	8001660 <CmdFunc3+0x94>
#endif
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8001618:	491e      	ldr	r1, [pc, #120]	; (8001694 <CmdFunc3+0xc8>)
 800161a:	428b      	cmp	r3, r1
 800161c:	d820      	bhi.n	8001660 <CmdFunc3+0x94>
		if( Count > DEF_REG_CNT_x03 ) break;
 800161e:	2a70      	cmp	r2, #112	; 0x70
 8001620:	d81e      	bhi.n	8001660 <CmdFunc3+0x94>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8001622:	189a      	adds	r2, r3, r2
 8001624:	491c      	ldr	r1, [pc, #112]	; (8001698 <CmdFunc3+0xcc>)
 8001626:	428a      	cmp	r2, r1
 8001628:	dc1a      	bgt.n	8001660 <CmdFunc3+0x94>
#if DEF_REG_ADR_BASE_x03 > 0
		Address -= DEF_REG_ADR_BASE_x03;
 800162a:	4a1c      	ldr	r2, [pc, #112]	; (800169c <CmdFunc3+0xd0>)
 800162c:	4694      	mov	ip, r2
 800162e:	4463      	add	r3, ip
 8001630:	4a13      	ldr	r2, [pc, #76]	; (8001680 <CmdFunc3+0xb4>)
 8001632:	8013      	strh	r3, [r2, #0]
		//#define MB_READ_DBG

#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 3 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		while( Count )
 8001634:	e010      	b.n	8001658 <CmdFunc3+0x8c>
		out[1] |= 0x80;
 8001636:	7862      	ldrb	r2, [r4, #1]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	425b      	negs	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8001640:	2302      	movs	r3, #2
 8001642:	70a3      	strb	r3, [r4, #2]
		return(3);
 8001644:	2003      	movs	r0, #3
 8001646:	e011      	b.n	800166c <CmdFunc3+0xa0>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x03[ Address ].pVar);
#endif
			CMD_PUT_WORD( *reg_x03[ Address ].pVar );
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <CmdFunc3+0xb4>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <CmdFunc3+0xd4>)
 8001650:	589b      	ldr	r3, [r3, r2]
 8001652:	8818      	ldrh	r0, [r3, #0]
 8001654:	f7ff ff96 	bl	8001584 <__CMD_PUT_WORD>
		while( Count )
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <CmdFunc3+0xb8>)
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <CmdFunc3+0x7c>
		}

	} while(0);
	//------------------------------------------------------------------------------------------------------------------
	if( Count )
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <CmdFunc3+0xb8>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <CmdFunc3+0xa2>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return( AnswerLen );
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <CmdFunc3+0xc4>)
 800166a:	7818      	ldrb	r0, [r3, #0]
}
 800166c:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 800166e:	7862      	ldrb	r2, [r4, #1]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	425b      	negs	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8001678:	2302      	movs	r3, #2
 800167a:	70a3      	strb	r3, [r4, #2]
		return(3);
 800167c:	2003      	movs	r0, #3
 800167e:	e7f5      	b.n	800166c <CmdFunc3+0xa0>
 8001680:	200000ae 	.word	0x200000ae
 8001684:	200000b2 	.word	0x200000b2
 8001688:	200000bc 	.word	0x200000bc
 800168c:	200000b4 	.word	0x200000b4
 8001690:	200000b0 	.word	0x200000b0
 8001694:	0000106f 	.word	0x0000106f
 8001698:	00001070 	.word	0x00001070
 800169c:	fffff000 	.word	0xfffff000
 80016a0:	08003620 	.word	0x08003620

080016a4 <CmdFunc4>:

//======================================================================================================================================
// Чтение группы регистров INPUT

uint32_t CmdFunc4(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80016a4:	b510      	push	{r4, lr}
 80016a6:	0014      	movs	r4, r2

	//	tmp = 0;
	out[0] = mas[0];	// Адрес устройства
 80016a8:	7803      	ldrb	r3, [r0, #0]
 80016aa:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 80016ac:	7843      	ldrb	r3, [r0, #1]
 80016ae:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);		// Адрес начального регистра
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <CmdFunc4+0xa0>)
 80016b2:	7882      	ldrb	r2, [r0, #2]
 80016b4:	705a      	strb	r2, [r3, #1]
 80016b6:	78c2      	ldrb	r2, [r0, #3]
 80016b8:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);		// Количество регистров
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <CmdFunc4+0xa4>)
 80016bc:	7902      	ldrb	r2, [r0, #4]
 80016be:	705a      	strb	r2, [r3, #1]
 80016c0:	7942      	ldrb	r2, [r0, #5]
 80016c2:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);		// Выходной поток
 80016c4:	1ce1      	adds	r1, r4, #3
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <CmdFunc4+0xa8>)
 80016c8:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);			// Счётчик
 80016ca:	1ca1      	adds	r1, r4, #2
 80016cc:	4a20      	ldr	r2, [pc, #128]	; (8001750 <CmdFunc4+0xac>)
 80016ce:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;					// Длина ответа (в байтах)
 80016d0:	4a20      	ldr	r2, [pc, #128]	; (8001754 <CmdFunc4+0xb0>)
 80016d2:	2103      	movs	r1, #3
 80016d4:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 80016d6:	2200      	movs	r2, #0
 80016d8:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 80016da:	881a      	ldrh	r2, [r3, #0]
 80016dc:	1e53      	subs	r3, r2, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2b7c      	cmp	r3, #124	; 0x7c
 80016e2:	d815      	bhi.n	8001710 <CmdFunc4+0x6c>
	{
		/*if( Count > DEF_REG_CNT_x04 ) break;
		if( (Address + Count) > DEF_REG_CNT_x04 ) break;*/

		if( Address < DEF_REG_ADR_BASE_x04 ) break;
		if( Address >= (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <CmdFunc4+0xa0>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	2b31      	cmp	r3, #49	; 0x31
 80016ea:	d81a      	bhi.n	8001722 <CmdFunc4+0x7e>
		if( Count > DEF_REG_CNT_x04 ) break;
 80016ec:	2a32      	cmp	r2, #50	; 0x32
 80016ee:	d818      	bhi.n	8001722 <CmdFunc4+0x7e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 80016f0:	189a      	adds	r2, r3, r2
 80016f2:	2a32      	cmp	r2, #50	; 0x32
 80016f4:	dc15      	bgt.n	8001722 <CmdFunc4+0x7e>
#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 4 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		Address -= DEF_REG_ADR_BASE_x04;

		while( Count )
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <CmdFunc4+0xa4>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d011      	beq.n	8001722 <CmdFunc4+0x7e>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x04[ Address ]);
#endif
			CMD_PUT_WORD( *reg_x04[ Address ] );
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <CmdFunc4+0xa0>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <CmdFunc4+0xb4>)
 8001706:	589b      	ldr	r3, [r3, r2]
 8001708:	8818      	ldrh	r0, [r3, #0]
 800170a:	f7ff ff3b 	bl	8001584 <__CMD_PUT_WORD>
 800170e:	e7f2      	b.n	80016f6 <CmdFunc4+0x52>
		out[1] |= 0x80;
 8001710:	7862      	ldrb	r2, [r4, #1]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	425b      	negs	r3, r3
 8001716:	4313      	orrs	r3, r2
 8001718:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 800171a:	2302      	movs	r3, #2
 800171c:	70a3      	strb	r3, [r4, #2]
		return(3);
 800171e:	2003      	movs	r0, #3
 8001720:	e005      	b.n	800172e <CmdFunc4+0x8a>
		}
	} while(0);
	//-----------------------------------------------------------------------------------------------------------------
	if(Count)
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <CmdFunc4+0xa4>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <CmdFunc4+0x8c>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return(AnswerLen);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <CmdFunc4+0xb0>)
 800172c:	7818      	ldrb	r0, [r3, #0]
}
 800172e:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 8001730:	7862      	ldrb	r2, [r4, #1]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	425b      	negs	r3, r3
 8001736:	4313      	orrs	r3, r2
 8001738:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 800173a:	2302      	movs	r3, #2
 800173c:	70a3      	strb	r3, [r4, #2]
		return(3);
 800173e:	2003      	movs	r0, #3
 8001740:	e7f5      	b.n	800172e <CmdFunc4+0x8a>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	200000ae 	.word	0x200000ae
 8001748:	200000b2 	.word	0x200000b2
 800174c:	200000bc 	.word	0x200000bc
 8001750:	200000b4 	.word	0x200000b4
 8001754:	200000b0 	.word	0x200000b0
 8001758:	080039a0 	.word	0x080039a0

0800175c <__CMD_SAVE_WORD>:
void __CMD_SAVE_WORD(TVAR *var)
{
#define DATA	*(var->pVar)
#define SAVE	var->bSave

	HIBYTE(DATA)	= Value[0];
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__CMD_SAVE_WORD+0x34>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	6801      	ldr	r1, [r0, #0]
 8001764:	704a      	strb	r2, [r1, #1]
	LOBYTE(DATA)	= Value[1];
 8001766:	785a      	ldrb	r2, [r3, #1]
 8001768:	6801      	ldr	r1, [r0, #0]
 800176a:	700a      	strb	r2, [r1, #0]
	if(SAVE) Save	= SAVE;
 800176c:	7902      	ldrb	r2, [r0, #4]
 800176e:	2a00      	cmp	r2, #0
 8001770:	d001      	beq.n	8001776 <__CMD_SAVE_WORD+0x1a>
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__CMD_SAVE_WORD+0x38>)
 8001774:	700a      	strb	r2, [r1, #0]
	Address ++;
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__CMD_SAVE_WORD+0x3c>)
 8001778:	880a      	ldrh	r2, [r1, #0]
 800177a:	3201      	adds	r2, #1
 800177c:	800a      	strh	r2, [r1, #0]
	Count --;
 800177e:	4907      	ldr	r1, [pc, #28]	; (800179c <__CMD_SAVE_WORD+0x40>)
 8001780:	880a      	ldrh	r2, [r1, #0]
 8001782:	3a01      	subs	r2, #1
 8001784:	800a      	strh	r2, [r1, #0]
	Value += 2;
 8001786:	3302      	adds	r3, #2
 8001788:	4a01      	ldr	r2, [pc, #4]	; (8001790 <__CMD_SAVE_WORD+0x34>)
 800178a:	6013      	str	r3, [r2, #0]

#undef DATA
#undef SAVE
}
 800178c:	4770      	bx	lr
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	200000bc 	.word	0x200000bc
 8001794:	200000b8 	.word	0x200000b8
 8001798:	200000ae 	.word	0x200000ae
 800179c:	200000b2 	.word	0x200000b2

080017a0 <check_block>:
//======================================================================================================================================


// Защита от случайной порчи настроек

BOOL check_block(void){
 80017a0:	b500      	push	{lr}
 80017a2:	b083      	sub	sp, #12

	uint16_t tmp;

	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <check_block+0xb0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <check_block+0x1e>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <check_block+0xb4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10a      	bne.n	80017ca <check_block+0x2a>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <check_block+0xb8>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <check_block+0xbc>)
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d005      	beq.n	80017ca <check_block+0x2a>
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <check_block+0xb8>)
 80017c0:	881a      	ldrh	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d13e      	bne.n	8001848 <check_block+0xa8>
		return(FALSE);
	}

	// *}

	HIBYTE(tmp)	= Value[0];
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <check_block+0xc0>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	7811      	ldrb	r1, [r2, #0]
 80017d0:	466b      	mov	r3, sp
 80017d2:	71d9      	strb	r1, [r3, #7]
	LOBYTE(tmp)	= Value[1];
 80017d4:	7852      	ldrb	r2, [r2, #1]
 80017d6:	719a      	strb	r2, [r3, #6]

	if(Address == 0x1001){
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <check_block+0xb8>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <check_block+0xbc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d011      	beq.n	8001806 <check_block+0x66>
			return(FALSE);
		}

	}

	if(Address == 0x1000){
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0152      	lsls	r2, r2, #5
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d022      	beq.n	8001830 <check_block+0x90>
			serviceTimerStop();
		}

	}

	if( mbServiceMode || mbUnlock)
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <check_block+0xb0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <check_block+0x5a>
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <check_block+0xb4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <check_block+0xac>
	{ // Преобразователь в сервисном режиме, продлеваем время
		serviceTimerStart( SERVICE_TIME_MODBUS );
 80017fa:	20f1      	movs	r0, #241	; 0xf1
 80017fc:	f000 fcf4 	bl	80021e8 <serviceTimerStart>
	}


	return(TRUE);
 8001800:	2001      	movs	r0, #1
}
 8001802:	b003      	add	sp, #12
 8001804:	bd00      	pop	{pc}
		if((tmp == 0xFACD)){
 8001806:	466a      	mov	r2, sp
 8001808:	3206      	adds	r2, #6
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	4915      	ldr	r1, [pc, #84]	; (8001864 <check_block+0xc4>)
 800180e:	428a      	cmp	r2, r1
 8001810:	d005      	beq.n	800181e <check_block+0x7e>
		}else if(tmp == 0){
 8001812:	2a00      	cmp	r2, #0
 8001814:	d107      	bne.n	8001826 <check_block+0x86>
			mbUnlock = FALSE;
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <check_block+0xb4>)
 8001818:	2100      	movs	r1, #0
 800181a:	7011      	strb	r1, [r2, #0]
 800181c:	e7e1      	b.n	80017e2 <check_block+0x42>
			mbUnlock = TRUE;
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <check_block+0xb4>)
 8001820:	2101      	movs	r1, #1
 8001822:	7011      	strb	r1, [r2, #0]
 8001824:	e7dd      	b.n	80017e2 <check_block+0x42>
		}else if(!mbUnlock){
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <check_block+0xb4>)
 8001828:	7810      	ldrb	r0, [r2, #0]
 800182a:	2800      	cmp	r0, #0
 800182c:	d1d9      	bne.n	80017e2 <check_block+0x42>
 800182e:	e7e8      	b.n	8001802 <check_block+0x62>
		if( TESTBIT( tmp, STATUS_BIT_MAIN_MODE))
 8001830:	466b      	mov	r3, sp
 8001832:	3306      	adds	r3, #6
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	075b      	lsls	r3, r3, #29
 8001838:	d503      	bpl.n	8001842 <check_block+0xa2>
			mbServiceMode = TRUE;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <check_block+0xb0>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e7d3      	b.n	80017ea <check_block+0x4a>
			serviceTimerStop();
 8001842:	f000 fcd7 	bl	80021f4 <serviceTimerStop>
 8001846:	e7d0      	b.n	80017ea <check_block+0x4a>
		return(FALSE);
 8001848:	2000      	movs	r0, #0
 800184a:	e7da      	b.n	8001802 <check_block+0x62>
	return(TRUE);
 800184c:	2001      	movs	r0, #1
 800184e:	e7d8      	b.n	8001802 <check_block+0x62>
 8001850:	200001e8 	.word	0x200001e8
 8001854:	200001f2 	.word	0x200001f2
 8001858:	200000ae 	.word	0x200000ae
 800185c:	00001001 	.word	0x00001001
 8001860:	200000bc 	.word	0x200000bc
 8001864:	0000facd 	.word	0x0000facd

08001868 <modbusCMD>:

//==============================================================================

void modbusCMD(void){
 8001868:	b500      	push	{lr}
 800186a:	b083      	sub	sp, #12

	uint16_t cmd;

	if(Address != 0x1001)
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <modbusCMD+0x84>)
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <modbusCMD+0x88>)
 8001872:	429a      	cmp	r2, r3
 8001874:	d119      	bne.n	80018aa <modbusCMD+0x42>
		return;

	HIBYTE(cmd)	= Value[0];
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <modbusCMD+0x8c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	7811      	ldrb	r1, [r2, #0]
 800187c:	466b      	mov	r3, sp
 800187e:	71d9      	strb	r1, [r3, #7]
	LOBYTE(cmd)	= Value[1];
 8001880:	7852      	ldrb	r2, [r2, #1]
 8001882:	719a      	strb	r2, [r3, #6]
	HIBYTE(cmd)	= Value[0];
 8001884:	3306      	adds	r3, #6

	switch(cmd){
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <modbusCMD+0x90>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01e      	beq.n	80018cc <modbusCMD+0x64>
 800188e:	d814      	bhi.n	80018ba <modbusCMD+0x52>
 8001890:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <modbusCMD+0x94>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <modbusCMD+0x7a>
 8001896:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <modbusCMD+0x98>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d108      	bne.n	80018ae <modbusCMD+0x46>

	case DEF_CODE_CALIB_GAS_ZERO:
		d_printf("\n\rCalib Zero");
 800189c:	4819      	ldr	r0, [pc, #100]	; (8001904 <modbusCMD+0x9c>)
 800189e:	f000 fbd5 	bl	800204c <d_printf>
		CalibGasZero();
 80018a2:	f7ff fc1d 	bl	80010e0 <CalibGasZero>
		eeprom_config_write();
 80018a6:	f7ff fd2d 	bl	8001304 <eeprom_config_write>
		break;
	default:
		break;
	}

}
 80018aa:	b003      	add	sp, #12
 80018ac:	bd00      	pop	{pc}
	switch(cmd){
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1fb      	bne.n	80018aa <modbusCMD+0x42>
		f_TimeCalibFid = FALSE;
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <modbusCMD+0xa0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
		break;
 80018b8:	e7f7      	b.n	80018aa <modbusCMD+0x42>
	switch(cmd){
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <modbusCMD+0xa4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <modbusCMD+0x74>
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <modbusCMD+0xa8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d1f1      	bne.n	80018aa <modbusCMD+0x42>
		factory_config_read();
 80018c6:	f7ff fd3f 	bl	8001348 <factory_config_read>
		break;
 80018ca:	e7ee      	b.n	80018aa <modbusCMD+0x42>
		d_printf("\n\rCalib Conc");
 80018cc:	4811      	ldr	r0, [pc, #68]	; (8001914 <modbusCMD+0xac>)
 80018ce:	f000 fbbd 	bl	800204c <d_printf>
		CalibGasConc();
 80018d2:	f7ff fc11 	bl	80010f8 <CalibGasConc>
		eeprom_config_write();
 80018d6:	f7ff fd15 	bl	8001304 <eeprom_config_write>
		break;
 80018da:	e7e6      	b.n	80018aa <modbusCMD+0x42>
		factory_config_write();
 80018dc:	f7ff fd2a 	bl	8001334 <factory_config_write>
		break;
 80018e0:	e7e3      	b.n	80018aa <modbusCMD+0x42>
		f_TimeCalibFid = TRUE;
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <modbusCMD+0xa0>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
		break;
 80018e8:	e7df      	b.n	80018aa <modbusCMD+0x42>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	200000ae 	.word	0x200000ae
 80018f0:	00001001 	.word	0x00001001
 80018f4:	200000bc 	.word	0x200000bc
 80018f8:	000064c4 	.word	0x000064c4
 80018fc:	000014ae 	.word	0x000014ae
 8001900:	0000185d 	.word	0x0000185d
 8001904:	08003538 	.word	0x08003538
 8001908:	20000025 	.word	0x20000025
 800190c:	0000abce 	.word	0x0000abce
 8001910:	0000ce4b 	.word	0x0000ce4b
 8001914:	08003548 	.word	0x08003548

08001918 <CmdFunc6>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Запись одного регистра
uint32_t CmdFunc6(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	0004      	movs	r4, r0
 800191c:	0015      	movs	r5, r2
	Address 	= TO_M_WORD(mas+2);			// Адрес сохраняемого регистра
 800191e:	7883      	ldrb	r3, [r0, #2]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	78c2      	ldrb	r2, [r0, #3]
 8001924:	189b      	adds	r3, r3, r2
 8001926:	4a30      	ldr	r2, [pc, #192]	; (80019e8 <CmdFunc6+0xd0>)
 8001928:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[4]);			// Значение регистра
 800192a:	1d02      	adds	r2, r0, #4
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <CmdFunc6+0xd4>)
 800192e:	601a      	str	r2, [r3, #0]
	Count   	= 1;						// Количество регистров
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <CmdFunc6+0xd8>)
 8001932:	2201      	movs	r2, #1
 8001934:	801a      	strh	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8001936:	3205      	adds	r2, #5
 8001938:	0001      	movs	r1, r0
 800193a:	0028      	movs	r0, r5
 800193c:	f001 f942 	bl	8002bc4 <memcpy>
	Save = FALSE;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <CmdFunc6+0xdc>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
	{
		__NOP();
	} else
	 */

	if(!check_block()){
 8001946:	f7ff ff2b 	bl	80017a0 <check_block>
 800194a:	2800      	cmp	r0, #0
 800194c:	d108      	bne.n	8001960 <CmdFunc6+0x48>

		out[1] |= 0x80;
 800194e:	786a      	ldrb	r2, [r5, #1]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	425b      	negs	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8001958:	2304      	movs	r3, #4
 800195a:	70ab      	strb	r3, [r5, #2]
		return(3);
 800195c:	3003      	adds	r0, #3
		stMain.bUpDate = TRUE;
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 800195e:	bd70      	pop	{r4, r5, r6, pc}
	modbusCMD();
 8001960:	f7ff ff82 	bl	8001868 <modbusCMD>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <CmdFunc6+0xd0>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	429a      	cmp	r2, r3
 800196e:	d30a      	bcc.n	8001986 <CmdFunc6+0x6e>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <CmdFunc6+0xe0>)
 8001972:	429a      	cmp	r2, r3
 8001974:	d807      	bhi.n	8001986 <CmdFunc6+0x6e>
		if( Count > DEF_REG_CNT_x03 ) break;
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <CmdFunc6+0xd8>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	2b70      	cmp	r3, #112	; 0x70
 800197c:	d803      	bhi.n	8001986 <CmdFunc6+0x6e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 800197e:	18d3      	adds	r3, r2, r3
 8001980:	491e      	ldr	r1, [pc, #120]	; (80019fc <CmdFunc6+0xe4>)
 8001982:	428b      	cmp	r3, r1
 8001984:	dd0c      	ble.n	80019a0 <CmdFunc6+0x88>
	if( Count )
 8001986:	4b1a      	ldr	r3, [pc, #104]	; (80019f0 <CmdFunc6+0xd8>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d020      	beq.n	80019d0 <CmdFunc6+0xb8>
		out[1] |= 0x80;
 800198e:	786a      	ldrb	r2, [r5, #1]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	425b      	negs	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8001998:	2302      	movs	r3, #2
 800199a:	70ab      	strb	r3, [r5, #2]
		return(3);
 800199c:	2003      	movs	r0, #3
 800199e:	e7de      	b.n	800195e <CmdFunc6+0x46>
		Address -= DEF_REG_ADR_BASE_x03;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <CmdFunc6+0xe8>)
 80019a2:	469c      	mov	ip, r3
 80019a4:	4462      	add	r2, ip
 80019a6:	b292      	uxth	r2, r2
 80019a8:	4e0f      	ldr	r6, [pc, #60]	; (80019e8 <CmdFunc6+0xd0>)
 80019aa:	8032      	strh	r2, [r6, #0]
		d_printf("\n\r%02x CMD Modbus 6 : write adr %03x : data ", mas[0], Address);
 80019ac:	7821      	ldrb	r1, [r4, #0]
 80019ae:	4815      	ldr	r0, [pc, #84]	; (8001a04 <CmdFunc6+0xec>)
 80019b0:	f000 fb4c 	bl	800204c <d_printf>
		d_printf(" %02x%02x", Value[0], Value[1]);
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <CmdFunc6+0xd4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	7819      	ldrb	r1, [r3, #0]
 80019ba:	785a      	ldrb	r2, [r3, #1]
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <CmdFunc6+0xf0>)
 80019be:	f000 fb45 	bl	800204c <d_printf>
		CMD_SAVE_WORD( &reg_x03[ Address ] );
 80019c2:	8830      	ldrh	r0, [r6, #0]
 80019c4:	00c0      	lsls	r0, r0, #3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <CmdFunc6+0xf4>)
 80019c8:	18c0      	adds	r0, r0, r3
 80019ca:	f7ff fec7 	bl	800175c <__CMD_SAVE_WORD>
 80019ce:	e7da      	b.n	8001986 <CmdFunc6+0x6e>
	modbusSet();
 80019d0:	f7ff fda8 	bl	8001524 <modbusSet>
	if(Save)
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <CmdFunc6+0xdc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <CmdFunc6+0xc8>
	return(6);
 80019dc:	2006      	movs	r0, #6
 80019de:	e7be      	b.n	800195e <CmdFunc6+0x46>
		eeprom_config_write();
 80019e0:	f7ff fc90 	bl	8001304 <eeprom_config_write>
	return(6);
 80019e4:	2006      	movs	r0, #6
 80019e6:	e7ba      	b.n	800195e <CmdFunc6+0x46>
 80019e8:	200000ae 	.word	0x200000ae
 80019ec:	200000bc 	.word	0x200000bc
 80019f0:	200000b2 	.word	0x200000b2
 80019f4:	200000b8 	.word	0x200000b8
 80019f8:	0000106f 	.word	0x0000106f
 80019fc:	00001070 	.word	0x00001070
 8001a00:	fffff000 	.word	0xfffff000
 8001a04:	08003558 	.word	0x08003558
 8001a08:	08003588 	.word	0x08003588
 8001a0c:	08003620 	.word	0x08003620

08001a10 <CmdFunc8>:
//======================================================================================================================================
// Эхо
uint32_t CmdFunc8(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8001a10:	b510      	push	{r4, lr}
 8001a12:	0001      	movs	r1, r0
 8001a14:	0010      	movs	r0, r2
	memcpy((char*)out, (char*)mas, 6);
 8001a16:	2206      	movs	r2, #6
 8001a18:	f001 f8d4 	bl	8002bc4 <memcpy>
	return(6);
}
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	bd10      	pop	{r4, pc}

08001a20 <CmdFunc16>:
//======================================================================================================================================
// Запись группы регистров
uint32_t CmdFunc16(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8001a20:	b530      	push	{r4, r5, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	0004      	movs	r4, r0
 8001a26:	0015      	movs	r5, r2
	wModeCalib = 0;

	Address 	= TO_M_WORD(mas+2);			// Адрес первого сохраняемого регистра
 8001a28:	7883      	ldrb	r3, [r0, #2]
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	78c2      	ldrb	r2, [r0, #3]
 8001a2e:	189b      	adds	r3, r3, r2
 8001a30:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <CmdFunc16+0x108>)
 8001a32:	8013      	strh	r3, [r2, #0]
	Count	 	= TO_M_WORD(mas+4);			// Количество регистров
 8001a34:	7903      	ldrb	r3, [r0, #4]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	7942      	ldrb	r2, [r0, #5]
 8001a3a:	189b      	adds	r3, r3, r2
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <CmdFunc16+0x10c>)
 8001a3e:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[7]);			// Значение регистра
 8001a40:	1dc2      	adds	r2, r0, #7
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <CmdFunc16+0x110>)
 8001a44:	601a      	str	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8001a46:	2206      	movs	r2, #6
 8001a48:	0001      	movs	r1, r0
 8001a4a:	0028      	movs	r0, r5
 8001a4c:	f001 f8ba 	bl	8002bc4 <memcpy>
	Save = FALSE;
 8001a50:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <CmdFunc16+0x114>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
	//TSGMPoint *sgm = &SGMpoint[0];
	//------------------------------------------------------------------------------------------------------------------
#ifdef BLOCK_MODBUS

	if(!check_block()){
 8001a56:	f7ff fea3 	bl	80017a0 <check_block>
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d109      	bne.n	8001a72 <CmdFunc16+0x52>

		out[1] |= 0x80;
 8001a5e:	786a      	ldrb	r2, [r5, #1]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	425b      	negs	r3, r3
 8001a64:	4313      	orrs	r3, r2
 8001a66:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	70ab      	strb	r3, [r5, #2]
		return(3);
 8001a6c:	3003      	adds	r0, #3
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8001a6e:	b003      	add	sp, #12
 8001a70:	bd30      	pop	{r4, r5, pc}
	modbusCMD();
 8001a72:	f7ff fef9 	bl	8001868 <modbusCMD>
	if( !Count || (Count > 125) )
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <CmdFunc16+0x10c>)
 8001a78:	881a      	ldrh	r2, [r3, #0]
 8001a7a:	1e53      	subs	r3, r2, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b7c      	cmp	r3, #124	; 0x7c
 8001a80:	d81b      	bhi.n	8001aba <CmdFunc16+0x9a>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <CmdFunc16+0x108>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0149      	lsls	r1, r1, #5
 8001a8a:	428b      	cmp	r3, r1
 8001a8c:	d308      	bcc.n	8001aa0 <CmdFunc16+0x80>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8001a8e:	492a      	ldr	r1, [pc, #168]	; (8001b38 <CmdFunc16+0x118>)
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d805      	bhi.n	8001aa0 <CmdFunc16+0x80>
		if( Count > DEF_REG_CNT_x03 ) break;
 8001a94:	2a70      	cmp	r2, #112	; 0x70
 8001a96:	d803      	bhi.n	8001aa0 <CmdFunc16+0x80>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8001a98:	1899      	adds	r1, r3, r2
 8001a9a:	4828      	ldr	r0, [pc, #160]	; (8001b3c <CmdFunc16+0x11c>)
 8001a9c:	4281      	cmp	r1, r0
 8001a9e:	dd15      	ble.n	8001acc <CmdFunc16+0xac>
	if( Count )
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <CmdFunc16+0x10c>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d033      	beq.n	8001b10 <CmdFunc16+0xf0>
		out[1] |= 0x80;
 8001aa8:	786a      	ldrb	r2, [r5, #1]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	425b      	negs	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	70ab      	strb	r3, [r5, #2]
		return(3);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	e7d9      	b.n	8001a6e <CmdFunc16+0x4e>
		out[1] |= 0x80;
 8001aba:	786a      	ldrb	r2, [r5, #1]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	425b      	negs	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	70ab      	strb	r3, [r5, #2]
		return(3);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	e7d0      	b.n	8001a6e <CmdFunc16+0x4e>
		Address -= DEF_REG_ADR_BASE_x03;
 8001acc:	491c      	ldr	r1, [pc, #112]	; (8001b40 <CmdFunc16+0x120>)
 8001ace:	468c      	mov	ip, r1
 8001ad0:	4463      	add	r3, ip
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4914      	ldr	r1, [pc, #80]	; (8001b28 <CmdFunc16+0x108>)
 8001ad6:	800b      	strh	r3, [r1, #0]
		d_printf("\n\r%02x CMD Modbus 16 (%02d) : write adr %03x : data ", mas[0], Count, Address, *Value);
 8001ad8:	7821      	ldrb	r1, [r4, #0]
 8001ada:	4815      	ldr	r0, [pc, #84]	; (8001b30 <CmdFunc16+0x110>)
 8001adc:	6800      	ldr	r0, [r0, #0]
 8001ade:	7800      	ldrb	r0, [r0, #0]
 8001ae0:	9000      	str	r0, [sp, #0]
 8001ae2:	4818      	ldr	r0, [pc, #96]	; (8001b44 <CmdFunc16+0x124>)
 8001ae4:	f000 fab2 	bl	800204c <d_printf>
		while( Count )
 8001ae8:	e00d      	b.n	8001b06 <CmdFunc16+0xe6>
			d_printf(" %02x%02x", Value[0], Value[1]);
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <CmdFunc16+0x110>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	7819      	ldrb	r1, [r3, #0]
 8001af0:	785a      	ldrb	r2, [r3, #1]
 8001af2:	4815      	ldr	r0, [pc, #84]	; (8001b48 <CmdFunc16+0x128>)
 8001af4:	f000 faaa 	bl	800204c <d_printf>
			CMD_SAVE_WORD( &reg_x03[ Address ] );
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <CmdFunc16+0x108>)
 8001afa:	8818      	ldrh	r0, [r3, #0]
 8001afc:	00c0      	lsls	r0, r0, #3
 8001afe:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <CmdFunc16+0x12c>)
 8001b00:	18c0      	adds	r0, r0, r3
 8001b02:	f7ff fe2b 	bl	800175c <__CMD_SAVE_WORD>
		while( Count )
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <CmdFunc16+0x10c>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ed      	bne.n	8001aea <CmdFunc16+0xca>
 8001b0e:	e7c7      	b.n	8001aa0 <CmdFunc16+0x80>
	modbusSet();
 8001b10:	f7ff fd08 	bl	8001524 <modbusSet>
	if(Save)
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <CmdFunc16+0x114>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <CmdFunc16+0x100>
	return(6);
 8001b1c:	2006      	movs	r0, #6
 8001b1e:	e7a6      	b.n	8001a6e <CmdFunc16+0x4e>
		eeprom_config_write();
 8001b20:	f7ff fbf0 	bl	8001304 <eeprom_config_write>
	return(6);
 8001b24:	2006      	movs	r0, #6
 8001b26:	e7a2      	b.n	8001a6e <CmdFunc16+0x4e>
 8001b28:	200000ae 	.word	0x200000ae
 8001b2c:	200000b2 	.word	0x200000b2
 8001b30:	200000bc 	.word	0x200000bc
 8001b34:	200000b8 	.word	0x200000b8
 8001b38:	0000106f 	.word	0x0000106f
 8001b3c:	00001070 	.word	0x00001070
 8001b40:	fffff000 	.word	0xfffff000
 8001b44:	08003594 	.word	0x08003594
 8001b48:	08003588 	.word	0x08003588
 8001b4c:	08003620 	.word	0x08003620

08001b50 <cmdModbusRTU>:
{
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	0014      	movs	r4, r2
	out[0] = mas[0];
 8001b54:	7803      	ldrb	r3, [r0, #0]
 8001b56:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];
 8001b58:	7843      	ldrb	r3, [r0, #1]
 8001b5a:	7053      	strb	r3, [r2, #1]
	switch (mas[1])
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	2a0d      	cmp	r2, #13
 8001b62:	d829      	bhi.n	8001bb8 <cmdModbusRTU+0x68>
 8001b64:	0093      	lsls	r3, r2, #2
 8001b66:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <cmdModbusRTU+0x80>)
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	469f      	mov	pc, r3
		AnswerLen = CmdFunc3(mas, len, out);
 8001b6c:	0022      	movs	r2, r4
 8001b6e:	f7ff fd2d 	bl	80015cc <CmdFunc3>
 8001b72:	0005      	movs	r5, r0
	if(AnswerLen)
 8001b74:	2d00      	cmp	r5, #0
 8001b76:	d009      	beq.n	8001b8c <cmdModbusRTU+0x3c>
		crc = mb_crc(out, AnswerLen);
 8001b78:	0029      	movs	r1, r5
 8001b7a:	0020      	movs	r0, r4
 8001b7c:	f7ff fcb6 	bl	80014ec <mb_crc>
		out[AnswerLen]   = LOBYTE(crc);
 8001b80:	5560      	strb	r0, [r4, r5]
		out[AnswerLen+1] = HIBYTE(crc);
 8001b82:	1c6b      	adds	r3, r5, #1
 8001b84:	0400      	lsls	r0, r0, #16
 8001b86:	0e00      	lsrs	r0, r0, #24
 8001b88:	54e0      	strb	r0, [r4, r3]
		AnswerLen += 2;
 8001b8a:	3502      	adds	r5, #2
}
 8001b8c:	0028      	movs	r0, r5
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
		AnswerLen = CmdFunc4(mas, len, out);
 8001b90:	0022      	movs	r2, r4
 8001b92:	f7ff fd87 	bl	80016a4 <CmdFunc4>
 8001b96:	0005      	movs	r5, r0
		break;
 8001b98:	e7ec      	b.n	8001b74 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc6(mas, len, out);
 8001b9a:	0022      	movs	r2, r4
 8001b9c:	f7ff febc 	bl	8001918 <CmdFunc6>
 8001ba0:	0005      	movs	r5, r0
		break;
 8001ba2:	e7e7      	b.n	8001b74 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc8(mas, len, out);
 8001ba4:	0022      	movs	r2, r4
 8001ba6:	f7ff ff33 	bl	8001a10 <CmdFunc8>
 8001baa:	0005      	movs	r5, r0
		break;
 8001bac:	e7e2      	b.n	8001b74 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc16(mas, len, out);
 8001bae:	0022      	movs	r2, r4
 8001bb0:	f7ff ff36 	bl	8001a20 <CmdFunc16>
 8001bb4:	0005      	movs	r5, r0
		break;
 8001bb6:	e7dd      	b.n	8001b74 <cmdModbusRTU+0x24>
		d_printf("\n\r\n\r ERROR_Illegal_Function");
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <cmdModbusRTU+0x84>)
 8001bba:	f000 fa47 	bl	800204c <d_printf>
		out[1] |= 0x80;
 8001bbe:	7862      	ldrb	r2, [r4, #1]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Function;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	70a3      	strb	r3, [r4, #2]
		AnswerLen = 3;
 8001bcc:	2503      	movs	r5, #3
 8001bce:	e7d3      	b.n	8001b78 <cmdModbusRTU+0x28>
 8001bd0:	080035e8 	.word	0x080035e8
 8001bd4:	080035cc 	.word	0x080035cc

08001bd8 <mb_proc>:
void mb_proc(void){
 8001bd8:	b570      	push	{r4, r5, r6, lr}
	if(!f_mbs_packet_rcv)
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <mb_proc+0x64>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <mb_proc+0x26>
	f_mbs_packet_rcv = FALSE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <mb_proc+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
	uint16_t crc = mb_crc(mbs_pkt_rx,mbs_rx_pkt_len-2);
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <mb_proc+0x68>)
 8001bea:	881e      	ldrh	r6, [r3, #0]
 8001bec:	1eb5      	subs	r5, r6, #2
 8001bee:	4c15      	ldr	r4, [pc, #84]	; (8001c44 <mb_proc+0x6c>)
 8001bf0:	0029      	movs	r1, r5
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f7ff fc7a 	bl	80014ec <mb_crc>
	if((mbs_pkt_rx[0] == 0x55) && \
 8001bf8:	7823      	ldrb	r3, [r4, #0]
 8001bfa:	2b55      	cmp	r3, #85	; 0x55
 8001bfc:	d000      	beq.n	8001c00 <mb_proc+0x28>
}
 8001bfe:	bd70      	pop	{r4, r5, r6, pc}
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8001c00:	5d62      	ldrb	r2, [r4, r5]
 8001c02:	b2c3      	uxtb	r3, r0
	if((mbs_pkt_rx[0] == 0x55) && \
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1fa      	bne.n	8001bfe <mb_proc+0x26>
			(mbs_pkt_rx[mbs_rx_pkt_len-1] == HIBYTE(crc))){
 8001c08:	1e73      	subs	r3, r6, #1
 8001c0a:	5ce3      	ldrb	r3, [r4, r3]
 8001c0c:	0400      	lsls	r0, r0, #16
 8001c0e:	0e00      	lsrs	r0, r0, #24
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8001c10:	4283      	cmp	r3, r0
 8001c12:	d1f4      	bne.n	8001bfe <mb_proc+0x26>
		mbs_tx_len = cmdModbusRTU(mbs_pkt_rx, mbs_rx_pkt_len, mbs_pkt_tx);
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <mb_proc+0x70>)
 8001c16:	0031      	movs	r1, r6
 8001c18:	0020      	movs	r0, r4
 8001c1a:	f7ff ff99 	bl	8001b50 <cmdModbusRTU>
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <mb_proc+0x74>)
 8001c20:	8018      	strh	r0, [r3, #0]
		mbs_tx_cnt = 0;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <mb_proc+0x78>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <mb_proc+0x7c>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	438a      	bics	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	317c      	adds	r1, #124	; 0x7c
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	e7e0      	b.n	8001bfe <mb_proc+0x26>
 8001c3c:	200000c0 	.word	0x200000c0
 8001c40:	200002f8 	.word	0x200002f8
 8001c44:	200001f4 	.word	0x200001f4
 8001c48:	200002fc 	.word	0x200002fc
 8001c4c:	200002fa 	.word	0x200002fa
 8001c50:	200002f6 	.word	0x200002f6
 8001c54:	40004800 	.word	0x40004800

08001c58 <modbus_init>:

BOOL f_mbs_packet_rcv = FALSE;

void modbus_init(void){

	mbs_rx_cnt = 0;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <modbus_init+0x24>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <modbus_init+0x28>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2104      	movs	r1, #4
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	311c      	adds	r1, #28
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	391f      	subs	r1, #31
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

	LL_LPUART_EnableDirectionRx(MBS_LPUART);
	LL_LPUART_EnableIT_RXNE(MBS_LPUART);
	LL_LPUART_Enable(MBS_LPUART);

}
 8001c78:	4770      	bx	lr
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	200002f4 	.word	0x200002f4
 8001c80:	40004800 	.word	0x40004800

08001c84 <Modbus_TO_timer>:

void Modbus_TO_timer(void){

	//memcpy(mbs_pkt_rx, mbs_buff_rx, mbs_rx_cnt);
	mbs_rx_pkt_len = mbs_rx_cnt;
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <Modbus_TO_timer+0x14>)
 8001c86:	8819      	ldrh	r1, [r3, #0]
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <Modbus_TO_timer+0x18>)
 8001c8a:	8011      	strh	r1, [r2, #0]

	mbs_rx_cnt = 0;
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	801a      	strh	r2, [r3, #0]
	f_mbs_packet_rcv = TRUE;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <Modbus_TO_timer+0x1c>)
 8001c92:	3201      	adds	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]

}
 8001c96:	4770      	bx	lr
 8001c98:	200002f4 	.word	0x200002f4
 8001c9c:	200002f8 	.word	0x200002f8
 8001ca0:	200000c0 	.word	0x200000c0

08001ca4 <Modbus_RXNEmpty_Callback>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <Modbus_RXNEmpty_Callback+0x34>)
 8001ca6:	6a59      	ldr	r1, [r3, #36]	; 0x24

void Modbus_RXNEmpty_Callback(void){

	uint8_t tmp = LL_USART_ReceiveData8(MBS_LPUART);

	mbs_pkt_rx[mbs_rx_cnt] = tmp;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <Modbus_RXNEmpty_Callback+0x38>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <Modbus_RXNEmpty_Callback+0x3c>)
 8001cae:	54d1      	strb	r1, [r2, r3]

	if(mbs_rx_cnt < (MBS_RX_BUF_SIZE-1)){
 8001cb0:	2bfe      	cmp	r3, #254	; 0xfe
 8001cb2:	d802      	bhi.n	8001cba <Modbus_RXNEmpty_Callback+0x16>
		mbs_rx_cnt++;
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <Modbus_RXNEmpty_Callback+0x38>)
 8001cb8:	8013      	strh	r3, [r2, #0]
	}

	if(mbs_rx_cnt == 1){
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <Modbus_RXNEmpty_Callback+0x38>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d003      	beq.n	8001cca <Modbus_RXNEmpty_Callback+0x26>
		  LL_TIM_EnableCounter(TIM22);
	}

    TIM22->CNT = 0;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <Modbus_RXNEmpty_Callback+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001cc8:	4770      	bx	lr
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001cca:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <Modbus_RXNEmpty_Callback+0x40>)
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	e7f5      	b.n	8001cc2 <Modbus_RXNEmpty_Callback+0x1e>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40004800 	.word	0x40004800
 8001cdc:	200002f4 	.word	0x200002f4
 8001ce0:	200001f4 	.word	0x200001f4
 8001ce4:	40011400 	.word	0x40011400

08001ce8 <Modbus_TXEmpty_Callback>:

void Modbus_TXEmpty_Callback(void){

	if(mbs_tx_cnt < mbs_tx_len){
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <Modbus_TXEmpty_Callback+0x38>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	4a0d      	ldr	r2, [pc, #52]	; (8001d24 <Modbus_TXEmpty_Callback+0x3c>)
 8001cee:	8812      	ldrh	r2, [r2, #0]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d209      	bcs.n	8001d08 <Modbus_TXEmpty_Callback+0x20>

		LL_USART_TransmitData8(MBS_LPUART,mbs_pkt_tx[mbs_tx_cnt]);
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <Modbus_TXEmpty_Callback+0x40>)
 8001cf6:	5cc8      	ldrb	r0, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <Modbus_TXEmpty_Callback+0x44>)
 8001cfa:	6288      	str	r0, [r1, #40]	; 0x28
		mbs_tx_cnt++;
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4907      	ldr	r1, [pc, #28]	; (8001d20 <Modbus_TXEmpty_Callback+0x38>)
 8001d02:	800b      	strh	r3, [r1, #0]

		if(mbs_tx_cnt == mbs_tx_len){
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d000      	beq.n	8001d0a <Modbus_TXEmpty_Callback+0x22>

		}

	}

}
 8001d08:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <Modbus_TXEmpty_Callback+0x44>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	438a      	bics	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	3940      	subs	r1, #64	; 0x40
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e7f4      	b.n	8001d08 <Modbus_TXEmpty_Callback+0x20>
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	200002f6 	.word	0x200002f6
 8001d24:	200002fa 	.word	0x200002fa
 8001d28:	200002fc 	.word	0x200002fc
 8001d2c:	40004800 	.word	0x40004800

08001d30 <Modbus_LPUART_IRQHandler>:
void Modbus_LPUART_IRQHandler(void){
 8001d30:	b510      	push	{r4, lr}
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE(USART_TypeDef *LPUARTx)
{
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	d505      	bpl.n	8001d46 <Modbus_LPUART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	d501      	bpl.n	8001d46 <Modbus_LPUART_IRQHandler+0x16>
		Modbus_RXNEmpty_Callback();
 8001d42:	f7ff ffaf 	bl	8001ca4 <Modbus_RXNEmpty_Callback>
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TXE(USART_TypeDef *LPUARTx)
{
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	d505      	bpl.n	8001d5a <Modbus_LPUART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	061b      	lsls	r3, r3, #24
 8001d54:	d501      	bpl.n	8001d5a <Modbus_LPUART_IRQHandler+0x2a>
		Modbus_TXEmpty_Callback();
 8001d56:	f7ff ffc7 	bl	8001ce8 <Modbus_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	065b      	lsls	r3, r3, #25
 8001d60:	d50d      	bpl.n	8001d7e <Modbus_LPUART_IRQHandler+0x4e>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	065b      	lsls	r3, r3, #25
 8001d68:	d509      	bpl.n	8001d7e <Modbus_LPUART_IRQHandler+0x4e>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d6c:	2140      	movs	r1, #64	; 0x40
 8001d6e:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	438a      	bics	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	393c      	subs	r1, #60	; 0x3c
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	071b      	lsls	r3, r3, #28
 8001d84:	d502      	bpl.n	8001d8c <Modbus_LPUART_IRQHandler+0x5c>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001d86:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <Modbus_LPUART_IRQHandler+0x60>)
 8001d88:	2208      	movs	r2, #8
 8001d8a:	621a      	str	r2, [r3, #32]
}
 8001d8c:	bd10      	pop	{r4, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	40004800 	.word	0x40004800

08001d94 <TimeOut_Set_I2C>:
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
}

//==============================================================================
static void TimeOut_Set_I2C(uint32_t timeOut)
{
 8001d94:	b082      	sub	sp, #8
	__IO uint32_t  tmp;
	tmp = SysTick->CTRL;
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <TimeOut_Set_I2C+0x14>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	9301      	str	r3, [sp, #4]

	((void)tmp);
 8001d9c:	9b01      	ldr	r3, [sp, #4]

	TimeOutDelay = timeOut+1;
 8001d9e:	3001      	adds	r0, #1
 8001da0:	4b02      	ldr	r3, [pc, #8]	; (8001dac <TimeOut_Set_I2C+0x18>)
 8001da2:	6018      	str	r0, [r3, #0]
}
 8001da4:	b002      	add	sp, #8
 8001da6:	4770      	bx	lr
 8001da8:	e000e010 	.word	0xe000e010
 8001dac:	200000c8 	.word	0x200000c8

08001db0 <TimeOut_Read_I2C>:

static BOOL TimeOut_Read_I2C(void)
{
	if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <TimeOut_Read_I2C+0x28>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	03db      	lsls	r3, r3, #15
 8001db6:	d503      	bpl.n	8001dc0 <TimeOut_Read_I2C+0x10>
	{
		TimeOutDelay--;
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <TimeOut_Read_I2C+0x2c>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
	}

	if(TimeOutDelay > 0){
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <TimeOut_Read_I2C+0x2c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d105      	bne.n	8001dd4 <TimeOut_Read_I2C+0x24>
		return FALSE;
	}

	TimeOutCnt++;
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <TimeOut_Read_I2C+0x30>)
 8001dca:	6813      	ldr	r3, [r2, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	6013      	str	r3, [r2, #0]

	return TRUE;
 8001dd0:	2001      	movs	r0, #1
}
 8001dd2:	4770      	bx	lr
		return FALSE;
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	e7fc      	b.n	8001dd2 <TimeOut_Read_I2C+0x22>
 8001dd8:	e000e010 	.word	0xe000e010
 8001ddc:	200000c8 	.word	0x200000c8
 8001de0:	200000c4 	.word	0x200000c4

08001de4 <I2C_ByteSend>:
{
 8001de4:	b510      	push	{r4, lr}
 8001de6:	0004      	movs	r4, r0
	TimeOut_Set_I2C(I2C_TO);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff ffd3 	bl	8001d94 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_TXIS(ADS_PORT))
 8001dee:	f7ff ffdf 	bl	8001db0 <TimeOut_Read_I2C>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d105      	bne.n	8001e02 <I2C_ByteSend+0x1e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <I2C_ByteSend+0x24>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	079b      	lsls	r3, r3, #30
 8001dfc:	d401      	bmi.n	8001e02 <I2C_ByteSend+0x1e>
		__NOP();
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	e7f5      	b.n	8001dee <I2C_ByteSend+0xa>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8001e02:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <I2C_ByteSend+0x24>)
 8001e04:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	40005400 	.word	0x40005400

08001e0c <ADS_WRITE_REG>:
{
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	000c      	movs	r4, r1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e10:	490f      	ldr	r1, [pc, #60]	; (8001e50 <ADS_WRITE_REG+0x44>)
 8001e12:	684b      	ldr	r3, [r1, #4]
 8001e14:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <ADS_WRITE_REG+0x48>)
 8001e16:	401a      	ands	r2, r3
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <ADS_WRITE_REG+0x4c>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
	I2C_ByteSend(reg);
 8001e1e:	f7ff ffe1 	bl	8001de4 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data>>8));
 8001e22:	0a20      	lsrs	r0, r4, #8
 8001e24:	f7ff ffde 	bl	8001de4 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data));
 8001e28:	b2e0      	uxtb	r0, r4
 8001e2a:	f7ff ffdb 	bl	8001de4 <I2C_ByteSend>
	TimeOut_Set_I2C(I2C_TO);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff ffb0 	bl	8001d94 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001e34:	f7ff ffbc 	bl	8001db0 <TimeOut_Read_I2C>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	d103      	bne.n	8001e44 <ADS_WRITE_REG+0x38>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <ADS_WRITE_REG+0x44>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	069b      	lsls	r3, r3, #26
 8001e42:	d5f7      	bpl.n	8001e34 <ADS_WRITE_REG+0x28>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001e44:	4a02      	ldr	r2, [pc, #8]	; (8001e50 <ADS_WRITE_REG+0x44>)
 8001e46:	69d3      	ldr	r3, [r2, #28]
 8001e48:	2120      	movs	r1, #32
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	61d3      	str	r3, [r2, #28]
}
 8001e4e:	bd10      	pop	{r4, pc}
 8001e50:	40005400 	.word	0x40005400
 8001e54:	fc008000 	.word	0xfc008000
 8001e58:	82032090 	.word	0x82032090

08001e5c <ADS_READ_REG>:
{
 8001e5c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e5e:	4c20      	ldr	r4, [pc, #128]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001e60:	6862      	ldr	r2, [r4, #4]
 8001e62:	4d20      	ldr	r5, [pc, #128]	; (8001ee4 <ADS_READ_REG+0x88>)
 8001e64:	402a      	ands	r2, r5
 8001e66:	4b20      	ldr	r3, [pc, #128]	; (8001ee8 <ADS_READ_REG+0x8c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	6063      	str	r3, [r4, #4]
	I2C_ByteSend(reg);
 8001e6c:	f7ff ffba 	bl	8001de4 <I2C_ByteSend>
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	401d      	ands	r5, r3
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <ADS_READ_REG+0x90>)
 8001e76:	432b      	orrs	r3, r5
 8001e78:	6063      	str	r3, [r4, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff ff8a 	bl	8001d94 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001e80:	f7ff ff96 	bl	8001db0 <TimeOut_Read_I2C>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d103      	bne.n	8001e90 <ADS_READ_REG+0x34>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	075b      	lsls	r3, r3, #29
 8001e8e:	d5f7      	bpl.n	8001e80 <ADS_READ_REG+0x24>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001e92:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001e94:	b2ed      	uxtb	r5, r5
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001e96:	f7ff ff8b 	bl	8001db0 <TimeOut_Read_I2C>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d103      	bne.n	8001ea6 <ADS_READ_REG+0x4a>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	075b      	lsls	r3, r3, #29
 8001ea4:	d5f7      	bpl.n	8001e96 <ADS_READ_REG+0x3a>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001ea8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001eaa:	b2e4      	uxtb	r4, r4
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8001eac:	6859      	ldr	r1, [r3, #4]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	01d2      	lsls	r2, r2, #7
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	605a      	str	r2, [r3, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff ff6c 	bl	8001d94 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001ebc:	f7ff ff78 	bl	8001db0 <TimeOut_Read_I2C>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d103      	bne.n	8001ecc <ADS_READ_REG+0x70>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	d5f7      	bpl.n	8001ebc <ADS_READ_REG+0x60>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <ADS_READ_REG+0x84>)
 8001ece:	69d3      	ldr	r3, [r2, #28]
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	61d3      	str	r3, [r2, #28]
	return ((byte[0]<<8) + byte[1]);
 8001ed6:	0228      	lsls	r0, r5, #8
 8001ed8:	1820      	adds	r0, r4, r0
 8001eda:	b280      	uxth	r0, r0
}
 8001edc:	bd70      	pop	{r4, r5, r6, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	40005400 	.word	0x40005400
 8001ee4:	fc008000 	.word	0xfc008000
 8001ee8:	81012090 	.word	0x81012090
 8001eec:	80022490 	.word	0x80022490

08001ef0 <ADS_Init>:
{
 8001ef0:	b510      	push	{r4, lr}
	config_ads = (gain |
 8001ef2:	2184      	movs	r1, #132	; 0x84
 8001ef4:	31ff      	adds	r1, #255	; 0xff
 8001ef6:	4301      	orrs	r1, r0
 8001ef8:	4b02      	ldr	r3, [pc, #8]	; (8001f04 <ADS_Init+0x14>)
 8001efa:	8019      	strh	r1, [r3, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, config_ads);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff ff85 	bl	8001e0c <ADS_WRITE_REG>
}
 8001f02:	bd10      	pop	{r4, pc}
 8001f04:	200000cc 	.word	0x200000cc

08001f08 <ADS_Read_Diff>:
{
 8001f08:	b510      	push	{r4, lr}
	config_ads &=~ ADS_CONFIG_REG_PGA_MASK;
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <ADS_Read_Diff+0x4c>)
 8001f0c:	8813      	ldrh	r3, [r2, #0]
 8001f0e:	4c12      	ldr	r4, [pc, #72]	; (8001f58 <ADS_Read_Diff+0x50>)
 8001f10:	4023      	ands	r3, r4
	config_ads |= gain;
 8001f12:	430b      	orrs	r3, r1
	config_ads &=~ ADS_CONFIG_REG_MUX_MASK;
 8001f14:	4911      	ldr	r1, [pc, #68]	; (8001f5c <ADS_Read_Diff+0x54>)
 8001f16:	400b      	ands	r3, r1
	config_ads |= data;
 8001f18:	4318      	orrs	r0, r3
 8001f1a:	8010      	strh	r0, [r2, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, (config_ads | ADS_CONFIG_REG_OS_SINGLE));
 8001f1c:	4910      	ldr	r1, [pc, #64]	; (8001f60 <ADS_Read_Diff+0x58>)
 8001f1e:	4301      	orrs	r1, r0
 8001f20:	b289      	uxth	r1, r1
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff ff72 	bl	8001e0c <ADS_WRITE_REG>
	uint16_t time_conversion = 10;
 8001f28:	240a      	movs	r4, #10
	while(!((ADS_READ_REG(ADS_CONFIG_REG) & ADS_CONFIG_REG_OS_MASK) == 0) && time_conversion--);
 8001f2a:	e000      	b.n	8001f2e <ADS_Read_Diff+0x26>
 8001f2c:	0004      	movs	r4, r0
 8001f2e:	2001      	movs	r0, #1
 8001f30:	f7ff ff94 	bl	8001e5c <ADS_READ_REG>
 8001f34:	0403      	lsls	r3, r0, #16
 8001f36:	d506      	bpl.n	8001f46 <ADS_Read_Diff+0x3e>
 8001f38:	1e60      	subs	r0, r4, #1
 8001f3a:	b280      	uxth	r0, r0
 8001f3c:	2c00      	cmp	r4, #0
 8001f3e:	d1f5      	bne.n	8001f2c <ADS_Read_Diff+0x24>
	if(time_conversion == 0)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d102      	bne.n	8001f4a <ADS_Read_Diff+0x42>
}
 8001f44:	bd10      	pop	{r4, pc}
 8001f46:	0020      	movs	r0, r4
 8001f48:	e7fa      	b.n	8001f40 <ADS_Read_Diff+0x38>
	data = ADS_READ_REG(ADS_CONVERSION_REG);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff ff86 	bl	8001e5c <ADS_READ_REG>
	return data;
 8001f50:	e7f8      	b.n	8001f44 <ADS_Read_Diff+0x3c>
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	200000cc 	.word	0x200000cc
 8001f58:	fffff1ff 	.word	0xfffff1ff
 8001f5c:	ffff8fff 	.word	0xffff8fff
 8001f60:	ffff8000 	.word	0xffff8000

08001f64 <ADS_Read_adc>:
{
 8001f64:	b510      	push	{r4, lr}
 8001f66:	0001      	movs	r1, r0
	return ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_0_1, gain);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff ffcd 	bl	8001f08 <ADS_Read_Diff>
}
 8001f6e:	bd10      	pop	{r4, pc}

08001f70 <ADS_Read_volt>:
{
 8001f70:	b510      	push	{r4, lr}
 8001f72:	0004      	movs	r4, r0
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <ADS_Read_volt+0x78>)
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	23e0      	movs	r3, #224	; 0xe0
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d022      	beq.n	8001fcc <ADS_Read_volt+0x5c>
 8001f86:	d80f      	bhi.n	8001fa8 <ADS_Read_volt+0x38>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d020      	beq.n	8001fd2 <ADS_Read_volt+0x62>
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d102      	bne.n	8001f9e <ADS_Read_volt+0x2e>
		fsRange = 2048;
 8001f98:	2080      	movs	r0, #128	; 0x80
 8001f9a:	0100      	lsls	r0, r0, #4
 8001f9c:	e00e      	b.n	8001fbc <ADS_Read_volt+0x4c>
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d11a      	bne.n	8001fd8 <ADS_Read_volt+0x68>
 8001fa2:	20c0      	movs	r0, #192	; 0xc0
 8001fa4:	0140      	lsls	r0, r0, #5
 8001fa6:	e009      	b.n	8001fbc <ADS_Read_volt+0x4c>
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d015      	beq.n	8001fdc <ADS_Read_volt+0x6c>
 8001fb0:	23a0      	movs	r3, #160	; 0xa0
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d114      	bne.n	8001fe2 <ADS_Read_volt+0x72>
		fsRange = 256;
 8001fb8:	2080      	movs	r0, #128	; 0x80
 8001fba:	0040      	lsls	r0, r0, #1
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
 8001fbc:	490b      	ldr	r1, [pc, #44]	; (8001fec <ADS_Read_volt+0x7c>)
 8001fbe:	4348      	muls	r0, r1
 8001fc0:	13c0      	asrs	r0, r0, #15
 8001fc2:	4360      	muls	r0, r4
 8001fc4:	f7fe f93c 	bl	8000240 <__divsi3>
 8001fc8:	b280      	uxth	r0, r0
}
 8001fca:	bd10      	pop	{r4, pc}
		fsRange = 1024;
 8001fcc:	2080      	movs	r0, #128	; 0x80
 8001fce:	00c0      	lsls	r0, r0, #3
 8001fd0:	e7f4      	b.n	8001fbc <ADS_Read_volt+0x4c>
		fsRange = 4096;
 8001fd2:	2080      	movs	r0, #128	; 0x80
 8001fd4:	0140      	lsls	r0, r0, #5
 8001fd6:	e7f1      	b.n	8001fbc <ADS_Read_volt+0x4c>
		fsRange = 0;
 8001fd8:	2000      	movs	r0, #0
 8001fda:	e7ef      	b.n	8001fbc <ADS_Read_volt+0x4c>
		fsRange = 512;
 8001fdc:	2080      	movs	r0, #128	; 0x80
 8001fde:	0080      	lsls	r0, r0, #2
 8001fe0:	e7ec      	b.n	8001fbc <ADS_Read_volt+0x4c>
		fsRange = 0;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e7ea      	b.n	8001fbc <ADS_Read_volt+0x4c>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	200000cc 	.word	0x200000cc
 8001fec:	00002710 	.word	0x00002710

08001ff0 <debug_init>:
#ifdef TX_BUF_SIZE
	static uint8_t tx_buffer[TX_BUF_SIZE];
	ring_buffer dbg_ring_buff_tx;
#endif

void debug_init(void){
 8001ff0:	b530      	push	{r4, r5, lr}
 8001ff2:	b087      	sub	sp, #28
#ifdef TX_BUF_SIZE
  DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <debug_init+0x4c>)
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	3101      	adds	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STANDBY;
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	3102      	adds	r1, #2
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
}

static inline ring_buffer ring_buffer_init(uint8_t *buffer, uint16_t size)
{
  ring_buffer ring;
  ring.write_offset = 0;
 800200e:	466a      	mov	r2, sp
 8002010:	2300      	movs	r3, #0
 8002012:	8013      	strh	r3, [r2, #0]
  ring.read_offset = 0;
 8002014:	8053      	strh	r3, [r2, #2]
  ring.size = size;
 8002016:	3301      	adds	r3, #1
 8002018:	33ff      	adds	r3, #255	; 0xff
 800201a:	8093      	strh	r3, [r2, #4]
  ring.buffer = buffer;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <debug_init+0x50>)
 800201e:	6093      	str	r3, [r2, #8]
  return ring;
 8002020:	ab03      	add	r3, sp, #12
 8002022:	0019      	movs	r1, r3
 8002024:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002026:	c131      	stmia	r1!, {r0, r4, r5}

  dbg_ring_buff_tx = ring_buffer_init(tx_buffer, TX_BUF_SIZE);
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <debug_init+0x54>)
 800202a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800202c:	c213      	stmia	r2!, {r0, r1, r4}
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 800202e:	4a06      	ldr	r2, [pc, #24]	; (8002048 <debug_init+0x58>)
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	2120      	movs	r1, #32
 8002034:	430b      	orrs	r3, r1
 8002036:	6013      	str	r3, [r2, #0]

  LL_LPUART_EnableIT_RXNE(DBG_UART);
#endif
}
 8002038:	b007      	add	sp, #28
 800203a:	bd30      	pop	{r4, r5, pc}
 800203c:	40015800 	.word	0x40015800
 8002040:	200000d0 	.word	0x200000d0
 8002044:	20000400 	.word	0x20000400
 8002048:	40004400 	.word	0x40004400

0800204c <d_printf>:

void d_printf(const char *format, ...){
 800204c:	b40f      	push	{r0, r1, r2, r3}
 800204e:	b530      	push	{r4, r5, lr}
 8002050:	b0af      	sub	sp, #188	; 0xbc
 8002052:	ab32      	add	r3, sp, #200	; 0xc8
 8002054:	cb04      	ldmia	r3!, {r2}

  //return;

  va_list args;

  va_start(args, format);
 8002056:	9300      	str	r3, [sp, #0]
  vsnprintf((char*)aString,180,format,args);
 8002058:	21b4      	movs	r1, #180	; 0xb4
 800205a:	a801      	add	r0, sp, #4
 800205c:	f000 fdee 	bl	8002c3c <vsniprintf>
  va_end(args);

  len = strlen((char*)aString);
 8002060:	a801      	add	r0, sp, #4
 8002062:	f7fe f851 	bl	8000108 <strlen>
 8002066:	b2c0      	uxtb	r0, r0

  for(uint16_t i=0;i<len;i++)
 8002068:	2200      	movs	r2, #0
 800206a:	e005      	b.n	8002078 <d_printf+0x2c>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800206c:	3301      	adds	r3, #1
 800206e:	b29b      	uxth	r3, r3
}

static inline void ring_buffer_put(ring_buffer *ring, uint8_t data)
{
  ring->buffer[ring->write_offset] = data;
  ring->write_offset = ring_buffer_get_next_write(ring);
 8002070:	490f      	ldr	r1, [pc, #60]	; (80020b0 <d_printf+0x64>)
 8002072:	800b      	strh	r3, [r1, #0]
 8002074:	3201      	adds	r2, #1
 8002076:	b292      	uxth	r2, r2
 8002078:	b283      	uxth	r3, r0
 800207a:	4293      	cmp	r3, r2
 800207c:	d90d      	bls.n	800209a <d_printf+0x4e>
    ring_buffer_put(&dbg_ring_buff_tx,aString[i]);
 800207e:	ab01      	add	r3, sp, #4
 8002080:	5c9c      	ldrb	r4, [r3, r2]
  ring->buffer[ring->write_offset] = data;
 8002082:	490b      	ldr	r1, [pc, #44]	; (80020b0 <d_printf+0x64>)
 8002084:	880b      	ldrh	r3, [r1, #0]
 8002086:	688d      	ldr	r5, [r1, #8]
 8002088:	54ec      	strb	r4, [r5, r3]
  return get_next(ring->write_offset, ring->size);
 800208a:	880b      	ldrh	r3, [r1, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8002090:	3901      	subs	r1, #1
 8002092:	428b      	cmp	r3, r1
 8002094:	d1ea      	bne.n	800206c <d_printf+0x20>
 8002096:	2300      	movs	r3, #0
 8002098:	e7ea      	b.n	8002070 <d_printf+0x24>
  SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <d_printf+0x68>)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	430b      	orrs	r3, r1
 80020a2:	6013      	str	r3, [r2, #0]

  LL_LPUART_EnableIT_TXE(DBG_UART);
#endif
}
 80020a4:	b02f      	add	sp, #188	; 0xbc
 80020a6:	bc30      	pop	{r4, r5}
 80020a8:	bc08      	pop	{r3}
 80020aa:	b004      	add	sp, #16
 80020ac:	4718      	bx	r3
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	20000400 	.word	0x20000400
 80020b4:	40004400 	.word	0x40004400

080020b8 <Debug_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <Debug_TXEmpty_Callback+0x40>)
 80020ba:	885a      	ldrh	r2, [r3, #2]
 80020bc:	b292      	uxth	r2, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
#endif
}

void Debug_TXEmpty_Callback(void){
#ifdef TX_BUF_SIZE
  if(ring_buffer_is_empty(&dbg_ring_buff_tx))
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d010      	beq.n	80020e8 <Debug_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <Debug_TXEmpty_Callback+0x40>)
 80020c8:	8853      	ldrh	r3, [r2, #2]
 80020ca:	6891      	ldr	r1, [r2, #8]
 80020cc:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 80020ce:	8853      	ldrh	r3, [r2, #2]
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80020d4:	3a01      	subs	r2, #1
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00c      	beq.n	80020f4 <Debug_TXEmpty_Callback+0x3c>
 80020da:	3301      	adds	r3, #1
 80020dc:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <Debug_TXEmpty_Callback+0x40>)
 80020e0:	8053      	strh	r3, [r2, #2]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <Debug_TXEmpty_Callback+0x44>)
 80020e4:	6299      	str	r1, [r3, #40]	; 0x28

  }else{
    LL_LPUART_TransmitData8(DBG_UART,ring_buffer_get(&dbg_ring_buff_tx));
  }
#endif
}
 80020e6:	4770      	bx	lr
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <Debug_TXEmpty_Callback+0x44>)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	438b      	bics	r3, r1
 80020f0:	6013      	str	r3, [r2, #0]
}
 80020f2:	e7f8      	b.n	80020e6 <Debug_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80020f4:	2300      	movs	r3, #0
 80020f6:	e7f2      	b.n	80020de <Debug_TXEmpty_Callback+0x26>
 80020f8:	20000400 	.word	0x20000400
 80020fc:	40004400 	.word	0x40004400

08002100 <Debug_RXNEmpty_Callback>:
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002100:	4b02      	ldr	r3, [pc, #8]	; (800210c <Debug_RXNEmpty_Callback+0xc>)
 8002102:	6a5a      	ldr	r2, [r3, #36]	; 0x24

uint8_t dbg_cmd;

void Debug_RXNEmpty_Callback(void){
#ifdef TX_BUF_SIZE
	dbg_cmd = LL_LPUART_ReceiveData8(DBG_UART);
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <Debug_RXNEmpty_Callback+0x10>)
 8002106:	701a      	strb	r2, [r3, #0]
#endif
//	debugMenu(dbg_cmd);
}
 8002108:	4770      	bx	lr
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	40004400 	.word	0x40004400
 8002110:	200003fc 	.word	0x200003fc

08002114 <Debug_UART_IRQHandler>:
void Debug_UART_IRQHandler(void){
 8002114:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	061b      	lsls	r3, r3, #24
 800211c:	d505      	bpl.n	800212a <Debug_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	061b      	lsls	r3, r3, #24
 8002124:	d501      	bpl.n	800212a <Debug_UART_IRQHandler+0x16>
		Debug_TXEmpty_Callback();
 8002126:	f7ff ffc7 	bl	80020b8 <Debug_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	d505      	bpl.n	800213e <Debug_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	d501      	bpl.n	800213e <Debug_UART_IRQHandler+0x2a>
		Debug_RXNEmpty_Callback();
 800213a:	f7ff ffe1 	bl	8002100 <Debug_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	071b      	lsls	r3, r3, #28
 8002144:	d502      	bpl.n	800214c <Debug_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8002146:	4b02      	ldr	r3, [pc, #8]	; (8002150 <Debug_UART_IRQHandler+0x3c>)
 8002148:	2208      	movs	r2, #8
 800214a:	621a      	str	r2, [r3, #32]
}
 800214c:	bd10      	pop	{r4, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40004400 	.word	0x40004400

08002154 <timer_1_128>:

BOOL f_readADC = FALSE;

void timer_1_128(void){

	Cnt_1_128++;
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <timer_1_128+0x70>)
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	6013      	str	r3, [r2, #0]

	if(CntTo250ms < (32-1)){
 800215c:	4b1a      	ldr	r3, [pc, #104]	; (80021c8 <timer_1_128+0x74>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b1e      	cmp	r3, #30
 8002162:	d803      	bhi.n	800216c <timer_1_128+0x18>

		CntTo250ms++;
 8002164:	3301      	adds	r3, #1
 8002166:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <timer_1_128+0x74>)
 8002168:	7013      	strb	r3, [r2, #0]
		}

		CntTo500ms ^= 1;

	}
}
 800216a:	4770      	bx	lr
		f_Time250ms = TRUE;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <timer_1_128+0x78>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
		CntTo250ms = 0;
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <timer_1_128+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
		if(CntTo500ms == 0){
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <timer_1_128+0x7c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <timer_1_128+0x58>
			f_Time500ms = TRUE;
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <timer_1_128+0x80>)
 8002182:	2101      	movs	r1, #1
 8002184:	7011      	strb	r1, [r2, #0]
			CntToSec ^= 1;
 8002186:	4914      	ldr	r1, [pc, #80]	; (80021d8 <timer_1_128+0x84>)
 8002188:	780a      	ldrb	r2, [r1, #0]
 800218a:	2001      	movs	r0, #1
 800218c:	4042      	eors	r2, r0
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	700a      	strb	r2, [r1, #0]
			if(CntToSec == 0){
 8002192:	2a00      	cmp	r2, #0
 8002194:	d10a      	bne.n	80021ac <timer_1_128+0x58>
				CntSec++;
 8002196:	4911      	ldr	r1, [pc, #68]	; (80021dc <timer_1_128+0x88>)
 8002198:	680a      	ldr	r2, [r1, #0]
 800219a:	3201      	adds	r2, #1
 800219c:	600a      	str	r2, [r1, #0]
				CntTo2min++;
 800219e:	4910      	ldr	r1, [pc, #64]	; (80021e0 <timer_1_128+0x8c>)
 80021a0:	780a      	ldrb	r2, [r1, #0]
 80021a2:	3201      	adds	r2, #1
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	700a      	strb	r2, [r1, #0]
				if(CntTo2min == 120){// 2 минуты
 80021a8:	2a78      	cmp	r2, #120	; 0x78
 80021aa:	d004      	beq.n	80021b6 <timer_1_128+0x62>
		CntTo500ms ^= 1;
 80021ac:	2201      	movs	r2, #1
 80021ae:	4053      	eors	r3, r2
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <timer_1_128+0x7c>)
 80021b2:	7013      	strb	r3, [r2, #0]
}
 80021b4:	e7d9      	b.n	800216a <timer_1_128+0x16>
					CntTo2min = 0;
 80021b6:	000a      	movs	r2, r1
 80021b8:	2100      	movs	r1, #0
 80021ba:	7011      	strb	r1, [r2, #0]
					f_Time2min = TRUE;
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <timer_1_128+0x90>)
 80021be:	3101      	adds	r1, #1
 80021c0:	7011      	strb	r1, [r2, #0]
 80021c2:	e7f3      	b.n	80021ac <timer_1_128+0x58>
 80021c4:	2000053c 	.word	0x2000053c
 80021c8:	20000528 	.word	0x20000528
 80021cc:	200001dd 	.word	0x200001dd
 80021d0:	20000529 	.word	0x20000529
 80021d4:	200001de 	.word	0x200001de
 80021d8:	200001d4 	.word	0x200001d4
 80021dc:	200001d0 	.word	0x200001d0
 80021e0:	2000054e 	.word	0x2000054e
 80021e4:	20000024 	.word	0x20000024

080021e8 <serviceTimerStart>:
	}

}

void serviceTimerStart(uint16_t time){
	serviceTimer = time;
 80021e8:	4b01      	ldr	r3, [pc, #4]	; (80021f0 <serviceTimerStart+0x8>)
 80021ea:	8018      	strh	r0, [r3, #0]
}
 80021ec:	4770      	bx	lr
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	2000054c 	.word	0x2000054c

080021f4 <serviceTimerStop>:

void serviceTimerStop(void){
 80021f4:	b510      	push	{r4, lr}

	mbServiceMode = FALSE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	4a08      	ldr	r2, [pc, #32]	; (800221c <serviceTimerStop+0x28>)
 80021fa:	7013      	strb	r3, [r2, #0]
	dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 80021fc:	4808      	ldr	r0, [pc, #32]	; (8002220 <serviceTimerStop+0x2c>)
 80021fe:	2188      	movs	r1, #136	; 0x88
 8002200:	0049      	lsls	r1, r1, #1
 8002202:	5a42      	ldrh	r2, [r0, r1]
 8002204:	2404      	movs	r4, #4
 8002206:	43a2      	bics	r2, r4
 8002208:	5242      	strh	r2, [r0, r1]
	mbDevStatus = dev.Status;
 800220a:	4906      	ldr	r1, [pc, #24]	; (8002224 <serviceTimerStop+0x30>)
 800220c:	800a      	strh	r2, [r1, #0]

	mbUnlock = FALSE;
 800220e:	4a06      	ldr	r2, [pc, #24]	; (8002228 <serviceTimerStop+0x34>)
 8002210:	7013      	strb	r3, [r2, #0]
	AccessCode = 0;
 8002212:	4a06      	ldr	r2, [pc, #24]	; (800222c <serviceTimerStop+0x38>)
 8002214:	8013      	strh	r3, [r2, #0]

	serviceTimer = 0;
 8002216:	4a06      	ldr	r2, [pc, #24]	; (8002230 <serviceTimerStop+0x3c>)
 8002218:	8013      	strh	r3, [r2, #0]
}
 800221a:	bd10      	pop	{r4, pc}
 800221c:	200001e8 	.word	0x200001e8
 8002220:	20000414 	.word	0x20000414
 8002224:	200001ea 	.word	0x200001ea
 8002228:	200001f2 	.word	0x200001f2
 800222c:	200001ee 	.word	0x200001ee
 8002230:	2000054c 	.word	0x2000054c

08002234 <serviceTimerProc>:
void serviceTimerProc(void){
 8002234:	b510      	push	{r4, lr}
	if(serviceTimer > 1){
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <serviceTimerProc+0x1c>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d903      	bls.n	8002246 <serviceTimerProc+0x12>
		serviceTimer--;
 800223e:	3b01      	subs	r3, #1
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <serviceTimerProc+0x1c>)
 8002242:	8013      	strh	r3, [r2, #0]
}
 8002244:	bd10      	pop	{r4, pc}
		if(serviceTimer == 1){
 8002246:	2b01      	cmp	r3, #1
 8002248:	d1fc      	bne.n	8002244 <serviceTimerProc+0x10>
			serviceTimerStop();
 800224a:	f7ff ffd3 	bl	80021f4 <serviceTimerStop>
}
 800224e:	e7f9      	b.n	8002244 <serviceTimerProc+0x10>
 8002250:	2000054c 	.word	0x2000054c

08002254 <dev_set_config_default>:

#ifdef CONFIG_IR
	//	dev.Config.TypeSensor = 0;
	//	dev.Config.Unit = 0;
	//	dev.Config.ValueLow = 0;
		dev.Config.ValueHigh = 1000;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <dev_set_config_default+0x20>)
 8002256:	22fa      	movs	r2, #250	; 0xfa
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	815a      	strh	r2, [r3, #10]
		dev.Config.ValueCalib = 500;
 800225c:	3af5      	subs	r2, #245	; 0xf5
 800225e:	3aff      	subs	r2, #255	; 0xff
 8002260:	819a      	strh	r2, [r3, #12]
	//	dev.Config.ADCLow	= 0;
		dev.Config.ADCHigh	= 0;
 8002262:	2200      	movs	r2, #0
 8002264:	821a      	strh	r2, [r3, #16]

		//dev.Config.CalibZeroADC = 0;
		dev.Config.CalibConcADC = 0;
 8002266:	21cc      	movs	r1, #204	; 0xcc
 8002268:	525a      	strh	r2, [r3, r1]

	//	for(int i = 0; i < 8; i++)
	dev.Config.LMP_Gain = ADS_CONFIG_REG_PGA_1_024V;
 800226a:	22c0      	movs	r2, #192	; 0xc0
 800226c:	00d2      	lsls	r2, r2, #3
 800226e:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif


}
 8002270:	4770      	bx	lr
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	20000414 	.word	0x20000414

08002278 <dev_init>:

void dev_init(void){

//	dev_set_config_default();

	dev.RegInput.cod_8216 = 8216;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <dev_init+0x1c>)
 800227a:	22d8      	movs	r2, #216	; 0xd8
 800227c:	4906      	ldr	r1, [pc, #24]	; (8002298 <dev_init+0x20>)
 800227e:	5299      	strh	r1, [r3, r2]

	dev.RegInput.VerSW = 0x0101;
 8002280:	3202      	adds	r2, #2
 8002282:	2102      	movs	r1, #2
 8002284:	31ff      	adds	r1, #255	; 0xff
 8002286:	5299      	strh	r1, [r3, r2]
	dev.RegInput.VerSW_Build = 0x0001;
 8002288:	3ad9      	subs	r2, #217	; 0xd9
 800228a:	3925      	subs	r1, #37	; 0x25
 800228c:	525a      	strh	r2, [r3, r1]

	dev.Status = (1 << STATUS_BIT_MAIN_INIT);
 800228e:	3134      	adds	r1, #52	; 0x34
 8002290:	525a      	strh	r2, [r3, r1]
}
 8002292:	4770      	bx	lr
 8002294:	20000414 	.word	0x20000414
 8002298:	00002018 	.word	0x00002018

0800229c <dev_proc>:

//==============================================================================

void dev_proc(void){
 800229c:	b510      	push	{r4, lr}

	serviceTimerProc();
 800229e:	f7ff ffc9 	bl	8002234 <serviceTimerProc>

	mbDevStatus = dev.Status;
 80022a2:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <dev_proc+0x14>)
 80022a4:	2388      	movs	r3, #136	; 0x88
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	5ad2      	ldrh	r2, [r2, r3]
 80022aa:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <dev_proc+0x18>)
 80022ac:	801a      	strh	r2, [r3, #0]
		d_printf("\n\r");
		d_printf("(%04X %04X) %04X %04X", ADC_in_Temper, ADC_in[0], ADC_in[1], ADC_in[2]);
		d_printf(" |  (TV:%05d) TIA:%05d V:%05d T_LMP:%02d (T_MPU:%02d)", ADC_in_mVolt_Temper, ADC_in_mVolt_TIA,  ADC_in_RefVoltage, LMP_temper, ADC_in_Celsius);
#endif

}
 80022ae:	bd10      	pop	{r4, pc}
 80022b0:	20000414 	.word	0x20000414
 80022b4:	200001ea 	.word	0x200001ea

080022b8 <Adc_Eoc_Callback>:
#define C_SUB	1556928
#define C_DIV 	8042

void Adc_Eoc_Callback(void){

	ADC_in[adc_cnt] = LL_ADC_REG_ReadConversionData12(ADC1);
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <Adc_Eoc_Callback+0x28>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <Adc_Eoc_Callback+0x2c>)
 80022be:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80022c0:	005a      	lsls	r2, r3, #1
 80022c2:	4909      	ldr	r1, [pc, #36]	; (80022e8 <Adc_Eoc_Callback+0x30>)
 80022c4:	5288      	strh	r0, [r1, r2]

	if(adc_cnt >= 2){
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d906      	bls.n	80022d8 <Adc_Eoc_Callback+0x20>

		f_AdcCycleEnd = TRUE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <Adc_Eoc_Callback+0x34>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
		adc_cnt = 0;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <Adc_Eoc_Callback+0x28>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]

		adc_cnt++;

	}

}
 80022d6:	4770      	bx	lr
		adc_cnt++;
 80022d8:	3301      	adds	r3, #1
 80022da:	4a01      	ldr	r2, [pc, #4]	; (80022e0 <Adc_Eoc_Callback+0x28>)
 80022dc:	7013      	strb	r3, [r2, #0]
}
 80022de:	e7fa      	b.n	80022d6 <Adc_Eoc_Callback+0x1e>
 80022e0:	200001dc 	.word	0x200001dc
 80022e4:	40012400 	.word	0x40012400
 80022e8:	2000040c 	.word	0x2000040c
 80022ec:	20000538 	.word	0x20000538

080022f0 <Adc_read_data>:

}
#endif

#ifdef CONFIG_IR
void Adc_read_data(void){
 80022f0:	b570      	push	{r4, r5, r6, lr}

	ADC_in_RefVoltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_in[1], LL_ADC_RESOLUTION_12B);
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <Adc_read_data+0x98>)
 80022f4:	8818      	ldrh	r0, [r3, #0]
 80022f6:	4c25      	ldr	r4, [pc, #148]	; (800238c <Adc_read_data+0x9c>)
 80022f8:	4360      	muls	r0, r4
 80022fa:	4d25      	ldr	r5, [pc, #148]	; (8002390 <Adc_read_data+0xa0>)
 80022fc:	8869      	ldrh	r1, [r5, #2]
 80022fe:	f7fd ff15 	bl	800012c <__udivsi3>
 8002302:	4b24      	ldr	r3, [pc, #144]	; (8002394 <Adc_read_data+0xa4>)
 8002304:	6018      	str	r0, [r3, #0]
	ADC_in_Celsius = 10 * __LL_ADC_CALC_TEMPERATURE(ADC_in_RefVoltage, ADC_in[2], LL_ADC_RESOLUTION_12B);
 8002306:	88ab      	ldrh	r3, [r5, #4]
 8002308:	4358      	muls	r0, r3
 800230a:	0021      	movs	r1, r4
 800230c:	f7fd ff0e 	bl	800012c <__udivsi3>
 8002310:	4b21      	ldr	r3, [pc, #132]	; (8002398 <Adc_read_data+0xa8>)
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	1a83      	subs	r3, r0, r2
 8002316:	2064      	movs	r0, #100	; 0x64
 8002318:	4358      	muls	r0, r3
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <Adc_read_data+0xac>)
 800231c:	8819      	ldrh	r1, [r3, #0]
 800231e:	1a89      	subs	r1, r1, r2
 8002320:	f7fd ff8e 	bl	8000240 <__divsi3>
 8002324:	0083      	lsls	r3, r0, #2
 8002326:	18c0      	adds	r0, r0, r3
 8002328:	0040      	lsls	r0, r0, #1
 800232a:	302d      	adds	r0, #45	; 0x2d
 800232c:	30ff      	adds	r0, #255	; 0xff
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <Adc_read_data+0xb0>)
 8002330:	8018      	strh	r0, [r3, #0]

	// 2 минуты
	if(f_Time2min || f_TimeCalibFid){
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <Adc_read_data+0xb4>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <Adc_read_data+0x52>
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <Adc_read_data+0xb8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d011      	beq.n	8002366 <Adc_read_data+0x76>
		f_Time2min = FALSE;
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <Adc_read_data+0xb4>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
		// Включаем питание на сенсоре
		dev.RegInput.ADC_0 = ADS_Read_adc(dev.Config.LMP_Gain);
 8002348:	4c18      	ldr	r4, [pc, #96]	; (80023ac <Adc_read_data+0xbc>)
 800234a:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 800234c:	f7ff fe0a 	bl	8001f64 <ADS_Read_adc>
 8002350:	2387      	movs	r3, #135	; 0x87
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	52e0      	strh	r0, [r4, r3]
		dev.RegInput.Volt_Sens = ADS_Read_volt(dev.RegInput.ADC_0);
 8002356:	f7ff fe0b 	bl	8001f70 <ADS_Read_volt>
 800235a:	23ea      	movs	r3, #234	; 0xea
 800235c:	52e0      	strh	r0, [r4, r3]
		dev.RegInput.TempSensor = ADC_in_Celsius;
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <Adc_read_data+0xb0>)
 8002360:	881a      	ldrh	r2, [r3, #0]
 8002362:	23e8      	movs	r3, #232	; 0xe8
 8002364:	52e2      	strh	r2, [r4, r3]
	}

#define DEBUG_ADS1115
#ifdef DEBUG_ADS1115
		d_printf("ADC - %05d Volt - %05d Temp:%d", dev.RegInput.ADC_0, dev.RegInput.Volt_Sens,  dev.RegInput.TempSensor);
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <Adc_read_data+0xbc>)
 8002368:	2287      	movs	r2, #135	; 0x87
 800236a:	0052      	lsls	r2, r2, #1
 800236c:	5a99      	ldrh	r1, [r3, r2]
 800236e:	3a24      	subs	r2, #36	; 0x24
 8002370:	5a9a      	ldrh	r2, [r3, r2]
 8002372:	20e8      	movs	r0, #232	; 0xe8
 8002374:	5e1b      	ldrsh	r3, [r3, r0]
 8002376:	480e      	ldr	r0, [pc, #56]	; (80023b0 <Adc_read_data+0xc0>)
 8002378:	f7ff fe68 	bl	800204c <d_printf>
		d_printf("\n\r");
 800237c:	480d      	ldr	r0, [pc, #52]	; (80023b4 <Adc_read_data+0xc4>)
 800237e:	f7ff fe65 	bl	800204c <d_printf>
#endif
	SetGasValue();
 8002382:	f7fe ff25 	bl	80011d0 <SetGasValue>
}
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	1ff80078 	.word	0x1ff80078
 800238c:	00000bb8 	.word	0x00000bb8
 8002390:	2000040c 	.word	0x2000040c
 8002394:	20000020 	.word	0x20000020
 8002398:	1ff8007a 	.word	0x1ff8007a
 800239c:	1ff8007e 	.word	0x1ff8007e
 80023a0:	20000540 	.word	0x20000540
 80023a4:	20000024 	.word	0x20000024
 80023a8:	20000025 	.word	0x20000025
 80023ac:	20000414 	.word	0x20000414
 80023b0:	08003a68 	.word	0x08003a68
 80023b4:	08003a88 	.word	0x08003a88

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80023b8:	480d      	ldr	r0, [pc, #52]	; (80023f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80023ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80023be:	490e      	ldr	r1, [pc, #56]	; (80023f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c0:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <LoopForever+0xe>)
  movs r3, #0
 80023c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c4:	e002      	b.n	80023cc <LoopCopyDataInit>

080023c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ca:	3304      	adds	r3, #4

080023cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d0:	d3f9      	bcc.n	80023c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023d4:	4c0b      	ldr	r4, [pc, #44]	; (8002404 <LoopForever+0x16>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d8:	e001      	b.n	80023de <LoopFillZerobss>

080023da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023dc:	3204      	adds	r2, #4

080023de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e0:	d3fb      	bcc.n	80023da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80023e2:	f7fe fd07 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f000 fbc9 	bl	8002b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7fe fbb9 	bl	8000b60 <main>

080023ee <LoopForever>:

LoopForever:
    b LoopForever
 80023ee:	e7fe      	b.n	80023ee <LoopForever>
   ldr   r0, =_estack
 80023f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80023f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023fc:	08003ad0 	.word	0x08003ad0
  ldr r2, =_sbss
 8002400:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002404:	20000560 	.word	0x20000560

08002408 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <DMA1_Channel1_IRQHandler>
	...

0800240c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800240c:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800240e:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002410:	07db      	lsls	r3, r3, #31
 8002412:	d411      	bmi.n	8002438 <LL_ADC_Init+0x2c>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002414:	68c3      	ldr	r3, [r0, #12]
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <LL_ADC_Init+0x30>)
 8002418:	4013      	ands	r3, r2
 800241a:	684a      	ldr	r2, [r1, #4]
 800241c:	688c      	ldr	r4, [r1, #8]
 800241e:	4322      	orrs	r2, r4
 8002420:	68cc      	ldr	r4, [r1, #12]
 8002422:	4322      	orrs	r2, r4
 8002424:	4313      	orrs	r3, r2
 8002426:	60c3      	str	r3, [r0, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002428:	6903      	ldr	r3, [r0, #16]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	680a      	ldr	r2, [r1, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 8002434:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002436:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002438:	2001      	movs	r0, #1
 800243a:	e7fc      	b.n	8002436 <LL_ADC_Init+0x2a>
 800243c:	ffff3fc7 	.word	0xffff3fc7

08002440 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002440:	b510      	push	{r4, lr}
 8002442:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002444:	07db      	lsls	r3, r3, #31
 8002446:	d40f      	bmi.n	8002468 <LL_ADC_REG_Init+0x28>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002448:	68c3      	ldr	r3, [r0, #12]
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <LL_ADC_REG_Init+0x2c>)
 800244c:	401a      	ands	r2, r3
 800244e:	680b      	ldr	r3, [r1, #0]
 8002450:	684c      	ldr	r4, [r1, #4]
 8002452:	4323      	orrs	r3, r4
 8002454:	688c      	ldr	r4, [r1, #8]
 8002456:	4323      	orrs	r3, r4
 8002458:	68cc      	ldr	r4, [r1, #12]
 800245a:	4323      	orrs	r3, r4
 800245c:	6909      	ldr	r1, [r1, #16]
 800245e:	430b      	orrs	r3, r1
 8002460:	4313      	orrs	r3, r2
 8002462:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8002464:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002466:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e7fc      	b.n	8002466 <LL_ADC_REG_Init+0x26>
 800246c:	fffec23c 	.word	0xfffec23c

08002470 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002470:	b510      	push	{r4, lr}
 8002472:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002474:	7900      	ldrb	r0, [r0, #4]
 8002476:	2800      	cmp	r0, #0
 8002478:	d050      	beq.n	800251c <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d057      	beq.n	8002530 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8002480:	7958      	ldrb	r0, [r3, #5]
 8002482:	2801      	cmp	r0, #1
 8002484:	d018      	beq.n	80024b8 <LL_EXTI_Init+0x48>
 8002486:	2802      	cmp	r0, #2
 8002488:	d020      	beq.n	80024cc <LL_EXTI_Init+0x5c>
 800248a:	2800      	cmp	r0, #0
 800248c:	d00b      	beq.n	80024a6 <LL_EXTI_Init+0x36>
 800248e:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002490:	799a      	ldrb	r2, [r3, #6]
 8002492:	2a00      	cmp	r2, #0
 8002494:	d04b      	beq.n	800252e <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 8002496:	2a02      	cmp	r2, #2
 8002498:	d02c      	beq.n	80024f4 <LL_EXTI_Init+0x84>
 800249a:	2a03      	cmp	r2, #3
 800249c:	d034      	beq.n	8002508 <LL_EXTI_Init+0x98>
 800249e:	2a01      	cmp	r2, #1
 80024a0:	d01e      	beq.n	80024e0 <LL_EXTI_Init+0x70>
 80024a2:	2001      	movs	r0, #1
 80024a4:	e043      	b.n	800252e <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <LL_EXTI_Init+0xc4>)
 80024a8:	684c      	ldr	r4, [r1, #4]
 80024aa:	4394      	bics	r4, r2
 80024ac:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80024ae:	680a      	ldr	r2, [r1, #0]
 80024b0:	681c      	ldr	r4, [r3, #0]
 80024b2:	4322      	orrs	r2, r4
 80024b4:	600a      	str	r2, [r1, #0]
}
 80024b6:	e7eb      	b.n	8002490 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80024b8:	491e      	ldr	r1, [pc, #120]	; (8002534 <LL_EXTI_Init+0xc4>)
 80024ba:	6808      	ldr	r0, [r1, #0]
 80024bc:	4390      	bics	r0, r2
 80024be:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80024c0:	684a      	ldr	r2, [r1, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	4302      	orrs	r2, r0
 80024c6:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 80024c8:	2000      	movs	r0, #0
}
 80024ca:	e7e1      	b.n	8002490 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 80024cc:	4919      	ldr	r1, [pc, #100]	; (8002534 <LL_EXTI_Init+0xc4>)
 80024ce:	6808      	ldr	r0, [r1, #0]
 80024d0:	4302      	orrs	r2, r0
 80024d2:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80024d4:	684a      	ldr	r2, [r1, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	4302      	orrs	r2, r0
 80024da:	604a      	str	r2, [r1, #4]
 80024dc:	2000      	movs	r0, #0
}
 80024de:	e7d7      	b.n	8002490 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <LL_EXTI_Init+0xc4>)
 80024e2:	68d1      	ldr	r1, [r2, #12]
 80024e4:	681c      	ldr	r4, [r3, #0]
 80024e6:	43a1      	bics	r1, r4
 80024e8:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80024ea:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80024ec:	6891      	ldr	r1, [r2, #8]
 80024ee:	430b      	orrs	r3, r1
 80024f0:	6093      	str	r3, [r2, #8]
}
 80024f2:	e01c      	b.n	800252e <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <LL_EXTI_Init+0xc4>)
 80024f6:	6891      	ldr	r1, [r2, #8]
 80024f8:	681c      	ldr	r4, [r3, #0]
 80024fa:	43a1      	bics	r1, r4
 80024fc:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80024fe:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002500:	68d1      	ldr	r1, [r2, #12]
 8002502:	430b      	orrs	r3, r1
 8002504:	60d3      	str	r3, [r2, #12]
}
 8002506:	e012      	b.n	800252e <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <LL_EXTI_Init+0xc4>)
 800250a:	6891      	ldr	r1, [r2, #8]
 800250c:	681c      	ldr	r4, [r3, #0]
 800250e:	4321      	orrs	r1, r4
 8002510:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002512:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002514:	68d1      	ldr	r1, [r2, #12]
 8002516:	430b      	orrs	r3, r1
 8002518:	60d3      	str	r3, [r2, #12]
}
 800251a:	e008      	b.n	800252e <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800251c:	4a05      	ldr	r2, [pc, #20]	; (8002534 <LL_EXTI_Init+0xc4>)
 800251e:	6811      	ldr	r1, [r2, #0]
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	43a1      	bics	r1, r4
 8002524:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002526:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002528:	6853      	ldr	r3, [r2, #4]
 800252a:	438b      	bics	r3, r1
 800252c:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 800252e:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8002530:	2000      	movs	r0, #0
 8002532:	e7fc      	b.n	800252e <LL_EXTI_Init+0xbe>
 8002534:	40010400 	.word	0x40010400

08002538 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 800253a:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800253c:	e027      	b.n	800258e <LL_GPIO_Init+0x56>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800253e:	6883      	ldr	r3, [r0, #8]
 8002540:	002c      	movs	r4, r5
 8002542:	436c      	muls	r4, r5
 8002544:	0066      	lsls	r6, r4, #1
 8002546:	1936      	adds	r6, r6, r4
 8002548:	43b3      	bics	r3, r6
 800254a:	688e      	ldr	r6, [r1, #8]
 800254c:	4374      	muls	r4, r6
 800254e:	4323      	orrs	r3, r4
 8002550:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002552:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002554:	6843      	ldr	r3, [r0, #4]
 8002556:	43a3      	bics	r3, r4
 8002558:	68ce      	ldr	r6, [r1, #12]
 800255a:	4374      	muls	r4, r6
 800255c:	4323      	orrs	r3, r4
 800255e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002560:	68c6      	ldr	r6, [r0, #12]
 8002562:	002b      	movs	r3, r5
 8002564:	436b      	muls	r3, r5
 8002566:	005f      	lsls	r7, r3, #1
 8002568:	18ff      	adds	r7, r7, r3
 800256a:	43fc      	mvns	r4, r7
 800256c:	46a4      	mov	ip, r4
 800256e:	43be      	bics	r6, r7
 8002570:	690f      	ldr	r7, [r1, #16]
 8002572:	435f      	muls	r7, r3
 8002574:	433e      	orrs	r6, r7
 8002576:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002578:	684c      	ldr	r4, [r1, #4]
 800257a:	2c02      	cmp	r4, #2
 800257c:	d016      	beq.n	80025ac <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800257e:	6804      	ldr	r4, [r0, #0]
 8002580:	4665      	mov	r5, ip
 8002582:	402c      	ands	r4, r5
 8002584:	684d      	ldr	r5, [r1, #4]
 8002586:	436b      	muls	r3, r5
 8002588:	4323      	orrs	r3, r4
 800258a:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800258c:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800258e:	680c      	ldr	r4, [r1, #0]
 8002590:	0023      	movs	r3, r4
 8002592:	40d3      	lsrs	r3, r2
 8002594:	d026      	beq.n	80025e4 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002596:	2301      	movs	r3, #1
 8002598:	4093      	lsls	r3, r2
 800259a:	0025      	movs	r5, r4
 800259c:	401d      	ands	r5, r3
    if (currentpin)
 800259e:	421c      	tst	r4, r3
 80025a0:	d0f4      	beq.n	800258c <LL_GPIO_Init+0x54>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025a2:	684b      	ldr	r3, [r1, #4]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d8da      	bhi.n	8002560 <LL_GPIO_Init+0x28>
 80025aa:	e7c8      	b.n	800253e <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 80025ac:	2dff      	cmp	r5, #255	; 0xff
 80025ae:	d80b      	bhi.n	80025c8 <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80025b0:	6a06      	ldr	r6, [r0, #32]
 80025b2:	001c      	movs	r4, r3
 80025b4:	436c      	muls	r4, r5
 80025b6:	4365      	muls	r5, r4
 80025b8:	012c      	lsls	r4, r5, #4
 80025ba:	1b64      	subs	r4, r4, r5
 80025bc:	43a6      	bics	r6, r4
 80025be:	694c      	ldr	r4, [r1, #20]
 80025c0:	4365      	muls	r5, r4
 80025c2:	4335      	orrs	r5, r6
 80025c4:	6205      	str	r5, [r0, #32]
}
 80025c6:	e7da      	b.n	800257e <LL_GPIO_Init+0x46>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80025c8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80025ca:	0a2d      	lsrs	r5, r5, #8
 80025cc:	002c      	movs	r4, r5
 80025ce:	436c      	muls	r4, r5
 80025d0:	436c      	muls	r4, r5
 80025d2:	4365      	muls	r5, r4
 80025d4:	012c      	lsls	r4, r5, #4
 80025d6:	1b64      	subs	r4, r4, r5
 80025d8:	43a6      	bics	r6, r4
 80025da:	694c      	ldr	r4, [r1, #20]
 80025dc:	4365      	muls	r5, r4
 80025de:	4335      	orrs	r5, r6
 80025e0:	6245      	str	r5, [r0, #36]	; 0x24
}
 80025e2:	e7cc      	b.n	800257e <LL_GPIO_Init+0x46>
  }


  return (SUCCESS);
}
 80025e4:	2000      	movs	r0, #0
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025e8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80025e8:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	2401      	movs	r4, #1
 80025ee:	43a2      	bics	r2, r4
 80025f0:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <LL_I2C_Init+0x6c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	68ca      	ldr	r2, [r1, #12]
 80025fa:	0212      	lsls	r2, r2, #8
 80025fc:	688d      	ldr	r5, [r1, #8]
 80025fe:	432a      	orrs	r2, r5
 8002600:	4313      	orrs	r3, r2
 8002602:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002604:	684b      	ldr	r3, [r1, #4]
 8002606:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002608:	6803      	ldr	r3, [r0, #0]
 800260a:	4323      	orrs	r3, r4
 800260c:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800260e:	6883      	ldr	r3, [r0, #8]
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <LL_I2C_Init+0x70>)
 8002612:	4013      	ands	r3, r2
 8002614:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002616:	6883      	ldr	r3, [r0, #8]
 8002618:	0adb      	lsrs	r3, r3, #11
 800261a:	02db      	lsls	r3, r3, #11
 800261c:	690a      	ldr	r2, [r1, #16]
 800261e:	698c      	ldr	r4, [r1, #24]
 8002620:	4322      	orrs	r2, r4
 8002622:	4313      	orrs	r3, r2
 8002624:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002626:	690b      	ldr	r3, [r1, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800262c:	6882      	ldr	r2, [r0, #8]
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	4313      	orrs	r3, r2
 8002634:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	; (800265c <LL_I2C_Init+0x74>)
 800263a:	4013      	ands	r3, r2
 800263c:	680a      	ldr	r2, [r1, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002642:	694b      	ldr	r3, [r1, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002644:	6842      	ldr	r2, [r0, #4]
 8002646:	4904      	ldr	r1, [pc, #16]	; (8002658 <LL_I2C_Init+0x70>)
 8002648:	400a      	ands	r2, r1
 800264a:	4313      	orrs	r3, r2
 800264c:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 800264e:	2000      	movs	r0, #0
 8002650:	bd30      	pop	{r4, r5, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	ffffe0ff 	.word	0xffffe0ff
 8002658:	ffff7fff 	.word	0xffff7fff
 800265c:	ffcfffff 	.word	0xffcfffff

08002660 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	0004      	movs	r4, r0
 8002664:	000d      	movs	r5, r1
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002666:	6803      	ldr	r3, [r0, #0]
 8002668:	07db      	lsls	r3, r3, #31
 800266a:	d42c      	bmi.n	80026c6 <LL_LPUART_Init+0x66>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800266c:	6803      	ldr	r3, [r0, #0]
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <LL_LPUART_Init+0x74>)
 8002670:	4013      	ands	r3, r2
 8002672:	684a      	ldr	r2, [r1, #4]
 8002674:	68c9      	ldr	r1, [r1, #12]
 8002676:	430a      	orrs	r2, r1
 8002678:	6929      	ldr	r1, [r5, #16]
 800267a:	430a      	orrs	r2, r1
 800267c:	4313      	orrs	r3, r2
 800267e:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8002680:	6843      	ldr	r3, [r0, #4]
 8002682:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <LL_LPUART_Init+0x78>)
 8002684:	4013      	ands	r3, r2
 8002686:	68aa      	ldr	r2, [r5, #8]
 8002688:	4313      	orrs	r3, r2
 800268a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800268c:	6883      	ldr	r3, [r0, #8]
 800268e:	4a13      	ldr	r2, [pc, #76]	; (80026dc <LL_LPUART_Init+0x7c>)
 8002690:	4013      	ands	r3, r2
 8002692:	696a      	ldr	r2, [r5, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	6083      	str	r3, [r0, #8]
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8002698:	20c0      	movs	r0, #192	; 0xc0
 800269a:	0100      	lsls	r0, r0, #4
 800269c:	f000 f8e0 	bl	8002860 <LL_RCC_GetLPUARTClockFreq>

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d012      	beq.n	80026ca <LL_LPUART_Init+0x6a>
        && (LPUART_InitStruct->BaudRate != 0U))
 80026a4:	682a      	ldr	r2, [r5, #0]
 80026a6:	2a00      	cmp	r2, #0
 80026a8:	d011      	beq.n	80026ce <LL_LPUART_Init+0x6e>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 80026aa:	0e07      	lsrs	r7, r0, #24
 80026ac:	0206      	lsls	r6, r0, #8
 80026ae:	0850      	lsrs	r0, r2, #1
 80026b0:	2100      	movs	r1, #0
 80026b2:	1980      	adds	r0, r0, r6
 80026b4:	4179      	adcs	r1, r7
 80026b6:	2300      	movs	r3, #0
 80026b8:	f7fd feae 	bl	8000418 <__aeabi_uldivmod>
 80026bc:	0300      	lsls	r0, r0, #12
 80026be:	0b00      	lsrs	r0, r0, #12
 80026c0:	60e0      	str	r0, [r4, #12]
    {
      status = SUCCESS;
 80026c2:	2000      	movs	r0, #0
}
 80026c4:	e000      	b.n	80026c8 <LL_LPUART_Init+0x68>
  ErrorStatus status = ERROR;
 80026c6:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ErrorStatus status = ERROR;
 80026ca:	2001      	movs	r0, #1
 80026cc:	e7fc      	b.n	80026c8 <LL_LPUART_Init+0x68>
 80026ce:	2001      	movs	r0, #1
 80026d0:	e7fa      	b.n	80026c8 <LL_LPUART_Init+0x68>
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	efffe9f3 	.word	0xefffe9f3
 80026d8:	ffffcfff 	.word	0xffffcfff
 80026dc:	fffffcff 	.word	0xfffffcff

080026e0 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <RCC_GetHCLKClockFreq+0x14>)
 80026e2:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80026e4:	0912      	lsrs	r2, r2, #4
 80026e6:	230f      	movs	r3, #15
 80026e8:	4013      	ands	r3, r2
 80026ea:	4a03      	ldr	r2, [pc, #12]	; (80026f8 <RCC_GetHCLKClockFreq+0x18>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	40d8      	lsrs	r0, r3
}
 80026f0:	4770      	bx	lr
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	080034a4 	.word	0x080034a4

080026fc <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <RCC_GetPCLK1ClockFreq+0x14>)
 80026fe:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002700:	0a12      	lsrs	r2, r2, #8
 8002702:	2307      	movs	r3, #7
 8002704:	4013      	ands	r3, r2
 8002706:	4a03      	ldr	r2, [pc, #12]	; (8002714 <RCC_GetPCLK1ClockFreq+0x18>)
 8002708:	5cd3      	ldrb	r3, [r2, r3]
 800270a:	40d8      	lsrs	r0, r3
}
 800270c:	4770      	bx	lr
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40021000 	.word	0x40021000
 8002714:	080034b4 	.word	0x080034b4

08002718 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002718:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800271c:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 800271e:	03db      	lsls	r3, r3, #15
 8002720:	d405      	bmi.n	800272e <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	06db      	lsls	r3, r3, #27
 8002728:	d512      	bpl.n	8002750 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800272c:	e000      	b.n	8002730 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002730:	4908      	ldr	r1, [pc, #32]	; (8002754 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002732:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002734:	0c92      	lsrs	r2, r2, #18
 8002736:	230f      	movs	r3, #15
 8002738:	4013      	ands	r3, r2
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002740:	68cb      	ldr	r3, [r1, #12]
 8002742:	0d9b      	lsrs	r3, r3, #22
 8002744:	2103      	movs	r1, #3
 8002746:	4019      	ands	r1, r3
 8002748:	3101      	adds	r1, #1
 800274a:	f7fd fcef 	bl	800012c <__udivsi3>
}
 800274e:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8002752:	e7ed      	b.n	8002730 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002754:	40021000 	.word	0x40021000
 8002758:	003d0900 	.word	0x003d0900
 800275c:	007a1200 	.word	0x007a1200
 8002760:	080034bc 	.word	0x080034bc
 8002764:	00f42400 	.word	0x00f42400

08002768 <RCC_GetSystemClockFreq>:
{
 8002768:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800276a:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <RCC_GetSystemClockFreq+0x60>)
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	230c      	movs	r3, #12
 8002770:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8002772:	2b08      	cmp	r3, #8
 8002774:	d023      	beq.n	80027be <RCC_GetSystemClockFreq+0x56>
 8002776:	d809      	bhi.n	800278c <RCC_GetSystemClockFreq+0x24>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00c      	beq.n	8002796 <RCC_GetSystemClockFreq+0x2e>
 800277c:	2b04      	cmp	r3, #4
 800277e:	d114      	bne.n	80027aa <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <RCC_GetSystemClockFreq+0x60>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	06db      	lsls	r3, r3, #27
 8002786:	d51c      	bpl.n	80027c2 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8002788:	4810      	ldr	r0, [pc, #64]	; (80027cc <RCC_GetSystemClockFreq+0x64>)
 800278a:	e019      	b.n	80027c0 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 800278c:	2b0c      	cmp	r3, #12
 800278e:	d10c      	bne.n	80027aa <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002790:	f7ff ffc2 	bl	8002718 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002794:	e014      	b.n	80027c0 <RCC_GetSystemClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <RCC_GetSystemClockFreq+0x60>)
 8002798:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800279a:	0b52      	lsrs	r2, r2, #13
 800279c:	2307      	movs	r3, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	3301      	adds	r3, #1
 80027a2:	2080      	movs	r0, #128	; 0x80
 80027a4:	0200      	lsls	r0, r0, #8
 80027a6:	4098      	lsls	r0, r3
      break;
 80027a8:	e00a      	b.n	80027c0 <RCC_GetSystemClockFreq+0x58>
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_GetSystemClockFreq+0x60>)
 80027ac:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027ae:	0b52      	lsrs	r2, r2, #13
 80027b0:	2307      	movs	r3, #7
 80027b2:	4013      	ands	r3, r2
 80027b4:	3301      	adds	r3, #1
 80027b6:	2080      	movs	r0, #128	; 0x80
 80027b8:	0200      	lsls	r0, r0, #8
 80027ba:	4098      	lsls	r0, r3
      break;
 80027bc:	e000      	b.n	80027c0 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 80027be:	4804      	ldr	r0, [pc, #16]	; (80027d0 <RCC_GetSystemClockFreq+0x68>)
}
 80027c0:	bd10      	pop	{r4, pc}
        frequency = HSI_VALUE;
 80027c2:	4804      	ldr	r0, [pc, #16]	; (80027d4 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 80027c4:	e7fc      	b.n	80027c0 <RCC_GetSystemClockFreq+0x58>
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000
 80027cc:	003d0900 	.word	0x003d0900
 80027d0:	007a1200 	.word	0x007a1200
 80027d4:	00f42400 	.word	0x00f42400

080027d8 <LL_RCC_GetUSARTClockFreq>:
{
 80027d8:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80027da:	280c      	cmp	r0, #12
 80027dc:	d001      	beq.n	80027e2 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80027de:	2000      	movs	r0, #0
}
 80027e0:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <LL_RCC_GetUSARTClockFreq+0x70>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4003      	ands	r3, r0
 80027e8:	0400      	lsls	r0, r0, #16
 80027ea:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <LL_RCC_GetUSARTClockFreq+0x74>)
 80027ee:	4298      	cmp	r0, r3
 80027f0:	d00f      	beq.n	8002812 <LL_RCC_GetUSARTClockFreq+0x3a>
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <LL_RCC_GetUSARTClockFreq+0x78>)
 80027f4:	4298      	cmp	r0, r3
 80027f6:	d019      	beq.n	800282c <LL_RCC_GetUSARTClockFreq+0x54>
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <LL_RCC_GetUSARTClockFreq+0x7c>)
 80027fa:	4298      	cmp	r0, r3
 80027fc:	d006      	beq.n	800280c <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027fe:	f7ff ffb3 	bl	8002768 <RCC_GetSystemClockFreq>
 8002802:	f7ff ff6d 	bl	80026e0 <RCC_GetHCLKClockFreq>
 8002806:	f7ff ff79 	bl	80026fc <RCC_GetPCLK1ClockFreq>
        break;
 800280a:	e7e9      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 800280c:	f7ff ffac 	bl	8002768 <RCC_GetSystemClockFreq>
        break;
 8002810:	e7e6      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <LL_RCC_GetUSARTClockFreq+0x70>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2204      	movs	r2, #4
 8002818:	0010      	movs	r0, r2
 800281a:	4018      	ands	r0, r3
 800281c:	421a      	tst	r2, r3
 800281e:	d0df      	beq.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002820:	4b09      	ldr	r3, [pc, #36]	; (8002848 <LL_RCC_GetUSARTClockFreq+0x70>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	06db      	lsls	r3, r3, #27
 8002826:	d40c      	bmi.n	8002842 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LL_RCC_GetUSARTClockFreq+0x80>)
 800282a:	e7d9      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <LL_RCC_GetUSARTClockFreq+0x70>)
 800282e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	0010      	movs	r0, r2
 8002836:	4018      	ands	r0, r3
 8002838:	421a      	tst	r2, r3
 800283a:	d0d1      	beq.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 800283c:	2080      	movs	r0, #128	; 0x80
 800283e:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8002840:	e7ce      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8002842:	4806      	ldr	r0, [pc, #24]	; (800285c <LL_RCC_GetUSARTClockFreq+0x84>)
 8002844:	e7cc      	b.n	80027e0 <LL_RCC_GetUSARTClockFreq+0x8>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	000c0008 	.word	0x000c0008
 8002850:	000c000c 	.word	0x000c000c
 8002854:	000c0004 	.word	0x000c0004
 8002858:	00f42400 	.word	0x00f42400
 800285c:	003d0900 	.word	0x003d0900

08002860 <LL_RCC_GetLPUARTClockFreq>:
{
 8002860:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4298      	cmp	r0, r3
 800286e:	d011      	beq.n	8002894 <LL_RCC_GetLPUARTClockFreq+0x34>
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4298      	cmp	r0, r3
 8002876:	d01a      	beq.n	80028ae <LL_RCC_GetLPUARTClockFreq+0x4e>
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4298      	cmp	r0, r3
 800287e:	d006      	beq.n	800288e <LL_RCC_GetLPUARTClockFreq+0x2e>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002880:	f7ff ff72 	bl	8002768 <RCC_GetSystemClockFreq>
 8002884:	f7ff ff2c 	bl	80026e0 <RCC_GetHCLKClockFreq>
 8002888:	f7ff ff38 	bl	80026fc <RCC_GetPCLK1ClockFreq>
      break;
 800288c:	e001      	b.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
      lpuart_frequency = RCC_GetSystemClockFreq();
 800288e:	f7ff ff6b 	bl	8002768 <RCC_GetSystemClockFreq>
}
 8002892:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	0010      	movs	r0, r2
 800289c:	4018      	ands	r0, r3
 800289e:	421a      	tst	r2, r3
 80028a0:	d0f7      	beq.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <LL_RCC_GetLPUARTClockFreq+0x68>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	06db      	lsls	r3, r3, #27
 80028a8:	d40c      	bmi.n	80028c4 <LL_RCC_GetLPUARTClockFreq+0x64>
          lpuart_frequency = HSI_VALUE;
 80028aa:	4808      	ldr	r0, [pc, #32]	; (80028cc <LL_RCC_GetLPUARTClockFreq+0x6c>)
 80028ac:	e7f1      	b.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <LL_RCC_GetLPUARTClockFreq+0x68>)
 80028b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	0010      	movs	r0, r2
 80028b8:	4018      	ands	r0, r3
 80028ba:	421a      	tst	r2, r3
 80028bc:	d0e9      	beq.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
        lpuart_frequency = LSE_VALUE;
 80028be:	2080      	movs	r0, #128	; 0x80
 80028c0:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 80028c2:	e7e6      	b.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
          lpuart_frequency = (HSI_VALUE >> 2U);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <LL_RCC_GetLPUARTClockFreq+0x70>)
 80028c6:	e7e4      	b.n	8002892 <LL_RCC_GetLPUARTClockFreq+0x32>
 80028c8:	40021000 	.word	0x40021000
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	003d0900 	.word	0x003d0900

080028d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80028d6:	6a03      	ldr	r3, [r0, #32]
 80028d8:	2401      	movs	r4, #1
 80028da:	43a3      	bics	r3, r4
 80028dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028de:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80028e0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80028e2:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80028e4:	2673      	movs	r6, #115	; 0x73
 80028e6:	43b2      	bics	r2, r6
 80028e8:	680e      	ldr	r6, [r1, #0]
 80028ea:	4332      	orrs	r2, r6

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80028ec:	2602      	movs	r6, #2
 80028ee:	43b3      	bics	r3, r6
 80028f0:	68ce      	ldr	r6, [r1, #12]
 80028f2:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80028f4:	43a3      	bics	r3, r4
 80028f6:	684c      	ldr	r4, [r1, #4]
 80028f8:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028fa:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028fc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80028fe:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002900:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002902:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002904:	2000      	movs	r0, #0
 8002906:	bd70      	pop	{r4, r5, r6, pc}

08002908 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002908:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800290a:	6a03      	ldr	r3, [r0, #32]
 800290c:	2610      	movs	r6, #16
 800290e:	43b3      	bics	r3, r6
 8002910:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002912:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002914:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002916:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <OC2Config+0x3c>)
 800291a:	4022      	ands	r2, r4
 800291c:	680c      	ldr	r4, [r1, #0]
 800291e:	0224      	lsls	r4, r4, #8
 8002920:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002922:	2420      	movs	r4, #32
 8002924:	43a3      	bics	r3, r4
 8002926:	68cc      	ldr	r4, [r1, #12]
 8002928:	0124      	lsls	r4, r4, #4
 800292a:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800292c:	43b3      	bics	r3, r6
 800292e:	684c      	ldr	r4, [r1, #4]
 8002930:	0124      	lsls	r4, r4, #4
 8002932:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002934:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002936:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002938:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800293a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800293c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800293e:	2000      	movs	r0, #0
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	ffff8cff 	.word	0xffff8cff

08002948 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002948:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800294a:	6a02      	ldr	r2, [r0, #32]
 800294c:	4e0c      	ldr	r6, [pc, #48]	; (8002980 <OC3Config+0x38>)
 800294e:	4032      	ands	r2, r6
 8002950:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002952:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002954:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002956:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002958:	2473      	movs	r4, #115	; 0x73
 800295a:	43a2      	bics	r2, r4
 800295c:	680c      	ldr	r4, [r1, #0]
 800295e:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002960:	4c08      	ldr	r4, [pc, #32]	; (8002984 <OC3Config+0x3c>)
 8002962:	4023      	ands	r3, r4
 8002964:	68cc      	ldr	r4, [r1, #12]
 8002966:	0224      	lsls	r4, r4, #8
 8002968:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800296a:	4033      	ands	r3, r6
 800296c:	684c      	ldr	r4, [r1, #4]
 800296e:	0224      	lsls	r4, r4, #8
 8002970:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002972:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002974:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002976:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002978:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800297a:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800297c:	2000      	movs	r0, #0
 800297e:	bd70      	pop	{r4, r5, r6, pc}
 8002980:	fffffeff 	.word	0xfffffeff
 8002984:	fffffdff 	.word	0xfffffdff

08002988 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002988:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800298a:	6a02      	ldr	r2, [r0, #32]
 800298c:	4e0d      	ldr	r6, [pc, #52]	; (80029c4 <OC4Config+0x3c>)
 800298e:	4032      	ands	r2, r6
 8002990:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002992:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002994:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002996:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <OC4Config+0x40>)
 800299a:	4022      	ands	r2, r4
 800299c:	680c      	ldr	r4, [r1, #0]
 800299e:	0224      	lsls	r4, r4, #8
 80029a0:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80029a2:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <OC4Config+0x44>)
 80029a4:	4023      	ands	r3, r4
 80029a6:	68cc      	ldr	r4, [r1, #12]
 80029a8:	0324      	lsls	r4, r4, #12
 80029aa:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80029ac:	4033      	ands	r3, r6
 80029ae:	684c      	ldr	r4, [r1, #4]
 80029b0:	0324      	lsls	r4, r4, #12
 80029b2:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029b4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029b6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80029b8:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80029ba:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029bc:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80029be:	2000      	movs	r0, #0
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	ffffefff 	.word	0xffffefff
 80029c8:	ffff8cff 	.word	0xffff8cff
 80029cc:	ffffdfff 	.word	0xffffdfff

080029d0 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80029d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	05d2      	lsls	r2, r2, #23
 80029d6:	4290      	cmp	r0, r2
 80029d8:	d005      	beq.n	80029e6 <LL_TIM_Init+0x16>
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <LL_TIM_Init+0x50>)
 80029dc:	4290      	cmp	r0, r2
 80029de:	d002      	beq.n	80029e6 <LL_TIM_Init+0x16>
 80029e0:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <LL_TIM_Init+0x54>)
 80029e2:	4290      	cmp	r0, r2
 80029e4:	d103      	bne.n	80029ee <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80029e6:	2270      	movs	r2, #112	; 0x70
 80029e8:	4393      	bics	r3, r2
 80029ea:	684a      	ldr	r2, [r1, #4]
 80029ec:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	05d2      	lsls	r2, r2, #23
 80029f2:	4290      	cmp	r0, r2
 80029f4:	d005      	beq.n	8002a02 <LL_TIM_Init+0x32>
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LL_TIM_Init+0x50>)
 80029f8:	4290      	cmp	r0, r2
 80029fa:	d002      	beq.n	8002a02 <LL_TIM_Init+0x32>
 80029fc:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <LL_TIM_Init+0x54>)
 80029fe:	4290      	cmp	r0, r2
 8002a00:	d103      	bne.n	8002a0a <LL_TIM_Init+0x3a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <LL_TIM_Init+0x58>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	68ca      	ldr	r2, [r1, #12]
 8002a08:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a0a:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a0c:	688b      	ldr	r3, [r1, #8]
 8002a0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002a10:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a12:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a14:	6943      	ldr	r3, [r0, #20]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	6143      	str	r3, [r0, #20]
}
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	4770      	bx	lr
 8002a20:	40010800 	.word	0x40010800
 8002a24:	40011400 	.word	0x40011400
 8002a28:	fffffcff 	.word	0xfffffcff

08002a2c <LL_TIM_OC_Init>:
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	000b      	movs	r3, r1
 8002a30:	0011      	movs	r1, r2
  switch (Channel)
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	0052      	lsls	r2, r2, #1
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d015      	beq.n	8002a66 <LL_TIM_OC_Init+0x3a>
 8002a3a:	d808      	bhi.n	8002a4e <LL_TIM_OC_Init+0x22>
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d00f      	beq.n	8002a60 <LL_TIM_OC_Init+0x34>
 8002a40:	2b10      	cmp	r3, #16
 8002a42:	d102      	bne.n	8002a4a <LL_TIM_OC_Init+0x1e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a44:	f7ff ff60 	bl	8002908 <OC2Config>
      break;
 8002a48:	e009      	b.n	8002a5e <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	e007      	b.n	8002a5e <LL_TIM_OC_Init+0x32>
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0152      	lsls	r2, r2, #5
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d102      	bne.n	8002a5c <LL_TIM_OC_Init+0x30>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a56:	f7ff ff97 	bl	8002988 <OC4Config>
      break;
 8002a5a:	e000      	b.n	8002a5e <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8002a5c:	2001      	movs	r0, #1
}
 8002a5e:	bd10      	pop	{r4, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a60:	f7ff ff38 	bl	80028d4 <OC1Config>
      break;
 8002a64:	e7fb      	b.n	8002a5e <LL_TIM_OC_Init+0x32>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a66:	f7ff ff6f 	bl	8002948 <OC3Config>
      break;
 8002a6a:	e7f8      	b.n	8002a5e <LL_TIM_OC_Init+0x32>

08002a6c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	0004      	movs	r4, r0
 8002a70:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a72:	6803      	ldr	r3, [r0, #0]
 8002a74:	07db      	lsls	r3, r3, #31
 8002a76:	d440      	bmi.n	8002afa <LL_USART_Init+0x8e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a78:	6803      	ldr	r3, [r0, #0]
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <LL_USART_Init+0x9c>)
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	684b      	ldr	r3, [r1, #4]
 8002a80:	68c9      	ldr	r1, [r1, #12]
 8002a82:	430b      	orrs	r3, r1
 8002a84:	6929      	ldr	r1, [r5, #16]
 8002a86:	430b      	orrs	r3, r1
 8002a88:	69a9      	ldr	r1, [r5, #24]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a90:	6843      	ldr	r3, [r0, #4]
 8002a92:	4a1e      	ldr	r2, [pc, #120]	; (8002b0c <LL_USART_Init+0xa0>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	68aa      	ldr	r2, [r5, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a9c:	6883      	ldr	r3, [r0, #8]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <LL_USART_Init+0xa4>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	696a      	ldr	r2, [r5, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <LL_USART_Init+0xa8>)
 8002aaa:	4298      	cmp	r0, r3
 8002aac:	d001      	beq.n	8002ab2 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8002aae:	2001      	movs	r0, #1
 8002ab0:	e024      	b.n	8002afc <LL_USART_Init+0x90>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002ab2:	200c      	movs	r0, #12
 8002ab4:	f7ff fe90 	bl	80027d8 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	d020      	beq.n	8002afe <LL_USART_Init+0x92>
        && (USART_InitStruct->BaudRate != 0U))
 8002abc:	6829      	ldr	r1, [r5, #0]
 8002abe:	2900      	cmp	r1, #0
 8002ac0:	d01f      	beq.n	8002b02 <LL_USART_Init+0x96>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8002ac2:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d008      	beq.n	8002ade <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002acc:	084b      	lsrs	r3, r1, #1
 8002ace:	18c0      	adds	r0, r0, r3
 8002ad0:	f7fd fb2c 	bl	800012c <__udivsi3>
 8002ad4:	0400      	lsls	r0, r0, #16
 8002ad6:	0c00      	lsrs	r0, r0, #16
 8002ad8:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8002ada:	2000      	movs	r0, #0
 8002adc:	e00e      	b.n	8002afc <LL_USART_Init+0x90>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ade:	0040      	lsls	r0, r0, #1
 8002ae0:	084b      	lsrs	r3, r1, #1
 8002ae2:	18c0      	adds	r0, r0, r3
 8002ae4:	f7fd fb22 	bl	800012c <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <LL_USART_Init+0xac>)
 8002aea:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aec:	0840      	lsrs	r0, r0, #1
 8002aee:	2207      	movs	r2, #7
 8002af0:	4010      	ands	r0, r2
 8002af2:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8002af4:	60e0      	str	r0, [r4, #12]
 8002af6:	2000      	movs	r0, #0
 8002af8:	e000      	b.n	8002afc <LL_USART_Init+0x90>
  ErrorStatus status = ERROR;
 8002afa:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8002afe:	2001      	movs	r0, #1
 8002b00:	e7fc      	b.n	8002afc <LL_USART_Init+0x90>
 8002b02:	2001      	movs	r0, #1
 8002b04:	e7fa      	b.n	8002afc <LL_USART_Init+0x90>
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	efff69f3 	.word	0xefff69f3
 8002b0c:	ffffcfff 	.word	0xffffcfff
 8002b10:	fffffcff 	.word	0xfffffcff
 8002b14:	40004400 	.word	0x40004400
 8002b18:	0000fff0 	.word	0x0000fff0

08002b1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b1c:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b1e:	21fa      	movs	r1, #250	; 0xfa
 8002b20:	0089      	lsls	r1, r1, #2
 8002b22:	f7fd fb03 	bl	800012c <__udivsi3>
 8002b26:	3801      	subs	r0, #1
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <LL_Init1msTick+0x1c>)
 8002b2a:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b30:	3205      	adds	r2, #5
 8002b32:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b3c:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LL_mDelay+0x24>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b44:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002b46:	1c43      	adds	r3, r0, #1
 8002b48:	d000      	beq.n	8002b4c <LL_mDelay+0x10>
  {
    Delay++;
 8002b4a:	3001      	adds	r0, #1
  }

  while (Delay)
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d005      	beq.n	8002b5c <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <LL_mDelay+0x24>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	03db      	lsls	r3, r3, #15
 8002b56:	d5f9      	bpl.n	8002b4c <LL_mDelay+0x10>
    {
      Delay--;
 8002b58:	3801      	subs	r0, #1
 8002b5a:	e7f7      	b.n	8002b4c <LL_mDelay+0x10>
    }
  }
}
 8002b5c:	b002      	add	sp, #8
 8002b5e:	4770      	bx	lr
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b64:	4b01      	ldr	r3, [pc, #4]	; (8002b6c <LL_SetSystemCoreClock+0x8>)
 8002b66:	6018      	str	r0, [r3, #0]
}
 8002b68:	4770      	bx	lr
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	2000001c 	.word	0x2000001c

08002b70 <__errno>:
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <__errno+0x8>)
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	4770      	bx	lr
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	20000028 	.word	0x20000028

08002b7c <__libc_init_array>:
 8002b7c:	b570      	push	{r4, r5, r6, lr}
 8002b7e:	2600      	movs	r6, #0
 8002b80:	4d0c      	ldr	r5, [pc, #48]	; (8002bb4 <__libc_init_array+0x38>)
 8002b82:	4c0d      	ldr	r4, [pc, #52]	; (8002bb8 <__libc_init_array+0x3c>)
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	42a6      	cmp	r6, r4
 8002b8a:	d109      	bne.n	8002ba0 <__libc_init_array+0x24>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	f000 fc5d 	bl	800344c <_init>
 8002b92:	4d0a      	ldr	r5, [pc, #40]	; (8002bbc <__libc_init_array+0x40>)
 8002b94:	4c0a      	ldr	r4, [pc, #40]	; (8002bc0 <__libc_init_array+0x44>)
 8002b96:	1b64      	subs	r4, r4, r5
 8002b98:	10a4      	asrs	r4, r4, #2
 8002b9a:	42a6      	cmp	r6, r4
 8002b9c:	d105      	bne.n	8002baa <__libc_init_array+0x2e>
 8002b9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ba0:	00b3      	lsls	r3, r6, #2
 8002ba2:	58eb      	ldr	r3, [r5, r3]
 8002ba4:	4798      	blx	r3
 8002ba6:	3601      	adds	r6, #1
 8002ba8:	e7ee      	b.n	8002b88 <__libc_init_array+0xc>
 8002baa:	00b3      	lsls	r3, r6, #2
 8002bac:	58eb      	ldr	r3, [r5, r3]
 8002bae:	4798      	blx	r3
 8002bb0:	3601      	adds	r6, #1
 8002bb2:	e7f2      	b.n	8002b9a <__libc_init_array+0x1e>
 8002bb4:	08003ac8 	.word	0x08003ac8
 8002bb8:	08003ac8 	.word	0x08003ac8
 8002bbc:	08003ac8 	.word	0x08003ac8
 8002bc0:	08003acc 	.word	0x08003acc

08002bc4 <memcpy>:
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	b510      	push	{r4, lr}
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d100      	bne.n	8002bce <memcpy+0xa>
 8002bcc:	bd10      	pop	{r4, pc}
 8002bce:	5ccc      	ldrb	r4, [r1, r3]
 8002bd0:	54c4      	strb	r4, [r0, r3]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	e7f8      	b.n	8002bc8 <memcpy+0x4>

08002bd6 <memset>:
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	1882      	adds	r2, r0, r2
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d100      	bne.n	8002be0 <memset+0xa>
 8002bde:	4770      	bx	lr
 8002be0:	7019      	strb	r1, [r3, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	e7f9      	b.n	8002bda <memset+0x4>

08002be6 <_vsniprintf_r>:
 8002be6:	b530      	push	{r4, r5, lr}
 8002be8:	0014      	movs	r4, r2
 8002bea:	0005      	movs	r5, r0
 8002bec:	001a      	movs	r2, r3
 8002bee:	b09b      	sub	sp, #108	; 0x6c
 8002bf0:	2c00      	cmp	r4, #0
 8002bf2:	da05      	bge.n	8002c00 <_vsniprintf_r+0x1a>
 8002bf4:	238b      	movs	r3, #139	; 0x8b
 8002bf6:	6003      	str	r3, [r0, #0]
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	4240      	negs	r0, r0
 8002bfc:	b01b      	add	sp, #108	; 0x6c
 8002bfe:	bd30      	pop	{r4, r5, pc}
 8002c00:	2382      	movs	r3, #130	; 0x82
 8002c02:	4668      	mov	r0, sp
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	8183      	strh	r3, [r0, #12]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9100      	str	r1, [sp, #0]
 8002c0c:	9104      	str	r1, [sp, #16]
 8002c0e:	429c      	cmp	r4, r3
 8002c10:	d000      	beq.n	8002c14 <_vsniprintf_r+0x2e>
 8002c12:	1e63      	subs	r3, r4, #1
 8002c14:	9302      	str	r3, [sp, #8]
 8002c16:	9305      	str	r3, [sp, #20]
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4669      	mov	r1, sp
 8002c1c:	425b      	negs	r3, r3
 8002c1e:	81cb      	strh	r3, [r1, #14]
 8002c20:	0028      	movs	r0, r5
 8002c22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c24:	f000 f878 	bl	8002d18 <_svfiprintf_r>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	da01      	bge.n	8002c30 <_vsniprintf_r+0x4a>
 8002c2c:	238b      	movs	r3, #139	; 0x8b
 8002c2e:	602b      	str	r3, [r5, #0]
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	d0e3      	beq.n	8002bfc <_vsniprintf_r+0x16>
 8002c34:	2300      	movs	r3, #0
 8002c36:	9a00      	ldr	r2, [sp, #0]
 8002c38:	7013      	strb	r3, [r2, #0]
 8002c3a:	e7df      	b.n	8002bfc <_vsniprintf_r+0x16>

08002c3c <vsniprintf>:
 8002c3c:	b507      	push	{r0, r1, r2, lr}
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	0013      	movs	r3, r2
 8002c42:	000a      	movs	r2, r1
 8002c44:	0001      	movs	r1, r0
 8002c46:	4802      	ldr	r0, [pc, #8]	; (8002c50 <vsniprintf+0x14>)
 8002c48:	6800      	ldr	r0, [r0, #0]
 8002c4a:	f7ff ffcc 	bl	8002be6 <_vsniprintf_r>
 8002c4e:	bd0e      	pop	{r1, r2, r3, pc}
 8002c50:	20000028 	.word	0x20000028

08002c54 <__ssputs_r>:
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	688e      	ldr	r6, [r1, #8]
 8002c58:	b085      	sub	sp, #20
 8002c5a:	0007      	movs	r7, r0
 8002c5c:	000c      	movs	r4, r1
 8002c5e:	9203      	str	r2, [sp, #12]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	429e      	cmp	r6, r3
 8002c64:	d83c      	bhi.n	8002ce0 <__ssputs_r+0x8c>
 8002c66:	2390      	movs	r3, #144	; 0x90
 8002c68:	898a      	ldrh	r2, [r1, #12]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	421a      	tst	r2, r3
 8002c6e:	d034      	beq.n	8002cda <__ssputs_r+0x86>
 8002c70:	2503      	movs	r5, #3
 8002c72:	6909      	ldr	r1, [r1, #16]
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	1a5b      	subs	r3, r3, r1
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	6963      	ldr	r3, [r4, #20]
 8002c7c:	9802      	ldr	r0, [sp, #8]
 8002c7e:	435d      	muls	r5, r3
 8002c80:	0feb      	lsrs	r3, r5, #31
 8002c82:	195d      	adds	r5, r3, r5
 8002c84:	9b01      	ldr	r3, [sp, #4]
 8002c86:	106d      	asrs	r5, r5, #1
 8002c88:	3301      	adds	r3, #1
 8002c8a:	181b      	adds	r3, r3, r0
 8002c8c:	42ab      	cmp	r3, r5
 8002c8e:	d900      	bls.n	8002c92 <__ssputs_r+0x3e>
 8002c90:	001d      	movs	r5, r3
 8002c92:	0553      	lsls	r3, r2, #21
 8002c94:	d532      	bpl.n	8002cfc <__ssputs_r+0xa8>
 8002c96:	0029      	movs	r1, r5
 8002c98:	0038      	movs	r0, r7
 8002c9a:	f000 fb27 	bl	80032ec <_malloc_r>
 8002c9e:	1e06      	subs	r6, r0, #0
 8002ca0:	d109      	bne.n	8002cb6 <__ssputs_r+0x62>
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	2001      	movs	r0, #1
 8002caa:	89a2      	ldrh	r2, [r4, #12]
 8002cac:	4240      	negs	r0, r0
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	81a3      	strh	r3, [r4, #12]
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb6:	9a02      	ldr	r2, [sp, #8]
 8002cb8:	6921      	ldr	r1, [r4, #16]
 8002cba:	f7ff ff83 	bl	8002bc4 <memcpy>
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <__ssputs_r+0xc0>)
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	81a3      	strh	r3, [r4, #12]
 8002cca:	9b02      	ldr	r3, [sp, #8]
 8002ccc:	6126      	str	r6, [r4, #16]
 8002cce:	18f6      	adds	r6, r6, r3
 8002cd0:	6026      	str	r6, [r4, #0]
 8002cd2:	6165      	str	r5, [r4, #20]
 8002cd4:	9e01      	ldr	r6, [sp, #4]
 8002cd6:	1aed      	subs	r5, r5, r3
 8002cd8:	60a5      	str	r5, [r4, #8]
 8002cda:	9b01      	ldr	r3, [sp, #4]
 8002cdc:	429e      	cmp	r6, r3
 8002cde:	d900      	bls.n	8002ce2 <__ssputs_r+0x8e>
 8002ce0:	9e01      	ldr	r6, [sp, #4]
 8002ce2:	0032      	movs	r2, r6
 8002ce4:	9903      	ldr	r1, [sp, #12]
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	f000 faa3 	bl	8003232 <memmove>
 8002cec:	68a3      	ldr	r3, [r4, #8]
 8002cee:	2000      	movs	r0, #0
 8002cf0:	1b9b      	subs	r3, r3, r6
 8002cf2:	60a3      	str	r3, [r4, #8]
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	199e      	adds	r6, r3, r6
 8002cf8:	6026      	str	r6, [r4, #0]
 8002cfa:	e7da      	b.n	8002cb2 <__ssputs_r+0x5e>
 8002cfc:	002a      	movs	r2, r5
 8002cfe:	0038      	movs	r0, r7
 8002d00:	f000 fb52 	bl	80033a8 <_realloc_r>
 8002d04:	1e06      	subs	r6, r0, #0
 8002d06:	d1e0      	bne.n	8002cca <__ssputs_r+0x76>
 8002d08:	0038      	movs	r0, r7
 8002d0a:	6921      	ldr	r1, [r4, #16]
 8002d0c:	f000 faa4 	bl	8003258 <_free_r>
 8002d10:	e7c7      	b.n	8002ca2 <__ssputs_r+0x4e>
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	fffffb7f 	.word	0xfffffb7f

08002d18 <_svfiprintf_r>:
 8002d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1a:	b0a1      	sub	sp, #132	; 0x84
 8002d1c:	9003      	str	r0, [sp, #12]
 8002d1e:	001d      	movs	r5, r3
 8002d20:	898b      	ldrh	r3, [r1, #12]
 8002d22:	000f      	movs	r7, r1
 8002d24:	0016      	movs	r6, r2
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	d511      	bpl.n	8002d4e <_svfiprintf_r+0x36>
 8002d2a:	690b      	ldr	r3, [r1, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10e      	bne.n	8002d4e <_svfiprintf_r+0x36>
 8002d30:	2140      	movs	r1, #64	; 0x40
 8002d32:	f000 fadb 	bl	80032ec <_malloc_r>
 8002d36:	6038      	str	r0, [r7, #0]
 8002d38:	6138      	str	r0, [r7, #16]
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d105      	bne.n	8002d4a <_svfiprintf_r+0x32>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	9a03      	ldr	r2, [sp, #12]
 8002d42:	3801      	subs	r0, #1
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	b021      	add	sp, #132	; 0x84
 8002d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d4a:	2340      	movs	r3, #64	; 0x40
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	ac08      	add	r4, sp, #32
 8002d52:	6163      	str	r3, [r4, #20]
 8002d54:	3320      	adds	r3, #32
 8002d56:	7663      	strb	r3, [r4, #25]
 8002d58:	3310      	adds	r3, #16
 8002d5a:	76a3      	strb	r3, [r4, #26]
 8002d5c:	9507      	str	r5, [sp, #28]
 8002d5e:	0035      	movs	r5, r6
 8002d60:	782b      	ldrb	r3, [r5, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <_svfiprintf_r+0x52>
 8002d66:	2b25      	cmp	r3, #37	; 0x25
 8002d68:	d147      	bne.n	8002dfa <_svfiprintf_r+0xe2>
 8002d6a:	1bab      	subs	r3, r5, r6
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	42b5      	cmp	r5, r6
 8002d70:	d00c      	beq.n	8002d8c <_svfiprintf_r+0x74>
 8002d72:	0032      	movs	r2, r6
 8002d74:	0039      	movs	r1, r7
 8002d76:	9803      	ldr	r0, [sp, #12]
 8002d78:	f7ff ff6c 	bl	8002c54 <__ssputs_r>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d100      	bne.n	8002d82 <_svfiprintf_r+0x6a>
 8002d80:	e0ae      	b.n	8002ee0 <_svfiprintf_r+0x1c8>
 8002d82:	6962      	ldr	r2, [r4, #20]
 8002d84:	9b05      	ldr	r3, [sp, #20]
 8002d86:	4694      	mov	ip, r2
 8002d88:	4463      	add	r3, ip
 8002d8a:	6163      	str	r3, [r4, #20]
 8002d8c:	782b      	ldrb	r3, [r5, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d100      	bne.n	8002d94 <_svfiprintf_r+0x7c>
 8002d92:	e0a5      	b.n	8002ee0 <_svfiprintf_r+0x1c8>
 8002d94:	2201      	movs	r2, #1
 8002d96:	2300      	movs	r3, #0
 8002d98:	4252      	negs	r2, r2
 8002d9a:	6062      	str	r2, [r4, #4]
 8002d9c:	a904      	add	r1, sp, #16
 8002d9e:	3254      	adds	r2, #84	; 0x54
 8002da0:	1852      	adds	r2, r2, r1
 8002da2:	1c6e      	adds	r6, r5, #1
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	60e3      	str	r3, [r4, #12]
 8002da8:	60a3      	str	r3, [r4, #8]
 8002daa:	7013      	strb	r3, [r2, #0]
 8002dac:	65a3      	str	r3, [r4, #88]	; 0x58
 8002dae:	2205      	movs	r2, #5
 8002db0:	7831      	ldrb	r1, [r6, #0]
 8002db2:	4854      	ldr	r0, [pc, #336]	; (8002f04 <_svfiprintf_r+0x1ec>)
 8002db4:	f000 fa32 	bl	800321c <memchr>
 8002db8:	1c75      	adds	r5, r6, #1
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	d11f      	bne.n	8002dfe <_svfiprintf_r+0xe6>
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	06d3      	lsls	r3, r2, #27
 8002dc2:	d504      	bpl.n	8002dce <_svfiprintf_r+0xb6>
 8002dc4:	2353      	movs	r3, #83	; 0x53
 8002dc6:	a904      	add	r1, sp, #16
 8002dc8:	185b      	adds	r3, r3, r1
 8002dca:	2120      	movs	r1, #32
 8002dcc:	7019      	strb	r1, [r3, #0]
 8002dce:	0713      	lsls	r3, r2, #28
 8002dd0:	d504      	bpl.n	8002ddc <_svfiprintf_r+0xc4>
 8002dd2:	2353      	movs	r3, #83	; 0x53
 8002dd4:	a904      	add	r1, sp, #16
 8002dd6:	185b      	adds	r3, r3, r1
 8002dd8:	212b      	movs	r1, #43	; 0x2b
 8002dda:	7019      	strb	r1, [r3, #0]
 8002ddc:	7833      	ldrb	r3, [r6, #0]
 8002dde:	2b2a      	cmp	r3, #42	; 0x2a
 8002de0:	d016      	beq.n	8002e10 <_svfiprintf_r+0xf8>
 8002de2:	0035      	movs	r5, r6
 8002de4:	2100      	movs	r1, #0
 8002de6:	200a      	movs	r0, #10
 8002de8:	68e3      	ldr	r3, [r4, #12]
 8002dea:	782a      	ldrb	r2, [r5, #0]
 8002dec:	1c6e      	adds	r6, r5, #1
 8002dee:	3a30      	subs	r2, #48	; 0x30
 8002df0:	2a09      	cmp	r2, #9
 8002df2:	d94e      	bls.n	8002e92 <_svfiprintf_r+0x17a>
 8002df4:	2900      	cmp	r1, #0
 8002df6:	d111      	bne.n	8002e1c <_svfiprintf_r+0x104>
 8002df8:	e017      	b.n	8002e2a <_svfiprintf_r+0x112>
 8002dfa:	3501      	adds	r5, #1
 8002dfc:	e7b0      	b.n	8002d60 <_svfiprintf_r+0x48>
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <_svfiprintf_r+0x1ec>)
 8002e00:	6822      	ldr	r2, [r4, #0]
 8002e02:	1ac0      	subs	r0, r0, r3
 8002e04:	2301      	movs	r3, #1
 8002e06:	4083      	lsls	r3, r0
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	002e      	movs	r6, r5
 8002e0c:	6023      	str	r3, [r4, #0]
 8002e0e:	e7ce      	b.n	8002dae <_svfiprintf_r+0x96>
 8002e10:	9b07      	ldr	r3, [sp, #28]
 8002e12:	1d19      	adds	r1, r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	9107      	str	r1, [sp, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db01      	blt.n	8002e20 <_svfiprintf_r+0x108>
 8002e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e1e:	e004      	b.n	8002e2a <_svfiprintf_r+0x112>
 8002e20:	425b      	negs	r3, r3
 8002e22:	60e3      	str	r3, [r4, #12]
 8002e24:	2302      	movs	r3, #2
 8002e26:	4313      	orrs	r3, r2
 8002e28:	6023      	str	r3, [r4, #0]
 8002e2a:	782b      	ldrb	r3, [r5, #0]
 8002e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e2e:	d10a      	bne.n	8002e46 <_svfiprintf_r+0x12e>
 8002e30:	786b      	ldrb	r3, [r5, #1]
 8002e32:	2b2a      	cmp	r3, #42	; 0x2a
 8002e34:	d135      	bne.n	8002ea2 <_svfiprintf_r+0x18a>
 8002e36:	9b07      	ldr	r3, [sp, #28]
 8002e38:	3502      	adds	r5, #2
 8002e3a:	1d1a      	adds	r2, r3, #4
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	9207      	str	r2, [sp, #28]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db2b      	blt.n	8002e9c <_svfiprintf_r+0x184>
 8002e44:	9309      	str	r3, [sp, #36]	; 0x24
 8002e46:	4e30      	ldr	r6, [pc, #192]	; (8002f08 <_svfiprintf_r+0x1f0>)
 8002e48:	2203      	movs	r2, #3
 8002e4a:	0030      	movs	r0, r6
 8002e4c:	7829      	ldrb	r1, [r5, #0]
 8002e4e:	f000 f9e5 	bl	800321c <memchr>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d006      	beq.n	8002e64 <_svfiprintf_r+0x14c>
 8002e56:	2340      	movs	r3, #64	; 0x40
 8002e58:	1b80      	subs	r0, r0, r6
 8002e5a:	4083      	lsls	r3, r0
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	3501      	adds	r5, #1
 8002e60:	4313      	orrs	r3, r2
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	7829      	ldrb	r1, [r5, #0]
 8002e66:	2206      	movs	r2, #6
 8002e68:	4828      	ldr	r0, [pc, #160]	; (8002f0c <_svfiprintf_r+0x1f4>)
 8002e6a:	1c6e      	adds	r6, r5, #1
 8002e6c:	7621      	strb	r1, [r4, #24]
 8002e6e:	f000 f9d5 	bl	800321c <memchr>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d03c      	beq.n	8002ef0 <_svfiprintf_r+0x1d8>
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <_svfiprintf_r+0x1f8>)
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d125      	bne.n	8002ec8 <_svfiprintf_r+0x1b0>
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	9b07      	ldr	r3, [sp, #28]
 8002e80:	3307      	adds	r3, #7
 8002e82:	4393      	bics	r3, r2
 8002e84:	3308      	adds	r3, #8
 8002e86:	9307      	str	r3, [sp, #28]
 8002e88:	6963      	ldr	r3, [r4, #20]
 8002e8a:	9a04      	ldr	r2, [sp, #16]
 8002e8c:	189b      	adds	r3, r3, r2
 8002e8e:	6163      	str	r3, [r4, #20]
 8002e90:	e765      	b.n	8002d5e <_svfiprintf_r+0x46>
 8002e92:	4343      	muls	r3, r0
 8002e94:	0035      	movs	r5, r6
 8002e96:	2101      	movs	r1, #1
 8002e98:	189b      	adds	r3, r3, r2
 8002e9a:	e7a6      	b.n	8002dea <_svfiprintf_r+0xd2>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	e7d0      	b.n	8002e44 <_svfiprintf_r+0x12c>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	200a      	movs	r0, #10
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	6063      	str	r3, [r4, #4]
 8002eac:	7829      	ldrb	r1, [r5, #0]
 8002eae:	1c6e      	adds	r6, r5, #1
 8002eb0:	3930      	subs	r1, #48	; 0x30
 8002eb2:	2909      	cmp	r1, #9
 8002eb4:	d903      	bls.n	8002ebe <_svfiprintf_r+0x1a6>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0c5      	beq.n	8002e46 <_svfiprintf_r+0x12e>
 8002eba:	9209      	str	r2, [sp, #36]	; 0x24
 8002ebc:	e7c3      	b.n	8002e46 <_svfiprintf_r+0x12e>
 8002ebe:	4342      	muls	r2, r0
 8002ec0:	0035      	movs	r5, r6
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	1852      	adds	r2, r2, r1
 8002ec6:	e7f1      	b.n	8002eac <_svfiprintf_r+0x194>
 8002ec8:	ab07      	add	r3, sp, #28
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	003a      	movs	r2, r7
 8002ece:	0021      	movs	r1, r4
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <_svfiprintf_r+0x1fc>)
 8002ed2:	9803      	ldr	r0, [sp, #12]
 8002ed4:	e000      	b.n	8002ed8 <_svfiprintf_r+0x1c0>
 8002ed6:	bf00      	nop
 8002ed8:	9004      	str	r0, [sp, #16]
 8002eda:	9b04      	ldr	r3, [sp, #16]
 8002edc:	3301      	adds	r3, #1
 8002ede:	d1d3      	bne.n	8002e88 <_svfiprintf_r+0x170>
 8002ee0:	89bb      	ldrh	r3, [r7, #12]
 8002ee2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ee4:	065b      	lsls	r3, r3, #25
 8002ee6:	d400      	bmi.n	8002eea <_svfiprintf_r+0x1d2>
 8002ee8:	e72d      	b.n	8002d46 <_svfiprintf_r+0x2e>
 8002eea:	2001      	movs	r0, #1
 8002eec:	4240      	negs	r0, r0
 8002eee:	e72a      	b.n	8002d46 <_svfiprintf_r+0x2e>
 8002ef0:	ab07      	add	r3, sp, #28
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	003a      	movs	r2, r7
 8002ef6:	0021      	movs	r1, r4
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <_svfiprintf_r+0x1fc>)
 8002efa:	9803      	ldr	r0, [sp, #12]
 8002efc:	f000 f87c 	bl	8002ff8 <_printf_i>
 8002f00:	e7ea      	b.n	8002ed8 <_svfiprintf_r+0x1c0>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	08003a8b 	.word	0x08003a8b
 8002f08:	08003a91 	.word	0x08003a91
 8002f0c:	08003a95 	.word	0x08003a95
 8002f10:	00000000 	.word	0x00000000
 8002f14:	08002c55 	.word	0x08002c55

08002f18 <_printf_common>:
 8002f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f1a:	0015      	movs	r5, r2
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	688a      	ldr	r2, [r1, #8]
 8002f20:	690b      	ldr	r3, [r1, #16]
 8002f22:	000c      	movs	r4, r1
 8002f24:	9000      	str	r0, [sp, #0]
 8002f26:	4293      	cmp	r3, r2
 8002f28:	da00      	bge.n	8002f2c <_printf_common+0x14>
 8002f2a:	0013      	movs	r3, r2
 8002f2c:	0022      	movs	r2, r4
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	3243      	adds	r2, #67	; 0x43
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d001      	beq.n	8002f3c <_printf_common+0x24>
 8002f38:	3301      	adds	r3, #1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	d502      	bpl.n	8002f48 <_printf_common+0x30>
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	3302      	adds	r3, #2
 8002f46:	602b      	str	r3, [r5, #0]
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	0017      	movs	r7, r2
 8002f4e:	401f      	ands	r7, r3
 8002f50:	421a      	tst	r2, r3
 8002f52:	d027      	beq.n	8002fa4 <_printf_common+0x8c>
 8002f54:	0023      	movs	r3, r4
 8002f56:	3343      	adds	r3, #67	; 0x43
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	1e5a      	subs	r2, r3, #1
 8002f5c:	4193      	sbcs	r3, r2
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	0692      	lsls	r2, r2, #26
 8002f62:	d430      	bmi.n	8002fc6 <_printf_common+0xae>
 8002f64:	0022      	movs	r2, r4
 8002f66:	9901      	ldr	r1, [sp, #4]
 8002f68:	9800      	ldr	r0, [sp, #0]
 8002f6a:	9e08      	ldr	r6, [sp, #32]
 8002f6c:	3243      	adds	r2, #67	; 0x43
 8002f6e:	47b0      	blx	r6
 8002f70:	1c43      	adds	r3, r0, #1
 8002f72:	d025      	beq.n	8002fc0 <_printf_common+0xa8>
 8002f74:	2306      	movs	r3, #6
 8002f76:	6820      	ldr	r0, [r4, #0]
 8002f78:	682a      	ldr	r2, [r5, #0]
 8002f7a:	68e1      	ldr	r1, [r4, #12]
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	4003      	ands	r3, r0
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d103      	bne.n	8002f8c <_printf_common+0x74>
 8002f84:	1a8d      	subs	r5, r1, r2
 8002f86:	43eb      	mvns	r3, r5
 8002f88:	17db      	asrs	r3, r3, #31
 8002f8a:	401d      	ands	r5, r3
 8002f8c:	68a3      	ldr	r3, [r4, #8]
 8002f8e:	6922      	ldr	r2, [r4, #16]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	dd01      	ble.n	8002f98 <_printf_common+0x80>
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	18ed      	adds	r5, r5, r3
 8002f98:	2700      	movs	r7, #0
 8002f9a:	42bd      	cmp	r5, r7
 8002f9c:	d120      	bne.n	8002fe0 <_printf_common+0xc8>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e010      	b.n	8002fc4 <_printf_common+0xac>
 8002fa2:	3701      	adds	r7, #1
 8002fa4:	68e3      	ldr	r3, [r4, #12]
 8002fa6:	682a      	ldr	r2, [r5, #0]
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	42bb      	cmp	r3, r7
 8002fac:	ddd2      	ble.n	8002f54 <_printf_common+0x3c>
 8002fae:	0022      	movs	r2, r4
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9901      	ldr	r1, [sp, #4]
 8002fb4:	9800      	ldr	r0, [sp, #0]
 8002fb6:	9e08      	ldr	r6, [sp, #32]
 8002fb8:	3219      	adds	r2, #25
 8002fba:	47b0      	blx	r6
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	d1f0      	bne.n	8002fa2 <_printf_common+0x8a>
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	4240      	negs	r0, r0
 8002fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fc6:	2030      	movs	r0, #48	; 0x30
 8002fc8:	18e1      	adds	r1, r4, r3
 8002fca:	3143      	adds	r1, #67	; 0x43
 8002fcc:	7008      	strb	r0, [r1, #0]
 8002fce:	0021      	movs	r1, r4
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	3145      	adds	r1, #69	; 0x45
 8002fd4:	7809      	ldrb	r1, [r1, #0]
 8002fd6:	18a2      	adds	r2, r4, r2
 8002fd8:	3243      	adds	r2, #67	; 0x43
 8002fda:	3302      	adds	r3, #2
 8002fdc:	7011      	strb	r1, [r2, #0]
 8002fde:	e7c1      	b.n	8002f64 <_printf_common+0x4c>
 8002fe0:	0022      	movs	r2, r4
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9901      	ldr	r1, [sp, #4]
 8002fe6:	9800      	ldr	r0, [sp, #0]
 8002fe8:	9e08      	ldr	r6, [sp, #32]
 8002fea:	321a      	adds	r2, #26
 8002fec:	47b0      	blx	r6
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d0e6      	beq.n	8002fc0 <_printf_common+0xa8>
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	e7d1      	b.n	8002f9a <_printf_common+0x82>
	...

08002ff8 <_printf_i>:
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffa:	b08b      	sub	sp, #44	; 0x2c
 8002ffc:	9206      	str	r2, [sp, #24]
 8002ffe:	000a      	movs	r2, r1
 8003000:	3243      	adds	r2, #67	; 0x43
 8003002:	9307      	str	r3, [sp, #28]
 8003004:	9005      	str	r0, [sp, #20]
 8003006:	9204      	str	r2, [sp, #16]
 8003008:	7e0a      	ldrb	r2, [r1, #24]
 800300a:	000c      	movs	r4, r1
 800300c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800300e:	2a78      	cmp	r2, #120	; 0x78
 8003010:	d806      	bhi.n	8003020 <_printf_i+0x28>
 8003012:	2a62      	cmp	r2, #98	; 0x62
 8003014:	d808      	bhi.n	8003028 <_printf_i+0x30>
 8003016:	2a00      	cmp	r2, #0
 8003018:	d100      	bne.n	800301c <_printf_i+0x24>
 800301a:	e0c0      	b.n	800319e <_printf_i+0x1a6>
 800301c:	2a58      	cmp	r2, #88	; 0x58
 800301e:	d052      	beq.n	80030c6 <_printf_i+0xce>
 8003020:	0026      	movs	r6, r4
 8003022:	3642      	adds	r6, #66	; 0x42
 8003024:	7032      	strb	r2, [r6, #0]
 8003026:	e022      	b.n	800306e <_printf_i+0x76>
 8003028:	0010      	movs	r0, r2
 800302a:	3863      	subs	r0, #99	; 0x63
 800302c:	2815      	cmp	r0, #21
 800302e:	d8f7      	bhi.n	8003020 <_printf_i+0x28>
 8003030:	f7fd f872 	bl	8000118 <__gnu_thumb1_case_shi>
 8003034:	001f0016 	.word	0x001f0016
 8003038:	fff6fff6 	.word	0xfff6fff6
 800303c:	fff6fff6 	.word	0xfff6fff6
 8003040:	fff6001f 	.word	0xfff6001f
 8003044:	fff6fff6 	.word	0xfff6fff6
 8003048:	00a8fff6 	.word	0x00a8fff6
 800304c:	009a0036 	.word	0x009a0036
 8003050:	fff6fff6 	.word	0xfff6fff6
 8003054:	fff600b9 	.word	0xfff600b9
 8003058:	fff60036 	.word	0xfff60036
 800305c:	009efff6 	.word	0x009efff6
 8003060:	0026      	movs	r6, r4
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	3642      	adds	r6, #66	; 0x42
 8003066:	1d11      	adds	r1, r2, #4
 8003068:	6019      	str	r1, [r3, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	7033      	strb	r3, [r6, #0]
 800306e:	2301      	movs	r3, #1
 8003070:	e0a7      	b.n	80031c2 <_printf_i+0x1ca>
 8003072:	6808      	ldr	r0, [r1, #0]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	1d0a      	adds	r2, r1, #4
 8003078:	0605      	lsls	r5, r0, #24
 800307a:	d50b      	bpl.n	8003094 <_printf_i+0x9c>
 800307c:	680d      	ldr	r5, [r1, #0]
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	2d00      	cmp	r5, #0
 8003082:	da03      	bge.n	800308c <_printf_i+0x94>
 8003084:	232d      	movs	r3, #45	; 0x2d
 8003086:	9a04      	ldr	r2, [sp, #16]
 8003088:	426d      	negs	r5, r5
 800308a:	7013      	strb	r3, [r2, #0]
 800308c:	4b61      	ldr	r3, [pc, #388]	; (8003214 <_printf_i+0x21c>)
 800308e:	270a      	movs	r7, #10
 8003090:	9303      	str	r3, [sp, #12]
 8003092:	e032      	b.n	80030fa <_printf_i+0x102>
 8003094:	680d      	ldr	r5, [r1, #0]
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	0641      	lsls	r1, r0, #25
 800309a:	d5f1      	bpl.n	8003080 <_printf_i+0x88>
 800309c:	b22d      	sxth	r5, r5
 800309e:	e7ef      	b.n	8003080 <_printf_i+0x88>
 80030a0:	680d      	ldr	r5, [r1, #0]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	1d08      	adds	r0, r1, #4
 80030a6:	6018      	str	r0, [r3, #0]
 80030a8:	062e      	lsls	r6, r5, #24
 80030aa:	d501      	bpl.n	80030b0 <_printf_i+0xb8>
 80030ac:	680d      	ldr	r5, [r1, #0]
 80030ae:	e003      	b.n	80030b8 <_printf_i+0xc0>
 80030b0:	066d      	lsls	r5, r5, #25
 80030b2:	d5fb      	bpl.n	80030ac <_printf_i+0xb4>
 80030b4:	680d      	ldr	r5, [r1, #0]
 80030b6:	b2ad      	uxth	r5, r5
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <_printf_i+0x21c>)
 80030ba:	270a      	movs	r7, #10
 80030bc:	9303      	str	r3, [sp, #12]
 80030be:	2a6f      	cmp	r2, #111	; 0x6f
 80030c0:	d117      	bne.n	80030f2 <_printf_i+0xfa>
 80030c2:	2708      	movs	r7, #8
 80030c4:	e015      	b.n	80030f2 <_printf_i+0xfa>
 80030c6:	3145      	adds	r1, #69	; 0x45
 80030c8:	700a      	strb	r2, [r1, #0]
 80030ca:	4a52      	ldr	r2, [pc, #328]	; (8003214 <_printf_i+0x21c>)
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	6821      	ldr	r1, [r4, #0]
 80030d2:	ca20      	ldmia	r2!, {r5}
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	0608      	lsls	r0, r1, #24
 80030d8:	d550      	bpl.n	800317c <_printf_i+0x184>
 80030da:	07cb      	lsls	r3, r1, #31
 80030dc:	d502      	bpl.n	80030e4 <_printf_i+0xec>
 80030de:	2320      	movs	r3, #32
 80030e0:	4319      	orrs	r1, r3
 80030e2:	6021      	str	r1, [r4, #0]
 80030e4:	2710      	movs	r7, #16
 80030e6:	2d00      	cmp	r5, #0
 80030e8:	d103      	bne.n	80030f2 <_printf_i+0xfa>
 80030ea:	2320      	movs	r3, #32
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	439a      	bics	r2, r3
 80030f0:	6022      	str	r2, [r4, #0]
 80030f2:	0023      	movs	r3, r4
 80030f4:	2200      	movs	r2, #0
 80030f6:	3343      	adds	r3, #67	; 0x43
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	60a3      	str	r3, [r4, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	db03      	blt.n	800310a <_printf_i+0x112>
 8003102:	2204      	movs	r2, #4
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	4391      	bics	r1, r2
 8003108:	6021      	str	r1, [r4, #0]
 800310a:	2d00      	cmp	r5, #0
 800310c:	d102      	bne.n	8003114 <_printf_i+0x11c>
 800310e:	9e04      	ldr	r6, [sp, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00c      	beq.n	800312e <_printf_i+0x136>
 8003114:	9e04      	ldr	r6, [sp, #16]
 8003116:	0028      	movs	r0, r5
 8003118:	0039      	movs	r1, r7
 800311a:	f7fd f88d 	bl	8000238 <__aeabi_uidivmod>
 800311e:	9b03      	ldr	r3, [sp, #12]
 8003120:	3e01      	subs	r6, #1
 8003122:	5c5b      	ldrb	r3, [r3, r1]
 8003124:	7033      	strb	r3, [r6, #0]
 8003126:	002b      	movs	r3, r5
 8003128:	0005      	movs	r5, r0
 800312a:	429f      	cmp	r7, r3
 800312c:	d9f3      	bls.n	8003116 <_printf_i+0x11e>
 800312e:	2f08      	cmp	r7, #8
 8003130:	d109      	bne.n	8003146 <_printf_i+0x14e>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d506      	bpl.n	8003146 <_printf_i+0x14e>
 8003138:	6863      	ldr	r3, [r4, #4]
 800313a:	6922      	ldr	r2, [r4, #16]
 800313c:	4293      	cmp	r3, r2
 800313e:	dc02      	bgt.n	8003146 <_printf_i+0x14e>
 8003140:	2330      	movs	r3, #48	; 0x30
 8003142:	3e01      	subs	r6, #1
 8003144:	7033      	strb	r3, [r6, #0]
 8003146:	9b04      	ldr	r3, [sp, #16]
 8003148:	1b9b      	subs	r3, r3, r6
 800314a:	6123      	str	r3, [r4, #16]
 800314c:	9b07      	ldr	r3, [sp, #28]
 800314e:	0021      	movs	r1, r4
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	9805      	ldr	r0, [sp, #20]
 8003154:	9b06      	ldr	r3, [sp, #24]
 8003156:	aa09      	add	r2, sp, #36	; 0x24
 8003158:	f7ff fede 	bl	8002f18 <_printf_common>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d135      	bne.n	80031cc <_printf_i+0x1d4>
 8003160:	2001      	movs	r0, #1
 8003162:	4240      	negs	r0, r0
 8003164:	b00b      	add	sp, #44	; 0x2c
 8003166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003168:	2220      	movs	r2, #32
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	6022      	str	r2, [r4, #0]
 8003170:	0022      	movs	r2, r4
 8003172:	2178      	movs	r1, #120	; 0x78
 8003174:	3245      	adds	r2, #69	; 0x45
 8003176:	7011      	strb	r1, [r2, #0]
 8003178:	4a27      	ldr	r2, [pc, #156]	; (8003218 <_printf_i+0x220>)
 800317a:	e7a7      	b.n	80030cc <_printf_i+0xd4>
 800317c:	0648      	lsls	r0, r1, #25
 800317e:	d5ac      	bpl.n	80030da <_printf_i+0xe2>
 8003180:	b2ad      	uxth	r5, r5
 8003182:	e7aa      	b.n	80030da <_printf_i+0xe2>
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	680d      	ldr	r5, [r1, #0]
 8003188:	1d10      	adds	r0, r2, #4
 800318a:	6949      	ldr	r1, [r1, #20]
 800318c:	6018      	str	r0, [r3, #0]
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	062e      	lsls	r6, r5, #24
 8003192:	d501      	bpl.n	8003198 <_printf_i+0x1a0>
 8003194:	6019      	str	r1, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0x1a6>
 8003198:	066d      	lsls	r5, r5, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0x19c>
 800319c:	8019      	strh	r1, [r3, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	9e04      	ldr	r6, [sp, #16]
 80031a2:	6123      	str	r3, [r4, #16]
 80031a4:	e7d2      	b.n	800314c <_printf_i+0x154>
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	1d11      	adds	r1, r2, #4
 80031aa:	6019      	str	r1, [r3, #0]
 80031ac:	6816      	ldr	r6, [r2, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	0030      	movs	r0, r6
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	f000 f832 	bl	800321c <memchr>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d001      	beq.n	80031c0 <_printf_i+0x1c8>
 80031bc:	1b80      	subs	r0, r0, r6
 80031be:	6060      	str	r0, [r4, #4]
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	6123      	str	r3, [r4, #16]
 80031c4:	2300      	movs	r3, #0
 80031c6:	9a04      	ldr	r2, [sp, #16]
 80031c8:	7013      	strb	r3, [r2, #0]
 80031ca:	e7bf      	b.n	800314c <_printf_i+0x154>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	0032      	movs	r2, r6
 80031d0:	9906      	ldr	r1, [sp, #24]
 80031d2:	9805      	ldr	r0, [sp, #20]
 80031d4:	9d07      	ldr	r5, [sp, #28]
 80031d6:	47a8      	blx	r5
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d0c1      	beq.n	8003160 <_printf_i+0x168>
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	079b      	lsls	r3, r3, #30
 80031e0:	d415      	bmi.n	800320e <_printf_i+0x216>
 80031e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	4298      	cmp	r0, r3
 80031e8:	dabc      	bge.n	8003164 <_printf_i+0x16c>
 80031ea:	0018      	movs	r0, r3
 80031ec:	e7ba      	b.n	8003164 <_printf_i+0x16c>
 80031ee:	0022      	movs	r2, r4
 80031f0:	2301      	movs	r3, #1
 80031f2:	9906      	ldr	r1, [sp, #24]
 80031f4:	9805      	ldr	r0, [sp, #20]
 80031f6:	9e07      	ldr	r6, [sp, #28]
 80031f8:	3219      	adds	r2, #25
 80031fa:	47b0      	blx	r6
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d0af      	beq.n	8003160 <_printf_i+0x168>
 8003200:	3501      	adds	r5, #1
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	42ab      	cmp	r3, r5
 800320a:	dcf0      	bgt.n	80031ee <_printf_i+0x1f6>
 800320c:	e7e9      	b.n	80031e2 <_printf_i+0x1ea>
 800320e:	2500      	movs	r5, #0
 8003210:	e7f7      	b.n	8003202 <_printf_i+0x20a>
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	08003a9c 	.word	0x08003a9c
 8003218:	08003aad 	.word	0x08003aad

0800321c <memchr>:
 800321c:	b2c9      	uxtb	r1, r1
 800321e:	1882      	adds	r2, r0, r2
 8003220:	4290      	cmp	r0, r2
 8003222:	d101      	bne.n	8003228 <memchr+0xc>
 8003224:	2000      	movs	r0, #0
 8003226:	4770      	bx	lr
 8003228:	7803      	ldrb	r3, [r0, #0]
 800322a:	428b      	cmp	r3, r1
 800322c:	d0fb      	beq.n	8003226 <memchr+0xa>
 800322e:	3001      	adds	r0, #1
 8003230:	e7f6      	b.n	8003220 <memchr+0x4>

08003232 <memmove>:
 8003232:	b510      	push	{r4, lr}
 8003234:	4288      	cmp	r0, r1
 8003236:	d902      	bls.n	800323e <memmove+0xc>
 8003238:	188b      	adds	r3, r1, r2
 800323a:	4298      	cmp	r0, r3
 800323c:	d303      	bcc.n	8003246 <memmove+0x14>
 800323e:	2300      	movs	r3, #0
 8003240:	e007      	b.n	8003252 <memmove+0x20>
 8003242:	5c8b      	ldrb	r3, [r1, r2]
 8003244:	5483      	strb	r3, [r0, r2]
 8003246:	3a01      	subs	r2, #1
 8003248:	d2fb      	bcs.n	8003242 <memmove+0x10>
 800324a:	bd10      	pop	{r4, pc}
 800324c:	5ccc      	ldrb	r4, [r1, r3]
 800324e:	54c4      	strb	r4, [r0, r3]
 8003250:	3301      	adds	r3, #1
 8003252:	429a      	cmp	r2, r3
 8003254:	d1fa      	bne.n	800324c <memmove+0x1a>
 8003256:	e7f8      	b.n	800324a <memmove+0x18>

08003258 <_free_r>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	0005      	movs	r5, r0
 800325c:	2900      	cmp	r1, #0
 800325e:	d010      	beq.n	8003282 <_free_r+0x2a>
 8003260:	1f0c      	subs	r4, r1, #4
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	da00      	bge.n	800326a <_free_r+0x12>
 8003268:	18e4      	adds	r4, r4, r3
 800326a:	0028      	movs	r0, r5
 800326c:	f000 f8d4 	bl	8003418 <__malloc_lock>
 8003270:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <_free_r+0x90>)
 8003272:	6813      	ldr	r3, [r2, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <_free_r+0x2c>
 8003278:	6063      	str	r3, [r4, #4]
 800327a:	6014      	str	r4, [r2, #0]
 800327c:	0028      	movs	r0, r5
 800327e:	f000 f8d3 	bl	8003428 <__malloc_unlock>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	42a3      	cmp	r3, r4
 8003286:	d908      	bls.n	800329a <_free_r+0x42>
 8003288:	6821      	ldr	r1, [r4, #0]
 800328a:	1860      	adds	r0, r4, r1
 800328c:	4283      	cmp	r3, r0
 800328e:	d1f3      	bne.n	8003278 <_free_r+0x20>
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	1841      	adds	r1, r0, r1
 8003296:	6021      	str	r1, [r4, #0]
 8003298:	e7ee      	b.n	8003278 <_free_r+0x20>
 800329a:	001a      	movs	r2, r3
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <_free_r+0x4e>
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	d9f9      	bls.n	800329a <_free_r+0x42>
 80032a6:	6811      	ldr	r1, [r2, #0]
 80032a8:	1850      	adds	r0, r2, r1
 80032aa:	42a0      	cmp	r0, r4
 80032ac:	d10b      	bne.n	80032c6 <_free_r+0x6e>
 80032ae:	6820      	ldr	r0, [r4, #0]
 80032b0:	1809      	adds	r1, r1, r0
 80032b2:	1850      	adds	r0, r2, r1
 80032b4:	6011      	str	r1, [r2, #0]
 80032b6:	4283      	cmp	r3, r0
 80032b8:	d1e0      	bne.n	800327c <_free_r+0x24>
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	1841      	adds	r1, r0, r1
 80032c0:	6011      	str	r1, [r2, #0]
 80032c2:	6053      	str	r3, [r2, #4]
 80032c4:	e7da      	b.n	800327c <_free_r+0x24>
 80032c6:	42a0      	cmp	r0, r4
 80032c8:	d902      	bls.n	80032d0 <_free_r+0x78>
 80032ca:	230c      	movs	r3, #12
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	e7d5      	b.n	800327c <_free_r+0x24>
 80032d0:	6821      	ldr	r1, [r4, #0]
 80032d2:	1860      	adds	r0, r4, r1
 80032d4:	4283      	cmp	r3, r0
 80032d6:	d103      	bne.n	80032e0 <_free_r+0x88>
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	1841      	adds	r1, r0, r1
 80032de:	6021      	str	r1, [r4, #0]
 80032e0:	6063      	str	r3, [r4, #4]
 80032e2:	6054      	str	r4, [r2, #4]
 80032e4:	e7ca      	b.n	800327c <_free_r+0x24>
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	200001e0 	.word	0x200001e0

080032ec <_malloc_r>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	2303      	movs	r3, #3
 80032f0:	1ccd      	adds	r5, r1, #3
 80032f2:	439d      	bics	r5, r3
 80032f4:	3508      	adds	r5, #8
 80032f6:	0006      	movs	r6, r0
 80032f8:	2d0c      	cmp	r5, #12
 80032fa:	d21f      	bcs.n	800333c <_malloc_r+0x50>
 80032fc:	250c      	movs	r5, #12
 80032fe:	42a9      	cmp	r1, r5
 8003300:	d81e      	bhi.n	8003340 <_malloc_r+0x54>
 8003302:	0030      	movs	r0, r6
 8003304:	f000 f888 	bl	8003418 <__malloc_lock>
 8003308:	4925      	ldr	r1, [pc, #148]	; (80033a0 <_malloc_r+0xb4>)
 800330a:	680a      	ldr	r2, [r1, #0]
 800330c:	0014      	movs	r4, r2
 800330e:	2c00      	cmp	r4, #0
 8003310:	d11a      	bne.n	8003348 <_malloc_r+0x5c>
 8003312:	4f24      	ldr	r7, [pc, #144]	; (80033a4 <_malloc_r+0xb8>)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d104      	bne.n	8003324 <_malloc_r+0x38>
 800331a:	0021      	movs	r1, r4
 800331c:	0030      	movs	r0, r6
 800331e:	f000 f869 	bl	80033f4 <_sbrk_r>
 8003322:	6038      	str	r0, [r7, #0]
 8003324:	0029      	movs	r1, r5
 8003326:	0030      	movs	r0, r6
 8003328:	f000 f864 	bl	80033f4 <_sbrk_r>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d12b      	bne.n	8003388 <_malloc_r+0x9c>
 8003330:	230c      	movs	r3, #12
 8003332:	0030      	movs	r0, r6
 8003334:	6033      	str	r3, [r6, #0]
 8003336:	f000 f877 	bl	8003428 <__malloc_unlock>
 800333a:	e003      	b.n	8003344 <_malloc_r+0x58>
 800333c:	2d00      	cmp	r5, #0
 800333e:	dade      	bge.n	80032fe <_malloc_r+0x12>
 8003340:	230c      	movs	r3, #12
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	2000      	movs	r0, #0
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	1b5b      	subs	r3, r3, r5
 800334c:	d419      	bmi.n	8003382 <_malloc_r+0x96>
 800334e:	2b0b      	cmp	r3, #11
 8003350:	d903      	bls.n	800335a <_malloc_r+0x6e>
 8003352:	6023      	str	r3, [r4, #0]
 8003354:	18e4      	adds	r4, r4, r3
 8003356:	6025      	str	r5, [r4, #0]
 8003358:	e003      	b.n	8003362 <_malloc_r+0x76>
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	42a2      	cmp	r2, r4
 800335e:	d10e      	bne.n	800337e <_malloc_r+0x92>
 8003360:	600b      	str	r3, [r1, #0]
 8003362:	0030      	movs	r0, r6
 8003364:	f000 f860 	bl	8003428 <__malloc_unlock>
 8003368:	0020      	movs	r0, r4
 800336a:	2207      	movs	r2, #7
 800336c:	300b      	adds	r0, #11
 800336e:	1d23      	adds	r3, r4, #4
 8003370:	4390      	bics	r0, r2
 8003372:	1ac2      	subs	r2, r0, r3
 8003374:	4298      	cmp	r0, r3
 8003376:	d0e6      	beq.n	8003346 <_malloc_r+0x5a>
 8003378:	1a1b      	subs	r3, r3, r0
 800337a:	50a3      	str	r3, [r4, r2]
 800337c:	e7e3      	b.n	8003346 <_malloc_r+0x5a>
 800337e:	6053      	str	r3, [r2, #4]
 8003380:	e7ef      	b.n	8003362 <_malloc_r+0x76>
 8003382:	0022      	movs	r2, r4
 8003384:	6864      	ldr	r4, [r4, #4]
 8003386:	e7c2      	b.n	800330e <_malloc_r+0x22>
 8003388:	2303      	movs	r3, #3
 800338a:	1cc4      	adds	r4, r0, #3
 800338c:	439c      	bics	r4, r3
 800338e:	42a0      	cmp	r0, r4
 8003390:	d0e1      	beq.n	8003356 <_malloc_r+0x6a>
 8003392:	1a21      	subs	r1, r4, r0
 8003394:	0030      	movs	r0, r6
 8003396:	f000 f82d 	bl	80033f4 <_sbrk_r>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	d1db      	bne.n	8003356 <_malloc_r+0x6a>
 800339e:	e7c7      	b.n	8003330 <_malloc_r+0x44>
 80033a0:	200001e0 	.word	0x200001e0
 80033a4:	200001e4 	.word	0x200001e4

080033a8 <_realloc_r>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	0007      	movs	r7, r0
 80033ac:	000d      	movs	r5, r1
 80033ae:	0016      	movs	r6, r2
 80033b0:	2900      	cmp	r1, #0
 80033b2:	d105      	bne.n	80033c0 <_realloc_r+0x18>
 80033b4:	0011      	movs	r1, r2
 80033b6:	f7ff ff99 	bl	80032ec <_malloc_r>
 80033ba:	0004      	movs	r4, r0
 80033bc:	0020      	movs	r0, r4
 80033be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d103      	bne.n	80033cc <_realloc_r+0x24>
 80033c4:	f7ff ff48 	bl	8003258 <_free_r>
 80033c8:	0034      	movs	r4, r6
 80033ca:	e7f7      	b.n	80033bc <_realloc_r+0x14>
 80033cc:	f000 f834 	bl	8003438 <_malloc_usable_size_r>
 80033d0:	002c      	movs	r4, r5
 80033d2:	42b0      	cmp	r0, r6
 80033d4:	d2f2      	bcs.n	80033bc <_realloc_r+0x14>
 80033d6:	0031      	movs	r1, r6
 80033d8:	0038      	movs	r0, r7
 80033da:	f7ff ff87 	bl	80032ec <_malloc_r>
 80033de:	1e04      	subs	r4, r0, #0
 80033e0:	d0ec      	beq.n	80033bc <_realloc_r+0x14>
 80033e2:	0029      	movs	r1, r5
 80033e4:	0032      	movs	r2, r6
 80033e6:	f7ff fbed 	bl	8002bc4 <memcpy>
 80033ea:	0029      	movs	r1, r5
 80033ec:	0038      	movs	r0, r7
 80033ee:	f7ff ff33 	bl	8003258 <_free_r>
 80033f2:	e7e3      	b.n	80033bc <_realloc_r+0x14>

080033f4 <_sbrk_r>:
 80033f4:	2300      	movs	r3, #0
 80033f6:	b570      	push	{r4, r5, r6, lr}
 80033f8:	4d06      	ldr	r5, [pc, #24]	; (8003414 <_sbrk_r+0x20>)
 80033fa:	0004      	movs	r4, r0
 80033fc:	0008      	movs	r0, r1
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	f7fd fcd4 	bl	8000dac <_sbrk>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d103      	bne.n	8003410 <_sbrk_r+0x1c>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d000      	beq.n	8003410 <_sbrk_r+0x1c>
 800340e:	6023      	str	r3, [r4, #0]
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	20000550 	.word	0x20000550

08003418 <__malloc_lock>:
 8003418:	b510      	push	{r4, lr}
 800341a:	4802      	ldr	r0, [pc, #8]	; (8003424 <__malloc_lock+0xc>)
 800341c:	f000 f814 	bl	8003448 <__retarget_lock_acquire_recursive>
 8003420:	bd10      	pop	{r4, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	20000558 	.word	0x20000558

08003428 <__malloc_unlock>:
 8003428:	b510      	push	{r4, lr}
 800342a:	4802      	ldr	r0, [pc, #8]	; (8003434 <__malloc_unlock+0xc>)
 800342c:	f000 f80d 	bl	800344a <__retarget_lock_release_recursive>
 8003430:	bd10      	pop	{r4, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	20000558 	.word	0x20000558

08003438 <_malloc_usable_size_r>:
 8003438:	1f0b      	subs	r3, r1, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	1f18      	subs	r0, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	da01      	bge.n	8003446 <_malloc_usable_size_r+0xe>
 8003442:	580b      	ldr	r3, [r1, r0]
 8003444:	18c0      	adds	r0, r0, r3
 8003446:	4770      	bx	lr

08003448 <__retarget_lock_acquire_recursive>:
 8003448:	4770      	bx	lr

0800344a <__retarget_lock_release_recursive>:
 800344a:	4770      	bx	lr

0800344c <_init>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr

08003458 <_fini>:
 8003458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345e:	bc08      	pop	{r3}
 8003460:	469e      	mov	lr, r3
 8003462:	4770      	bx	lr
