
Smart-Pwr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e6c  08003e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000070  08003ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003ee4  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019426  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc4  00000000  00000000  000394be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006fa7  00000000  00000000  0003e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00045130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a88  00000000  00000000  00045990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010276  00000000  00000000  00046418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132ef  00000000  00000000  0005668e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004e297  00000000  00000000  0006997d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b7c14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015d8  00000000  00000000  000b7c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003850 	.word	0x08003850

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003850 	.word	0x08003850

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	1c08      	adds	r0, r1, #0
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	a80d      	add	r0, sp, #52	; 0x34
 800064e:	f002 fcc4 	bl	8002fda <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000652:	2210      	movs	r2, #16
 8000654:	2100      	movs	r1, #0
 8000656:	a809      	add	r0, sp, #36	; 0x24
 8000658:	f002 fcbf 	bl	8002fda <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2210      	movs	r2, #16
 800065e:	2100      	movs	r1, #0
 8000660:	a805      	add	r0, sp, #20
 8000662:	f002 fcba 	bl	8002fda <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <MX_ADC_Init+0x154>)
 8000668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	0080      	lsls	r0, r0, #2
 800066e:	4301      	orrs	r1, r0
 8000670:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000674:	4002      	ands	r2, r0
 8000676:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000678:	9a02      	ldr	r2, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	2701      	movs	r7, #1
 800067e:	433a      	orrs	r2, r7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000684:	403b      	ands	r3, r7
 8000686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000688:	9b01      	ldr	r3, [sp, #4]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800068a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000690:	2500      	movs	r5, #0
 8000692:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	3861      	subs	r0, #97	; 0x61
 8000696:	38ff      	subs	r0, #255	; 0xff
 8000698:	a903      	add	r1, sp, #12
 800069a:	05c0      	lsls	r0, r0, #23
 800069c:	f002 f94e 	bl	800293c <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a0:	4b3e      	ldr	r3, [pc, #248]	; (800079c <MX_ADC_Init+0x158>)
 80006a2:	21c3      	movs	r1, #195	; 0xc3
 80006a4:	0089      	lsls	r1, r1, #2
 80006a6:	585a      	ldr	r2, [r3, r1]
 80006a8:	20ff      	movs	r0, #255	; 0xff
 80006aa:	4382      	bics	r2, r0
 80006ac:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	0152      	lsls	r2, r2, #5
 80006b2:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006b4:	4c3a      	ldr	r4, [pc, #232]	; (80007a0 <MX_ADC_Init+0x15c>)
 80006b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b8:	433b      	orrs	r3, r7
 80006ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80006bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006be:	2380      	movs	r3, #128	; 0x80
 80006c0:	02db      	lsls	r3, r3, #11
 80006c2:	4313      	orrs	r3, r2
 80006c4:	62a3      	str	r3, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006c6:	4e37      	ldr	r6, [pc, #220]	; (80007a4 <MX_ADC_Init+0x160>)
 80006c8:	6830      	ldr	r0, [r6, #0]
 80006ca:	4a37      	ldr	r2, [pc, #220]	; (80007a8 <MX_ADC_Init+0x164>)
 80006cc:	4010      	ands	r0, r2
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	0409      	lsls	r1, r1, #16
 80006d2:	4301      	orrs	r1, r0
 80006d4:	6031      	str	r1, [r6, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0289      	lsls	r1, r1, #10
 80006dc:	4319      	orrs	r1, r3
 80006de:	62a1      	str	r1, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	401a      	ands	r2, r3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	03db      	lsls	r3, r3, #15
 80006e8:	4313      	orrs	r3, r2
 80006ea:	6033      	str	r3, [r6, #0]
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006ec:	950d      	str	r5, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	930e      	str	r3, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006f4:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006f6:	9510      	str	r5, [sp, #64]	; 0x40
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80006f8:	9511      	str	r5, [sp, #68]	; 0x44
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006fa:	a90d      	add	r1, sp, #52	; 0x34
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 f8a1 	bl	8002844 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000702:	6963      	ldr	r3, [r4, #20]
 8000704:	2207      	movs	r2, #7
 8000706:	4393      	bics	r3, r2
 8000708:	3a02      	subs	r2, #2
 800070a:	4313      	orrs	r3, r2
 800070c:	6163      	str	r3, [r4, #20]
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800070e:	6923      	ldr	r3, [r4, #16]
 8000710:	43bb      	bics	r3, r7
 8000712:	431f      	orrs	r7, r3
 8000714:	6127      	str	r7, [r4, #16]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000716:	6923      	ldr	r3, [r4, #16]
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <MX_ADC_Init+0x168>)
 800071a:	401a      	ands	r2, r3
 800071c:	238e      	movs	r3, #142	; 0x8e
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4313      	orrs	r3, r2
 8000722:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_ADC_Init+0x16c>)
 8000728:	4013      	ands	r3, r2
 800072a:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800072c:	68e3      	ldr	r3, [r4, #12]
 800072e:	2104      	movs	r1, #4
 8000730:	438b      	bics	r3, r1
 8000732:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000734:	6833      	ldr	r3, [r6, #0]
 8000736:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <MX_ADC_Init+0x170>)
 8000738:	401a      	ands	r2, r3
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	049b      	lsls	r3, r3, #18
 800073e:	4313      	orrs	r3, r2
 8000740:	6033      	str	r3, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000742:	6863      	ldr	r3, [r4, #4]
 8000744:	438b      	bics	r3, r1
 8000746:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000748:	6863      	ldr	r3, [r4, #4]
 800074a:	2208      	movs	r2, #8
 800074c:	4393      	bics	r3, r2
 800074e:	6063      	str	r3, [r4, #4]
  LL_ADC_SetOverSamplingDiscont(ADC1, LL_ADC_OVS_REG_CONT);
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
  LL_ADC_DisableIT_EOC(ADC1);
  LL_ADC_DisableIT_EOS(ADC1);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	061b      	lsls	r3, r3, #24
 8000754:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000756:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000758:	950b      	str	r5, [sp, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800075a:	950c      	str	r5, [sp, #48]	; 0x30
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800075c:	a909      	add	r1, sp, #36	; 0x24
 800075e:	0020      	movs	r0, r4
 8000760:	f002 f856 	bl	8002810 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8000764:	68a3      	ldr	r3, [r4, #8]
 8000766:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <MX_ADC_Init+0x174>)
 8000768:	401a      	ands	r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	055b      	lsls	r3, r3, #21
 800076e:	4313      	orrs	r3, r2
 8000770:	60a3      	str	r3, [r4, #8]
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_ADC_Init+0x178>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	4912      	ldr	r1, [pc, #72]	; (80007c0 <MX_ADC_Init+0x17c>)
 8000778:	f7ff fcd8 	bl	800012c <__udivsi3>
 800077c:	0003      	movs	r3, r0
 800077e:	0080      	lsls	r0, r0, #2
 8000780:	18c0      	adds	r0, r0, r3
 8000782:	0040      	lsls	r0, r0, #1
 8000784:	210a      	movs	r1, #10
 8000786:	f7ff fcd1 	bl	800012c <__udivsi3>
  while(wait_loop_index != 0)
 800078a:	2800      	cmp	r0, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC_Init+0x14e>
  {
    wait_loop_index--;
 800078e:	3801      	subs	r0, #1
 8000790:	e7fb      	b.n	800078a <MX_ADC_Init+0x146>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000792:	b013      	add	sp, #76	; 0x4c
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	40012400 	.word	0x40012400
 80007a4:	40012708 	.word	0x40012708
 80007a8:	ff3fffff 	.word	0xff3fffff
 80007ac:	fffffe03 	.word	0xfffffe03
 80007b0:	fffffdff 	.word	0xfffffdff
 80007b4:	fdffffff 	.word	0xfdffffff
 80007b8:	6fffffe8 	.word	0x6fffffe8
 80007bc:	20000000 	.word	0x20000000
 80007c0:	00030d40 	.word	0x00030d40

080007c4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c4:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MX_CRC_Init+0x40>)
 80007c8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007ca:	2080      	movs	r0, #128	; 0x80
 80007cc:	0140      	lsls	r0, r0, #5
 80007ce:	4301      	orrs	r1, r0
 80007d0:	6311      	str	r1, [r2, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80007d4:	4003      	ands	r3, r0
 80007d6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007d8:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_CRC_Init+0x44>)
 80007dc:	689a      	ldr	r2, [r3, #8]
 80007de:	2160      	movs	r1, #96	; 0x60
 80007e0:	438a      	bics	r2, r1
 80007e2:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 80007e4:	689a      	ldr	r2, [r3, #8]
 80007e6:	3120      	adds	r1, #32
 80007e8:	438a      	bics	r2, r1
 80007ea:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <MX_CRC_Init+0x48>)
 80007ee:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	3968      	subs	r1, #104	; 0x68
 80007f4:	438a      	bics	r2, r1
 80007f6:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80007f8:	2201      	movs	r2, #1
 80007fa:	4252      	negs	r2, r2
 80007fc:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fe:	b002      	add	sp, #8
 8000800:	4770      	bx	lr
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40021000 	.word	0x40021000
 8000808:	40023000 	.word	0x40023000
 800080c:	04c11db7 	.word	0x04c11db7

08000810 <CalcCRC>:

/* USER CODE BEGIN 1 */

uint32_t CalcCRC(uint32_t* buff, uint8_t len){
 8000810:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <CalcCRC+0x28>)
 8000814:	6893      	ldr	r3, [r2, #8]
 8000816:	2401      	movs	r4, #1
 8000818:	4323      	orrs	r3, r4
 800081a:	6093      	str	r3, [r2, #8]
  uint8_t i;
  uint32_t tmp;

  LL_CRC_ResetCRCCalculationUnit(CRC);

  for(i = 0; i < len; i++){
 800081c:	2300      	movs	r3, #0
 800081e:	428b      	cmp	r3, r1
 8000820:	d206      	bcs.n	8000830 <CalcCRC+0x20>
    LL_CRC_FeedData32(CRC,buff[i]);
 8000822:	009a      	lsls	r2, r3, #2
 8000824:	5884      	ldr	r4, [r0, r2]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <CalcCRC+0x28>)
 8000828:	6014      	str	r4, [r2, #0]
  for(i = 0; i < len; i++){
 800082a:	3301      	adds	r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	e7f6      	b.n	800081e <CalcCRC+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8000830:	4b01      	ldr	r3, [pc, #4]	; (8000838 <CalcCRC+0x28>)
 8000832:	6818      	ldr	r0, [r3, #0]
  }

  tmp = LL_CRC_ReadData32(CRC);
  return(tmp);

}
 8000834:	bd10      	pop	{r4, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	40023000 	.word	0x40023000

0800083c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	46d6      	mov	lr, sl
 8000840:	464f      	mov	r7, r9
 8000842:	4646      	mov	r6, r8
 8000844:	b5c0      	push	{r6, r7, lr}
 8000846:	b08c      	sub	sp, #48	; 0x30

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000848:	ae0a      	add	r6, sp, #40	; 0x28
 800084a:	2308      	movs	r3, #8
 800084c:	4699      	mov	r9, r3
 800084e:	2208      	movs	r2, #8
 8000850:	2100      	movs	r1, #0
 8000852:	0030      	movs	r0, r6
 8000854:	f002 fbc1 	bl	8002fda <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	2400      	movs	r4, #0
 800085a:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->IOPENR, Periphs);
 800085c:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xd0>)
 800085e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000860:	2204      	movs	r2, #4
 8000862:	4311      	orrs	r1, r2
 8000864:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000868:	400a      	ands	r2, r1
 800086a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800086c:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	2501      	movs	r5, #1
 8000872:	432a      	orrs	r2, r5
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000878:	402a      	ands	r2, r5
 800087a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	2102      	movs	r1, #2
 8000882:	4688      	mov	r8, r1
 8000884:	430a      	orrs	r2, r1
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	400b      	ands	r3, r1
 800088c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000890:	27a0      	movs	r7, #160	; 0xa0
 8000892:	05ff      	lsls	r7, r7, #23
 8000894:	464b      	mov	r3, r9
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_GPIO_Init+0xd4>)
 800089a:	469a      	mov	sl, r3
 800089c:	6299      	str	r1, [r3, #40]	; 0x28

  /**/
  LL_GPIO_ResetOutputPin(HEAT_GPIO_Output_GPIO_Port, HEAT_GPIO_Output_Pin);

  /**/
  GPIO_InitStruct.Pin = TURN_ON_IR_Pin;
 800089e:	464b      	mov	r3, r9
 80008a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008a6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008a8:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(TURN_ON_IR_GPIO_Port, &GPIO_InitStruct);
 80008aa:	a904      	add	r1, sp, #16
 80008ac:	0038      	movs	r0, r7
 80008ae:	f002 f845 	bl	800293c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HEAT_GPIO_Output_Pin;
 80008b2:	4643      	mov	r3, r8
 80008b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008b6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008bc:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(HEAT_GPIO_Output_GPIO_Port, &GPIO_InitStruct);
 80008be:	a904      	add	r1, sp, #16
 80008c0:	4650      	mov	r0, sl
 80008c2:	f002 f83b 	bl	800293c <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80008c6:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MX_GPIO_Init+0xd8>)
 80008c8:	68d3      	ldr	r3, [r2, #12]
 80008ca:	210f      	movs	r1, #15
 80008cc:	438b      	bics	r3, r1
 80008ce:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4911      	ldr	r1, [pc, #68]	; (8000918 <MX_GPIO_Init+0xdc>)
 80008d4:	400a      	ands	r2, r1
 80008d6:	60fa      	str	r2, [r7, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	400b      	ands	r3, r1
 80008dc:	603b      	str	r3, [r7, #0]

  /**/
  LL_GPIO_SetPinMode(RDY_ADS1115_GPIO_Port, RDY_ADS1115_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80008de:	2310      	movs	r3, #16
 80008e0:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80008e2:	7135      	strb	r5, [r6, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008e4:	7174      	strb	r4, [r6, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80008e6:	71b5      	strb	r5, [r6, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008e8:	0030      	movs	r0, r6
 80008ea:	f001 ffc3 	bl	8002874 <LL_EXTI_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <MX_GPIO_Init+0xe0>)
 80008f0:	21c1      	movs	r1, #193	; 0xc1
 80008f2:	0089      	lsls	r1, r1, #2
 80008f4:	5853      	ldr	r3, [r2, r1]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 8000900:	b00c      	add	sp, #48	; 0x30
 8000902:	bce0      	pop	{r5, r6, r7}
 8000904:	46ba      	mov	sl, r7
 8000906:	46b1      	mov	r9, r6
 8000908:	46a8      	mov	r8, r5
 800090a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090c:	40021000 	.word	0x40021000
 8000910:	50000400 	.word	0x50000400
 8000914:	40010000 	.word	0x40010000
 8000918:	fffffcff 	.word	0xfffffcff
 800091c:	e000e100 	.word	0xe000e100

08000920 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	46c6      	mov	lr, r8
 8000924:	b500      	push	{lr}
 8000926:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000928:	221c      	movs	r2, #28
 800092a:	2100      	movs	r1, #0
 800092c:	a809      	add	r0, sp, #36	; 0x24
 800092e:	f002 fb54 	bl	8002fda <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8000932:	4c2a      	ldr	r4, [pc, #168]	; (80009dc <MX_I2C1_Init+0xbc>)
 8000934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000936:	2602      	movs	r6, #2
 8000938:	4333      	orrs	r3, r6
 800093a:	62e3      	str	r3, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800093c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800093e:	4033      	ands	r3, r6
 8000940:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000942:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000948:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	3b3d      	subs	r3, #61	; 0x3d
 800094c:	4698      	mov	r8, r3
 800094e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000950:	2501      	movs	r5, #1
 8000952:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000954:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000956:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	4f21      	ldr	r7, [pc, #132]	; (80009e0 <MX_I2C1_Init+0xc0>)
 800095a:	a903      	add	r1, sp, #12
 800095c:	0038      	movs	r0, r7
 800095e:	f001 ffed 	bl	800293c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000966:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	4643      	mov	r3, r8
 800096a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800096c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800096e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000970:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	a903      	add	r1, sp, #12
 8000974:	0038      	movs	r0, r7
 8000976:	f001 ffe1 	bl	800293c <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800097a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0389      	lsls	r1, r1, #14
 8000980:	430a      	orrs	r2, r1
 8000982:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000986:	400b      	ands	r3, r1
 8000988:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800098a:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800098c:	4c15      	ldr	r4, [pc, #84]	; (80009e4 <MX_I2C1_Init+0xc4>)
 800098e:	6862      	ldr	r2, [r4, #4]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	049b      	lsls	r3, r3, #18
 8000994:	4313      	orrs	r3, r2
 8000996:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000998:	68e3      	ldr	r3, [r4, #12]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_I2C1_Init+0xc8>)
 800099c:	4013      	ands	r3, r2
 800099e:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009a0:	6823      	ldr	r3, [r4, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_I2C1_Init+0xcc>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009a8:	6823      	ldr	r3, [r4, #0]
 80009aa:	4a11      	ldr	r2, [pc, #68]	; (80009f0 <MX_I2C1_Init+0xd0>)
 80009ac:	4013      	ands	r3, r2
 80009ae:	6023      	str	r3, [r4, #0]
  */
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009b0:	2300      	movs	r3, #0
 80009b2:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0000061E;
 80009b4:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_I2C1_Init+0xd4>)
 80009b6:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009b8:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80009ba:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 80009bc:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009be:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009c0:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009c2:	a909      	add	r1, sp, #36	; 0x24
 80009c4:	0020      	movs	r0, r4
 80009c6:	f002 f811 	bl	80029ec <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009ca:	68e3      	ldr	r3, [r4, #12]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <MX_I2C1_Init+0xd8>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	60e3      	str	r3, [r4, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d2:	b010      	add	sp, #64	; 0x40
 80009d4:	bc80      	pop	{r7}
 80009d6:	46b8      	mov	r8, r7
 80009d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000400 	.word	0x50000400
 80009e4:	40005400 	.word	0x40005400
 80009e8:	ffff7fff 	.word	0xffff7fff
 80009ec:	fff7ffff 	.word	0xfff7ffff
 80009f0:	fffdffff 	.word	0xfffdffff
 80009f4:	0000061e 	.word	0x0000061e
 80009f8:	fffff801 	.word	0xfffff801

080009fc <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80009fc:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_LPTIM1_Init+0x70>)
 8000a00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0612      	lsls	r2, r2, #24
 8000a06:	430a      	orrs	r2, r1
 8000a08:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0c:	0fdb      	lsrs	r3, r3, #31
 8000a0e:	07db      	lsls	r3, r3, #31
 8000a10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a12:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_LPTIM1_Init+0x74>)
 8000a16:	21c3      	movs	r1, #195	; 0xc3
 8000a18:	0089      	lsls	r1, r1, #2
 8000a1a:	585a      	ldr	r2, [r3, r1]
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_LPTIM1_Init+0x78>)
 8000a1e:	4002      	ands	r2, r0
 8000a20:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_LPTIM1_Init+0x7c>)
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	438a      	bics	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <MX_LPTIM1_Init+0x80>)
 8000a36:	4011      	ands	r1, r2
 8000a38:	22e0      	movs	r2, #224	; 0xe0
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	490f      	ldr	r1, [pc, #60]	; (8000a80 <MX_LPTIM1_Init+0x84>)
 8000a44:	400a      	ands	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <MX_LPTIM1_Init+0x88>)
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	03d2      	lsls	r2, r2, #15
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	490b      	ldr	r1, [pc, #44]	; (8000a88 <MX_LPTIM1_Init+0x8c>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	490a      	ldr	r1, [pc, #40]	; (8000a8c <MX_LPTIM1_Init+0x90>)
 8000a62:	400a      	ands	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
  LL_LPTIM_TrigSw(LPTIM1);
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	ffff00ff 	.word	0xffff00ff
 8000a78:	40007c00 	.word	0x40007c00
 8000a7c:	fffff1ff 	.word	0xfffff1ff
 8000a80:	ffdfffff 	.word	0xffdfffff
 8000a84:	ffbfffff 	.word	0xffbfffff
 8000a88:	ff7fffff 	.word	0xff7fffff
 8000a8c:	fff9ffff 	.word	0xfff9ffff

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a92:	4a36      	ldr	r2, [pc, #216]	; (8000b6c <SystemClock_Config+0xdc>)
 8000a94:	6813      	ldr	r3, [r2, #0]
 8000a96:	2101      	movs	r1, #1
 8000a98:	438b      	bics	r3, r1
 8000a9a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <SystemClock_Config+0xdc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000aa0:	07db      	lsls	r3, r3, #31
 8000aa2:	d4fb      	bmi.n	8000a9c <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000aa4:	4932      	ldr	r1, [pc, #200]	; (8000b70 <SystemClock_Config+0xe0>)
 8000aa6:	680b      	ldr	r3, [r1, #0]
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <SystemClock_Config+0xe4>)
 8000aaa:	401a      	ands	r2, r3
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	011b      	lsls	r3, r3, #4
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemClock_Config+0xe8>)
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <SystemClock_Config+0xe8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	059b      	lsls	r3, r3, #22
 8000ac6:	d5fb      	bpl.n	8000ac0 <SystemClock_Config+0x30>
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemClock_Config+0xe8>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	492b      	ldr	r1, [pc, #172]	; (8000b7c <SystemClock_Config+0xec>)
 8000ace:	4011      	ands	r1, r2
 8000ad0:	22a0      	movs	r2, #160	; 0xa0
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	605a      	str	r2, [r3, #4]
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	0a12      	lsrs	r2, r2, #8
 8000ade:	605a      	str	r2, [r3, #4]
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae0:	4823      	ldr	r0, [pc, #140]	; (8000b70 <SystemClock_Config+0xe0>)
 8000ae2:	6801      	ldr	r1, [r0, #0]
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0052      	lsls	r2, r2, #1
 8000ae8:	4311      	orrs	r1, r2
 8000aea:	6001      	str	r1, [r0, #0]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8000aec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <SystemClock_Config+0xe4>)
 8000af0:	4001      	ands	r1, r0
 8000af2:	6519      	str	r1, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000af4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000af6:	430a      	orrs	r2, r1
 8000af8:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <SystemClock_Config+0xe8>)
 8000afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000afe:	059b      	lsls	r3, r3, #22
 8000b00:	d5fb      	bpl.n	8000afa <SystemClock_Config+0x6a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SystemClock_Config+0xe8>)
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	21f0      	movs	r1, #240	; 0xf0
 8000b08:	438a      	bics	r2, r1
 8000b0a:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	491c      	ldr	r1, [pc, #112]	; (8000b80 <SystemClock_Config+0xf0>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	491b      	ldr	r1, [pc, #108]	; (8000b84 <SystemClock_Config+0xf4>)
 8000b18:	400a      	ands	r2, r1
 8000b1a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b1c:	68da      	ldr	r2, [r3, #12]
 8000b1e:	2103      	movs	r1, #3
 8000b20:	438a      	bics	r2, r1
 8000b22:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <SystemClock_Config+0xe8>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	220c      	movs	r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000b2a:	421a      	tst	r2, r3
 8000b2c:	d1fa      	bne.n	8000b24 <SystemClock_Config+0x94>
  {

  }

  LL_Init1msTick(2097000);
 8000b2e:	4c16      	ldr	r4, [pc, #88]	; (8000b88 <SystemClock_Config+0xf8>)
 8000b30:	0020      	movs	r0, r4
 8000b32:	f002 f9f5 	bl	8002f20 <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8000b36:	0020      	movs	r0, r4
 8000b38:	f002 fa16 	bl	8002f68 <LL_SetSystemCoreClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <SystemClock_Config+0xe8>)
 8000b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b40:	210c      	movs	r1, #12
 8000b42:	438a      	bics	r2, r1
 8000b44:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b48:	4910      	ldr	r1, [pc, #64]	; (8000b8c <SystemClock_Config+0xfc>)
 8000b4a:	4011      	ands	r1, r2
 8000b4c:	22c0      	movs	r2, #192	; 0xc0
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	430a      	orrs	r2, r1
 8000b52:	64da      	str	r2, [r3, #76]	; 0x4c
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <SystemClock_Config+0x100>)
 8000b58:	400a      	ands	r2, r1
 8000b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <SystemClock_Config+0x104>)
 8000b60:	4011      	ands	r1, r2
 8000b62:	22c0      	movs	r2, #192	; 0xc0
 8000b64:	0312      	lsls	r2, r2, #12
 8000b66:	430a      	orrs	r2, r1
 8000b68:	64da      	str	r2, [r3, #76]	; 0x4c
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_LSE);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
}
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	40022000 	.word	0x40022000
 8000b70:	40007000 	.word	0x40007000
 8000b74:	ffffe7ff 	.word	0xffffe7ff
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	ffff1fff 	.word	0xffff1fff
 8000b80:	fffff8ff 	.word	0xfffff8ff
 8000b84:	ffffc7ff 	.word	0xffffc7ff
 8000b88:	001fff68 	.word	0x001fff68
 8000b8c:	fffff3ff 	.word	0xfffff3ff
 8000b90:	ffffcfff 	.word	0xffffcfff
 8000b94:	fff3ffff 	.word	0xfff3ffff

08000b98 <main>:
{
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b9c:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <main+0x160>)
 8000b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4311      	orrs	r1, r2
 8000ba4:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ba8:	400a      	ands	r2, r1
 8000baa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000bac:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	0549      	lsls	r1, r1, #21
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bba:	400b      	ands	r3, r1
 8000bbc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000bbe:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 8000bc0:	f7ff ff66 	bl	8000a90 <SystemClock_Config>
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000bc4:	4a4d      	ldr	r2, [pc, #308]	; (8000cfc <main+0x164>)
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	2102      	movs	r1, #2
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
  MX_GPIO_Init();
 8000bce:	f7ff fe35 	bl	800083c <MX_GPIO_Init>
  MX_ADC_Init();
 8000bd2:	f7ff fd37 	bl	8000644 <MX_ADC_Init>
  MX_I2C1_Init();
 8000bd6:	f7ff fea3 	bl	8000920 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000bda:	f000 f9f1 	bl	8000fc0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000bde:	f000 fa59 	bl	8001094 <MX_USART2_UART_Init>
  MX_TIM22_Init();
 8000be2:	f000 f98f 	bl	8000f04 <MX_TIM22_Init>
  MX_CRC_Init();
 8000be6:	f7ff fded 	bl	80007c4 <MX_CRC_Init>
  MX_TIM21_Init();
 8000bea:	f000 f935 	bl	8000e58 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8000bee:	f7ff ff05 	bl	80009fc <MX_LPTIM1_Init>
	ADC1_COMMON->CCR |= LL_ADC_PATH_INTERNAL_TEMPSENSOR;
 8000bf2:	4a43      	ldr	r2, [pc, #268]	; (8000d00 <main+0x168>)
 8000bf4:	6811      	ldr	r1, [r2, #0]
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	041b      	lsls	r3, r3, #16
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000bfe:	4941      	ldr	r1, [pc, #260]	; (8000d04 <main+0x16c>)
 8000c00:	688b      	ldr	r3, [r1, #8]
 8000c02:	4a41      	ldr	r2, [pc, #260]	; (8000d08 <main+0x170>)
 8000c04:	401a      	ands	r2, r3
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	061b      	lsls	r3, r3, #24
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <main+0x16c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	dbfb      	blt.n	8000c0e <main+0x76>
	LL_mDelay(2);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f002 f992 	bl	8002f40 <LL_mDelay>
	read_config_from_eeprom();
 8000c1c:	f000 fcea 	bl	80015f4 <read_config_from_eeprom>
	dev_init();
 8000c20:	f001 f8d8 	bl	8001dd4 <dev_init>
	modbus_init();
 8000c24:	f000 fe6c 	bl	8001900 <modbus_init>
	ADS_Init(dev.Config.FID);
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <main+0x174>)
 8000c2a:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
 8000c2c:	f000 ffb4 	bl	8001b98 <ADS_Init>
  MODIFY_REG(ADCx->CR,
 8000c30:	4934      	ldr	r1, [pc, #208]	; (8000d04 <main+0x16c>)
 8000c32:	688b      	ldr	r3, [r1, #8]
 8000c34:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <main+0x170>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	2001      	movs	r0, #1
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	608b      	str	r3, [r1, #8]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000c3e:	684b      	ldr	r3, [r1, #4]
 8000c40:	2504      	movs	r5, #4
 8000c42:	432b      	orrs	r3, r5
 8000c44:	604b      	str	r3, [r1, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000c46:	4a32      	ldr	r2, [pc, #200]	; (8000d10 <main+0x178>)
 8000c48:	68d3      	ldr	r3, [r2, #12]
 8000c4a:	2602      	movs	r6, #2
 8000c4c:	4333      	orrs	r3, r6
 8000c4e:	60d3      	str	r3, [r2, #12]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <main+0x17c>)
 8000c52:	691c      	ldr	r4, [r3, #16]
 8000c54:	4304      	orrs	r4, r0
 8000c56:	611c      	str	r4, [r3, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	0c12      	lsrs	r2, r2, #16
 8000c5c:	0412      	lsls	r2, r2, #16
 8000c5e:	4302      	orrs	r2, r0
 8000c60:	619a      	str	r2, [r3, #24]
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000c62:	6899      	ldr	r1, [r3, #8]
 8000c64:	4331      	orrs	r1, r6
 8000c66:	6099      	str	r1, [r3, #8]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000c68:	691a      	ldr	r2, [r3, #16]
 8000c6a:	2106      	movs	r1, #6
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	611a      	str	r2, [r3, #16]
	HourTimer = CntSec;
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <main+0x180>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main+0x184>)
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e01c      	b.n	8000cb6 <main+0x11e>
			f_Time500ms = FALSE;
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <main+0x188>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
			dev_proc();
 8000c82:	f001 f917 	bl	8001eb4 <dev_proc>
 8000c86:	e01e      	b.n	8000cc6 <main+0x12e>
			f_Time250ms = FALSE;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <main+0x18c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <main+0x16c>)
 8000c90:	6893      	ldr	r3, [r2, #8]
 8000c92:	491d      	ldr	r1, [pc, #116]	; (8000d08 <main+0x170>)
 8000c94:	400b      	ands	r3, r1
 8000c96:	2104      	movs	r1, #4
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6093      	str	r3, [r2, #8]
		if(f_AdcCycleEnd){
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <main+0x190>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d115      	bne.n	8000cd0 <main+0x138>
		if((uint32_t)(CntSec - HourTimer) >= SEC_PER_MHOUR){
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <main+0x180>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <main+0x184>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	21e1      	movs	r1, #225	; 0xe1
 8000cb0:	0109      	lsls	r1, r1, #4
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d212      	bcs.n	8000cdc <main+0x144>
		mb_proc();
 8000cb6:	f001 fd41 	bl	800273c <mb_proc>
		heat_proc();
 8000cba:	f001 f8a1 	bl	8001e00 <heat_proc>
		if(f_Time500ms){
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <main+0x188>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1da      	bne.n	8000c7c <main+0xe4>
		if(f_Time250ms){
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <main+0x18c>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d0e6      	beq.n	8000c9c <main+0x104>
 8000cce:	e7db      	b.n	8000c88 <main+0xf0>
			f_AdcCycleEnd = FALSE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <main+0x190>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			Adc_read_data();
 8000cd6:	f001 f94d 	bl	8001f74 <Adc_read_data>
 8000cda:	e7e3      	b.n	8000ca4 <main+0x10c>
			HourTimer = CntSec;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <main+0x184>)
 8000cde:	601a      	str	r2, [r3, #0]
			arh.MHour++;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <main+0x194>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	1c50      	adds	r0, r2, #1
 8000ce6:	6018      	str	r0, [r3, #0]
			if((arh.MHour % 24) == 0){
 8000ce8:	2118      	movs	r1, #24
 8000cea:	f7ff faa5 	bl	8000238 <__aeabi_uidivmod>
 8000cee:	2900      	cmp	r1, #0
 8000cf0:	d1e1      	bne.n	8000cb6 <main+0x11e>
				DayArhivStore();
 8000cf2:	f000 fa41 	bl	8001178 <DayArhivStore>
 8000cf6:	e7de      	b.n	8000cb6 <main+0x11e>
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	e000e010 	.word	0xe000e010
 8000d00:	40012708 	.word	0x40012708
 8000d04:	40012400 	.word	0x40012400
 8000d08:	7fffffe8 	.word	0x7fffffe8
 8000d0c:	20000424 	.word	0x20000424
 8000d10:	40011400 	.word	0x40011400
 8000d14:	40007c00 	.word	0x40007c00
 8000d18:	200000a4 	.word	0x200000a4
 8000d1c:	200000b8 	.word	0x200000b8
 8000d20:	200000be 	.word	0x200000be
 8000d24:	200000bd 	.word	0x200000bd
 8000d28:	20000543 	.word	0x20000543
 8000d2c:	200000dc 	.word	0x200000dc

08000d30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler>

08000d32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler>

08000d34 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#ifdef CONFIG_PI
	flag_1ms = 1;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SysTick_Handler+0x10>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
	count_1ms += 1;
 8000d3e:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <SysTick_Handler+0x14>)
 8000d40:	6813      	ldr	r3, [r2, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d46:	4770      	bx	lr
 8000d48:	2000054e 	.word	0x2000054e
 8000d4c:	2000008c 	.word	0x2000008c

08000d50 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <EXTI4_15_IRQHandler+0x10>)
 8000d52:	695b      	ldr	r3, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000d54:	06db      	lsls	r3, r3, #27
 8000d56:	d502      	bpl.n	8000d5e <EXTI4_15_IRQHandler+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <EXTI4_15_IRQHandler+0x10>)
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d5e:	4770      	bx	lr
 8000d60:	40010400 	.word	0x40010400

08000d64 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000d64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	__NOP();
 8000d66:	46c0      	nop			; (mov r8, r8)

	Adc_Eoc_Callback();
 8000d68:	f001 f8e0 	bl	8001f2c <Adc_Eoc_Callback>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP));
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <ADC1_COMP_IRQHandler+0x40>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000d70:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000d72:	681b      	ldr	r3, [r3, #0]

	if(LL_ADC_IsActiveFlag_OVR(ADC1)){
		//		LL_ADC_ClearFlag_OVR(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 8000d74:	075b      	lsls	r3, r3, #29
 8000d76:	d502      	bpl.n	8000d7e <ADC1_COMP_IRQHandler+0x1a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <ADC1_COMP_IRQHandler+0x40>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <ADC1_COMP_IRQHandler+0x40>)
 8000d80:	681b      	ldr	r3, [r3, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8000d82:	071b      	lsls	r3, r3, #28
 8000d84:	d506      	bpl.n	8000d94 <ADC1_COMP_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <ADC1_COMP_IRQHandler+0x40>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	601a      	str	r2, [r3, #0]
		LL_ADC_ClearFlag_EOS(ADC1);
		adc_cnt = 0;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <ADC1_COMP_IRQHandler+0x44>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000d92:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->CR,
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <ADC1_COMP_IRQHandler+0x40>)
 8000d96:	6893      	ldr	r3, [r2, #8]
 8000d98:	4904      	ldr	r1, [pc, #16]	; (8000dac <ADC1_COMP_IRQHandler+0x48>)
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6093      	str	r3, [r2, #8]
 8000da2:	e7f6      	b.n	8000d92 <ADC1_COMP_IRQHandler+0x2e>
 8000da4:	40012400 	.word	0x40012400
 8000da8:	200000bc 	.word	0x200000bc
 8000dac:	7fffffe8 	.word	0x7fffffe8

08000db0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000db0:	b510      	push	{r4, lr}
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <LPTIM1_IRQHandler+0x1c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	079b      	lsls	r3, r3, #30
 8000db8:	d504      	bpl.n	8000dc4 <LPTIM1_IRQHandler+0x14>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <LPTIM1_IRQHandler+0x1c>)
 8000dbc:	6853      	ldr	r3, [r2, #4]
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	430b      	orrs	r3, r1
 8000dc2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1)){
		LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
	}

	timer_1_128();
 8000dc4:	f000 ff68 	bl	8001c98 <timer_1_128>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000dc8:	bd10      	pop	{r4, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40007c00 	.word	0x40007c00

08000dd0 <TIM21_IRQHandler>:
  /* USER CODE BEGIN TIM21_IRQn 1 */
#ifdef CONFIG_MIPEX
	MSI_Callback_Capture_Timer();
#endif
  /* USER CODE END TIM21_IRQn 1 */
}
 8000dd0:	4770      	bx	lr
	...

08000dd4 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000dd4:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <TIM22_IRQHandler+0x24>)
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	079b      	lsls	r3, r3, #30
 8000ddc:	d503      	bpl.n	8000de6 <TIM22_IRQHandler+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <TIM22_IRQHandler+0x24>)
 8000de0:	2203      	movs	r2, #3
 8000de2:	4252      	negs	r2, r2
 8000de4:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_CC1(TIM22);
	}


	Modbus_TO_timer();
 8000de6:	f000 fda1 	bl	800192c <Modbus_TO_timer>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000dea:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <TIM22_IRQHandler+0x24>)
 8000dec:	6813      	ldr	r3, [r2, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	438b      	bics	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM22_IRQn 0 */
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40011400 	.word	0x40011400

08000dfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000dfc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	Debug_UART_IRQHandler();
 8000dfe:	f000 fb15 	bl	800142c <Debug_UART_IRQHandler>
#endif
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e02:	bd10      	pop	{r4, pc}

08000e04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000e04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	Modbus_LPUART_IRQHandler();
 8000e06:	f000 fde7 	bl	80019d8 <Modbus_LPUART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e0a:	bd10      	pop	{r4, pc}

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <_sbrk+0x38>)
 8000e12:	490d      	ldr	r1, [pc, #52]	; (8000e48 <_sbrk+0x3c>)
 8000e14:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e16:	490d      	ldr	r1, [pc, #52]	; (8000e4c <_sbrk+0x40>)
 8000e18:	6809      	ldr	r1, [r1, #0]
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	d007      	beq.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	490b      	ldr	r1, [pc, #44]	; (8000e4c <_sbrk+0x40>)
 8000e20:	6808      	ldr	r0, [r1, #0]
 8000e22:	18c3      	adds	r3, r0, r3
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d806      	bhi.n	8000e36 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <_sbrk+0x40>)
 8000e2a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e2c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e2e:	4907      	ldr	r1, [pc, #28]	; (8000e4c <_sbrk+0x40>)
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <_sbrk+0x44>)
 8000e32:	6008      	str	r0, [r1, #0]
 8000e34:	e7f3      	b.n	8000e1e <_sbrk+0x12>
    errno = ENOMEM;
 8000e36:	f002 f89d 	bl	8002f74 <__errno>
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4240      	negs	r0, r0
 8000e42:	e7f3      	b.n	8000e2c <_sbrk+0x20>
 8000e44:	20002000 	.word	0x20002000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	20000090 	.word	0x20000090
 8000e50:	20000570 	.word	0x20000570

08000e54 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	4770      	bx	lr
	...

08000e58 <MX_TIM21_Init>:

/* USER CODE END 0 */

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	466a      	mov	r2, sp
 8000e60:	8153      	strh	r3, [r2, #10]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e62:	4924      	ldr	r1, [pc, #144]	; (8000ef4 <MX_TIM21_Init+0x9c>)
 8000e64:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000e66:	2204      	movs	r2, #4
 8000e68:	4310      	orrs	r0, r2
 8000e6a:	6348      	str	r0, [r1, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e6c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000e6e:	400a      	ands	r2, r1
 8000e70:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000e72:	9a01      	ldr	r2, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e74:	4d20      	ldr	r5, [pc, #128]	; (8000ef8 <MX_TIM21_Init+0xa0>)
 8000e76:	21c5      	movs	r1, #197	; 0xc5
 8000e78:	0089      	lsls	r1, r1, #2
 8000e7a:	586a      	ldr	r2, [r5, r1]
 8000e7c:	20ff      	movs	r0, #255	; 0xff
 8000e7e:	4382      	bics	r2, r0
 8000e80:	506a      	str	r2, [r5, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	2680      	movs	r6, #128	; 0x80
 8000e84:	0376      	lsls	r6, r6, #13
 8000e86:	602e      	str	r6, [r5, #0]
  NVIC_EnableIRQ(TIM21_IRQn);

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000e88:	466a      	mov	r2, sp
 8000e8a:	8113      	strh	r3, [r2, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e8c:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 65535;
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_TIM21_Init+0xa4>)
 8000e90:	9204      	str	r2, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e92:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 8000e94:	4c1a      	ldr	r4, [pc, #104]	; (8000f00 <MX_TIM21_Init+0xa8>)
 8000e96:	a902      	add	r1, sp, #8
 8000e98:	0020      	movs	r0, r4
 8000e9a:	f001 ff9b 	bl	8002dd4 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ea6:	6863      	ldr	r3, [r4, #4]
 8000ea8:	2170      	movs	r1, #112	; 0x70
 8000eaa:	438b      	bics	r3, r1
 8000eac:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000eae:	68a3      	ldr	r3, [r4, #8]
 8000eb0:	4393      	bics	r3, r2
 8000eb2:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000eb4:	69a3      	ldr	r3, [r4, #24]
 8000eb6:	396d      	subs	r1, #109	; 0x6d
 8000eb8:	438b      	bics	r3, r1
 8000eba:	3902      	subs	r1, #2
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000ec0:	69a3      	ldr	r3, [r4, #24]
 8000ec2:	310b      	adds	r1, #11
 8000ec4:	438b      	bics	r3, r1
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000eca:	69a3      	ldr	r3, [r4, #24]
 8000ecc:	31e4      	adds	r1, #228	; 0xe4
 8000ece:	438b      	bics	r3, r1
 8000ed0:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000ed2:	6a23      	ldr	r3, [r4, #32]
 8000ed4:	39e6      	subs	r1, #230	; 0xe6
 8000ed6:	438b      	bics	r3, r1
 8000ed8:	6223      	str	r3, [r4, #32]
  MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
 8000eda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000edc:	3135      	adds	r1, #53	; 0x35
 8000ede:	438b      	bics	r3, r1
 8000ee0:	392f      	subs	r1, #47	; 0x2f
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	6523      	str	r3, [r4, #80]	; 0x50
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	50ae      	str	r6, [r5, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
  LL_TIM_SetRemap(TIM21, LL_TIM_TIM21_TI1_RMP_LSE);
  /* USER CODE BEGIN TIM21_Init 2 */
  NVIC_DisableIRQ(TIM21_IRQn);
  /* USER CODE END TIM21_Init 2 */

}
 8000ef0:	b006      	add	sp, #24
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	0000ffff 	.word	0x0000ffff
 8000f00:	40010800 	.word	0x40010800

08000f04 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	46c6      	mov	lr, r8
 8000f08:	b500      	push	{lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	466b      	mov	r3, sp
 8000f10:	835d      	strh	r5, [r3, #26]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f12:	2210      	movs	r2, #16
 8000f14:	2100      	movs	r1, #0
 8000f16:	a802      	add	r0, sp, #8
 8000f18:	f002 f85f 	bl	8002fda <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <MX_TIM22_Init+0xa4>)
 8000f1e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000f20:	2320      	movs	r3, #32
 8000f22:	4319      	orrs	r1, r3
 8000f24:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f28:	4013      	ands	r3, r2
 8000f2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f2c:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_TIM22_Init+0xa8>)
 8000f30:	21c5      	movs	r1, #197	; 0xc5
 8000f32:	0089      	lsls	r1, r1, #2
 8000f34:	585a      	ldr	r2, [r3, r1]
 8000f36:	481e      	ldr	r0, [pc, #120]	; (8000fb0 <MX_TIM22_Init+0xac>)
 8000f38:	4002      	ands	r2, r0
 8000f3a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3c:	2280      	movs	r2, #128	; 0x80
 8000f3e:	03d2      	lsls	r2, r2, #15
 8000f40:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM22_IRQn);

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 8000f42:	2704      	movs	r7, #4
 8000f44:	466b      	mov	r3, sp
 8000f46:	831f      	strh	r7, [r3, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f48:	9507      	str	r5, [sp, #28]
  TIM_InitStruct.Autoreload = 1911;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_TIM22_Init+0xb0>)
 8000f4c:	4698      	mov	r8, r3
 8000f4e:	9308      	str	r3, [sp, #32]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f50:	9509      	str	r5, [sp, #36]	; 0x24
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 8000f52:	4c19      	ldr	r4, [pc, #100]	; (8000fb8 <MX_TIM22_Init+0xb4>)
 8000f54:	a906      	add	r1, sp, #24
 8000f56:	0020      	movs	r0, r4
 8000f58:	f001 ff3c 	bl	8002dd4 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	2680      	movs	r6, #128	; 0x80
 8000f60:	43b3      	bics	r3, r6
 8000f62:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f64:	68a3      	ldr	r3, [r4, #8]
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <MX_TIM22_Init+0xb8>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM22);
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8000f6c:	9502      	str	r5, [sp, #8]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f6e:	9503      	str	r5, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 1911;
 8000f70:	4643      	mov	r3, r8
 8000f72:	9304      	str	r3, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f74:	9505      	str	r5, [sp, #20]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f76:	aa02      	add	r2, sp, #8
 8000f78:	2101      	movs	r1, #1
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f001 ff58 	bl	8002e30 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000f80:	69a3      	ldr	r3, [r4, #24]
 8000f82:	43bb      	bics	r3, r7
 8000f84:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4393      	bics	r3, r2
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	3268      	adds	r2, #104	; 0x68
 8000f94:	4393      	bics	r3, r2
 8000f96:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f98:	68a3      	ldr	r3, [r4, #8]
 8000f9a:	43b3      	bics	r3, r6
 8000f9c:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM22);
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000f9e:	b00a      	add	sp, #40	; 0x28
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	46b8      	mov	r8, r7
 8000fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	ff00ffff 	.word	0xff00ffff
 8000fb4:	00000777 	.word	0x00000777
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	ffffbff8 	.word	0xffffbff8

08000fc0 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000fc0:	b530      	push	{r4, r5, lr}
 8000fc2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8000fc4:	2218      	movs	r2, #24
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	a808      	add	r0, sp, #32
 8000fca:	f002 f806 	bl	8002fda <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_LPUART1_UART_Init+0xb8>)
 8000fd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fd2:	2080      	movs	r0, #128	; 0x80
 8000fd4:	02c0      	lsls	r0, r0, #11
 8000fd6:	4301      	orrs	r1, r0
 8000fd8:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fdc:	4002      	ands	r2, r0
 8000fde:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000fe0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe4:	2501      	movs	r5, #1
 8000fe6:	432a      	orrs	r2, r5
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	402b      	ands	r3, r5
 8000fee:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000ff0:	9b00      	ldr	r3, [sp, #0]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ff6:	3b02      	subs	r3, #2
 8000ff8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ffe:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001000:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001002:	3303      	adds	r3, #3
 8001004:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	20a0      	movs	r0, #160	; 0xa0
 8001008:	a902      	add	r1, sp, #8
 800100a:	05c0      	lsls	r0, r0, #23
 800100c:	f001 fc96 	bl	800293c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_LPUART1_UART_Init+0xbc>)
 8001012:	21c7      	movs	r1, #199	; 0xc7
 8001014:	0089      	lsls	r1, r1, #2
 8001016:	585a      	ldr	r2, [r3, r1]
 8001018:	4819      	ldr	r0, [pc, #100]	; (8001080 <MX_LPUART1_UART_Init+0xc0>)
 800101a:	4002      	ands	r2, r0
 800101c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	0592      	lsls	r2, r2, #22
 8001022:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(LPUART1_IRQn);

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 8001024:	2396      	movs	r3, #150	; 0x96
 8001026:	019b      	lsls	r3, r3, #6
 8001028:	9308      	str	r3, [sp, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 800102a:	2300      	movs	r3, #0
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800102e:	930a      	str	r3, [sp, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001030:	930b      	str	r3, [sp, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8001032:	330c      	adds	r3, #12
 8001034:	930c      	str	r3, [sp, #48]	; 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001036:	4c13      	ldr	r4, [pc, #76]	; (8001084 <MX_LPUART1_UART_Init+0xc4>)
 8001038:	a908      	add	r1, sp, #32
 800103a:	0020      	movs	r0, r4
 800103c:	f001 fd12 	bl	8002a64 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR3, USART_CR3_HDSEL);
 8001040:	68a3      	ldr	r3, [r4, #8]
 8001042:	2208      	movs	r2, #8
 8001044:	4313      	orrs	r3, r2
 8001046:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_RTSE);
 8001048:	68a3      	ldr	r3, [r4, #8]
 800104a:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <MX_LPUART1_UART_Init+0xc8>)
 800104c:	4013      	ands	r3, r2
 800104e:	60a3      	str	r3, [r4, #8]
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSIE);
 8001050:	68a3      	ldr	r3, [r4, #8]
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <MX_LPUART1_UART_Init+0xcc>)
 8001054:	4013      	ands	r3, r2
 8001056:	60a3      	str	r3, [r4, #8]
  SET_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 8001058:	68a2      	ldr	r2, [r4, #8]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4313      	orrs	r3, r2
 8001060:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8001062:	68a3      	ldr	r3, [r4, #8]
 8001064:	43ab      	bics	r3, r5
 8001066:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 8001068:	68a3      	ldr	r3, [r4, #8]
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <MX_LPUART1_UART_Init+0xd0>)
 800106c:	4013      	ands	r3, r2
 800106e:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
 8001070:	69e3      	ldr	r3, [r4, #28]
  LL_LPUART_IsActiveFlag_CTS(LPUART1);
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001072:	b00f      	add	sp, #60	; 0x3c
 8001074:	bd30      	pop	{r4, r5, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40021000 	.word	0x40021000
 800107c:	e000e100 	.word	0xe000e100
 8001080:	ffff00ff 	.word	0xffff00ff
 8001084:	40004800 	.word	0x40004800
 8001088:	fffffeff 	.word	0xfffffeff
 800108c:	fffffbff 	.word	0xfffffbff
 8001090:	fffffdff 	.word	0xfffffdff

08001094 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	46ce      	mov	lr, r9
 8001098:	4647      	mov	r7, r8
 800109a:	b580      	push	{r7, lr}
 800109c:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800109e:	221c      	movs	r2, #28
 80010a0:	2100      	movs	r1, #0
 80010a2:	a809      	add	r0, sp, #36	; 0x24
 80010a4:	f001 ff99 	bl	8002fda <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_USART2_UART_Init+0xd4>)
 80010aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	0280      	lsls	r0, r0, #10
 80010b0:	4301      	orrs	r1, r0
 80010b2:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b6:	4002      	ands	r2, r0
 80010b8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80010ba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	2501      	movs	r5, #1
 80010c0:	432a      	orrs	r2, r5
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	402b      	ands	r3, r5
 80010c8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010ca:	9b01      	ldr	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA9   ------> USART2_TX
  PA10   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DEBUG_USART2_TX_Pin;
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010d2:	3bff      	subs	r3, #255	; 0xff
 80010d4:	3bff      	subs	r3, #255	; 0xff
 80010d6:	4699      	mov	r9, r3
 80010d8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	3301      	adds	r3, #1
 80010dc:	4698      	mov	r8, r3
 80010de:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e0:	2400      	movs	r4, #0
 80010e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010e4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80010e6:	2704      	movs	r7, #4
 80010e8:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80010ea:	26a0      	movs	r6, #160	; 0xa0
 80010ec:	05f6      	lsls	r6, r6, #23
 80010ee:	a903      	add	r1, sp, #12
 80010f0:	0030      	movs	r0, r6
 80010f2:	f001 fc23 	bl	800293c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = DEBUG_USART2_RX_Pin;
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010fc:	464b      	mov	r3, r9
 80010fe:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	4643      	mov	r3, r8
 8001102:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001104:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001106:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001108:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800110a:	a903      	add	r1, sp, #12
 800110c:	0030      	movs	r0, r6
 800110e:	f001 fc15 	bl	800293c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <MX_USART2_UART_Init+0xd8>)
 8001114:	21c7      	movs	r1, #199	; 0xc7
 8001116:	0089      	lsls	r1, r1, #2
 8001118:	5853      	ldr	r3, [r2, r1]
 800111a:	20ff      	movs	r0, #255	; 0xff
 800111c:	4383      	bics	r3, r0
 800111e:	387f      	subs	r0, #127	; 0x7f
 8001120:	4303      	orrs	r3, r0
 8001122:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001124:	2380      	movs	r3, #128	; 0x80
 8001126:	055b      	lsls	r3, r3, #21
 8001128:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800112a:	2396      	movs	r3, #150	; 0x96
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001130:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001132:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001134:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001136:	230c      	movs	r3, #12
 8001138:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800113a:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800113c:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800113e:	4c0c      	ldr	r4, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0xdc>)
 8001140:	a909      	add	r1, sp, #36	; 0x24
 8001142:	0020      	movs	r0, r4
 8001144:	f001 fe94 	bl	8002e70 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001148:	6863      	ldr	r3, [r4, #4]
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <MX_USART2_UART_Init+0xe0>)
 800114c:	4013      	ands	r3, r2
 800114e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	222a      	movs	r2, #42	; 0x2a
 8001154:	4393      	bics	r3, r2
 8001156:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	432b      	orrs	r3, r5
 800115c:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115e:	b011      	add	sp, #68	; 0x44
 8001160:	bcc0      	pop	{r6, r7}
 8001162:	46b9      	mov	r9, r7
 8001164:	46b0      	mov	r8, r6
 8001166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	e000e100 	.word	0xe000e100
 8001170:	40004400 	.word	0x40004400
 8001174:	ffffb7ff 	.word	0xffffb7ff

08001178 <DayArhivStore>:
#include "arhiv.h"
#include "string.h"

ARCHIVE_TYPEDEF arh;

void DayArhivStore(void){
 8001178:	b510      	push	{r4, lr}
  uint32_t tmp;

  //ArhivStoreNote(ARCHIVE_CURRENT_VALUE,*(uint32_t*)&dgs.RegState.CurrentValue);

  //memcpy(&tmp,&arh.ValueMax,4);
  tmp = arh.ValueMax << 16;
 800117a:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <DayArhivStore+0x30>)
 800117c:	88a3      	ldrh	r3, [r4, #4]
 800117e:	041b      	lsls	r3, r3, #16

  tmp |= arh.ValueMin;
 8001180:	88e1      	ldrh	r1, [r4, #6]
 8001182:	4319      	orrs	r1, r3

  ArhivStoreNote(ARCHIVE_MAX_MIN_VALUE,tmp);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 fb87 	bl	8001898 <ArhivStoreNote>

  arh.ValueMax = dev.RegInput.Value;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <DayArhivStore+0x34>)
 800118c:	22e2      	movs	r2, #226	; 0xe2
 800118e:	5a9a      	ldrh	r2, [r3, r2]
 8001190:	80a2      	strh	r2, [r4, #4]
  arh.ValueMin = dev.RegInput.Value;
 8001192:	80e2      	strh	r2, [r4, #6]
/*
  tmp = dev.RegInput.TempSensor/10 + (arh.Temper_Max << 24) + (arh.Temper_Min << 16);

  ArhivStoreNote(ARCHIVE_TEMPERATURA, tmp);
*/
  arh.Temper_Max = dev.RegInput.TempSensor/10;
 8001194:	22e8      	movs	r2, #232	; 0xe8
 8001196:	5e98      	ldrsh	r0, [r3, r2]
 8001198:	210a      	movs	r1, #10
 800119a:	f7ff f851 	bl	8000240 <__divsi3>
 800119e:	b240      	sxtb	r0, r0
 80011a0:	72a0      	strb	r0, [r4, #10]
  arh.Temper_Min = dev.RegInput.TempSensor/10;
 80011a2:	72e0      	strb	r0, [r4, #11]

}
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	200000dc 	.word	0x200000dc
 80011ac:	20000424 	.word	0x20000424

080011b0 <CalibGasZero>:
#include "arhiv.h"
#include "flash.h"

//==============================================================================

void CalibGasZero(void){
 80011b0:	b510      	push	{r4, lr}

	uint32_t tmp;

	dev.Config.CalibZeroTemper = dev.RegInput.TempSensor;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <CalibGasZero+0x24>)
 80011b4:	21e8      	movs	r1, #232	; 0xe8
 80011b6:	5e5a      	ldrsh	r2, [r3, r1]
 80011b8:	5a58      	ldrh	r0, [r3, r1]
 80011ba:	3922      	subs	r1, #34	; 0x22
 80011bc:	5258      	strh	r0, [r3, r1]
	dev.Config.CalibZeroADC = dev.RegInput.ADC_0;
 80011be:	3148      	adds	r1, #72	; 0x48
 80011c0:	5a59      	ldrh	r1, [r3, r1]
 80011c2:	20c8      	movs	r0, #200	; 0xc8
 80011c4:	5219      	strh	r1, [r3, r0]

	tmp = dev.RegInput.TempSensor << 16;
 80011c6:	0412      	lsls	r2, r2, #16
	tmp |= dev.RegInput.ADC_0;
 80011c8:	4311      	orrs	r1, r2

	ArhivStoreNote(ARCHIVE_SET_CALIB_ZERO,tmp);
 80011ca:	38c4      	subs	r0, #196	; 0xc4
 80011cc:	f000 fb64 	bl	8001898 <ArhivStoreNote>

}
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	20000424 	.word	0x20000424

080011d8 <CalibGasConc>:

void CalibGasConc(void){
 80011d8:	b510      	push	{r4, lr}

	uint32_t tmp;

	dev.Config.CalibConcTemper = dev.RegInput.TempSensor;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <CalibGasConc+0x28>)
 80011dc:	22e8      	movs	r2, #232	; 0xe8
 80011de:	5a99      	ldrh	r1, [r3, r2]
 80011e0:	3a1e      	subs	r2, #30
 80011e2:	5299      	strh	r1, [r3, r2]
	dev.Config.CalibConcADC = dev.RegInput.ADC_0;
 80011e4:	3244      	adds	r2, #68	; 0x44
 80011e6:	5a99      	ldrh	r1, [r3, r2]
 80011e8:	3a42      	subs	r2, #66	; 0x42
 80011ea:	5299      	strh	r1, [r3, r2]

	tmp = dev.Config.ValueCalib << 16;
 80011ec:	899a      	ldrh	r2, [r3, #12]
 80011ee:	0412      	lsls	r2, r2, #16
	tmp |= dev.RegInput.ADC_TK;
 80011f0:	2188      	movs	r1, #136	; 0x88
 80011f2:	0049      	lsls	r1, r1, #1
 80011f4:	5a59      	ldrh	r1, [r3, r1]
 80011f6:	4311      	orrs	r1, r2

	ArhivStoreNote(ARCHIVE_SET_CALIB_CONC,tmp);
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 fb4d 	bl	8001898 <ArhivStoreNote>
}
 80011fe:	bd10      	pop	{r4, pc}
 8001200:	20000424 	.word	0x20000424

08001204 <get_koef_temper_conc>:

//==============================================================================

#define K_MUL 1

uint32_t get_koef_temper_conc(int16_t temperat){
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	46ce      	mov	lr, r9
 8001208:	4647      	mov	r7, r8
 800120a:	b580      	push	{r7, lr}
 800120c:	b083      	sub	sp, #12
	BOOL find_null = FALSE;

	int16_t dt, temper_1, temper_2;
	uint32_t dk, koef_1, koef_2;

	temper_1 = dev.Config.temp_corr_conc[0].Temp;
 800120e:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <get_koef_temper_conc+0xbc>)
 8001210:	2266      	movs	r2, #102	; 0x66
 8001212:	5e99      	ldrsh	r1, [r3, r2]
	koef_1 = dev.Config.temp_corr_conc[0].Koef;
 8001214:	2268      	movs	r2, #104	; 0x68
 8001216:	5a9e      	ldrh	r6, [r3, r2]

	temper_2 = dev.Config.temp_corr_conc[1].Temp;
 8001218:	3202      	adds	r2, #2
 800121a:	5e9c      	ldrsh	r4, [r3, r2]
 800121c:	46a4      	mov	ip, r4
	koef_2 = dev.Config.temp_corr_conc[1].Koef;
 800121e:	226c      	movs	r2, #108	; 0x6c
 8001220:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 8001222:	2e00      	cmp	r6, #0
 8001224:	d042      	beq.n	80012ac <get_koef_temper_conc+0xa8>

		return temper_koef;

	}

	if(koef_2 == 0){
 8001226:	2a00      	cmp	r2, #0
 8001228:	d042      	beq.n	80012b0 <get_koef_temper_conc+0xac>

		return temper_koef;

	}

	if(temperat < temper_1){
 800122a:	4281      	cmp	r1, r0
 800122c:	dc40      	bgt.n	80012b0 <get_koef_temper_conc+0xac>
		temper_koef = koef_1 * K_MUL;

		return temper_koef;
	}

	if((temperat >= temper_1) && (temperat <= temper_2))
 800122e:	4284      	cmp	r4, r0
 8001230:	da07      	bge.n	8001242 <get_koef_temper_conc+0x3e>
	BOOL find_temper = FALSE;
 8001232:	2700      	movs	r7, #0
			temper_koef = koef_1 * K_MUL;
			find_null = TRUE;
		}

		if((temperat >= temper_1) && (temperat <= temper_2))
			find_temper = TRUE;
 8001234:	2300      	movs	r3, #0
 8001236:	4699      	mov	r9, r3
 8001238:	3301      	adds	r3, #1
 800123a:	24fa      	movs	r4, #250	; 0xfa
 800123c:	00a4      	lsls	r4, r4, #2
 800123e:	9401      	str	r4, [sp, #4]
 8001240:	e003      	b.n	800124a <get_koef_temper_conc+0x46>
		find_temper = TRUE;
 8001242:	2701      	movs	r7, #1
 8001244:	e7f6      	b.n	8001234 <get_koef_temper_conc+0x30>
	for(i = 1; (i < 6) && (!find_temper) && (!find_null); i++){
 8001246:	3301      	adds	r3, #1
 8001248:	b29b      	uxth	r3, r3
 800124a:	2b05      	cmp	r3, #5
 800124c:	d81e      	bhi.n	800128c <get_koef_temper_conc+0x88>
 800124e:	003c      	movs	r4, r7
 8001250:	464d      	mov	r5, r9
 8001252:	432c      	orrs	r4, r5
 8001254:	d11a      	bne.n	800128c <get_koef_temper_conc+0x88>
		temper_1 = dev.Config.temp_corr_conc[i].Temp;
 8001256:	4c1a      	ldr	r4, [pc, #104]	; (80012c0 <get_koef_temper_conc+0xbc>)
 8001258:	001a      	movs	r2, r3
 800125a:	3218      	adds	r2, #24
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	18a2      	adds	r2, r4, r2
 8001260:	2606      	movs	r6, #6
 8001262:	5f91      	ldrsh	r1, [r2, r6]
		koef_1 = dev.Config.temp_corr_conc[i].Koef;
 8001264:	8916      	ldrh	r6, [r2, #8]
		temper_2 = dev.Config.temp_corr_conc[i+1].Temp;
 8001266:	001a      	movs	r2, r3
 8001268:	3219      	adds	r2, #25
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	18a2      	adds	r2, r4, r2
 800126e:	2406      	movs	r4, #6
 8001270:	5f15      	ldrsh	r5, [r2, r4]
 8001272:	46ac      	mov	ip, r5
		koef_2 = dev.Config.temp_corr_conc[i+1].Koef;
 8001274:	8912      	ldrh	r2, [r2, #8]
		if(koef_2 == 0){
 8001276:	2a00      	cmp	r2, #0
 8001278:	d102      	bne.n	8001280 <get_koef_temper_conc+0x7c>
			temper_koef = koef_1 * K_MUL;
 800127a:	9601      	str	r6, [sp, #4]
			find_null = TRUE;
 800127c:	2401      	movs	r4, #1
 800127e:	46a1      	mov	r9, r4
		if((temperat >= temper_1) && (temperat <= temper_2))
 8001280:	4288      	cmp	r0, r1
 8001282:	dbe0      	blt.n	8001246 <get_koef_temper_conc+0x42>
 8001284:	4560      	cmp	r0, ip
 8001286:	dcde      	bgt.n	8001246 <get_koef_temper_conc+0x42>
			find_temper = TRUE;
 8001288:	2701      	movs	r7, #1
 800128a:	e7dc      	b.n	8001246 <get_koef_temper_conc+0x42>

	}

	if(find_temper){
 800128c:	2f00      	cmp	r7, #0
 800128e:	d009      	beq.n	80012a4 <get_koef_temper_conc+0xa0>

		dt = temperat - temper_1;
 8001290:	1a40      	subs	r0, r0, r1
 8001292:	b203      	sxth	r3, r0

		dk = (koef_2 - koef_1) * dt * K_MUL / (temper_2 - temper_1);
 8001294:	1b90      	subs	r0, r2, r6
 8001296:	4358      	muls	r0, r3
 8001298:	4663      	mov	r3, ip
 800129a:	1a59      	subs	r1, r3, r1
 800129c:	f7fe ff46 	bl	800012c <__udivsi3>

		temper_koef =  (koef_1 * K_MUL) + dk;
 80012a0:	1836      	adds	r6, r6, r0
 80012a2:	e005      	b.n	80012b0 <get_koef_temper_conc+0xac>

	}else if(temperat > temper_2){
 80012a4:	4584      	cmp	ip, r0
 80012a6:	db09      	blt.n	80012bc <get_koef_temper_conc+0xb8>
 80012a8:	9e01      	ldr	r6, [sp, #4]
 80012aa:	e001      	b.n	80012b0 <get_koef_temper_conc+0xac>
		return temper_koef;
 80012ac:	26fa      	movs	r6, #250	; 0xfa
 80012ae:	00b6      	lsls	r6, r6, #2
		temper_koef = koef_2 * K_MUL;

	}

	return temper_koef;
}
 80012b0:	0030      	movs	r0, r6
 80012b2:	b003      	add	sp, #12
 80012b4:	bcc0      	pop	{r6, r7}
 80012b6:	46b9      	mov	r9, r7
 80012b8:	46b0      	mov	r8, r6
 80012ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temper_koef = koef_2 * K_MUL;
 80012bc:	0016      	movs	r6, r2
 80012be:	e7f7      	b.n	80012b0 <get_koef_temper_conc+0xac>
 80012c0:	20000424 	.word	0x20000424

080012c4 <SetGasValue>:
}
*/

//==============================================================================

void SetGasValue(void){
 80012c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c6:	46c6      	mov	lr, r8
 80012c8:	b500      	push	{lr}
	uint32_t koef_tc;

//	dev.RegInput.ADC_0 = dev.Config.CalibConcADC;
//	dev.RegInput.TempSensor = dev.Config.CalibConcTemper;

	if(dev.RegInput.ADC_0 > dev.Config.CalibZeroADC)
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <SetGasValue+0x94>)
 80012cc:	2287      	movs	r2, #135	; 0x87
 80012ce:	0052      	lsls	r2, r2, #1
 80012d0:	5a9c      	ldrh	r4, [r3, r2]
 80012d2:	3a46      	subs	r2, #70	; 0x46
 80012d4:	5a9b      	ldrh	r3, [r3, r2]
 80012d6:	429c      	cmp	r4, r3
 80012d8:	d93a      	bls.n	8001350 <SetGasValue+0x8c>
		adc = dev.RegInput.ADC_0 - dev.Config.CalibZeroADC;
 80012da:	1ae4      	subs	r4, r4, r3
	else
		adc = 0;

	if((dev.Config.CalibConcADC - dev.Config.CalibZeroADC) > 0){
 80012dc:	491e      	ldr	r1, [pc, #120]	; (8001358 <SetGasValue+0x94>)
 80012de:	22cc      	movs	r2, #204	; 0xcc
 80012e0:	5a89      	ldrh	r1, [r1, r2]
 80012e2:	1ac9      	subs	r1, r1, r3
 80012e4:	2900      	cmp	r1, #0
 80012e6:	dd35      	ble.n	8001354 <SetGasValue+0x90>
		k = dev.Config.ValueCalib  * 10000/ (dev.Config.CalibConcADC - dev.Config.CalibZeroADC);
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <SetGasValue+0x94>)
 80012ea:	899b      	ldrh	r3, [r3, #12]
 80012ec:	481b      	ldr	r0, [pc, #108]	; (800135c <SetGasValue+0x98>)
 80012ee:	4358      	muls	r0, r3
 80012f0:	f7fe ffa6 	bl	8000240 <__divsi3>
	}
	else{
		k = 10000;
	}

	val = adc*k;
 80012f4:	4360      	muls	r0, r4
	val += 5000;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <SetGasValue+0x9c>)
 80012f8:	469c      	mov	ip, r3
 80012fa:	4460      	add	r0, ip
	val /= 10000;
 80012fc:	4917      	ldr	r1, [pc, #92]	; (800135c <SetGasValue+0x98>)
 80012fe:	f7fe ff15 	bl	800012c <__udivsi3>
 8001302:	0007      	movs	r7, r0

	dev.RegInput.Value_0 = val;
 8001304:	4d14      	ldr	r5, [pc, #80]	; (8001358 <SetGasValue+0x94>)
 8001306:	2386      	movs	r3, #134	; 0x86
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	52e8      	strh	r0, [r5, r3]

	kc = get_koef_temper_conc(dev.Config.CalibConcTemper);
 800130c:	3b42      	subs	r3, #66	; 0x42
 800130e:	5ee8      	ldrsh	r0, [r5, r3]
 8001310:	f7ff ff78 	bl	8001204 <get_koef_temper_conc>
 8001314:	4680      	mov	r8, r0
	koef_tc = get_koef_temper_conc(dev.RegInput.TempSensor);
 8001316:	23e8      	movs	r3, #232	; 0xe8
 8001318:	5ee8      	ldrsh	r0, [r5, r3]
 800131a:	f7ff ff73 	bl	8001204 <get_koef_temper_conc>
 800131e:	0006      	movs	r6, r0

	val *= kc;
 8001320:	4640      	mov	r0, r8
 8001322:	4378      	muls	r0, r7
	val += (koef_tc >> 1);
 8001324:	0877      	lsrs	r7, r6, #1
 8001326:	1838      	adds	r0, r7, r0
	val /= koef_tc;
 8001328:	0031      	movs	r1, r6
 800132a:	f7fe feff 	bl	800012c <__udivsi3>

	dev.RegInput.Value = val;
 800132e:	23e2      	movs	r3, #226	; 0xe2
 8001330:	52e8      	strh	r0, [r5, r3]

	val = 1000 * adc;
 8001332:	0160      	lsls	r0, r4, #5
 8001334:	1b00      	subs	r0, r0, r4
 8001336:	0080      	lsls	r0, r0, #2
 8001338:	1900      	adds	r0, r0, r4
 800133a:	00c0      	lsls	r0, r0, #3
	val += (koef_tc >> 1);
 800133c:	1838      	adds	r0, r7, r0
	val /= koef_tc;
 800133e:	0031      	movs	r1, r6
 8001340:	f7fe fef4 	bl	800012c <__udivsi3>

	dev.RegInput.ADC_TK = val;
 8001344:	2388      	movs	r3, #136	; 0x88
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	52e8      	strh	r0, [r5, r3]
	d_printf("ADC: %04d, ADC_TK %04d", adc, dev.RegInput.ADC_TK);
//	d_printf("\n\r");
//	d_printf("Val: %04d, Val_0 %04d", dev.RegInput.Value,dev.RegInput.Value_0);
#endif

}
 800134a:	bc80      	pop	{r7}
 800134c:	46b8      	mov	r8, r7
 800134e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adc = 0;
 8001350:	2400      	movs	r4, #0
 8001352:	e7c3      	b.n	80012dc <SetGasValue+0x18>
		k = 10000;
 8001354:	4801      	ldr	r0, [pc, #4]	; (800135c <SetGasValue+0x98>)
 8001356:	e7cd      	b.n	80012f4 <SetGasValue+0x30>
 8001358:	20000424 	.word	0x20000424
 800135c:	00002710 	.word	0x00002710
 8001360:	00001388 	.word	0x00001388

08001364 <d_printf>:

  LL_LPUART_EnableIT_RXNE(DBG_UART);

}

void d_printf(const char *format, ...){
 8001364:	b40f      	push	{r0, r1, r2, r3}
 8001366:	b530      	push	{r4, r5, lr}
 8001368:	b0af      	sub	sp, #188	; 0xbc
 800136a:	ab32      	add	r3, sp, #200	; 0xc8
 800136c:	cb04      	ldmia	r3!, {r2}

  //return;

  va_list args;

  va_start(args, format);
 800136e:	9300      	str	r3, [sp, #0]
  vsnprintf((char*)aString,180,format,args);
 8001370:	21b4      	movs	r1, #180	; 0xb4
 8001372:	a801      	add	r0, sp, #4
 8001374:	f001 fe64 	bl	8003040 <vsniprintf>
  va_end(args);

  len = strlen((char*)aString);
 8001378:	a801      	add	r0, sp, #4
 800137a:	f7fe fec5 	bl	8000108 <strlen>
 800137e:	b2c0      	uxtb	r0, r0

  for(uint16_t i=0;i<len;i++)
 8001380:	2200      	movs	r2, #0
 8001382:	e005      	b.n	8001390 <d_printf+0x2c>
  uint8_t *buffer;
}ring_buffer;

static inline uint16_t get_next(uint16_t cur_offset, uint16_t max_offset)
{
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001384:	3301      	adds	r3, #1
 8001386:	b29b      	uxth	r3, r3
}

static inline void ring_buffer_put(ring_buffer *ring, uint8_t data)
{
  ring->buffer[ring->write_offset] = data;
  ring->write_offset = ring_buffer_get_next_write(ring);
 8001388:	490f      	ldr	r1, [pc, #60]	; (80013c8 <d_printf+0x64>)
 800138a:	800b      	strh	r3, [r1, #0]
 800138c:	3201      	adds	r2, #1
 800138e:	b292      	uxth	r2, r2
 8001390:	b283      	uxth	r3, r0
 8001392:	4293      	cmp	r3, r2
 8001394:	d90d      	bls.n	80013b2 <d_printf+0x4e>
    ring_buffer_put(&dbg_ring_buff_tx,aString[i]);
 8001396:	ab01      	add	r3, sp, #4
 8001398:	5c9c      	ldrb	r4, [r3, r2]
  ring->buffer[ring->write_offset] = data;
 800139a:	490b      	ldr	r1, [pc, #44]	; (80013c8 <d_printf+0x64>)
 800139c:	880b      	ldrh	r3, [r1, #0]
 800139e:	688d      	ldr	r5, [r1, #8]
 80013a0:	54ec      	strb	r4, [r5, r3]
  return get_next(ring->write_offset, ring->size);
 80013a2:	880b      	ldrh	r3, [r1, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80013a8:	3901      	subs	r1, #1
 80013aa:	428b      	cmp	r3, r1
 80013ac:	d1ea      	bne.n	8001384 <d_printf+0x20>
 80013ae:	2300      	movs	r3, #0
 80013b0:	e7ea      	b.n	8001388 <d_printf+0x24>
  SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <d_printf+0x68>)
 80013b4:	6813      	ldr	r3, [r2, #0]
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6013      	str	r3, [r2, #0]

  LL_LPUART_EnableIT_TXE(DBG_UART);


}
 80013bc:	b02f      	add	sp, #188	; 0xbc
 80013be:	bc30      	pop	{r4, r5}
 80013c0:	bc08      	pop	{r3}
 80013c2:	b004      	add	sp, #16
 80013c4:	4718      	bx	r3
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	200001ec 	.word	0x200001ec
 80013cc:	40004400 	.word	0x40004400

080013d0 <Debug_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <Debug_TXEmpty_Callback+0x40>)
 80013d2:	885a      	ldrh	r2, [r3, #2]
 80013d4:	b292      	uxth	r2, r2
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
	}
}

void Debug_TXEmpty_Callback(void){

  if(ring_buffer_is_empty(&dbg_ring_buff_tx))
 80013da:	429a      	cmp	r2, r3
 80013dc:	d010      	beq.n	8001400 <Debug_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <Debug_TXEmpty_Callback+0x40>)
 80013e0:	8853      	ldrh	r3, [r2, #2]
 80013e2:	6891      	ldr	r1, [r2, #8]
 80013e4:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 80013e6:	8853      	ldrh	r3, [r2, #2]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80013ec:	3a01      	subs	r2, #1
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00c      	beq.n	800140c <Debug_TXEmpty_Callback+0x3c>
 80013f2:	3301      	adds	r3, #1
 80013f4:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <Debug_TXEmpty_Callback+0x40>)
 80013f8:	8053      	strh	r3, [r2, #2]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <Debug_TXEmpty_Callback+0x44>)
 80013fc:	6299      	str	r1, [r3, #40]	; 0x28

  }else{
    LL_LPUART_TransmitData8(DBG_UART,ring_buffer_get(&dbg_ring_buff_tx));
  }

}
 80013fe:	4770      	bx	lr
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <Debug_TXEmpty_Callback+0x44>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	2180      	movs	r1, #128	; 0x80
 8001406:	438b      	bics	r3, r1
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	e7f8      	b.n	80013fe <Debug_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800140c:	2300      	movs	r3, #0
 800140e:	e7f2      	b.n	80013f6 <Debug_TXEmpty_Callback+0x26>
 8001410:	200001ec 	.word	0x200001ec
 8001414:	40004400 	.word	0x40004400

08001418 <Debug_RXNEmpty_Callback>:
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <Debug_RXNEmpty_Callback+0xc>)
 800141a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

uint8_t dbg_cmd;

void Debug_RXNEmpty_Callback(void){

	dbg_cmd = LL_LPUART_ReceiveData8(DBG_UART);
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <Debug_RXNEmpty_Callback+0x10>)
 800141e:	701a      	strb	r2, [r3, #0]

//	debugMenu(dbg_cmd);
}
 8001420:	4770      	bx	lr
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	40004400 	.word	0x40004400
 8001428:	200001e8 	.word	0x200001e8

0800142c <Debug_UART_IRQHandler>:
void Debug_UART_IRQHandler(void){
 800142c:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	061b      	lsls	r3, r3, #24
 8001434:	d505      	bpl.n	8001442 <Debug_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	d501      	bpl.n	8001442 <Debug_UART_IRQHandler+0x16>
		Debug_TXEmpty_Callback();
 800143e:	f7ff ffc7 	bl	80013d0 <Debug_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	069b      	lsls	r3, r3, #26
 8001448:	d505      	bpl.n	8001456 <Debug_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	069b      	lsls	r3, r3, #26
 8001450:	d501      	bpl.n	8001456 <Debug_UART_IRQHandler+0x2a>
		Debug_RXNEmpty_Callback();
 8001452:	f7ff ffe1 	bl	8001418 <Debug_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	071b      	lsls	r3, r3, #28
 800145c:	d502      	bpl.n	8001464 <Debug_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 800145e:	4b02      	ldr	r3, [pc, #8]	; (8001468 <Debug_UART_IRQHandler+0x3c>)
 8001460:	2208      	movs	r2, #8
 8001462:	621a      	str	r2, [r3, #32]
}
 8001464:	bd10      	pop	{r4, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	40004400 	.word	0x40004400

0800146c <EEPROM_WaitEOP>:
// Ожидание завершения операции (стирание или записи) EEPROM с таймаутом
//
void EEPROM_WaitEOP(){

	// Таймаут 10 мсек
	uint32_t Timeout = 10;
 800146c:	220a      	movs	r2, #10

	while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 800146e:	4b08      	ldr	r3, [pc, #32]	; (8001490 <EEPROM_WaitEOP+0x24>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	079b      	lsls	r3, r3, #30
 8001474:	d408      	bmi.n	8001488 <EEPROM_WaitEOP+0x1c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <EEPROM_WaitEOP+0x28>)
 8001478:	681b      	ldr	r3, [r3, #0]

		if (LL_SYSTICK_IsActiveCounterFlag())
 800147a:	03db      	lsls	r3, r3, #15
 800147c:	d5f7      	bpl.n	800146e <EEPROM_WaitEOP+0x2>
		{
			if(Timeout-- == 0)
 800147e:	1e53      	subs	r3, r2, #1
 8001480:	2a00      	cmp	r2, #0
 8001482:	d004      	beq.n	800148e <EEPROM_WaitEOP+0x22>
 8001484:	001a      	movs	r2, r3
 8001486:	e7f2      	b.n	800146e <EEPROM_WaitEOP+0x2>
			}
		}

	}

	FLASH->SR = FLASH_SR_EOP;
 8001488:	4b01      	ldr	r3, [pc, #4]	; (8001490 <EEPROM_WaitEOP+0x24>)
 800148a:	2202      	movs	r2, #2
 800148c:	619a      	str	r2, [r3, #24]

}
 800148e:	4770      	bx	lr
 8001490:	40022000 	.word	0x40022000
 8001494:	e000e010 	.word	0xe000e010

08001498 <writeWordToEEPROM>:

void writeWordToEEPROM(uint16_t address, uint32_t data) {
 8001498:	b510      	push	{r4, lr}

	if(*(__IO uint32_t *) (EEPROM_BASE_ADR + address) != data){
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <writeWordToEEPROM+0x18>)
 800149c:	469c      	mov	ip, r3
 800149e:	4460      	add	r0, ip
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	428b      	cmp	r3, r1
 80014a4:	d100      	bne.n	80014a8 <writeWordToEEPROM+0x10>

		EEPROM_WaitEOP();

	}

}
 80014a6:	bd10      	pop	{r4, pc}
		*(__IO uint32_t *) (EEPROM_BASE_ADR + address) = data;
 80014a8:	6001      	str	r1, [r0, #0]
		EEPROM_WaitEOP();
 80014aa:	f7ff ffdf 	bl	800146c <EEPROM_WaitEOP>
}
 80014ae:	e7fa      	b.n	80014a6 <writeWordToEEPROM+0xe>
 80014b0:	08080000 	.word	0x08080000

080014b4 <write_mem_to_eeprom>:

void write_mem_to_eeprom(uint16_t address, uint32_t *ptr, uint8_t len){
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	0007      	movs	r7, r0
 80014b8:	000e      	movs	r6, r1
 80014ba:	0015      	movs	r5, r2

	int i;

	for(i=0;i<len;i++){
 80014bc:	2400      	movs	r4, #0
 80014be:	42a5      	cmp	r5, r4
 80014c0:	dd07      	ble.n	80014d2 <write_mem_to_eeprom+0x1e>

		writeWordToEEPROM(address + i*4, ptr[i]);
 80014c2:	00a3      	lsls	r3, r4, #2
 80014c4:	58f1      	ldr	r1, [r6, r3]
 80014c6:	18f8      	adds	r0, r7, r3
 80014c8:	b280      	uxth	r0, r0
 80014ca:	f7ff ffe5 	bl	8001498 <writeWordToEEPROM>
	for(i=0;i<len;i++){
 80014ce:	3401      	adds	r4, #1
 80014d0:	e7f5      	b.n	80014be <write_mem_to_eeprom+0xa>

	}

}
 80014d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080014d4 <eeprom_config_write_bank>:

void eeprom_config_write_bank(uint8_t bank){
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	0004      	movs	r4, r0

	dev.Config.crc = CalcCRC((uint32_t*)&dev.Config,(sizeof(Config_td)/4)-1);
 80014d8:	4e0e      	ldr	r6, [pc, #56]	; (8001514 <eeprom_config_write_bank+0x40>)
 80014da:	2135      	movs	r1, #53	; 0x35
 80014dc:	0030      	movs	r0, r6
 80014de:	f7ff f997 	bl	8000810 <CalcCRC>
 80014e2:	23d4      	movs	r3, #212	; 0xd4
 80014e4:	50f0      	str	r0, [r6, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014e6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i

	__enter_critical();

	FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 80014ec:	4d0a      	ldr	r5, [pc, #40]	; (8001518 <eeprom_config_write_bank+0x44>)
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <eeprom_config_write_bank+0x48>)
 80014f0:	60ea      	str	r2, [r5, #12]
	FLASH->PEKEYR = (uint32_t) 0x02030405U;
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <eeprom_config_write_bank+0x4c>)
 80014f4:	60ea      	str	r2, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f6:	f383 8810 	msr	PRIMASK, r3

	__exit_critical();

	write_mem_to_eeprom(EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * bank,
 80014fa:	20d8      	movs	r0, #216	; 0xd8
 80014fc:	4360      	muls	r0, r4
 80014fe:	b280      	uxth	r0, r0
 8001500:	2236      	movs	r2, #54	; 0x36
 8001502:	0031      	movs	r1, r6
 8001504:	f7ff ffd6 	bl	80014b4 <write_mem_to_eeprom>
			(uint32_t*)&dev.Config,sizeof(Config_td)/4);


	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001508:	686b      	ldr	r3, [r5, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	4313      	orrs	r3, r2
 800150e:	606b      	str	r3, [r5, #4]

}
 8001510:	bd70      	pop	{r4, r5, r6, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	20000424 	.word	0x20000424
 8001518:	40022000 	.word	0x40022000
 800151c:	89abcdef 	.word	0x89abcdef
 8001520:	02030405 	.word	0x02030405

08001524 <eeprom_config_write>:

void eeprom_config_write(void) {
 8001524:	b510      	push	{r4, lr}

	dev.Config.Counter++;
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <eeprom_config_write+0x2c>)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	6013      	str	r3, [r2, #0]

	d_printf("\n\r");
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <eeprom_config_write+0x30>)
 8001530:	f7ff ff18 	bl	8001364 <d_printf>
	eeprom_config_write_bank(nConfigBank);
 8001534:	4c08      	ldr	r4, [pc, #32]	; (8001558 <eeprom_config_write+0x34>)
 8001536:	7820      	ldrb	r0, [r4, #0]
 8001538:	f7ff ffcc 	bl	80014d4 <eeprom_config_write_bank>
	d_printf("Config write");
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <eeprom_config_write+0x38>)
 800153e:	f7ff ff11 	bl	8001364 <d_printf>

	f_AdcDataBad = TRUE;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <eeprom_config_write+0x3c>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]

	nConfigBank ^= 1;
 8001548:	7823      	ldrb	r3, [r4, #0]
 800154a:	4053      	eors	r3, r2
 800154c:	7023      	strb	r3, [r4, #0]


}
 800154e:	bd10      	pop	{r4, pc}
 8001550:	20000424 	.word	0x20000424
 8001554:	0800388c 	.word	0x0800388c
 8001558:	20000094 	.word	0x20000094
 800155c:	08003890 	.word	0x08003890
 8001560:	20000542 	.word	0x20000542

08001564 <factory_config_write>:
}

//==============================================================================
// Запись заводских настроек во FLASH
//
void factory_config_write(void){
 8001564:	b510      	push	{r4, lr}

	eeprom_config_write_bank(2);
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff ffb4 	bl	80014d4 <eeprom_config_write_bank>

	d_printf("\n\rFactory config write");
 800156c:	4801      	ldr	r0, [pc, #4]	; (8001574 <factory_config_write+0x10>)
 800156e:	f7ff fef9 	bl	8001364 <d_printf>

}
 8001572:	bd10      	pop	{r4, pc}
 8001574:	080038a0 	.word	0x080038a0

08001578 <factory_config_read>:

//==============================================================================
// Чтение заводских настроек из FLASH
//
BOOL factory_config_read(void){
 8001578:	b510      	push	{r4, lr}
 800157a:	b0b6      	sub	sp, #216	; 0xd8

	uint32_t tmp;

	// Чтение заводских настроек во временную структуру

	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 800157c:	2300      	movs	r3, #0
 800157e:	e007      	b.n	8001590 <factory_config_read+0x18>

		((uint32_t*) &ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * 2 + (i * 4)));
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4918      	ldr	r1, [pc, #96]	; (80015e4 <factory_config_read+0x6c>)
 8001584:	1859      	adds	r1, r3, r1
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	4668      	mov	r0, sp
 800158a:	50c1      	str	r1, [r0, r3]
	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 800158c:	3201      	adds	r2, #1
 800158e:	b253      	sxtb	r3, r2
 8001590:	b2da      	uxtb	r2, r3
 8001592:	2a35      	cmp	r2, #53	; 0x35
 8001594:	d9f4      	bls.n	8001580 <factory_config_read+0x8>
	}

	// Проверка CRC

	crc = CalcCRC((uint32_t*)&ConfigTmp, (EEPROM_CONFIG_LEN/4)-1);
 8001596:	2135      	movs	r1, #53	; 0x35
 8001598:	4668      	mov	r0, sp
 800159a:	f7ff f939 	bl	8000810 <CalcCRC>

	if( ConfigTmp.crc != crc){
 800159e:	23d4      	movs	r3, #212	; 0xd4
 80015a0:	466a      	mov	r2, sp
 80015a2:	58d3      	ldr	r3, [r2, r3]
 80015a4:	4283      	cmp	r3, r0
 80015a6:	d006      	beq.n	80015b6 <factory_config_read+0x3e>

		d_printf("\n\rNo Data Factory",0);
 80015a8:	2100      	movs	r1, #0
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <factory_config_read+0x70>)
 80015ac:	f7ff feda 	bl	8001364 <d_printf>

		return FALSE;
 80015b0:	2000      	movs	r0, #0

	eeprom_config_write();

	return TRUE;

}
 80015b2:	b036      	add	sp, #216	; 0xd8
 80015b4:	bd10      	pop	{r4, pc}
	d_printf("\n\rLoad Factory");
 80015b6:	480d      	ldr	r0, [pc, #52]	; (80015ec <factory_config_read+0x74>)
 80015b8:	f7ff fed4 	bl	8001364 <d_printf>
	tmp = dev.Config.Counter;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <factory_config_read+0x78>)
 80015be:	681c      	ldr	r4, [r3, #0]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80015c0:	2300      	movs	r3, #0
 80015c2:	e006      	b.n	80015d2 <factory_config_read+0x5a>
		((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp)[i];
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4669      	mov	r1, sp
 80015c8:	58c8      	ldr	r0, [r1, r3]
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <factory_config_read+0x78>)
 80015cc:	50c8      	str	r0, [r1, r3]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80015ce:	3201      	adds	r2, #1
 80015d0:	b253      	sxtb	r3, r2
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	2a35      	cmp	r2, #53	; 0x35
 80015d6:	d9f5      	bls.n	80015c4 <factory_config_read+0x4c>
	dev.Config.Counter = tmp;
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <factory_config_read+0x78>)
 80015da:	601c      	str	r4, [r3, #0]
	eeprom_config_write();
 80015dc:	f7ff ffa2 	bl	8001524 <eeprom_config_write>
	return TRUE;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e7e6      	b.n	80015b2 <factory_config_read+0x3a>
 80015e4:	080801b0 	.word	0x080801b0
 80015e8:	080038b8 	.word	0x080038b8
 80015ec:	080038cc 	.word	0x080038cc
 80015f0:	20000424 	.word	0x20000424

080015f4 <read_config_from_eeprom>:
void read_config_from_eeprom(void){
 80015f4:	b530      	push	{r4, r5, lr}
 80015f6:	b0ef      	sub	sp, #444	; 0x1bc
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 80015f8:	2300      	movs	r3, #0
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	2a6b      	cmp	r2, #107	; 0x6b
 80015fe:	d808      	bhi.n	8001612 <read_config_from_eeprom+0x1e>
		((uint32_t*) ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + (i * 4)));
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4943      	ldr	r1, [pc, #268]	; (8001710 <read_config_from_eeprom+0x11c>)
 8001604:	1859      	adds	r1, r3, r1
 8001606:	6808      	ldr	r0, [r1, #0]
 8001608:	a902      	add	r1, sp, #8
 800160a:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 800160c:	3201      	adds	r2, #1
 800160e:	b253      	sxtb	r3, r2
 8001610:	e7f3      	b.n	80015fa <read_config_from_eeprom+0x6>
	for(int8_t i = 0; i < 2; i++){
 8001612:	2400      	movs	r4, #0
 8001614:	e004      	b.n	8001620 <read_config_from_eeprom+0x2c>
			fValid[i] = TRUE;
 8001616:	ab01      	add	r3, sp, #4
 8001618:	2201      	movs	r2, #1
 800161a:	551a      	strb	r2, [r3, r4]
	for(int8_t i = 0; i < 2; i++){
 800161c:	3401      	adds	r4, #1
 800161e:	b264      	sxtb	r4, r4
 8001620:	2c01      	cmp	r4, #1
 8001622:	dc12      	bgt.n	800164a <read_config_from_eeprom+0x56>
		crc = CalcCRC((uint32_t*)&ConfigTmp[i], (EEPROM_CONFIG_LEN/4)-1);
 8001624:	25d8      	movs	r5, #216	; 0xd8
 8001626:	4365      	muls	r5, r4
 8001628:	ab02      	add	r3, sp, #8
 800162a:	1958      	adds	r0, r3, r5
 800162c:	2135      	movs	r1, #53	; 0x35
 800162e:	f7ff f8ef 	bl	8000810 <CalcCRC>
		if( ConfigTmp[i].crc == crc){
 8001632:	ab02      	add	r3, sp, #8
 8001634:	469c      	mov	ip, r3
 8001636:	4465      	add	r5, ip
 8001638:	002b      	movs	r3, r5
 800163a:	33d4      	adds	r3, #212	; 0xd4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4283      	cmp	r3, r0
 8001640:	d0e9      	beq.n	8001616 <read_config_from_eeprom+0x22>
			fValid[i] = FALSE;
 8001642:	ab01      	add	r3, sp, #4
 8001644:	2200      	movs	r2, #0
 8001646:	551a      	strb	r2, [r3, r4]
 8001648:	e7e8      	b.n	800161c <read_config_from_eeprom+0x28>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 800164a:	ab01      	add	r3, sp, #4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d010      	beq.n	8001674 <read_config_from_eeprom+0x80>
	}else if((fValid[0] == FALSE) && (fValid[1] == TRUE)){
 8001652:	2b00      	cmp	r3, #0
 8001654:	d103      	bne.n	800165e <read_config_from_eeprom+0x6a>
 8001656:	aa01      	add	r2, sp, #4
 8001658:	7852      	ldrb	r2, [r2, #1]
 800165a:	2a01      	cmp	r2, #1
 800165c:	d01e      	beq.n	800169c <read_config_from_eeprom+0xa8>
		nConfigBank = 0;
 800165e:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <read_config_from_eeprom+0x120>)
 8001660:	2100      	movs	r1, #0
 8001662:	7011      	strb	r1, [r2, #0]
	if((fValid[0] == FALSE) && (fValid[1] == FALSE)){
 8001664:	2b00      	cmp	r3, #0
 8001666:	d150      	bne.n	800170a <read_config_from_eeprom+0x116>
 8001668:	ab01      	add	r3, sp, #4
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d019      	beq.n	80016a4 <read_config_from_eeprom+0xb0>
 8001670:	2300      	movs	r3, #0
 8001672:	e039      	b.n	80016e8 <read_config_from_eeprom+0xf4>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 8001674:	aa01      	add	r2, sp, #4
 8001676:	7852      	ldrb	r2, [r2, #1]
 8001678:	2a01      	cmp	r2, #1
 800167a:	d1ea      	bne.n	8001652 <read_config_from_eeprom+0x5e>
		if(ConfigTmp[0].Counter < ConfigTmp[1].Counter){
 800167c:	32d7      	adds	r2, #215	; 0xd7
 800167e:	4669      	mov	r1, sp
 8001680:	2008      	movs	r0, #8
 8001682:	1809      	adds	r1, r1, r0
 8001684:	588a      	ldr	r2, [r1, r2]
 8001686:	9902      	ldr	r1, [sp, #8]
 8001688:	4291      	cmp	r1, r2
 800168a:	d203      	bcs.n	8001694 <read_config_from_eeprom+0xa0>
			nConfigBank = 1;
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <read_config_from_eeprom+0x120>)
 800168e:	2101      	movs	r1, #1
 8001690:	7011      	strb	r1, [r2, #0]
 8001692:	e7e7      	b.n	8001664 <read_config_from_eeprom+0x70>
			nConfigBank = 0;
 8001694:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <read_config_from_eeprom+0x120>)
 8001696:	2100      	movs	r1, #0
 8001698:	7011      	strb	r1, [r2, #0]
 800169a:	e7e3      	b.n	8001664 <read_config_from_eeprom+0x70>
		nConfigBank = 1;
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <read_config_from_eeprom+0x120>)
 800169e:	2101      	movs	r1, #1
 80016a0:	7011      	strb	r1, [r2, #0]
 80016a2:	e7df      	b.n	8001664 <read_config_from_eeprom+0x70>
		if(!factory_config_read()){
 80016a4:	f7ff ff68 	bl	8001578 <factory_config_read>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d127      	bne.n	80016fc <read_config_from_eeprom+0x108>
			dev_set_config_default();
 80016ac:	f000 fb7e 	bl	8001dac <dev_set_config_default>
			d_printf("\n\r%SetDef",0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <read_config_from_eeprom+0x124>)
 80016b4:	f7ff fe56 	bl	8001364 <d_printf>
			nConfigBank = 0;
 80016b8:	4c16      	ldr	r4, [pc, #88]	; (8001714 <read_config_from_eeprom+0x120>)
 80016ba:	2500      	movs	r5, #0
 80016bc:	7025      	strb	r5, [r4, #0]
			eeprom_config_write();
 80016be:	f7ff ff31 	bl	8001524 <eeprom_config_write>
			nConfigBank = 0;
 80016c2:	7025      	strb	r5, [r4, #0]
			ArhivStoreNote(ARCHIVE_SET_CONFIG_DEFAULT, 0);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2009      	movs	r0, #9
 80016c8:	f000 f8e6 	bl	8001898 <ArhivStoreNote>
 80016cc:	e016      	b.n	80016fc <read_config_from_eeprom+0x108>
			((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp[nConfigBank])[i];
 80016ce:	4911      	ldr	r1, [pc, #68]	; (8001714 <read_config_from_eeprom+0x120>)
 80016d0:	7808      	ldrb	r0, [r1, #0]
 80016d2:	21d8      	movs	r1, #216	; 0xd8
 80016d4:	4341      	muls	r1, r0
 80016d6:	a802      	add	r0, sp, #8
 80016d8:	4684      	mov	ip, r0
 80016da:	4461      	add	r1, ip
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	58c8      	ldr	r0, [r1, r3]
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <read_config_from_eeprom+0x128>)
 80016e2:	50c8      	str	r0, [r1, r3]
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80016e4:	3201      	adds	r2, #1
 80016e6:	b253      	sxtb	r3, r2
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	2a35      	cmp	r2, #53	; 0x35
 80016ec:	d9ef      	bls.n	80016ce <read_config_from_eeprom+0xda>
		d_printf("\n\rConfigBank-%d, CNT-%d", nConfigBank, dev.Config.Counter);
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <read_config_from_eeprom+0x128>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <read_config_from_eeprom+0x120>)
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <read_config_from_eeprom+0x12c>)
 80016f8:	f7ff fe34 	bl	8001364 <d_printf>
	nConfigBank ^= 1;
 80016fc:	4a05      	ldr	r2, [pc, #20]	; (8001714 <read_config_from_eeprom+0x120>)
 80016fe:	7813      	ldrb	r3, [r2, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	404b      	eors	r3, r1
 8001704:	7013      	strb	r3, [r2, #0]
}
 8001706:	b06f      	add	sp, #444	; 0x1bc
 8001708:	bd30      	pop	{r4, r5, pc}
 800170a:	2300      	movs	r3, #0
 800170c:	e7ec      	b.n	80016e8 <read_config_from_eeprom+0xf4>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	08080000 	.word	0x08080000
 8001714:	20000094 	.word	0x20000094
 8001718:	080038dc 	.word	0x080038dc
 800171c:	20000424 	.word	0x20000424
 8001720:	080038e8 	.word	0x080038e8

08001724 <FLASH_UNLOCK>:
//=============================================================================
// Снятие блокировки FLASH для стирания и записи
//
void FLASH_UNLOCK(void){

  FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <FLASH_UNLOCK+0x44>)
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <FLASH_UNLOCK+0x48>)
 8001728:	60da      	str	r2, [r3, #12]
  FLASH->PEKEYR = (uint32_t) 0x02030405U;
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <FLASH_UNLOCK+0x4c>)
 800172c:	60da      	str	r2, [r3, #12]

  if(READ_BIT(FLASH->PECR, FLASH_PECR_PELOCK)){
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	07db      	lsls	r3, r3, #31
 8001732:	d509      	bpl.n	8001748 <FLASH_UNLOCK+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001734:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <FLASH_UNLOCK+0x44>)
 800173c:	490b      	ldr	r1, [pc, #44]	; (800176c <FLASH_UNLOCK+0x48>)
 800173e:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001740:	490b      	ldr	r1, [pc, #44]	; (8001770 <FLASH_UNLOCK+0x4c>)
 8001742:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001744:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

  if (READ_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK)){
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <FLASH_UNLOCK+0x44>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	079b      	lsls	r3, r3, #30
 800174e:	d509      	bpl.n	8001764 <FLASH_UNLOCK+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001750:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001756:	4b04      	ldr	r3, [pc, #16]	; (8001768 <FLASH_UNLOCK+0x44>)
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <FLASH_UNLOCK+0x50>)
 800175a:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <FLASH_UNLOCK+0x54>)
 800175e:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001760:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

}
 8001764:	4770      	bx	lr
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	40022000 	.word	0x40022000
 800176c:	89abcdef 	.word	0x89abcdef
 8001770:	02030405 	.word	0x02030405
 8001774:	8c9daebf 	.word	0x8c9daebf
 8001778:	13141516 	.word	0x13141516

0800177c <FLASH_LOCK>:
//=============================================================================
// Восстановление блокировки FLASH
//
void FLASH_LOCK(void){

  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <FLASH_LOCK+0x14>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	3101      	adds	r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]

}
 800178e:	4770      	bx	lr
 8001790:	40022000 	.word	0x40022000

08001794 <FlashWaitNoBSY>:
void FlashWaitNoBSY(void){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 8001794:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_BSY) != 0){
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <FlashWaitNoBSY+0x20>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	07db      	lsls	r3, r3, #31
 800179c:	d508      	bpl.n	80017b0 <FlashWaitNoBSY+0x1c>
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <FlashWaitNoBSY+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 80017a2:	03db      	lsls	r3, r3, #15
 80017a4:	d5f7      	bpl.n	8001796 <FlashWaitNoBSY+0x2>
    {
      if(Timeout-- == 0)
 80017a6:	1e53      	subs	r3, r2, #1
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d001      	beq.n	80017b0 <FlashWaitNoBSY+0x1c>
 80017ac:	001a      	movs	r2, r3
 80017ae:	e7f2      	b.n	8001796 <FlashWaitNoBSY+0x2>

  }

//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 80017b0:	4770      	bx	lr
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40022000 	.word	0x40022000
 80017b8:	e000e010 	.word	0xe000e010

080017bc <FlashWaitEOP>:
void FlashWaitEOP(){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 80017bc:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <FlashWaitEOP+0x24>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	079b      	lsls	r3, r3, #30
 80017c4:	d408      	bmi.n	80017d8 <FlashWaitEOP+0x1c>
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <FlashWaitEOP+0x28>)
 80017c8:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 80017ca:	03db      	lsls	r3, r3, #15
 80017cc:	d5f7      	bpl.n	80017be <FlashWaitEOP+0x2>
    {
      if(Timeout-- == 0)
 80017ce:	1e53      	subs	r3, r2, #1
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	d004      	beq.n	80017de <FlashWaitEOP+0x22>
 80017d4:	001a      	movs	r2, r3
 80017d6:	e7f2      	b.n	80017be <FlashWaitEOP+0x2>
      }
    }

  }

  FLASH->SR = FLASH_SR_EOP;
 80017d8:	4b01      	ldr	r3, [pc, #4]	; (80017e0 <FlashWaitEOP+0x24>)
 80017da:	2202      	movs	r2, #2
 80017dc:	619a      	str	r2, [r3, #24]
//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 80017de:	4770      	bx	lr
 80017e0:	40022000 	.word	0x40022000
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <FlashPageErase>:

//=============================================================================
// Стирание страницы FLASH
//
void FlashPageErase(uint32_t *ptr){
 80017e8:	b570      	push	{r4, r5, r6, lr}

  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80017ea:	4c0d      	ldr	r4, [pc, #52]	; (8001820 <FlashPageErase+0x38>)
 80017ec:	6862      	ldr	r2, [r4, #4]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4313      	orrs	r3, r2
 80017f4:	6063      	str	r3, [r4, #4]

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	2508      	movs	r5, #8
 80017fa:	432b      	orrs	r3, r5
 80017fc:	6063      	str	r3, [r4, #4]

  *(__IO uint32_t *)((uint32_t)ptr & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 80017fe:	237f      	movs	r3, #127	; 0x7f
 8001800:	4398      	bics	r0, r3
 8001802:	2300      	movs	r3, #0
 8001804:	6003      	str	r3, [r0, #0]

  FlashWaitNoBSY();
 8001806:	f7ff ffc5 	bl	8001794 <FlashWaitNoBSY>
  FlashWaitEOP();
 800180a:	f7ff ffd7 	bl	80017bc <FlashWaitEOP>


  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	43ab      	bics	r3, r5
 8001812:	6063      	str	r3, [r4, #4]

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	4a03      	ldr	r2, [pc, #12]	; (8001824 <FlashPageErase+0x3c>)
 8001818:	4013      	ands	r3, r2
 800181a:	6063      	str	r3, [r4, #4]

}
 800181c:	bd70      	pop	{r4, r5, r6, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	40022000 	.word	0x40022000
 8001824:	fffffdff 	.word	0xfffffdff

08001828 <FlashProgram>:
// stat - вид записи
// data - данные записи
// Возвращает TRUE, если FLASH не стёрта и записанные
// данные помечены как недействительные
//
BOOL FlashProgram(uint32_t *ptr, uint8_t stat, uint32_t data){
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	0004      	movs	r4, r0
 800182c:	0015      	movs	r5, r2

  BOOL no_erase = FALSE;

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <FlashProgram+0x68>)
 8001830:	6853      	ldr	r3, [r2, #4]
 8001832:	2008      	movs	r0, #8
 8001834:	4303      	orrs	r3, r0
 8001836:	6053      	str	r3, [r2, #4]

  if(*(__IO uint32_t *)((uint32_t)ptr) == 0){
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d119      	bne.n	8001872 <FlashProgram+0x4a>
    *(__IO uint32_t *)((uint32_t)ptr) = ((stat & 0x7F) << 24) | (0xFFFFFF & arh.MHour);
 800183e:	0609      	lsls	r1, r1, #24
 8001840:	23fe      	movs	r3, #254	; 0xfe
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	4019      	ands	r1, r3
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <FlashProgram+0x6c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	4319      	orrs	r1, r3
 8001850:	6021      	str	r1, [r4, #0]
  BOOL no_erase = FALSE;
 8001852:	2600      	movs	r6, #0
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001854:	f7ff ffb2 	bl	80017bc <FlashWaitEOP>

  if(*(__IO uint32_t *)((uint32_t)ptr+4) == 0){
 8001858:	6863      	ldr	r3, [r4, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d110      	bne.n	8001880 <FlashProgram+0x58>
    *(__IO uint32_t *)((uint32_t)ptr+4) = data;
 800185e:	6065      	str	r5, [r4, #4]
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001860:	f7ff ffac 	bl	80017bc <FlashWaitEOP>

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <FlashProgram+0x68>)
 8001866:	6853      	ldr	r3, [r2, #4]
 8001868:	2108      	movs	r1, #8
 800186a:	438b      	bics	r3, r1
 800186c:	6053      	str	r3, [r2, #4]

  return no_erase;
}
 800186e:	0030      	movs	r0, r6
 8001870:	bd70      	pop	{r4, r5, r6, pc}
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8001872:	6822      	ldr	r2, [r4, #0]
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	061b      	lsls	r3, r3, #24
 8001878:	4313      	orrs	r3, r2
 800187a:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 800187c:	2601      	movs	r6, #1
 800187e:	e7e9      	b.n	8001854 <FlashProgram+0x2c>
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8001880:	6822      	ldr	r2, [r4, #0]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	4313      	orrs	r3, r2
 8001888:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 800188a:	2601      	movs	r6, #1
 800188c:	e7e8      	b.n	8001860 <FlashProgram+0x38>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40022000 	.word	0x40022000
 8001894:	200000dc 	.word	0x200000dc

08001898 <ArhivStoreNote>:
//=============================================================================
// Сохранение записи во FLASH
// stat - вид записи
// data - данные записи
//
void ArhivStoreNote(uint8_t stat, uint32_t data){
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	0007      	movs	r7, r0
 800189c:	000e      	movs	r6, r1

  uint32_t *ptr;
  BOOL flg_no_erase;
  uint16_t write_cnt = 0;

  FLASH_UNLOCK();
 800189e:	f7ff ff41 	bl	8001724 <FLASH_UNLOCK>
  uint16_t write_cnt = 0;
 80018a2:	2500      	movs	r5, #0
 80018a4:	e00d      	b.n	80018c2 <ArhivStoreNote+0x2a>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;

    // Если указатель на начало страницы
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
//      DBG_OUT2_HI;
      FlashPageErase(ptr);
 80018a6:	0020      	movs	r0, r4
 80018a8:	f7ff ff9e 	bl	80017e8 <FlashPageErase>
 80018ac:	e012      	b.n	80018d4 <ArhivStoreNote+0x3c>
    }

    flg_no_erase = FlashProgram(ptr, stat, data);

    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4a10      	ldr	r2, [pc, #64]	; (80018f4 <ArhivStoreNote+0x5c>)
 80018b4:	8113      	strh	r3, [r2, #8]

    write_cnt++;
 80018b6:	3501      	adds	r5, #1
 80018b8:	b2ad      	uxth	r5, r5
    // Продолжать если была попытка записи в нестёртую ячейку и не превышен размер страницы
  }while((flg_no_erase == TRUE) && (write_cnt < (FLASH_PAGE_SIZE / ARHIV_SIZE_ITEM / 4)));
 80018ba:	2801      	cmp	r0, #1
 80018bc:	d116      	bne.n	80018ec <ArhivStoreNote+0x54>
 80018be:	2d0f      	cmp	r5, #15
 80018c0:	d814      	bhi.n	80018ec <ArhivStoreNote+0x54>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <ArhivStoreNote+0x5c>)
 80018c4:	891c      	ldrh	r4, [r3, #8]
 80018c6:	00e4      	lsls	r4, r4, #3
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <ArhivStoreNote+0x60>)
 80018ca:	469c      	mov	ip, r3
 80018cc:	4464      	add	r4, ip
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
 80018ce:	237f      	movs	r3, #127	; 0x7f
 80018d0:	421c      	tst	r4, r3
 80018d2:	d0e8      	beq.n	80018a6 <ArhivStoreNote+0xe>
    flg_no_erase = FlashProgram(ptr, stat, data);
 80018d4:	0032      	movs	r2, r6
 80018d6:	0039      	movs	r1, r7
 80018d8:	0020      	movs	r0, r4
 80018da:	f7ff ffa5 	bl	8001828 <FlashProgram>
    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <ArhivStoreNote+0x5c>)
 80018e0:	891b      	ldrh	r3, [r3, #8]
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <ArhivStoreNote+0x64>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d9e2      	bls.n	80018ae <ArhivStoreNote+0x16>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e7e2      	b.n	80018b2 <ArhivStoreNote+0x1a>

  FLASH_LOCK();
 80018ec:	f7ff ff46 	bl	800177c <FLASH_LOCK>

//  DBG_OUT2_LO;

  //	eeprom_config_write_sync();

}
 80018f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	200000dc 	.word	0x200000dc
 80018f8:	08006000 	.word	0x08006000
 80018fc:	000003fe 	.word	0x000003fe

08001900 <modbus_init>:

BOOL f_mbs_packet_rcv = FALSE;

void modbus_init(void){

	mbs_rx_cnt = 0;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <modbus_init+0x24>)
 8001902:	2200      	movs	r2, #0
 8001904:	801a      	strh	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <modbus_init+0x28>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2104      	movs	r1, #4
 800190c:	430a      	orrs	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	311c      	adds	r1, #28
 8001914:	430a      	orrs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	391f      	subs	r1, #31
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

	LL_LPUART_EnableDirectionRx(MBS_LPUART);
	LL_LPUART_EnableIT_RXNE(MBS_LPUART);
	LL_LPUART_Enable(MBS_LPUART);

}
 8001920:	4770      	bx	lr
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	200002f8 	.word	0x200002f8
 8001928:	40004800 	.word	0x40004800

0800192c <Modbus_TO_timer>:

void Modbus_TO_timer(void){

	//memcpy(mbs_pkt_rx, mbs_buff_rx, mbs_rx_cnt);
	mbs_rx_pkt_len = mbs_rx_cnt;
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <Modbus_TO_timer+0x14>)
 800192e:	8819      	ldrh	r1, [r3, #0]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <Modbus_TO_timer+0x18>)
 8001932:	8011      	strh	r1, [r2, #0]

	mbs_rx_cnt = 0;
 8001934:	2200      	movs	r2, #0
 8001936:	801a      	strh	r2, [r3, #0]
	f_mbs_packet_rcv = TRUE;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <Modbus_TO_timer+0x1c>)
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]

}
 800193e:	4770      	bx	lr
 8001940:	200002f8 	.word	0x200002f8
 8001944:	200002fc 	.word	0x200002fc
 8001948:	20000095 	.word	0x20000095

0800194c <Modbus_RXNEmpty_Callback>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <Modbus_RXNEmpty_Callback+0x34>)
 800194e:	6a59      	ldr	r1, [r3, #36]	; 0x24

void Modbus_RXNEmpty_Callback(void){

	uint8_t tmp = LL_USART_ReceiveData8(MBS_LPUART);

	mbs_pkt_rx[mbs_rx_cnt] = tmp;
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <Modbus_RXNEmpty_Callback+0x38>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <Modbus_RXNEmpty_Callback+0x3c>)
 8001956:	54d1      	strb	r1, [r2, r3]

	if(mbs_rx_cnt < (MBS_RX_BUF_SIZE-1)){
 8001958:	2bfe      	cmp	r3, #254	; 0xfe
 800195a:	d802      	bhi.n	8001962 <Modbus_RXNEmpty_Callback+0x16>
		mbs_rx_cnt++;
 800195c:	3301      	adds	r3, #1
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <Modbus_RXNEmpty_Callback+0x38>)
 8001960:	8013      	strh	r3, [r2, #0]
	}

	if(mbs_rx_cnt == 1){
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <Modbus_RXNEmpty_Callback+0x38>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d003      	beq.n	8001972 <Modbus_RXNEmpty_Callback+0x26>
		  LL_TIM_EnableCounter(TIM22);
	}

    TIM22->CNT = 0;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <Modbus_RXNEmpty_Callback+0x40>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001970:	4770      	bx	lr
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <Modbus_RXNEmpty_Callback+0x40>)
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	430b      	orrs	r3, r1
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	e7f5      	b.n	800196a <Modbus_RXNEmpty_Callback+0x1e>
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	40004800 	.word	0x40004800
 8001984:	200002f8 	.word	0x200002f8
 8001988:	200001f8 	.word	0x200001f8
 800198c:	40011400 	.word	0x40011400

08001990 <Modbus_TXEmpty_Callback>:

void Modbus_TXEmpty_Callback(void){

	if(mbs_tx_cnt < mbs_tx_len){
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <Modbus_TXEmpty_Callback+0x38>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <Modbus_TXEmpty_Callback+0x3c>)
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	4293      	cmp	r3, r2
 800199a:	d209      	bcs.n	80019b0 <Modbus_TXEmpty_Callback+0x20>

		LL_USART_TransmitData8(MBS_LPUART,mbs_pkt_tx[mbs_tx_cnt]);
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <Modbus_TXEmpty_Callback+0x40>)
 800199e:	5cc8      	ldrb	r0, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <Modbus_TXEmpty_Callback+0x44>)
 80019a2:	6288      	str	r0, [r1, #40]	; 0x28
		mbs_tx_cnt++;
 80019a4:	3301      	adds	r3, #1
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4907      	ldr	r1, [pc, #28]	; (80019c8 <Modbus_TXEmpty_Callback+0x38>)
 80019aa:	800b      	strh	r3, [r1, #0]

		if(mbs_tx_cnt == mbs_tx_len){
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d000      	beq.n	80019b2 <Modbus_TXEmpty_Callback+0x22>

		}

	}

}
 80019b0:	4770      	bx	lr
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <Modbus_TXEmpty_Callback+0x44>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2180      	movs	r1, #128	; 0x80
 80019b8:	438a      	bics	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	3940      	subs	r1, #64	; 0x40
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e7f4      	b.n	80019b0 <Modbus_TXEmpty_Callback+0x20>
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	200002fa 	.word	0x200002fa
 80019cc:	200002fe 	.word	0x200002fe
 80019d0:	20000300 	.word	0x20000300
 80019d4:	40004800 	.word	0x40004800

080019d8 <Modbus_LPUART_IRQHandler>:
void Modbus_LPUART_IRQHandler(void){
 80019d8:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	069b      	lsls	r3, r3, #26
 80019e0:	d505      	bpl.n	80019ee <Modbus_LPUART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	069b      	lsls	r3, r3, #26
 80019e8:	d501      	bpl.n	80019ee <Modbus_LPUART_IRQHandler+0x16>
		Modbus_RXNEmpty_Callback();
 80019ea:	f7ff ffaf 	bl	800194c <Modbus_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	061b      	lsls	r3, r3, #24
 80019f4:	d505      	bpl.n	8001a02 <Modbus_LPUART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	061b      	lsls	r3, r3, #24
 80019fc:	d501      	bpl.n	8001a02 <Modbus_LPUART_IRQHandler+0x2a>
		Modbus_TXEmpty_Callback();
 80019fe:	f7ff ffc7 	bl	8001990 <Modbus_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	065b      	lsls	r3, r3, #25
 8001a08:	d50d      	bpl.n	8001a26 <Modbus_LPUART_IRQHandler+0x4e>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	065b      	lsls	r3, r3, #25
 8001a10:	d509      	bpl.n	8001a26 <Modbus_LPUART_IRQHandler+0x4e>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 8001a14:	2140      	movs	r1, #64	; 0x40
 8001a16:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	393c      	subs	r1, #60	; 0x3c
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	071b      	lsls	r3, r3, #28
 8001a2c:	d502      	bpl.n	8001a34 <Modbus_LPUART_IRQHandler+0x5c>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001a2e:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <Modbus_LPUART_IRQHandler+0x60>)
 8001a30:	2208      	movs	r2, #8
 8001a32:	621a      	str	r2, [r3, #32]
}
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40004800 	.word	0x40004800

08001a3c <TimeOut_Set_I2C>:
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
}

//==============================================================================
static void TimeOut_Set_I2C(uint32_t timeOut)
{
 8001a3c:	b082      	sub	sp, #8
	__IO uint32_t  tmp;
	tmp = SysTick->CTRL;
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <TimeOut_Set_I2C+0x14>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	9301      	str	r3, [sp, #4]

	((void)tmp);
 8001a44:	9b01      	ldr	r3, [sp, #4]

	TimeOutDelay = timeOut+1;
 8001a46:	3001      	adds	r0, #1
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <TimeOut_Set_I2C+0x18>)
 8001a4a:	6018      	str	r0, [r3, #0]
}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	4770      	bx	lr
 8001a50:	e000e010 	.word	0xe000e010
 8001a54:	2000009c 	.word	0x2000009c

08001a58 <TimeOut_Read_I2C>:

static BOOL TimeOut_Read_I2C(void)
{
	if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <TimeOut_Read_I2C+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	03db      	lsls	r3, r3, #15
 8001a5e:	d503      	bpl.n	8001a68 <TimeOut_Read_I2C+0x10>
	{
		TimeOutDelay--;
 8001a60:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <TimeOut_Read_I2C+0x2c>)
 8001a62:	6813      	ldr	r3, [r2, #0]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	6013      	str	r3, [r2, #0]
	}

	if(TimeOutDelay > 0){
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <TimeOut_Read_I2C+0x2c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <TimeOut_Read_I2C+0x24>
		return FALSE;
	}

	TimeOutCnt++;
 8001a70:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <TimeOut_Read_I2C+0x30>)
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

	return TRUE;
 8001a78:	2001      	movs	r0, #1
}
 8001a7a:	4770      	bx	lr
		return FALSE;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e7fc      	b.n	8001a7a <TimeOut_Read_I2C+0x22>
 8001a80:	e000e010 	.word	0xe000e010
 8001a84:	2000009c 	.word	0x2000009c
 8001a88:	20000098 	.word	0x20000098

08001a8c <I2C_ByteSend>:
{
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	0004      	movs	r4, r0
	TimeOut_Set_I2C(I2C_TO);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff ffd3 	bl	8001a3c <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_TXIS(ADS_PORT))
 8001a96:	f7ff ffdf 	bl	8001a58 <TimeOut_Read_I2C>
 8001a9a:	2800      	cmp	r0, #0
 8001a9c:	d105      	bne.n	8001aaa <I2C_ByteSend+0x1e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <I2C_ByteSend+0x24>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	079b      	lsls	r3, r3, #30
 8001aa4:	d401      	bmi.n	8001aaa <I2C_ByteSend+0x1e>
		__NOP();
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	e7f5      	b.n	8001a96 <I2C_ByteSend+0xa>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8001aaa:	4b01      	ldr	r3, [pc, #4]	; (8001ab0 <I2C_ByteSend+0x24>)
 8001aac:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001aae:	bd10      	pop	{r4, pc}
 8001ab0:	40005400 	.word	0x40005400

08001ab4 <ADS_WRITE_REG>:
{
 8001ab4:	b510      	push	{r4, lr}
 8001ab6:	000c      	movs	r4, r1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001ab8:	490f      	ldr	r1, [pc, #60]	; (8001af8 <ADS_WRITE_REG+0x44>)
 8001aba:	684b      	ldr	r3, [r1, #4]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <ADS_WRITE_REG+0x48>)
 8001abe:	401a      	ands	r2, r3
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <ADS_WRITE_REG+0x4c>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
	I2C_ByteSend(reg);
 8001ac6:	f7ff ffe1 	bl	8001a8c <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data>>8));
 8001aca:	0a20      	lsrs	r0, r4, #8
 8001acc:	f7ff ffde 	bl	8001a8c <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data));
 8001ad0:	b2e0      	uxtb	r0, r4
 8001ad2:	f7ff ffdb 	bl	8001a8c <I2C_ByteSend>
	TimeOut_Set_I2C(I2C_TO);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff ffb0 	bl	8001a3c <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001adc:	f7ff ffbc 	bl	8001a58 <TimeOut_Read_I2C>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d103      	bne.n	8001aec <ADS_WRITE_REG+0x38>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <ADS_WRITE_REG+0x44>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	069b      	lsls	r3, r3, #26
 8001aea:	d5f7      	bpl.n	8001adc <ADS_WRITE_REG+0x28>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001aec:	4a02      	ldr	r2, [pc, #8]	; (8001af8 <ADS_WRITE_REG+0x44>)
 8001aee:	69d3      	ldr	r3, [r2, #28]
 8001af0:	2120      	movs	r1, #32
 8001af2:	430b      	orrs	r3, r1
 8001af4:	61d3      	str	r3, [r2, #28]
}
 8001af6:	bd10      	pop	{r4, pc}
 8001af8:	40005400 	.word	0x40005400
 8001afc:	fc008000 	.word	0xfc008000
 8001b00:	82032090 	.word	0x82032090

08001b04 <ADS_READ_REG>:
{
 8001b04:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001b06:	4c20      	ldr	r4, [pc, #128]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b08:	6862      	ldr	r2, [r4, #4]
 8001b0a:	4d20      	ldr	r5, [pc, #128]	; (8001b8c <ADS_READ_REG+0x88>)
 8001b0c:	402a      	ands	r2, r5
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <ADS_READ_REG+0x8c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	6063      	str	r3, [r4, #4]
	I2C_ByteSend(reg);
 8001b14:	f7ff ffba 	bl	8001a8c <I2C_ByteSend>
 8001b18:	6863      	ldr	r3, [r4, #4]
 8001b1a:	401d      	ands	r5, r3
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <ADS_READ_REG+0x90>)
 8001b1e:	432b      	orrs	r3, r5
 8001b20:	6063      	str	r3, [r4, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f7ff ff8a 	bl	8001a3c <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001b28:	f7ff ff96 	bl	8001a58 <TimeOut_Read_I2C>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d103      	bne.n	8001b38 <ADS_READ_REG+0x34>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	075b      	lsls	r3, r3, #29
 8001b36:	d5f7      	bpl.n	8001b28 <ADS_READ_REG+0x24>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b3a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001b3c:	b2ed      	uxtb	r5, r5
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001b3e:	f7ff ff8b 	bl	8001a58 <TimeOut_Read_I2C>
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d103      	bne.n	8001b4e <ADS_READ_REG+0x4a>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	075b      	lsls	r3, r3, #29
 8001b4c:	d5f7      	bpl.n	8001b3e <ADS_READ_REG+0x3a>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b52:	b2e4      	uxtb	r4, r4
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8001b54:	6859      	ldr	r1, [r3, #4]
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	01d2      	lsls	r2, r2, #7
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff ff6c 	bl	8001a3c <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001b64:	f7ff ff78 	bl	8001a58 <TimeOut_Read_I2C>
 8001b68:	2800      	cmp	r0, #0
 8001b6a:	d103      	bne.n	8001b74 <ADS_READ_REG+0x70>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	069b      	lsls	r3, r3, #26
 8001b72:	d5f7      	bpl.n	8001b64 <ADS_READ_REG+0x60>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <ADS_READ_REG+0x84>)
 8001b76:	69d3      	ldr	r3, [r2, #28]
 8001b78:	2120      	movs	r1, #32
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	61d3      	str	r3, [r2, #28]
	return ((byte[0]<<8) + byte[1]);
 8001b7e:	0228      	lsls	r0, r5, #8
 8001b80:	1820      	adds	r0, r4, r0
 8001b82:	b280      	uxth	r0, r0
}
 8001b84:	bd70      	pop	{r4, r5, r6, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	fc008000 	.word	0xfc008000
 8001b90:	81012090 	.word	0x81012090
 8001b94:	80022490 	.word	0x80022490

08001b98 <ADS_Init>:
{
 8001b98:	b510      	push	{r4, lr}
	config_ads = (gain |
 8001b9a:	2184      	movs	r1, #132	; 0x84
 8001b9c:	31ff      	adds	r1, #255	; 0xff
 8001b9e:	4301      	orrs	r1, r0
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <ADS_Init+0x14>)
 8001ba2:	8019      	strh	r1, [r3, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, config_ads);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff ff85 	bl	8001ab4 <ADS_WRITE_REG>
}
 8001baa:	bd10      	pop	{r4, pc}
 8001bac:	200000a0 	.word	0x200000a0

08001bb0 <ADS_Read_Diff>:
{
 8001bb0:	b510      	push	{r4, lr}
	config_ads &=~ ADS_CONFIG_REG_PGA_MASK;
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <ADS_Read_Diff+0x4c>)
 8001bb4:	8813      	ldrh	r3, [r2, #0]
 8001bb6:	4c12      	ldr	r4, [pc, #72]	; (8001c00 <ADS_Read_Diff+0x50>)
 8001bb8:	4023      	ands	r3, r4
	config_ads |= gain;
 8001bba:	430b      	orrs	r3, r1
	config_ads &=~ ADS_CONFIG_REG_MUX_MASK;
 8001bbc:	4911      	ldr	r1, [pc, #68]	; (8001c04 <ADS_Read_Diff+0x54>)
 8001bbe:	400b      	ands	r3, r1
	config_ads |= data;
 8001bc0:	4318      	orrs	r0, r3
 8001bc2:	8010      	strh	r0, [r2, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, (config_ads | ADS_CONFIG_REG_OS_SINGLE));
 8001bc4:	4910      	ldr	r1, [pc, #64]	; (8001c08 <ADS_Read_Diff+0x58>)
 8001bc6:	4301      	orrs	r1, r0
 8001bc8:	b289      	uxth	r1, r1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f7ff ff72 	bl	8001ab4 <ADS_WRITE_REG>
	uint16_t time_conversion = 10;
 8001bd0:	240a      	movs	r4, #10
	while(!((ADS_READ_REG(ADS_CONFIG_REG) & ADS_CONFIG_REG_OS_MASK) == 0) && time_conversion--);
 8001bd2:	e000      	b.n	8001bd6 <ADS_Read_Diff+0x26>
 8001bd4:	0004      	movs	r4, r0
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff ff94 	bl	8001b04 <ADS_READ_REG>
 8001bdc:	0403      	lsls	r3, r0, #16
 8001bde:	d506      	bpl.n	8001bee <ADS_Read_Diff+0x3e>
 8001be0:	1e60      	subs	r0, r4, #1
 8001be2:	b280      	uxth	r0, r0
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d1f5      	bne.n	8001bd4 <ADS_Read_Diff+0x24>
	if(time_conversion == 0)
 8001be8:	2800      	cmp	r0, #0
 8001bea:	d102      	bne.n	8001bf2 <ADS_Read_Diff+0x42>
}
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	0020      	movs	r0, r4
 8001bf0:	e7fa      	b.n	8001be8 <ADS_Read_Diff+0x38>
	data = ADS_READ_REG(ADS_CONVERSION_REG);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff ff86 	bl	8001b04 <ADS_READ_REG>
	return data;
 8001bf8:	e7f8      	b.n	8001bec <ADS_Read_Diff+0x3c>
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	200000a0 	.word	0x200000a0
 8001c00:	fffff1ff 	.word	0xfffff1ff
 8001c04:	ffff8fff 	.word	0xffff8fff
 8001c08:	ffff8000 	.word	0xffff8000

08001c0c <ADS_Read_adc>:
{
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	0001      	movs	r1, r0
	return ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_0_1, gain);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff ffcd 	bl	8001bb0 <ADS_Read_Diff>
}
 8001c16:	bd10      	pop	{r4, pc}

08001c18 <ADS_Read_volt>:
{
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	0004      	movs	r4, r0
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <ADS_Read_volt+0x78>)
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	23e0      	movs	r3, #224	; 0xe0
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	401a      	ands	r2, r3
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d022      	beq.n	8001c74 <ADS_Read_volt+0x5c>
 8001c2e:	d80f      	bhi.n	8001c50 <ADS_Read_volt+0x38>
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d020      	beq.n	8001c7a <ADS_Read_volt+0x62>
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d102      	bne.n	8001c46 <ADS_Read_volt+0x2e>
		fsRange = 2048;
 8001c40:	2080      	movs	r0, #128	; 0x80
 8001c42:	0100      	lsls	r0, r0, #4
 8001c44:	e00e      	b.n	8001c64 <ADS_Read_volt+0x4c>
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d11a      	bne.n	8001c80 <ADS_Read_volt+0x68>
 8001c4a:	20c0      	movs	r0, #192	; 0xc0
 8001c4c:	0140      	lsls	r0, r0, #5
 8001c4e:	e009      	b.n	8001c64 <ADS_Read_volt+0x4c>
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d015      	beq.n	8001c84 <ADS_Read_volt+0x6c>
 8001c58:	23a0      	movs	r3, #160	; 0xa0
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d114      	bne.n	8001c8a <ADS_Read_volt+0x72>
		fsRange = 256;
 8001c60:	2080      	movs	r0, #128	; 0x80
 8001c62:	0040      	lsls	r0, r0, #1
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
 8001c64:	490b      	ldr	r1, [pc, #44]	; (8001c94 <ADS_Read_volt+0x7c>)
 8001c66:	4348      	muls	r0, r1
 8001c68:	13c0      	asrs	r0, r0, #15
 8001c6a:	4360      	muls	r0, r4
 8001c6c:	f7fe fae8 	bl	8000240 <__divsi3>
 8001c70:	b280      	uxth	r0, r0
}
 8001c72:	bd10      	pop	{r4, pc}
		fsRange = 1024;
 8001c74:	2080      	movs	r0, #128	; 0x80
 8001c76:	00c0      	lsls	r0, r0, #3
 8001c78:	e7f4      	b.n	8001c64 <ADS_Read_volt+0x4c>
		fsRange = 4096;
 8001c7a:	2080      	movs	r0, #128	; 0x80
 8001c7c:	0140      	lsls	r0, r0, #5
 8001c7e:	e7f1      	b.n	8001c64 <ADS_Read_volt+0x4c>
		fsRange = 0;
 8001c80:	2000      	movs	r0, #0
 8001c82:	e7ef      	b.n	8001c64 <ADS_Read_volt+0x4c>
		fsRange = 512;
 8001c84:	2080      	movs	r0, #128	; 0x80
 8001c86:	0080      	lsls	r0, r0, #2
 8001c88:	e7ec      	b.n	8001c64 <ADS_Read_volt+0x4c>
		fsRange = 0;
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e7ea      	b.n	8001c64 <ADS_Read_volt+0x4c>
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	200000a0 	.word	0x200000a0
 8001c94:	00002710 	.word	0x00002710

08001c98 <timer_1_128>:
BOOL f_readADC = FALSE;

void timer_1_128(void)
{

	Cnt_1_128++;
 8001c98:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <timer_1_128+0x80>)
 8001c9a:	6813      	ldr	r3, [r2, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]
	///000
	if(TimerRxMipex){
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <timer_1_128+0x84>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <timer_1_128+0x16>
		TimerRxMipex--;
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <timer_1_128+0x84>)
 8001cac:	8013      	strh	r3, [r2, #0]
	}
	if(CntTo250ms < (32-1)){
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <timer_1_128+0x88>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b1e      	cmp	r3, #30
 8001cb4:	d803      	bhi.n	8001cbe <timer_1_128+0x26>

		CntTo250ms++;
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <timer_1_128+0x88>)
 8001cba:	7013      	strb	r3, [r2, #0]
		}

		CntTo500ms ^= 1;

	}
}
 8001cbc:	4770      	bx	lr
		f_Time250ms = TRUE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <timer_1_128+0x8c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
		CntTo250ms = 0;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <timer_1_128+0x88>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
		if(CntTo500ms == 0){
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <timer_1_128+0x90>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <timer_1_128+0x66>
			f_Time500ms = TRUE;
 8001cd2:	4a16      	ldr	r2, [pc, #88]	; (8001d2c <timer_1_128+0x94>)
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	7011      	strb	r1, [r2, #0]
			CntToSec ^= 1;
 8001cd8:	4915      	ldr	r1, [pc, #84]	; (8001d30 <timer_1_128+0x98>)
 8001cda:	780a      	ldrb	r2, [r1, #0]
 8001cdc:	2001      	movs	r0, #1
 8001cde:	4042      	eors	r2, r0
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	700a      	strb	r2, [r1, #0]
			if(CntToSec == 0){
 8001ce4:	2a00      	cmp	r2, #0
 8001ce6:	d10a      	bne.n	8001cfe <timer_1_128+0x66>
				CntSec++;
 8001ce8:	4912      	ldr	r1, [pc, #72]	; (8001d34 <timer_1_128+0x9c>)
 8001cea:	680a      	ldr	r2, [r1, #0]
 8001cec:	3201      	adds	r2, #1
 8001cee:	600a      	str	r2, [r1, #0]
				CntTo2min++;
 8001cf0:	4911      	ldr	r1, [pc, #68]	; (8001d38 <timer_1_128+0xa0>)
 8001cf2:	780a      	ldrb	r2, [r1, #0]
 8001cf4:	3201      	adds	r2, #1
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	700a      	strb	r2, [r1, #0]
				if(CntTo2min == 120){// 2 минуты
 8001cfa:	2a78      	cmp	r2, #120	; 0x78
 8001cfc:	d004      	beq.n	8001d08 <timer_1_128+0x70>
		CntTo500ms ^= 1;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4053      	eors	r3, r2
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <timer_1_128+0x90>)
 8001d04:	7013      	strb	r3, [r2, #0]
}
 8001d06:	e7d9      	b.n	8001cbc <timer_1_128+0x24>
					CntTo2min = 0;
 8001d08:	000a      	movs	r2, r1
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	7011      	strb	r1, [r2, #0]
					f_Time2min = TRUE;
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <timer_1_128+0xa4>)
 8001d10:	3101      	adds	r1, #1
 8001d12:	7011      	strb	r1, [r2, #0]
 8001d14:	e7f3      	b.n	8001cfe <timer_1_128+0x66>
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	200000ac 	.word	0x200000ac
 8001d1c:	2000040c 	.word	0x2000040c
 8001d20:	20000540 	.word	0x20000540
 8001d24:	200000bd 	.word	0x200000bd
 8001d28:	20000541 	.word	0x20000541
 8001d2c:	200000be 	.word	0x200000be
 8001d30:	200000a9 	.word	0x200000a9
 8001d34:	200000a4 	.word	0x200000a4
 8001d38:	200000a8 	.word	0x200000a8
 8001d3c:	20000008 	.word	0x20000008

08001d40 <serviceTimerStart>:

}

void serviceTimerStart(uint16_t time)
{
	serviceTimer = time;
 8001d40:	4b01      	ldr	r3, [pc, #4]	; (8001d48 <serviceTimerStart+0x8>)
 8001d42:	8018      	strh	r0, [r3, #0]
}
 8001d44:	4770      	bx	lr
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	20000552 	.word	0x20000552

08001d4c <serviceTimerStop>:

void serviceTimerStop(void)
{
 8001d4c:	b510      	push	{r4, lr}

	mbServiceMode = FALSE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <serviceTimerStop+0x28>)
 8001d52:	7013      	strb	r3, [r2, #0]
	dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <serviceTimerStop+0x2c>)
 8001d56:	218c      	movs	r1, #140	; 0x8c
 8001d58:	0049      	lsls	r1, r1, #1
 8001d5a:	5a42      	ldrh	r2, [r0, r1]
 8001d5c:	2404      	movs	r4, #4
 8001d5e:	43a2      	bics	r2, r4
 8001d60:	5242      	strh	r2, [r0, r1]
	mbHoldDevStatus = dev.Status;
 8001d62:	4906      	ldr	r1, [pc, #24]	; (8001d7c <serviceTimerStop+0x30>)
 8001d64:	800a      	strh	r2, [r1, #0]

	mbUnlock = FALSE;
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <serviceTimerStop+0x34>)
 8001d68:	7013      	strb	r3, [r2, #0]
	AccessCode = 0;
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <serviceTimerStop+0x38>)
 8001d6c:	8013      	strh	r3, [r2, #0]

	serviceTimer = 0;
 8001d6e:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <serviceTimerStop+0x3c>)
 8001d70:	8013      	strh	r3, [r2, #0]
}
 8001d72:	bd10      	pop	{r4, pc}
 8001d74:	20000554 	.word	0x20000554
 8001d78:	20000424 	.word	0x20000424
 8001d7c:	20000556 	.word	0x20000556
 8001d80:	2000055e 	.word	0x2000055e
 8001d84:	2000055a 	.word	0x2000055a
 8001d88:	20000552 	.word	0x20000552

08001d8c <serviceTimerProc>:
{
 8001d8c:	b510      	push	{r4, lr}
	if(serviceTimer > 1){
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <serviceTimerProc+0x1c>)
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d903      	bls.n	8001d9e <serviceTimerProc+0x12>
		serviceTimer--;
 8001d96:	3b01      	subs	r3, #1
 8001d98:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <serviceTimerProc+0x1c>)
 8001d9a:	8013      	strh	r3, [r2, #0]
}
 8001d9c:	bd10      	pop	{r4, pc}
		if(serviceTimer == 1){
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d1fc      	bne.n	8001d9c <serviceTimerProc+0x10>
			serviceTimerStop();
 8001da2:	f7ff ffd3 	bl	8001d4c <serviceTimerStop>
}
 8001da6:	e7f9      	b.n	8001d9c <serviceTimerProc+0x10>
 8001da8:	20000552 	.word	0x20000552

08001dac <dev_set_config_default>:
	dev.Config.LMP_Source	= 0x0001;
	dev.Config.LMP_FET		= 0x0700;
#endif

#ifdef CONFIG_PI
	dev.Config.TypeSensor = (SENSOR_TYPE_PI << 8);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <dev_set_config_default+0x20>)
 8001dae:	22c0      	movs	r2, #192	; 0xc0
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	809a      	strh	r2, [r3, #4]
	dev.Config.Unit = 0x0200|(1 << CFG_UNIT_VALUE_lel);
 8001db4:	3af8      	subs	r2, #248	; 0xf8
 8001db6:	80da      	strh	r2, [r3, #6]

	dev.Config.ValueLow = 0;
 8001db8:	2200      	movs	r2, #0
 8001dba:	811a      	strh	r2, [r3, #8]
	dev.Config.ValueHigh = 10000;
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <dev_set_config_default+0x24>)
 8001dbe:	815a      	strh	r2, [r3, #10]

	dev.Config.ScaleKoef = 10;
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	865a      	strh	r2, [r3, #50]	; 0x32
	dev.Config.FID = ADS_CONFIG_REG_PGA_1_024V;
 8001dc4:	22c0      	movs	r2, #192	; 0xc0
 8001dc6:	00d2      	lsls	r2, r2, #3
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36

	dev.Config.ScaleKoef = 10;
#endif


}
 8001dca:	4770      	bx	lr
 8001dcc:	20000424 	.word	0x20000424
 8001dd0:	00002710 	.word	0x00002710

08001dd4 <dev_init>:

void dev_init(void){

//	dev_set_config_default();

	dev.RegInput.cod_8216 = 8216;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <dev_init+0x24>)
 8001dd6:	22d8      	movs	r2, #216	; 0xd8
 8001dd8:	4908      	ldr	r1, [pc, #32]	; (8001dfc <dev_init+0x28>)
 8001dda:	5299      	strh	r1, [r3, r2]

	dev.RegInput.VerSW = 0x0101;
 8001ddc:	3202      	adds	r2, #2
 8001dde:	2102      	movs	r1, #2
 8001de0:	31ff      	adds	r1, #255	; 0xff
 8001de2:	5299      	strh	r1, [r3, r2]
	dev.RegInput.VerSW_Build = 0x0001;
 8001de4:	3ad9      	subs	r2, #217	; 0xd9
 8001de6:	3925      	subs	r1, #37	; 0x25
 8001de8:	525a      	strh	r2, [r3, r1]

	dev.Status = (1 << STATUS_BIT_MAIN_INIT);
 8001dea:	313c      	adds	r1, #60	; 0x3c
 8001dec:	525a      	strh	r2, [r3, r1]

	dev.RegInput.TimeToOffHeat = INIT_MODE_TIME;
 8001dee:	3204      	adds	r2, #4
 8001df0:	32ff      	adds	r2, #255	; 0xff
 8001df2:	39fa      	subs	r1, #250	; 0xfa
 8001df4:	5299      	strh	r1, [r3, r2]
}
 8001df6:	4770      	bx	lr
 8001df8:	20000424 	.word	0x20000424
 8001dfc:	00002018 	.word	0x00002018

08001e00 <heat_proc>:
static uint16_t CounterDecPeriod = 0;
static uint8_t flagPulse;

void heat_proc(void)
{
	if(dev.Status & (1 << STATUS_BIT_MAIN_INIT)){
 8001e00:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <heat_proc+0x9c>)
 8001e02:	238c      	movs	r3, #140	; 0x8c
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	5ad3      	ldrh	r3, [r2, r3]
 8001e08:	07db      	lsls	r3, r3, #31
 8001e0a:	d541      	bpl.n	8001e90 <heat_proc+0x90>
		if(flag_1ms){
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <heat_proc+0xa0>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d041      	beq.n	8001e98 <heat_proc+0x98>
			flag_1ms = 0;
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <heat_proc+0xa0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
			if(flagPulse){
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <heat_proc+0xa4>)
 8001e1c:	7819      	ldrb	r1, [r3, #0]
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	d025      	beq.n	8001e6e <heat_proc+0x6e>
				SET_TURN_ON;
 8001e22:	23a0      	movs	r3, #160	; 0xa0
 8001e24:	05db      	lsls	r3, r3, #23
 8001e26:	3208      	adds	r2, #8
 8001e28:	619a      	str	r2, [r3, #24]
			}
			else{
				SET_TURN_OFF;
			}
			Counter++;
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <heat_proc+0xa8>)
 8001e2c:	8813      	ldrh	r3, [r2, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	8013      	strh	r3, [r2, #0]
			CounterDecPeriod++;
 8001e34:	481d      	ldr	r0, [pc, #116]	; (8001eac <heat_proc+0xac>)
 8001e36:	8802      	ldrh	r2, [r0, #0]
 8001e38:	3201      	adds	r2, #1
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	8002      	strh	r2, [r0, #0]
			if(CounterDecPeriod >= HEAT_TIME_DEC_PERIOD){
 8001e3e:	2096      	movs	r0, #150	; 0x96
 8001e40:	0040      	lsls	r0, r0, #1
 8001e42:	4282      	cmp	r2, r0
 8001e44:	d309      	bcc.n	8001e5a <heat_proc+0x5a>
				if(CountPeriod < HEAT_TIME_PERIOD){
 8001e46:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <heat_proc+0xb0>)
 8001e48:	8812      	ldrh	r2, [r2, #0]
 8001e4a:	2a63      	cmp	r2, #99	; 0x63
 8001e4c:	d802      	bhi.n	8001e54 <heat_proc+0x54>
					CountPeriod++;
 8001e4e:	3201      	adds	r2, #1
 8001e50:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <heat_proc+0xb0>)
 8001e52:	8002      	strh	r2, [r0, #0]
				}
				CounterDecPeriod = 0;
 8001e54:	4a15      	ldr	r2, [pc, #84]	; (8001eac <heat_proc+0xac>)
 8001e56:	2000      	movs	r0, #0
 8001e58:	8010      	strh	r0, [r2, #0]
			}
			if(flagPulse){
 8001e5a:	2900      	cmp	r1, #0
 8001e5c:	d00c      	beq.n	8001e78 <heat_proc+0x78>
				if(Counter >= HEAT_TIME_PULSE){
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <heat_proc+0x98>
					Counter = 0;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <heat_proc+0xa8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	801a      	strh	r2, [r3, #0]
					flagPulse = 0;
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <heat_proc+0xa4>)
 8001e6a:	701a      	strb	r2, [r3, #0]
 8001e6c:	e014      	b.n	8001e98 <heat_proc+0x98>
				SET_TURN_OFF;
 8001e6e:	23a0      	movs	r3, #160	; 0xa0
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	2208      	movs	r2, #8
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
 8001e76:	e7d8      	b.n	8001e2a <heat_proc+0x2a>
				}
			}
			else{
				if((Counter + CountPeriod) >= HEAT_TIME_PERIOD){
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <heat_proc+0xb0>)
 8001e7a:	8812      	ldrh	r2, [r2, #0]
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	2b63      	cmp	r3, #99	; 0x63
 8001e80:	dd0a      	ble.n	8001e98 <heat_proc+0x98>
					Counter = 0;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <heat_proc+0xa8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	801a      	strh	r2, [r3, #0]
					flagPulse = 1;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <heat_proc+0xa4>)
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e003      	b.n	8001e98 <heat_proc+0x98>
			}
		}
	}
	else{
		// Включаем питание на сенсоре
		SET_TURN_ON;
 8001e90:	23a0      	movs	r3, #160	; 0xa0
 8001e92:	05db      	lsls	r3, r3, #23
 8001e94:	2208      	movs	r2, #8
 8001e96:	619a      	str	r2, [r3, #24]
	}
}
 8001e98:	4770      	bx	lr
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000424 	.word	0x20000424
 8001ea0:	2000054e 	.word	0x2000054e
 8001ea4:	200000bf 	.word	0x200000bf
 8001ea8:	200000b2 	.word	0x200000b2
 8001eac:	200000b4 	.word	0x200000b4
 8001eb0:	200000b0 	.word	0x200000b0

08001eb4 <dev_proc>:
#endif
//==============================================================================
void dev_proc(void)
{
 8001eb4:	b510      	push	{r4, lr}
	if(dev.RegInput.TimeToOffHeat != 0)
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <dev_proc+0x68>)
 8001eb8:	2382      	movs	r3, #130	; 0x82
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	5ad3      	ldrh	r3, [r2, r3]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <dev_proc+0x1e>
		dev.RegInput.TimeToOffHeat = INIT_MODE_TIME - CntSec;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <dev_proc+0x6c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	231e      	movs	r3, #30
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	4914      	ldr	r1, [pc, #80]	; (8001f1c <dev_proc+0x68>)
 8001ecc:	2282      	movs	r2, #130	; 0x82
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	528b      	strh	r3, [r1, r2]

	// Если окончен режим инициализации
	if(((dev.Status & (1 << STATUS_BIT_MAIN_INIT)) != 0) && (CntSec >= INIT_MODE_TIME)){
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <dev_proc+0x68>)
 8001ed4:	238c      	movs	r3, #140	; 0x8c
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	5ad3      	ldrh	r3, [r2, r3]
 8001eda:	07da      	lsls	r2, r3, #31
 8001edc:	d514      	bpl.n	8001f08 <dev_proc+0x54>
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <dev_proc+0x6c>)
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	2a1d      	cmp	r2, #29
 8001ee4:	dd10      	ble.n	8001f08 <dev_proc+0x54>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_INIT);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4393      	bics	r3, r2
		dev.Status |= (1 << STATUS_BIT_MAIN_RUN);
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <dev_proc+0x68>)
 8001eec:	2102      	movs	r1, #2
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	218c      	movs	r1, #140	; 0x8c
 8001ef2:	0049      	lsls	r1, r1, #1
 8001ef4:	5253      	strh	r3, [r2, r1]
		dev.RegInput.TimeToOffHeat = 0;
 8001ef6:	2382      	movs	r3, #130	; 0x82
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2100      	movs	r1, #0
 8001efc:	52d1      	strh	r1, [r2, r3]
		// Выключаем системный таймер
		SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001efe:	4a09      	ldr	r2, [pc, #36]	; (8001f24 <dev_proc+0x70>)
 8001f00:	6813      	ldr	r3, [r2, #0]
 8001f02:	3102      	adds	r1, #2
 8001f04:	438b      	bics	r3, r1
 8001f06:	6013      	str	r3, [r2, #0]
	}

	serviceTimerProc();
 8001f08:	f7ff ff40 	bl	8001d8c <serviceTimerProc>

	mbHoldDevStatus = dev.Status;
 8001f0c:	4a03      	ldr	r2, [pc, #12]	; (8001f1c <dev_proc+0x68>)
 8001f0e:	238c      	movs	r3, #140	; 0x8c
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	5ad2      	ldrh	r2, [r2, r3]
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <dev_proc+0x74>)
 8001f16:	801a      	strh	r2, [r3, #0]
		d_printf("(%04X %04X) %04X %04X", ADC_in_Temper, ADC_in[0], ADC_in[1], ADC_in[2]);
		d_printf(" |  (TV:%05d) TIA:%05d V:%05d T_LMP:%02d (T_MPU:%02d)", ADC_in_mVolt_Temper, ADC_in_mVolt_TIA,  ADC_in_RefVoltage, LMP_temper, ADC_in_Celsius);
#endif
#endif

}
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	20000424 	.word	0x20000424
 8001f20:	200000a4 	.word	0x200000a4
 8001f24:	e000e010 	.word	0xe000e010
 8001f28:	20000556 	.word	0x20000556

08001f2c <Adc_Eoc_Callback>:
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <Adc_Eoc_Callback+0x38>)
 8001f2e:	681b      	ldr	r3, [r3, #0]

//==============================================================================
void Adc_Eoc_Callback(void)
{

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8001f30:	071b      	lsls	r3, r3, #28
 8001f32:	d502      	bpl.n	8001f3a <Adc_Eoc_Callback+0xe>
		adc_cnt = 2;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <Adc_Eoc_Callback+0x3c>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
	}

	ADC_in[adc_cnt] = LL_ADC_REG_ReadConversionData12(ADC1);
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <Adc_Eoc_Callback+0x3c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <Adc_Eoc_Callback+0x38>)
 8001f40:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8001f42:	005a      	lsls	r2, r3, #1
 8001f44:	4909      	ldr	r1, [pc, #36]	; (8001f6c <Adc_Eoc_Callback+0x40>)
 8001f46:	5288      	strh	r0, [r1, r2]

	if(adc_cnt >= 2){
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d906      	bls.n	8001f5a <Adc_Eoc_Callback+0x2e>

		f_AdcCycleEnd = TRUE;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <Adc_Eoc_Callback+0x44>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
		adc_cnt = 0;
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <Adc_Eoc_Callback+0x3c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

		adc_cnt++;

	}

}
 8001f58:	4770      	bx	lr
		adc_cnt++;
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a02      	ldr	r2, [pc, #8]	; (8001f68 <Adc_Eoc_Callback+0x3c>)
 8001f5e:	7013      	strb	r3, [r2, #0]
}
 8001f60:	e7fa      	b.n	8001f58 <Adc_Eoc_Callback+0x2c>
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40012400 	.word	0x40012400
 8001f68:	200000bc 	.word	0x200000bc
 8001f6c:	2000041c 	.word	0x2000041c
 8001f70:	20000543 	.word	0x20000543

08001f74 <Adc_read_data>:
}
#endif

#ifdef CONFIG_PI
void Adc_read_data(void)
{
 8001f74:	b570      	push	{r4, r5, r6, lr}
	ADC_in_RefVoltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_in[1], LL_ADC_RESOLUTION_12B);
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <Adc_read_data+0x80>)
 8001f78:	8818      	ldrh	r0, [r3, #0]
 8001f7a:	4c1f      	ldr	r4, [pc, #124]	; (8001ff8 <Adc_read_data+0x84>)
 8001f7c:	4360      	muls	r0, r4
 8001f7e:	4d1f      	ldr	r5, [pc, #124]	; (8001ffc <Adc_read_data+0x88>)
 8001f80:	8869      	ldrh	r1, [r5, #2]
 8001f82:	f7fe f8d3 	bl	800012c <__udivsi3>
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <Adc_read_data+0x8c>)
 8001f88:	6018      	str	r0, [r3, #0]
	ADC_in_Celsius = 10 * __LL_ADC_CALC_TEMPERATURE(ADC_in_RefVoltage, ADC_in[2], LL_ADC_RESOLUTION_12B);
 8001f8a:	88ab      	ldrh	r3, [r5, #4]
 8001f8c:	4358      	muls	r0, r3
 8001f8e:	0021      	movs	r1, r4
 8001f90:	f7fe f8cc 	bl	800012c <__udivsi3>
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <Adc_read_data+0x90>)
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	1a83      	subs	r3, r0, r2
 8001f9a:	2064      	movs	r0, #100	; 0x64
 8001f9c:	4358      	muls	r0, r3
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <Adc_read_data+0x94>)
 8001fa0:	8819      	ldrh	r1, [r3, #0]
 8001fa2:	1a89      	subs	r1, r1, r2
 8001fa4:	f7fe f94c 	bl	8000240 <__divsi3>
 8001fa8:	0083      	lsls	r3, r0, #2
 8001faa:	18c0      	adds	r0, r0, r3
 8001fac:	0040      	lsls	r0, r0, #1
 8001fae:	302d      	adds	r0, #45	; 0x2d
 8001fb0:	30ff      	adds	r0, #255	; 0xff
 8001fb2:	4d16      	ldr	r5, [pc, #88]	; (800200c <Adc_read_data+0x98>)
 8001fb4:	8028      	strh	r0, [r5, #0]

	dev.RegInput.ADC_0 = ADS_Read_adc(dev.Config.FID);
 8001fb6:	4c16      	ldr	r4, [pc, #88]	; (8002010 <Adc_read_data+0x9c>)
 8001fb8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8001fba:	f7ff fe27 	bl	8001c0c <ADS_Read_adc>
 8001fbe:	2387      	movs	r3, #135	; 0x87
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	52e0      	strh	r0, [r4, r3]
	dev.RegInput.Volt_Sens = ADS_Read_volt(dev.RegInput.ADC_0);
 8001fc4:	f7ff fe28 	bl	8001c18 <ADS_Read_volt>
 8001fc8:	23ea      	movs	r3, #234	; 0xea
 8001fca:	52e0      	strh	r0, [r4, r3]
	dev.RegInput.TempSensor = ADC_in_Celsius;
 8001fcc:	882a      	ldrh	r2, [r5, #0]
 8001fce:	3b02      	subs	r3, #2
 8001fd0:	52e2      	strh	r2, [r4, r3]
#ifdef DEBUG_MY
		d_printf("ADC - %05d Volt - %05d Temp:%d", dev.RegInput.ADC_0, dev.RegInput.Volt_Sens,  dev.RegInput.TempSensor);
		d_printf("\n\r");
#endif
#endif
	SetGasValue();
 8001fd2:	f7ff f977 	bl	80012c4 <SetGasValue>
	//--------------------------------------------------------------------
	// Перевод в единицу измерения НКПР
	if(dev.Config.Unit & (1 << CFG_UNIT_VALUE_vol)){
 8001fd6:	88e3      	ldrh	r3, [r4, #6]
 8001fd8:	07db      	lsls	r3, r3, #31
 8001fda:	d50a      	bpl.n	8001ff2 <Adc_read_data+0x7e>
		dev.RegInput.dwValue_mg_m3 = (dev.RegInput.Value*dev.Config.ScaleKoef)/10;
 8001fdc:	4c0c      	ldr	r4, [pc, #48]	; (8002010 <Adc_read_data+0x9c>)
 8001fde:	23e2      	movs	r3, #226	; 0xe2
 8001fe0:	5ae3      	ldrh	r3, [r4, r3]
 8001fe2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8001fe4:	4358      	muls	r0, r3
 8001fe6:	210a      	movs	r1, #10
 8001fe8:	f7fe f92a 	bl	8000240 <__divsi3>
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	50e0      	str	r0, [r4, r3]
	}
}
 8001ff2:	bd70      	pop	{r4, r5, r6, pc}
 8001ff4:	1ff80078 	.word	0x1ff80078
 8001ff8:	00000bb8 	.word	0x00000bb8
 8001ffc:	2000041c 	.word	0x2000041c
 8002000:	20000004 	.word	0x20000004
 8002004:	1ff8007a 	.word	0x1ff8007a
 8002008:	1ff8007e 	.word	0x1ff8007e
 800200c:	20000544 	.word	0x20000544
 8002010:	20000424 	.word	0x20000424

08002014 <mb_crc>:
}

//==============================================================================

uint16_t mb_crc(uint8_t *buf, int len)
{
 8002014:	b530      	push	{r4, r5, lr}
 8002016:	0005      	movs	r5, r0
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++)
 8002018:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 800201a:	480a      	ldr	r0, [pc, #40]	; (8002044 <mb_crc+0x30>)
	for (int pos = 0; pos < len; pos++)
 800201c:	e00b      	b.n	8002036 <mb_crc+0x22>
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
				crc >>= 1;
 800201e:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {
 8002020:	3b01      	subs	r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d006      	beq.n	8002034 <mb_crc+0x20>
			if ((crc & 0x0001) != 0) {
 8002026:	07c2      	lsls	r2, r0, #31
 8002028:	d5f9      	bpl.n	800201e <mb_crc+0xa>
				crc >>= 1;
 800202a:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <mb_crc+0x34>)
 800202e:	4050      	eors	r0, r2
 8002030:	b280      	uxth	r0, r0
 8002032:	e7f5      	b.n	8002020 <mb_crc+0xc>
	for (int pos = 0; pos < len; pos++)
 8002034:	3401      	adds	r4, #1
 8002036:	428c      	cmp	r4, r1
 8002038:	da03      	bge.n	8002042 <mb_crc+0x2e>
		crc ^= (uint16_t)buf[pos];
 800203a:	5d2b      	ldrb	r3, [r5, r4]
 800203c:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {
 800203e:	2308      	movs	r3, #8
 8002040:	e7ef      	b.n	8002022 <mb_crc+0xe>
		}
	}

	return crc;
}
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	0000ffff 	.word	0x0000ffff
 8002048:	ffffa001 	.word	0xffffa001

0800204c <modbusSet>:

//==============================================================================

void modbusSet(void){

	if(mbUnlock){
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <modbusSet+0x4c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d014      	beq.n	800207e <modbusSet+0x32>
		AccessCode = 1;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <modbusSet+0x50>)
 8002056:	2201      	movs	r2, #1
 8002058:	801a      	strh	r2, [r3, #0]
	else{
		AccessCode = 0;
	}


	if(mbServiceMode){
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <modbusSet+0x54>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <modbusSet+0x3a>
		dev.Status |= (1 << STATUS_BIT_MAIN_MODE);
 8002062:	4910      	ldr	r1, [pc, #64]	; (80020a4 <modbusSet+0x58>)
 8002064:	228c      	movs	r2, #140	; 0x8c
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	5a8b      	ldrh	r3, [r1, r2]
 800206a:	2004      	movs	r0, #4
 800206c:	4303      	orrs	r3, r0
 800206e:	528b      	strh	r3, [r1, r2]
	}else{
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
	}

	mbHoldDevStatus = dev.Status;
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <modbusSet+0x58>)
 8002072:	238c      	movs	r3, #140	; 0x8c
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	5ad2      	ldrh	r2, [r2, r3]
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <modbusSet+0x5c>)
 800207a:	801a      	strh	r2, [r3, #0]

}
 800207c:	4770      	bx	lr
		AccessCode = 0;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <modbusSet+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e7e9      	b.n	800205a <modbusSet+0xe>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 8002086:	4907      	ldr	r1, [pc, #28]	; (80020a4 <modbusSet+0x58>)
 8002088:	228c      	movs	r2, #140	; 0x8c
 800208a:	0052      	lsls	r2, r2, #1
 800208c:	5a8b      	ldrh	r3, [r1, r2]
 800208e:	2004      	movs	r0, #4
 8002090:	4383      	bics	r3, r0
 8002092:	528b      	strh	r3, [r1, r2]
 8002094:	e7ec      	b.n	8002070 <modbusSet+0x24>
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	2000055e 	.word	0x2000055e
 800209c:	2000055a 	.word	0x2000055a
 80020a0:	20000554 	.word	0x20000554
 80020a4:	20000424 	.word	0x20000424
 80020a8:	20000556 	.word	0x20000556

080020ac <__CMD_PUT_WORD>:

//==============================================================================

void __CMD_PUT_WORD(uint16_t DATA)
{
	Value[0] = HIBYTE(DATA);
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__CMD_PUT_WORD+0x34>)
 80020ae:	680b      	ldr	r3, [r1, #0]
 80020b0:	0a02      	lsrs	r2, r0, #8
 80020b2:	701a      	strb	r2, [r3, #0]
	Value[1] = LOBYTE(DATA);
 80020b4:	7058      	strb	r0, [r3, #1]

	(*CountByte) += 2;		Count --;	Value +=2;	AnswerLen += 2;
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <__CMD_PUT_WORD+0x38>)
 80020b8:	6810      	ldr	r0, [r2, #0]
 80020ba:	7802      	ldrb	r2, [r0, #0]
 80020bc:	3202      	adds	r2, #2
 80020be:	7002      	strb	r2, [r0, #0]
 80020c0:	4809      	ldr	r0, [pc, #36]	; (80020e8 <__CMD_PUT_WORD+0x3c>)
 80020c2:	8802      	ldrh	r2, [r0, #0]
 80020c4:	3a01      	subs	r2, #1
 80020c6:	8002      	strh	r2, [r0, #0]
 80020c8:	3302      	adds	r3, #2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <__CMD_PUT_WORD+0x40>)
 80020ce:	7813      	ldrb	r3, [r2, #0]
 80020d0:	3302      	adds	r3, #2
 80020d2:	7013      	strb	r3, [r2, #0]
	Address ++;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <__CMD_PUT_WORD+0x44>)
 80020d6:	8813      	ldrh	r3, [r2, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	8013      	strh	r3, [r2, #0]
}
 80020dc:	4770      	bx	lr
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	200000d0 	.word	0x200000d0
 80020e4:	200000c8 	.word	0x200000c8
 80020e8:	200000c4 	.word	0x200000c4
 80020ec:	200000c2 	.word	0x200000c2
 80020f0:	200000c0 	.word	0x200000c0

080020f4 <CmdFunc3>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Чтение группы регистров HOLD

uint32_t CmdFunc3(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	0014      	movs	r4, r2
	//	tmp = 0;
	//	wModeCalib = st_dgs_state.ModeCalib;

	out[0] = mas[0];	// Адрес устройства
 80020f8:	7803      	ldrb	r3, [r0, #0]
 80020fa:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 80020fc:	7843      	ldrb	r3, [r0, #1]
 80020fe:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);	// Адрес начального регистра
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <CmdFunc3+0xb4>)
 8002102:	7882      	ldrb	r2, [r0, #2]
 8002104:	705a      	strb	r2, [r3, #1]
 8002106:	78c2      	ldrb	r2, [r0, #3]
 8002108:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);	// Количество регистров
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <CmdFunc3+0xb8>)
 800210c:	7902      	ldrb	r2, [r0, #4]
 800210e:	705a      	strb	r2, [r3, #1]
 8002110:	7942      	ldrb	r2, [r0, #5]
 8002112:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);	// Выходной поток
 8002114:	1ce1      	adds	r1, r4, #3
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <CmdFunc3+0xbc>)
 8002118:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);		// Счётчик
 800211a:	1ca1      	adds	r1, r4, #2
 800211c:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <CmdFunc3+0xc0>)
 800211e:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;				// Длина ответа (в байтах)
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <CmdFunc3+0xc4>)
 8002122:	2103      	movs	r1, #3
 8002124:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 8002126:	2200      	movs	r2, #0
 8002128:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	1e53      	subs	r3, r2, #1
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b7c      	cmp	r3, #124	; 0x7c
 8002132:	d814      	bhi.n	800215e <CmdFunc3+0x6a>
	}
	//------------------------------------------------------------------------------------------------------------------
	do
	{
#if DEF_REG_ADR_BASE_x03 > 0
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <CmdFunc3+0xb4>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0149      	lsls	r1, r1, #5
 800213c:	428b      	cmp	r3, r1
 800213e:	d323      	bcc.n	8002188 <CmdFunc3+0x94>
#endif
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002140:	491e      	ldr	r1, [pc, #120]	; (80021bc <CmdFunc3+0xc8>)
 8002142:	428b      	cmp	r3, r1
 8002144:	d820      	bhi.n	8002188 <CmdFunc3+0x94>
		if( Count > DEF_REG_CNT_x03 ) break;
 8002146:	2a70      	cmp	r2, #112	; 0x70
 8002148:	d81e      	bhi.n	8002188 <CmdFunc3+0x94>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 800214a:	189a      	adds	r2, r3, r2
 800214c:	491c      	ldr	r1, [pc, #112]	; (80021c0 <CmdFunc3+0xcc>)
 800214e:	428a      	cmp	r2, r1
 8002150:	dc1a      	bgt.n	8002188 <CmdFunc3+0x94>
#if DEF_REG_ADR_BASE_x03 > 0
		Address -= DEF_REG_ADR_BASE_x03;
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <CmdFunc3+0xd0>)
 8002154:	4694      	mov	ip, r2
 8002156:	4463      	add	r3, ip
 8002158:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <CmdFunc3+0xb4>)
 800215a:	8013      	strh	r3, [r2, #0]
		//#define MB_READ_DBG

#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 3 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		while( Count )
 800215c:	e010      	b.n	8002180 <CmdFunc3+0x8c>
		out[1] |= 0x80;
 800215e:	7862      	ldrb	r2, [r4, #1]
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	425b      	negs	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002168:	2302      	movs	r3, #2
 800216a:	70a3      	strb	r3, [r4, #2]
		return(3);
 800216c:	2003      	movs	r0, #3
 800216e:	e011      	b.n	8002194 <CmdFunc3+0xa0>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x03[ Address ].pVar);
#endif
			CMD_PUT_WORD( *reg_x03[ Address ].pVar );
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <CmdFunc3+0xb4>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <CmdFunc3+0xd4>)
 8002178:	589b      	ldr	r3, [r3, r2]
 800217a:	8818      	ldrh	r0, [r3, #0]
 800217c:	f7ff ff96 	bl	80020ac <__CMD_PUT_WORD>
		while( Count )
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <CmdFunc3+0xb8>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f3      	bne.n	8002170 <CmdFunc3+0x7c>
		}

	} while(0);
	//------------------------------------------------------------------------------------------------------------------
	if( Count )
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <CmdFunc3+0xb8>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <CmdFunc3+0xa2>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return( AnswerLen );
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <CmdFunc3+0xc4>)
 8002192:	7818      	ldrb	r0, [r3, #0]
}
 8002194:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 8002196:	7862      	ldrb	r2, [r4, #1]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	425b      	negs	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80021a0:	2302      	movs	r3, #2
 80021a2:	70a3      	strb	r3, [r4, #2]
		return(3);
 80021a4:	2003      	movs	r0, #3
 80021a6:	e7f5      	b.n	8002194 <CmdFunc3+0xa0>
 80021a8:	200000c0 	.word	0x200000c0
 80021ac:	200000c4 	.word	0x200000c4
 80021b0:	200000d0 	.word	0x200000d0
 80021b4:	200000c8 	.word	0x200000c8
 80021b8:	200000c2 	.word	0x200000c2
 80021bc:	0000106f 	.word	0x0000106f
 80021c0:	00001070 	.word	0x00001070
 80021c4:	fffff000 	.word	0xfffff000
 80021c8:	080039e8 	.word	0x080039e8

080021cc <CmdFunc4>:

//======================================================================================================================================
// Чтение группы регистров INPUT

uint32_t CmdFunc4(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80021cc:	b510      	push	{r4, lr}
 80021ce:	0014      	movs	r4, r2

	//	tmp = 0;
	out[0] = mas[0];	// Адрес устройства
 80021d0:	7803      	ldrb	r3, [r0, #0]
 80021d2:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 80021d4:	7843      	ldrb	r3, [r0, #1]
 80021d6:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);		// Адрес начального регистра
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <CmdFunc4+0xa0>)
 80021da:	7882      	ldrb	r2, [r0, #2]
 80021dc:	705a      	strb	r2, [r3, #1]
 80021de:	78c2      	ldrb	r2, [r0, #3]
 80021e0:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);		// Количество регистров
 80021e2:	4b23      	ldr	r3, [pc, #140]	; (8002270 <CmdFunc4+0xa4>)
 80021e4:	7902      	ldrb	r2, [r0, #4]
 80021e6:	705a      	strb	r2, [r3, #1]
 80021e8:	7942      	ldrb	r2, [r0, #5]
 80021ea:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);		// Выходной поток
 80021ec:	1ce1      	adds	r1, r4, #3
 80021ee:	4a21      	ldr	r2, [pc, #132]	; (8002274 <CmdFunc4+0xa8>)
 80021f0:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);			// Счётчик
 80021f2:	1ca1      	adds	r1, r4, #2
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <CmdFunc4+0xac>)
 80021f6:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;					// Длина ответа (в байтах)
 80021f8:	4a20      	ldr	r2, [pc, #128]	; (800227c <CmdFunc4+0xb0>)
 80021fa:	2103      	movs	r1, #3
 80021fc:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 80021fe:	2200      	movs	r2, #0
 8002200:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 8002202:	881a      	ldrh	r2, [r3, #0]
 8002204:	1e53      	subs	r3, r2, #1
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b7c      	cmp	r3, #124	; 0x7c
 800220a:	d815      	bhi.n	8002238 <CmdFunc4+0x6c>
	{
		/*if( Count > DEF_REG_CNT_x04 ) break;
		if( (Address + Count) > DEF_REG_CNT_x04 ) break;*/

		if( Address < DEF_REG_ADR_BASE_x04 ) break;
		if( Address >= (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <CmdFunc4+0xa0>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	2b31      	cmp	r3, #49	; 0x31
 8002212:	d81a      	bhi.n	800224a <CmdFunc4+0x7e>
		if( Count > DEF_REG_CNT_x04 ) break;
 8002214:	2a32      	cmp	r2, #50	; 0x32
 8002216:	d818      	bhi.n	800224a <CmdFunc4+0x7e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 8002218:	189a      	adds	r2, r3, r2
 800221a:	2a32      	cmp	r2, #50	; 0x32
 800221c:	dc15      	bgt.n	800224a <CmdFunc4+0x7e>
#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 4 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		Address -= DEF_REG_ADR_BASE_x04;

		while( Count )
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <CmdFunc4+0xa4>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d011      	beq.n	800224a <CmdFunc4+0x7e>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x04[ Address ]);
#endif
			CMD_PUT_WORD( *reg_x04[ Address ] );
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <CmdFunc4+0xa0>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <CmdFunc4+0xb4>)
 800222e:	589b      	ldr	r3, [r3, r2]
 8002230:	8818      	ldrh	r0, [r3, #0]
 8002232:	f7ff ff3b 	bl	80020ac <__CMD_PUT_WORD>
 8002236:	e7f2      	b.n	800221e <CmdFunc4+0x52>
		out[1] |= 0x80;
 8002238:	7862      	ldrb	r2, [r4, #1]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	425b      	negs	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002242:	2302      	movs	r3, #2
 8002244:	70a3      	strb	r3, [r4, #2]
		return(3);
 8002246:	2003      	movs	r0, #3
 8002248:	e005      	b.n	8002256 <CmdFunc4+0x8a>
		}
	} while(0);
	//-----------------------------------------------------------------------------------------------------------------
	if(Count)
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <CmdFunc4+0xa4>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <CmdFunc4+0x8c>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return(AnswerLen);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <CmdFunc4+0xb0>)
 8002254:	7818      	ldrb	r0, [r3, #0]
}
 8002256:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 8002258:	7862      	ldrb	r2, [r4, #1]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	425b      	negs	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002262:	2302      	movs	r3, #2
 8002264:	70a3      	strb	r3, [r4, #2]
		return(3);
 8002266:	2003      	movs	r0, #3
 8002268:	e7f5      	b.n	8002256 <CmdFunc4+0x8a>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	200000c0 	.word	0x200000c0
 8002270:	200000c4 	.word	0x200000c4
 8002274:	200000d0 	.word	0x200000d0
 8002278:	200000c8 	.word	0x200000c8
 800227c:	200000c2 	.word	0x200000c2
 8002280:	08003d68 	.word	0x08003d68

08002284 <__CMD_SAVE_WORD>:
void __CMD_SAVE_WORD(TVAR *var)
{
#define DATA	*(var->pVar)
#define SAVE	var->bSave

	HIBYTE(DATA)	= Value[0];
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__CMD_SAVE_WORD+0x34>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	781a      	ldrb	r2, [r3, #0]
 800228a:	6801      	ldr	r1, [r0, #0]
 800228c:	704a      	strb	r2, [r1, #1]
	LOBYTE(DATA)	= Value[1];
 800228e:	785a      	ldrb	r2, [r3, #1]
 8002290:	6801      	ldr	r1, [r0, #0]
 8002292:	700a      	strb	r2, [r1, #0]
	if(SAVE) Save	= SAVE;
 8002294:	7902      	ldrb	r2, [r0, #4]
 8002296:	2a00      	cmp	r2, #0
 8002298:	d001      	beq.n	800229e <__CMD_SAVE_WORD+0x1a>
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__CMD_SAVE_WORD+0x38>)
 800229c:	700a      	strb	r2, [r1, #0]
	Address ++;
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <__CMD_SAVE_WORD+0x3c>)
 80022a0:	880a      	ldrh	r2, [r1, #0]
 80022a2:	3201      	adds	r2, #1
 80022a4:	800a      	strh	r2, [r1, #0]
	Count --;
 80022a6:	4907      	ldr	r1, [pc, #28]	; (80022c4 <__CMD_SAVE_WORD+0x40>)
 80022a8:	880a      	ldrh	r2, [r1, #0]
 80022aa:	3a01      	subs	r2, #1
 80022ac:	800a      	strh	r2, [r1, #0]
	Value += 2;
 80022ae:	3302      	adds	r3, #2
 80022b0:	4a01      	ldr	r2, [pc, #4]	; (80022b8 <__CMD_SAVE_WORD+0x34>)
 80022b2:	6013      	str	r3, [r2, #0]

#undef DATA
#undef SAVE
}
 80022b4:	4770      	bx	lr
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	200000d0 	.word	0x200000d0
 80022bc:	200000cc 	.word	0x200000cc
 80022c0:	200000c0 	.word	0x200000c0
 80022c4:	200000c4 	.word	0x200000c4

080022c8 <check_block>:
//======================================================================================================================================


// Защита от случайной порчи настроек

BOOL check_block(void){
 80022c8:	b500      	push	{lr}
 80022ca:	b083      	sub	sp, #12

	uint16_t tmp;

	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <check_block+0xb0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <check_block+0x1e>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <check_block+0xb4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <check_block+0x2a>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <check_block+0xb8>)
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <check_block+0xbc>)
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d005      	beq.n	80022f2 <check_block+0x2a>
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <check_block+0xb8>)
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	015b      	lsls	r3, r3, #5
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d13e      	bne.n	8002370 <check_block+0xa8>
		return(FALSE);
	}

	// *}

	HIBYTE(tmp)	= Value[0];
 80022f2:	4b25      	ldr	r3, [pc, #148]	; (8002388 <check_block+0xc0>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	7811      	ldrb	r1, [r2, #0]
 80022f8:	466b      	mov	r3, sp
 80022fa:	71d9      	strb	r1, [r3, #7]
	LOBYTE(tmp)	= Value[1];
 80022fc:	7852      	ldrb	r2, [r2, #1]
 80022fe:	719a      	strb	r2, [r3, #6]

	if(Address == 0x1001){
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <check_block+0xb8>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <check_block+0xbc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d011      	beq.n	800232e <check_block+0x66>
			return(FALSE);
		}

	}

	if(Address == 0x1000){
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0152      	lsls	r2, r2, #5
 800230e:	4293      	cmp	r3, r2
 8002310:	d022      	beq.n	8002358 <check_block+0x90>
			serviceTimerStop();
		}

	}

	if( mbServiceMode || mbUnlock)
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <check_block+0xb0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <check_block+0x5a>
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <check_block+0xb4>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d028      	beq.n	8002374 <check_block+0xac>
	{ // Преобразователь в сервисном режиме, продлеваем время
		serviceTimerStart( SERVICE_TIME_MODBUS );
 8002322:	20f1      	movs	r0, #241	; 0xf1
 8002324:	f7ff fd0c 	bl	8001d40 <serviceTimerStart>
	}


	return(TRUE);
 8002328:	2001      	movs	r0, #1
}
 800232a:	b003      	add	sp, #12
 800232c:	bd00      	pop	{pc}
		if((tmp == 0xFACD)){
 800232e:	466a      	mov	r2, sp
 8002330:	3206      	adds	r2, #6
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	4915      	ldr	r1, [pc, #84]	; (800238c <check_block+0xc4>)
 8002336:	428a      	cmp	r2, r1
 8002338:	d005      	beq.n	8002346 <check_block+0x7e>
		}else if(tmp == 0){
 800233a:	2a00      	cmp	r2, #0
 800233c:	d107      	bne.n	800234e <check_block+0x86>
			mbUnlock = FALSE;
 800233e:	4a0f      	ldr	r2, [pc, #60]	; (800237c <check_block+0xb4>)
 8002340:	2100      	movs	r1, #0
 8002342:	7011      	strb	r1, [r2, #0]
 8002344:	e7e1      	b.n	800230a <check_block+0x42>
			mbUnlock = TRUE;
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <check_block+0xb4>)
 8002348:	2101      	movs	r1, #1
 800234a:	7011      	strb	r1, [r2, #0]
 800234c:	e7dd      	b.n	800230a <check_block+0x42>
		}else if(!mbUnlock){
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <check_block+0xb4>)
 8002350:	7810      	ldrb	r0, [r2, #0]
 8002352:	2800      	cmp	r0, #0
 8002354:	d1d9      	bne.n	800230a <check_block+0x42>
 8002356:	e7e8      	b.n	800232a <check_block+0x62>
		if( TESTBIT( tmp, STATUS_BIT_MAIN_MODE))
 8002358:	466b      	mov	r3, sp
 800235a:	3306      	adds	r3, #6
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	075b      	lsls	r3, r3, #29
 8002360:	d503      	bpl.n	800236a <check_block+0xa2>
			mbServiceMode = TRUE;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <check_block+0xb0>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e7d3      	b.n	8002312 <check_block+0x4a>
			serviceTimerStop();
 800236a:	f7ff fcef 	bl	8001d4c <serviceTimerStop>
 800236e:	e7d0      	b.n	8002312 <check_block+0x4a>
		return(FALSE);
 8002370:	2000      	movs	r0, #0
 8002372:	e7da      	b.n	800232a <check_block+0x62>
	return(TRUE);
 8002374:	2001      	movs	r0, #1
 8002376:	e7d8      	b.n	800232a <check_block+0x62>
 8002378:	20000554 	.word	0x20000554
 800237c:	2000055e 	.word	0x2000055e
 8002380:	200000c0 	.word	0x200000c0
 8002384:	00001001 	.word	0x00001001
 8002388:	200000d0 	.word	0x200000d0
 800238c:	0000facd 	.word	0x0000facd

08002390 <modbusCMD>:

//==============================================================================

void modbusCMD(void){
 8002390:	b500      	push	{lr}
 8002392:	b083      	sub	sp, #12

	uint16_t cmd;

	if(Address != 0x1001)
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <modbusCMD+0x68>)
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <modbusCMD+0x6c>)
 800239a:	429a      	cmp	r2, r3
 800239c:	d127      	bne.n	80023ee <modbusCMD+0x5e>
		return;

	HIBYTE(cmd)	= Value[0];
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <modbusCMD+0x70>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	7811      	ldrb	r1, [r2, #0]
 80023a4:	466b      	mov	r3, sp
 80023a6:	71d9      	strb	r1, [r3, #7]
	LOBYTE(cmd)	= Value[1];
 80023a8:	7852      	ldrb	r2, [r2, #1]
 80023aa:	719a      	strb	r2, [r3, #6]
	HIBYTE(cmd)	= Value[0];
 80023ac:	3306      	adds	r3, #6

	switch(cmd){
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <modbusCMD+0x74>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01d      	beq.n	80023f2 <modbusCMD+0x62>
 80023b6:	d80d      	bhi.n	80023d4 <modbusCMD+0x44>
 80023b8:	4a13      	ldr	r2, [pc, #76]	; (8002408 <modbusCMD+0x78>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d010      	beq.n	80023e0 <modbusCMD+0x50>
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <modbusCMD+0x7c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d114      	bne.n	80023ee <modbusCMD+0x5e>
		eeprom_config_write();
#endif
		break;

	case DEF_CODE_CALIB_GAS_CONC:
		d_printf("\n\rCalib Conc");
 80023c4:	4812      	ldr	r0, [pc, #72]	; (8002410 <modbusCMD+0x80>)
 80023c6:	f7fe ffcd 	bl	8001364 <d_printf>
#ifdef CONFIG_MIPEX
		Mipex_transmit_commmand(COMMAND_CALB_AAAA);
#else
		CalibGasConc();
 80023ca:	f7fe ff05 	bl	80011d8 <CalibGasConc>
		eeprom_config_write();
 80023ce:	f7ff f8a9 	bl	8001524 <eeprom_config_write>
#endif
		break;
 80023d2:	e00c      	b.n	80023ee <modbusCMD+0x5e>
	switch(cmd){
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <modbusCMD+0x84>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d109      	bne.n	80023ee <modbusCMD+0x5e>

		break;

	case DEF_CODE_SENS_PROFILE_RESTORE:

		factory_config_read();
 80023da:	f7ff f8cd 	bl	8001578 <factory_config_read>

		break;
 80023de:	e006      	b.n	80023ee <modbusCMD+0x5e>
		d_printf("\n\rCalib Zero");
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <modbusCMD+0x88>)
 80023e2:	f7fe ffbf 	bl	8001364 <d_printf>
		CalibGasZero();
 80023e6:	f7fe fee3 	bl	80011b0 <CalibGasZero>
		eeprom_config_write();
 80023ea:	f7ff f89b 	bl	8001524 <eeprom_config_write>
#endif
	default:
		break;
	}

}
 80023ee:	b003      	add	sp, #12
 80023f0:	bd00      	pop	{pc}
		factory_config_write();
 80023f2:	f7ff f8b7 	bl	8001564 <factory_config_write>
		break;
 80023f6:	e7fa      	b.n	80023ee <modbusCMD+0x5e>
 80023f8:	200000c0 	.word	0x200000c0
 80023fc:	00001001 	.word	0x00001001
 8002400:	200000d0 	.word	0x200000d0
 8002404:	0000abce 	.word	0x0000abce
 8002408:	0000185d 	.word	0x0000185d
 800240c:	000064c4 	.word	0x000064c4
 8002410:	08003910 	.word	0x08003910
 8002414:	0000ce4b 	.word	0x0000ce4b
 8002418:	08003900 	.word	0x08003900

0800241c <CmdFunc6>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Запись одного регистра
uint32_t CmdFunc6(uint8_t *mas, uint32_t len, uint8_t *out)
{
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	0004      	movs	r4, r0
 8002420:	0015      	movs	r5, r2
	Address 	= TO_M_WORD(mas+2);			// Адрес сохраняемого регистра
 8002422:	7883      	ldrb	r3, [r0, #2]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	78c2      	ldrb	r2, [r0, #3]
 8002428:	189b      	adds	r3, r3, r2
 800242a:	4a30      	ldr	r2, [pc, #192]	; (80024ec <CmdFunc6+0xd0>)
 800242c:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[4]);			// Значение регистра
 800242e:	1d02      	adds	r2, r0, #4
 8002430:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <CmdFunc6+0xd4>)
 8002432:	601a      	str	r2, [r3, #0]
	Count   	= 1;						// Количество регистров
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <CmdFunc6+0xd8>)
 8002436:	2201      	movs	r2, #1
 8002438:	801a      	strh	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 800243a:	3205      	adds	r2, #5
 800243c:	0001      	movs	r1, r0
 800243e:	0028      	movs	r0, r5
 8002440:	f000 fdc2 	bl	8002fc8 <memcpy>
	Save = FALSE;
 8002444:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <CmdFunc6+0xdc>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	{
		__NOP();
	} else
	 */

	if(!check_block()){
 800244a:	f7ff ff3d 	bl	80022c8 <check_block>
 800244e:	2800      	cmp	r0, #0
 8002450:	d108      	bne.n	8002464 <CmdFunc6+0x48>

		out[1] |= 0x80;
 8002452:	786a      	ldrb	r2, [r5, #1]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	425b      	negs	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 800245c:	2304      	movs	r3, #4
 800245e:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002460:	3003      	adds	r0, #3
		stMain.bUpDate = TRUE;
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8002462:	bd70      	pop	{r4, r5, r6, pc}
	modbusCMD();
 8002464:	f7ff ff94 	bl	8002390 <modbusCMD>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <CmdFunc6+0xd0>)
 800246a:	881a      	ldrh	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	429a      	cmp	r2, r3
 8002472:	d30a      	bcc.n	800248a <CmdFunc6+0x6e>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <CmdFunc6+0xe0>)
 8002476:	429a      	cmp	r2, r3
 8002478:	d807      	bhi.n	800248a <CmdFunc6+0x6e>
		if( Count > DEF_REG_CNT_x03 ) break;
 800247a:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <CmdFunc6+0xd8>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b70      	cmp	r3, #112	; 0x70
 8002480:	d803      	bhi.n	800248a <CmdFunc6+0x6e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002482:	18d3      	adds	r3, r2, r3
 8002484:	491e      	ldr	r1, [pc, #120]	; (8002500 <CmdFunc6+0xe4>)
 8002486:	428b      	cmp	r3, r1
 8002488:	dd0c      	ble.n	80024a4 <CmdFunc6+0x88>
	if( Count )
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <CmdFunc6+0xd8>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <CmdFunc6+0xb8>
		out[1] |= 0x80;
 8002492:	786a      	ldrb	r2, [r5, #1]
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	425b      	negs	r3, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 800249c:	2302      	movs	r3, #2
 800249e:	70ab      	strb	r3, [r5, #2]
		return(3);
 80024a0:	2003      	movs	r0, #3
 80024a2:	e7de      	b.n	8002462 <CmdFunc6+0x46>
		Address -= DEF_REG_ADR_BASE_x03;
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <CmdFunc6+0xe8>)
 80024a6:	469c      	mov	ip, r3
 80024a8:	4462      	add	r2, ip
 80024aa:	b292      	uxth	r2, r2
 80024ac:	4e0f      	ldr	r6, [pc, #60]	; (80024ec <CmdFunc6+0xd0>)
 80024ae:	8032      	strh	r2, [r6, #0]
		d_printf("\n\r%02x CMD Modbus 6 : write adr %03x : data ", mas[0], Address);
 80024b0:	7821      	ldrb	r1, [r4, #0]
 80024b2:	4815      	ldr	r0, [pc, #84]	; (8002508 <CmdFunc6+0xec>)
 80024b4:	f7fe ff56 	bl	8001364 <d_printf>
		d_printf(" %02x%02x", Value[0], Value[1]);
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <CmdFunc6+0xd4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	785a      	ldrb	r2, [r3, #1]
 80024c0:	4812      	ldr	r0, [pc, #72]	; (800250c <CmdFunc6+0xf0>)
 80024c2:	f7fe ff4f 	bl	8001364 <d_printf>
		CMD_SAVE_WORD( &reg_x03[ Address ] );
 80024c6:	8830      	ldrh	r0, [r6, #0]
 80024c8:	00c0      	lsls	r0, r0, #3
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <CmdFunc6+0xf4>)
 80024cc:	18c0      	adds	r0, r0, r3
 80024ce:	f7ff fed9 	bl	8002284 <__CMD_SAVE_WORD>
 80024d2:	e7da      	b.n	800248a <CmdFunc6+0x6e>
	modbusSet();
 80024d4:	f7ff fdba 	bl	800204c <modbusSet>
	if(Save)
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <CmdFunc6+0xdc>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <CmdFunc6+0xc8>
	return(6);
 80024e0:	2006      	movs	r0, #6
 80024e2:	e7be      	b.n	8002462 <CmdFunc6+0x46>
		eeprom_config_write();
 80024e4:	f7ff f81e 	bl	8001524 <eeprom_config_write>
	return(6);
 80024e8:	2006      	movs	r0, #6
 80024ea:	e7ba      	b.n	8002462 <CmdFunc6+0x46>
 80024ec:	200000c0 	.word	0x200000c0
 80024f0:	200000d0 	.word	0x200000d0
 80024f4:	200000c4 	.word	0x200000c4
 80024f8:	200000cc 	.word	0x200000cc
 80024fc:	0000106f 	.word	0x0000106f
 8002500:	00001070 	.word	0x00001070
 8002504:	fffff000 	.word	0xfffff000
 8002508:	08003920 	.word	0x08003920
 800250c:	08003950 	.word	0x08003950
 8002510:	080039e8 	.word	0x080039e8

08002514 <CmdFunc8>:
//======================================================================================================================================
// Эхо
uint32_t CmdFunc8(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002514:	b510      	push	{r4, lr}
 8002516:	0001      	movs	r1, r0
 8002518:	0010      	movs	r0, r2
	memcpy((char*)out, (char*)mas, 6);
 800251a:	2206      	movs	r2, #6
 800251c:	f000 fd54 	bl	8002fc8 <memcpy>
	return(6);
}
 8002520:	2006      	movs	r0, #6
 8002522:	bd10      	pop	{r4, pc}

08002524 <CmdFunc12>:
//======================================================================================================================================
// Передача памяти архива
uint32_t CmdFunc12(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002524:	b510      	push	{r4, lr}
 8002526:	b082      	sub	sp, #8

	int i;
	uint16_t num_p;
	uint32_t ptr;

	CMD_LOAD_WORD(mas+2, num_p);		// Номер пакета
 8002528:	466b      	mov	r3, sp
 800252a:	7881      	ldrb	r1, [r0, #2]
 800252c:	71d9      	strb	r1, [r3, #7]
 800252e:	78c1      	ldrb	r1, [r0, #3]
 8002530:	7199      	strb	r1, [r3, #6]
 8002532:	3306      	adds	r3, #6

	if( num_p >=  (ARHIV_NUM_ITEMS * ARHIV_SIZE_ITEM * 4) / 128)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2b3f      	cmp	r3, #63	; 0x3f
 8002538:	d80f      	bhi.n	800255a <CmdFunc12+0x36>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Value;
		return(3);
	}

	for(i=0; i < 32; i++){
 800253a:	2100      	movs	r1, #0
 800253c:	291f      	cmp	r1, #31
 800253e:	dc15      	bgt.n	800256c <CmdFunc12+0x48>
		ptr = ARHIV_BASE_ADR + 128 * num_p + i * 4;
 8002540:	466b      	mov	r3, sp
 8002542:	3306      	adds	r3, #6
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	0088      	lsls	r0, r1, #2
 800254a:	181b      	adds	r3, r3, r0
 800254c:	4c09      	ldr	r4, [pc, #36]	; (8002574 <CmdFunc12+0x50>)
 800254e:	46a4      	mov	ip, r4
 8002550:	4463      	add	r3, ip
		((uint32_t *)out)[i] = *(__IO uint32_t *)((uint32_t)ptr);
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	5013      	str	r3, [r2, r0]
	for(i=0; i < 32; i++){
 8002556:	3101      	adds	r1, #1
 8002558:	e7f0      	b.n	800253c <CmdFunc12+0x18>
		out[1] |= 0x80;
 800255a:	7851      	ldrb	r1, [r2, #1]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	425b      	negs	r3, r3
 8002560:	430b      	orrs	r3, r1
 8002562:	7053      	strb	r3, [r2, #1]
		out[2] = ERROR_Illegal_Data_Value;
 8002564:	2303      	movs	r3, #3
 8002566:	7093      	strb	r3, [r2, #2]
		return(3);
 8002568:	2003      	movs	r0, #3
 800256a:	e000      	b.n	800256e <CmdFunc12+0x4a>
	}
	return(3+128);
 800256c:	2083      	movs	r0, #131	; 0x83
}
 800256e:	b002      	add	sp, #8
 8002570:	bd10      	pop	{r4, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	08006000 	.word	0x08006000

08002578 <CmdFunc16>:

//======================================================================================================================================
// Запись группы регистров
uint32_t CmdFunc16(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002578:	b530      	push	{r4, r5, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	0004      	movs	r4, r0
 800257e:	0015      	movs	r5, r2
	wModeCalib = 0;

	Address 	= TO_M_WORD(mas+2);			// Адрес первого сохраняемого регистра
 8002580:	7883      	ldrb	r3, [r0, #2]
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	78c2      	ldrb	r2, [r0, #3]
 8002586:	189b      	adds	r3, r3, r2
 8002588:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <CmdFunc16+0x108>)
 800258a:	8013      	strh	r3, [r2, #0]
	Count	 	= TO_M_WORD(mas+4);			// Количество регистров
 800258c:	7903      	ldrb	r3, [r0, #4]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	7942      	ldrb	r2, [r0, #5]
 8002592:	189b      	adds	r3, r3, r2
 8002594:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <CmdFunc16+0x10c>)
 8002596:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[7]);			// Значение регистра
 8002598:	1dc2      	adds	r2, r0, #7
 800259a:	4b3b      	ldr	r3, [pc, #236]	; (8002688 <CmdFunc16+0x110>)
 800259c:	601a      	str	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 800259e:	2206      	movs	r2, #6
 80025a0:	0001      	movs	r1, r0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f000 fd10 	bl	8002fc8 <memcpy>
	Save = FALSE;
 80025a8:	4b38      	ldr	r3, [pc, #224]	; (800268c <CmdFunc16+0x114>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
	//TSGMPoint *sgm = &SGMpoint[0];
	//------------------------------------------------------------------------------------------------------------------
#ifdef BLOCK_MODBUS

	if(!check_block()){
 80025ae:	f7ff fe8b 	bl	80022c8 <check_block>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d109      	bne.n	80025ca <CmdFunc16+0x52>

		out[1] |= 0x80;
 80025b6:	786a      	ldrb	r2, [r5, #1]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	425b      	negs	r3, r3
 80025bc:	4313      	orrs	r3, r2
 80025be:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 80025c0:	2304      	movs	r3, #4
 80025c2:	70ab      	strb	r3, [r5, #2]
		return(3);
 80025c4:	3003      	adds	r0, #3
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 80025c6:	b003      	add	sp, #12
 80025c8:	bd30      	pop	{r4, r5, pc}
	modbusCMD();
 80025ca:	f7ff fee1 	bl	8002390 <modbusCMD>
	if( !Count || (Count > 125) )
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <CmdFunc16+0x10c>)
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	1e53      	subs	r3, r2, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b7c      	cmp	r3, #124	; 0x7c
 80025d8:	d81b      	bhi.n	8002612 <CmdFunc16+0x9a>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <CmdFunc16+0x108>)
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	0149      	lsls	r1, r1, #5
 80025e2:	428b      	cmp	r3, r1
 80025e4:	d308      	bcc.n	80025f8 <CmdFunc16+0x80>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80025e6:	492a      	ldr	r1, [pc, #168]	; (8002690 <CmdFunc16+0x118>)
 80025e8:	428b      	cmp	r3, r1
 80025ea:	d805      	bhi.n	80025f8 <CmdFunc16+0x80>
		if( Count > DEF_REG_CNT_x03 ) break;
 80025ec:	2a70      	cmp	r2, #112	; 0x70
 80025ee:	d803      	bhi.n	80025f8 <CmdFunc16+0x80>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80025f0:	1899      	adds	r1, r3, r2
 80025f2:	4828      	ldr	r0, [pc, #160]	; (8002694 <CmdFunc16+0x11c>)
 80025f4:	4281      	cmp	r1, r0
 80025f6:	dd15      	ble.n	8002624 <CmdFunc16+0xac>
	if( Count )
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <CmdFunc16+0x10c>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d033      	beq.n	8002668 <CmdFunc16+0xf0>
		out[1] |= 0x80;
 8002600:	786a      	ldrb	r2, [r5, #1]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	425b      	negs	r3, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 800260a:	2302      	movs	r3, #2
 800260c:	70ab      	strb	r3, [r5, #2]
		return(3);
 800260e:	2003      	movs	r0, #3
 8002610:	e7d9      	b.n	80025c6 <CmdFunc16+0x4e>
		out[1] |= 0x80;
 8002612:	786a      	ldrb	r2, [r5, #1]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	425b      	negs	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 800261c:	2302      	movs	r3, #2
 800261e:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002620:	2003      	movs	r0, #3
 8002622:	e7d0      	b.n	80025c6 <CmdFunc16+0x4e>
		Address -= DEF_REG_ADR_BASE_x03;
 8002624:	491c      	ldr	r1, [pc, #112]	; (8002698 <CmdFunc16+0x120>)
 8002626:	468c      	mov	ip, r1
 8002628:	4463      	add	r3, ip
 800262a:	b29b      	uxth	r3, r3
 800262c:	4914      	ldr	r1, [pc, #80]	; (8002680 <CmdFunc16+0x108>)
 800262e:	800b      	strh	r3, [r1, #0]
		d_printf("\n\r%02x CMD Modbus 16 (%02d) : write adr %03x : data ", mas[0], Count, Address, *Value);
 8002630:	7821      	ldrb	r1, [r4, #0]
 8002632:	4815      	ldr	r0, [pc, #84]	; (8002688 <CmdFunc16+0x110>)
 8002634:	6800      	ldr	r0, [r0, #0]
 8002636:	7800      	ldrb	r0, [r0, #0]
 8002638:	9000      	str	r0, [sp, #0]
 800263a:	4818      	ldr	r0, [pc, #96]	; (800269c <CmdFunc16+0x124>)
 800263c:	f7fe fe92 	bl	8001364 <d_printf>
		while( Count )
 8002640:	e00d      	b.n	800265e <CmdFunc16+0xe6>
			d_printf(" %02x%02x", Value[0], Value[1]);
 8002642:	4b11      	ldr	r3, [pc, #68]	; (8002688 <CmdFunc16+0x110>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	7819      	ldrb	r1, [r3, #0]
 8002648:	785a      	ldrb	r2, [r3, #1]
 800264a:	4815      	ldr	r0, [pc, #84]	; (80026a0 <CmdFunc16+0x128>)
 800264c:	f7fe fe8a 	bl	8001364 <d_printf>
			CMD_SAVE_WORD( &reg_x03[ Address ] );
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <CmdFunc16+0x108>)
 8002652:	8818      	ldrh	r0, [r3, #0]
 8002654:	00c0      	lsls	r0, r0, #3
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <CmdFunc16+0x12c>)
 8002658:	18c0      	adds	r0, r0, r3
 800265a:	f7ff fe13 	bl	8002284 <__CMD_SAVE_WORD>
		while( Count )
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <CmdFunc16+0x10c>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ed      	bne.n	8002642 <CmdFunc16+0xca>
 8002666:	e7c7      	b.n	80025f8 <CmdFunc16+0x80>
	modbusSet();
 8002668:	f7ff fcf0 	bl	800204c <modbusSet>
	if(Save)
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <CmdFunc16+0x114>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <CmdFunc16+0x100>
	return(6);
 8002674:	2006      	movs	r0, #6
 8002676:	e7a6      	b.n	80025c6 <CmdFunc16+0x4e>
		eeprom_config_write();
 8002678:	f7fe ff54 	bl	8001524 <eeprom_config_write>
	return(6);
 800267c:	2006      	movs	r0, #6
 800267e:	e7a2      	b.n	80025c6 <CmdFunc16+0x4e>
 8002680:	200000c0 	.word	0x200000c0
 8002684:	200000c4 	.word	0x200000c4
 8002688:	200000d0 	.word	0x200000d0
 800268c:	200000cc 	.word	0x200000cc
 8002690:	0000106f 	.word	0x0000106f
 8002694:	00001070 	.word	0x00001070
 8002698:	fffff000 	.word	0xfffff000
 800269c:	0800395c 	.word	0x0800395c
 80026a0:	08003950 	.word	0x08003950
 80026a4:	080039e8 	.word	0x080039e8

080026a8 <cmdModbusRTU>:
{
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	0014      	movs	r4, r2
	out[0] = mas[0];
 80026ac:	7803      	ldrb	r3, [r0, #0]
 80026ae:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];
 80026b0:	7843      	ldrb	r3, [r0, #1]
 80026b2:	7053      	strb	r3, [r2, #1]
	switch (mas[1])
 80026b4:	3b03      	subs	r3, #3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	2a0d      	cmp	r2, #13
 80026ba:	d82e      	bhi.n	800271a <cmdModbusRTU+0x72>
 80026bc:	0093      	lsls	r3, r2, #2
 80026be:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <cmdModbusRTU+0x8c>)
 80026c0:	58d3      	ldr	r3, [r2, r3]
 80026c2:	469f      	mov	pc, r3
		AnswerLen = CmdFunc3(mas, len, out);
 80026c4:	0022      	movs	r2, r4
 80026c6:	f7ff fd15 	bl	80020f4 <CmdFunc3>
 80026ca:	0005      	movs	r5, r0
	if(AnswerLen)
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d009      	beq.n	80026e4 <cmdModbusRTU+0x3c>
		crc = mb_crc(out, AnswerLen);
 80026d0:	0029      	movs	r1, r5
 80026d2:	0020      	movs	r0, r4
 80026d4:	f7ff fc9e 	bl	8002014 <mb_crc>
		out[AnswerLen]   = LOBYTE(crc);
 80026d8:	5560      	strb	r0, [r4, r5]
		out[AnswerLen+1] = HIBYTE(crc);
 80026da:	1c6b      	adds	r3, r5, #1
 80026dc:	0400      	lsls	r0, r0, #16
 80026de:	0e00      	lsrs	r0, r0, #24
 80026e0:	54e0      	strb	r0, [r4, r3]
		AnswerLen += 2;
 80026e2:	3502      	adds	r5, #2
}
 80026e4:	0028      	movs	r0, r5
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
		AnswerLen = CmdFunc4(mas, len, out);
 80026e8:	0022      	movs	r2, r4
 80026ea:	f7ff fd6f 	bl	80021cc <CmdFunc4>
 80026ee:	0005      	movs	r5, r0
		break;
 80026f0:	e7ec      	b.n	80026cc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc6(mas, len, out);
 80026f2:	0022      	movs	r2, r4
 80026f4:	f7ff fe92 	bl	800241c <CmdFunc6>
 80026f8:	0005      	movs	r5, r0
		break;
 80026fa:	e7e7      	b.n	80026cc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc8(mas, len, out);
 80026fc:	0022      	movs	r2, r4
 80026fe:	f7ff ff09 	bl	8002514 <CmdFunc8>
 8002702:	0005      	movs	r5, r0
		break;
 8002704:	e7e2      	b.n	80026cc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc12(mas, len, out);
 8002706:	0022      	movs	r2, r4
 8002708:	f7ff ff0c 	bl	8002524 <CmdFunc12>
 800270c:	0005      	movs	r5, r0
		break;
 800270e:	e7dd      	b.n	80026cc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc16(mas, len, out);
 8002710:	0022      	movs	r2, r4
 8002712:	f7ff ff31 	bl	8002578 <CmdFunc16>
 8002716:	0005      	movs	r5, r0
		break;
 8002718:	e7d8      	b.n	80026cc <cmdModbusRTU+0x24>
		d_printf("\n\r\n\r ERROR_Illegal_Function");
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <cmdModbusRTU+0x90>)
 800271c:	f7fe fe22 	bl	8001364 <d_printf>
		out[1] |= 0x80;
 8002720:	7862      	ldrb	r2, [r4, #1]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	425b      	negs	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Function;
 800272a:	2301      	movs	r3, #1
 800272c:	70a3      	strb	r3, [r4, #2]
		AnswerLen = 3;
 800272e:	2503      	movs	r5, #3
 8002730:	e7ce      	b.n	80026d0 <cmdModbusRTU+0x28>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	080039b0 	.word	0x080039b0
 8002738:	08003994 	.word	0x08003994

0800273c <mb_proc>:
void mb_proc(void){
 800273c:	b570      	push	{r4, r5, r6, lr}
	if(!f_mbs_packet_rcv)
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <mb_proc+0x64>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <mb_proc+0x26>
	f_mbs_packet_rcv = FALSE;
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <mb_proc+0x64>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
	uint16_t crc = mb_crc(mbs_pkt_rx,mbs_rx_pkt_len-2);
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <mb_proc+0x68>)
 800274e:	881e      	ldrh	r6, [r3, #0]
 8002750:	1eb5      	subs	r5, r6, #2
 8002752:	4c15      	ldr	r4, [pc, #84]	; (80027a8 <mb_proc+0x6c>)
 8002754:	0029      	movs	r1, r5
 8002756:	0020      	movs	r0, r4
 8002758:	f7ff fc5c 	bl	8002014 <mb_crc>
	if((mbs_pkt_rx[0] == 0x55) && \
 800275c:	7823      	ldrb	r3, [r4, #0]
 800275e:	2b55      	cmp	r3, #85	; 0x55
 8002760:	d000      	beq.n	8002764 <mb_proc+0x28>
}
 8002762:	bd70      	pop	{r4, r5, r6, pc}
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8002764:	5d62      	ldrb	r2, [r4, r5]
 8002766:	b2c3      	uxtb	r3, r0
	if((mbs_pkt_rx[0] == 0x55) && \
 8002768:	429a      	cmp	r2, r3
 800276a:	d1fa      	bne.n	8002762 <mb_proc+0x26>
			(mbs_pkt_rx[mbs_rx_pkt_len-1] == HIBYTE(crc))){
 800276c:	1e73      	subs	r3, r6, #1
 800276e:	5ce3      	ldrb	r3, [r4, r3]
 8002770:	0400      	lsls	r0, r0, #16
 8002772:	0e00      	lsrs	r0, r0, #24
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8002774:	4283      	cmp	r3, r0
 8002776:	d1f4      	bne.n	8002762 <mb_proc+0x26>
		mbs_tx_len = cmdModbusRTU(mbs_pkt_rx, mbs_rx_pkt_len, mbs_pkt_tx);
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <mb_proc+0x70>)
 800277a:	0031      	movs	r1, r6
 800277c:	0020      	movs	r0, r4
 800277e:	f7ff ff93 	bl	80026a8 <cmdModbusRTU>
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <mb_proc+0x74>)
 8002784:	8018      	strh	r0, [r3, #0]
		mbs_tx_cnt = 0;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <mb_proc+0x78>)
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <mb_proc+0x7c>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2104      	movs	r1, #4
 8002792:	438a      	bics	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	317c      	adds	r1, #124	; 0x7c
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
}
 800279e:	e7e0      	b.n	8002762 <mb_proc+0x26>
 80027a0:	20000095 	.word	0x20000095
 80027a4:	200002fc 	.word	0x200002fc
 80027a8:	200001f8 	.word	0x200001f8
 80027ac:	20000300 	.word	0x20000300
 80027b0:	200002fe 	.word	0x200002fe
 80027b4:	200002fa 	.word	0x200002fa
 80027b8:	40004800 	.word	0x40004800

080027bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80027bc:	480d      	ldr	r0, [pc, #52]	; (80027f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80027be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480d      	ldr	r0, [pc, #52]	; (80027f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027c2:	490e      	ldr	r1, [pc, #56]	; (80027fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <LoopForever+0xe>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d8:	4c0b      	ldr	r4, [pc, #44]	; (8002808 <LoopForever+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80027e6:	f7fe fb35 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ea:	f000 fbc9 	bl	8002f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ee:	f7fe f9d3 	bl	8000b98 <main>

080027f2 <LoopForever>:

LoopForever:
    b LoopForever
 80027f2:	e7fe      	b.n	80027f2 <LoopForever>
   ldr   r0, =_estack
 80027f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80027f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002800:	08003e74 	.word	0x08003e74
  ldr r2, =_sbss
 8002804:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002808:	20000570 	.word	0x20000570

0800280c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800280c:	e7fe      	b.n	800280c <DMA1_Channel1_IRQHandler>
	...

08002810 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002810:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002812:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002814:	07db      	lsls	r3, r3, #31
 8002816:	d411      	bmi.n	800283c <LL_ADC_Init+0x2c>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002818:	68c3      	ldr	r3, [r0, #12]
 800281a:	4a09      	ldr	r2, [pc, #36]	; (8002840 <LL_ADC_Init+0x30>)
 800281c:	4013      	ands	r3, r2
 800281e:	684a      	ldr	r2, [r1, #4]
 8002820:	688c      	ldr	r4, [r1, #8]
 8002822:	4322      	orrs	r2, r4
 8002824:	68cc      	ldr	r4, [r1, #12]
 8002826:	4322      	orrs	r2, r4
 8002828:	4313      	orrs	r3, r2
 800282a:	60c3      	str	r3, [r0, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 800282c:	6903      	ldr	r3, [r0, #16]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	089b      	lsrs	r3, r3, #2
 8002832:	680a      	ldr	r2, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 8002838:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800283a:	bd10      	pop	{r4, pc}
    status = ERROR;
 800283c:	2001      	movs	r0, #1
 800283e:	e7fc      	b.n	800283a <LL_ADC_Init+0x2a>
 8002840:	ffff3fc7 	.word	0xffff3fc7

08002844 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002844:	b510      	push	{r4, lr}
 8002846:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002848:	07db      	lsls	r3, r3, #31
 800284a:	d40f      	bmi.n	800286c <LL_ADC_REG_Init+0x28>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800284c:	68c3      	ldr	r3, [r0, #12]
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <LL_ADC_REG_Init+0x2c>)
 8002850:	401a      	ands	r2, r3
 8002852:	680b      	ldr	r3, [r1, #0]
 8002854:	684c      	ldr	r4, [r1, #4]
 8002856:	4323      	orrs	r3, r4
 8002858:	688c      	ldr	r4, [r1, #8]
 800285a:	4323      	orrs	r3, r4
 800285c:	68cc      	ldr	r4, [r1, #12]
 800285e:	4323      	orrs	r3, r4
 8002860:	6909      	ldr	r1, [r1, #16]
 8002862:	430b      	orrs	r3, r1
 8002864:	4313      	orrs	r3, r2
 8002866:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8002868:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800286a:	bd10      	pop	{r4, pc}
    status = ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e7fc      	b.n	800286a <LL_ADC_REG_Init+0x26>
 8002870:	fffec23c 	.word	0xfffec23c

08002874 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002874:	b510      	push	{r4, lr}
 8002876:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002878:	7900      	ldrb	r0, [r0, #4]
 800287a:	2800      	cmp	r0, #0
 800287c:	d050      	beq.n	8002920 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2a00      	cmp	r2, #0
 8002882:	d057      	beq.n	8002934 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8002884:	7958      	ldrb	r0, [r3, #5]
 8002886:	2801      	cmp	r0, #1
 8002888:	d018      	beq.n	80028bc <LL_EXTI_Init+0x48>
 800288a:	2802      	cmp	r0, #2
 800288c:	d020      	beq.n	80028d0 <LL_EXTI_Init+0x5c>
 800288e:	2800      	cmp	r0, #0
 8002890:	d00b      	beq.n	80028aa <LL_EXTI_Init+0x36>
 8002892:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002894:	799a      	ldrb	r2, [r3, #6]
 8002896:	2a00      	cmp	r2, #0
 8002898:	d04b      	beq.n	8002932 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 800289a:	2a02      	cmp	r2, #2
 800289c:	d02c      	beq.n	80028f8 <LL_EXTI_Init+0x84>
 800289e:	2a03      	cmp	r2, #3
 80028a0:	d034      	beq.n	800290c <LL_EXTI_Init+0x98>
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d01e      	beq.n	80028e4 <LL_EXTI_Init+0x70>
 80028a6:	2001      	movs	r0, #1
 80028a8:	e043      	b.n	8002932 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80028aa:	4923      	ldr	r1, [pc, #140]	; (8002938 <LL_EXTI_Init+0xc4>)
 80028ac:	684c      	ldr	r4, [r1, #4]
 80028ae:	4394      	bics	r4, r2
 80028b0:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80028b2:	680a      	ldr	r2, [r1, #0]
 80028b4:	681c      	ldr	r4, [r3, #0]
 80028b6:	4322      	orrs	r2, r4
 80028b8:	600a      	str	r2, [r1, #0]
}
 80028ba:	e7eb      	b.n	8002894 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80028bc:	491e      	ldr	r1, [pc, #120]	; (8002938 <LL_EXTI_Init+0xc4>)
 80028be:	6808      	ldr	r0, [r1, #0]
 80028c0:	4390      	bics	r0, r2
 80028c2:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80028c4:	684a      	ldr	r2, [r1, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	4302      	orrs	r2, r0
 80028ca:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 80028cc:	2000      	movs	r0, #0
}
 80028ce:	e7e1      	b.n	8002894 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 80028d0:	4919      	ldr	r1, [pc, #100]	; (8002938 <LL_EXTI_Init+0xc4>)
 80028d2:	6808      	ldr	r0, [r1, #0]
 80028d4:	4302      	orrs	r2, r0
 80028d6:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80028d8:	684a      	ldr	r2, [r1, #4]
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4302      	orrs	r2, r0
 80028de:	604a      	str	r2, [r1, #4]
 80028e0:	2000      	movs	r0, #0
}
 80028e2:	e7d7      	b.n	8002894 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <LL_EXTI_Init+0xc4>)
 80028e6:	68d1      	ldr	r1, [r2, #12]
 80028e8:	681c      	ldr	r4, [r3, #0]
 80028ea:	43a1      	bics	r1, r4
 80028ec:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028ee:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80028f0:	6891      	ldr	r1, [r2, #8]
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6093      	str	r3, [r2, #8]
}
 80028f6:	e01c      	b.n	8002932 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <LL_EXTI_Init+0xc4>)
 80028fa:	6891      	ldr	r1, [r2, #8]
 80028fc:	681c      	ldr	r4, [r3, #0]
 80028fe:	43a1      	bics	r1, r4
 8002900:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002902:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002904:	68d1      	ldr	r1, [r2, #12]
 8002906:	430b      	orrs	r3, r1
 8002908:	60d3      	str	r3, [r2, #12]
}
 800290a:	e012      	b.n	8002932 <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 800290c:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <LL_EXTI_Init+0xc4>)
 800290e:	6891      	ldr	r1, [r2, #8]
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	4321      	orrs	r1, r4
 8002914:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002916:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002918:	68d1      	ldr	r1, [r2, #12]
 800291a:	430b      	orrs	r3, r1
 800291c:	60d3      	str	r3, [r2, #12]
}
 800291e:	e008      	b.n	8002932 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002920:	4a05      	ldr	r2, [pc, #20]	; (8002938 <LL_EXTI_Init+0xc4>)
 8002922:	6811      	ldr	r1, [r2, #0]
 8002924:	681c      	ldr	r4, [r3, #0]
 8002926:	43a1      	bics	r1, r4
 8002928:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800292a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800292c:	6853      	ldr	r3, [r2, #4]
 800292e:	438b      	bics	r3, r1
 8002930:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8002932:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8002934:	2000      	movs	r0, #0
 8002936:	e7fc      	b.n	8002932 <LL_EXTI_Init+0xbe>
 8002938:	40010400 	.word	0x40010400

0800293c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 800293e:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002940:	e027      	b.n	8002992 <LL_GPIO_Init+0x56>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002942:	6883      	ldr	r3, [r0, #8]
 8002944:	002c      	movs	r4, r5
 8002946:	436c      	muls	r4, r5
 8002948:	0066      	lsls	r6, r4, #1
 800294a:	1936      	adds	r6, r6, r4
 800294c:	43b3      	bics	r3, r6
 800294e:	688e      	ldr	r6, [r1, #8]
 8002950:	4374      	muls	r4, r6
 8002952:	4323      	orrs	r3, r4
 8002954:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002956:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002958:	6843      	ldr	r3, [r0, #4]
 800295a:	43a3      	bics	r3, r4
 800295c:	68ce      	ldr	r6, [r1, #12]
 800295e:	4374      	muls	r4, r6
 8002960:	4323      	orrs	r3, r4
 8002962:	6043      	str	r3, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002964:	68c6      	ldr	r6, [r0, #12]
 8002966:	002b      	movs	r3, r5
 8002968:	436b      	muls	r3, r5
 800296a:	005f      	lsls	r7, r3, #1
 800296c:	18ff      	adds	r7, r7, r3
 800296e:	43fc      	mvns	r4, r7
 8002970:	46a4      	mov	ip, r4
 8002972:	43be      	bics	r6, r7
 8002974:	690f      	ldr	r7, [r1, #16]
 8002976:	435f      	muls	r7, r3
 8002978:	433e      	orrs	r6, r7
 800297a:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800297c:	684c      	ldr	r4, [r1, #4]
 800297e:	2c02      	cmp	r4, #2
 8002980:	d016      	beq.n	80029b0 <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002982:	6804      	ldr	r4, [r0, #0]
 8002984:	4665      	mov	r5, ip
 8002986:	402c      	ands	r4, r5
 8002988:	684d      	ldr	r5, [r1, #4]
 800298a:	436b      	muls	r3, r5
 800298c:	4323      	orrs	r3, r4
 800298e:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8002990:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002992:	680c      	ldr	r4, [r1, #0]
 8002994:	0023      	movs	r3, r4
 8002996:	40d3      	lsrs	r3, r2
 8002998:	d026      	beq.n	80029e8 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800299a:	2301      	movs	r3, #1
 800299c:	4093      	lsls	r3, r2
 800299e:	0025      	movs	r5, r4
 80029a0:	401d      	ands	r5, r3
    if (currentpin)
 80029a2:	421c      	tst	r4, r3
 80029a4:	d0f4      	beq.n	8002990 <LL_GPIO_Init+0x54>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029a6:	684b      	ldr	r3, [r1, #4]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d8da      	bhi.n	8002964 <LL_GPIO_Init+0x28>
 80029ae:	e7c8      	b.n	8002942 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 80029b0:	2dff      	cmp	r5, #255	; 0xff
 80029b2:	d80b      	bhi.n	80029cc <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80029b4:	6a06      	ldr	r6, [r0, #32]
 80029b6:	001c      	movs	r4, r3
 80029b8:	436c      	muls	r4, r5
 80029ba:	4365      	muls	r5, r4
 80029bc:	012c      	lsls	r4, r5, #4
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	43a6      	bics	r6, r4
 80029c2:	694c      	ldr	r4, [r1, #20]
 80029c4:	4365      	muls	r5, r4
 80029c6:	4335      	orrs	r5, r6
 80029c8:	6205      	str	r5, [r0, #32]
}
 80029ca:	e7da      	b.n	8002982 <LL_GPIO_Init+0x46>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80029cc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80029ce:	0a2d      	lsrs	r5, r5, #8
 80029d0:	002c      	movs	r4, r5
 80029d2:	436c      	muls	r4, r5
 80029d4:	436c      	muls	r4, r5
 80029d6:	4365      	muls	r5, r4
 80029d8:	012c      	lsls	r4, r5, #4
 80029da:	1b64      	subs	r4, r4, r5
 80029dc:	43a6      	bics	r6, r4
 80029de:	694c      	ldr	r4, [r1, #20]
 80029e0:	4365      	muls	r5, r4
 80029e2:	4335      	orrs	r5, r6
 80029e4:	6245      	str	r5, [r0, #36]	; 0x24
}
 80029e6:	e7cc      	b.n	8002982 <LL_GPIO_Init+0x46>
  }


  return (SUCCESS);
}
 80029e8:	2000      	movs	r0, #0
 80029ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ec <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80029ec:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80029ee:	6802      	ldr	r2, [r0, #0]
 80029f0:	2401      	movs	r4, #1
 80029f2:	43a2      	bics	r2, r4
 80029f4:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <LL_I2C_Init+0x6c>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ca      	ldr	r2, [r1, #12]
 80029fe:	0212      	lsls	r2, r2, #8
 8002a00:	688d      	ldr	r5, [r1, #8]
 8002a02:	432a      	orrs	r2, r5
 8002a04:	4313      	orrs	r3, r2
 8002a06:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002a08:	684b      	ldr	r3, [r1, #4]
 8002a0a:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a0c:	6803      	ldr	r3, [r0, #0]
 8002a0e:	4323      	orrs	r3, r4
 8002a10:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002a12:	6883      	ldr	r3, [r0, #8]
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <LL_I2C_Init+0x70>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002a1a:	6883      	ldr	r3, [r0, #8]
 8002a1c:	0adb      	lsrs	r3, r3, #11
 8002a1e:	02db      	lsls	r3, r3, #11
 8002a20:	690a      	ldr	r2, [r1, #16]
 8002a22:	698c      	ldr	r4, [r1, #24]
 8002a24:	4322      	orrs	r2, r4
 8002a26:	4313      	orrs	r3, r2
 8002a28:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002a2a:	690b      	ldr	r3, [r1, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002a30:	6882      	ldr	r2, [r0, #8]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	4313      	orrs	r3, r2
 8002a38:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002a3a:	6803      	ldr	r3, [r0, #0]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <LL_I2C_Init+0x74>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	680a      	ldr	r2, [r1, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002a46:	694b      	ldr	r3, [r1, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002a48:	6842      	ldr	r2, [r0, #4]
 8002a4a:	4904      	ldr	r1, [pc, #16]	; (8002a5c <LL_I2C_Init+0x70>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8002a52:	2000      	movs	r0, #0
 8002a54:	bd30      	pop	{r4, r5, pc}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	ffffe0ff 	.word	0xffffe0ff
 8002a5c:	ffff7fff 	.word	0xffff7fff
 8002a60:	ffcfffff 	.word	0xffcfffff

08002a64 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000d      	movs	r5, r1
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a6a:	6803      	ldr	r3, [r0, #0]
 8002a6c:	07db      	lsls	r3, r3, #31
 8002a6e:	d42c      	bmi.n	8002aca <LL_LPUART_Init+0x66>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8002a70:	6803      	ldr	r3, [r0, #0]
 8002a72:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <LL_LPUART_Init+0x74>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	684a      	ldr	r2, [r1, #4]
 8002a78:	68c9      	ldr	r1, [r1, #12]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	6929      	ldr	r1, [r5, #16]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	4313      	orrs	r3, r2
 8002a82:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8002a84:	6843      	ldr	r3, [r0, #4]
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <LL_LPUART_Init+0x78>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	68aa      	ldr	r2, [r5, #8]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a90:	6883      	ldr	r3, [r0, #8]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <LL_LPUART_Init+0x7c>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	696a      	ldr	r2, [r5, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	6083      	str	r3, [r0, #8]
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8002a9c:	20c0      	movs	r0, #192	; 0xc0
 8002a9e:	0100      	lsls	r0, r0, #4
 8002aa0:	f000 f8e0 	bl	8002c64 <LL_RCC_GetLPUARTClockFreq>

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d012      	beq.n	8002ace <LL_LPUART_Init+0x6a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8002aa8:	682a      	ldr	r2, [r5, #0]
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	d011      	beq.n	8002ad2 <LL_LPUART_Init+0x6e>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8002aae:	0e07      	lsrs	r7, r0, #24
 8002ab0:	0206      	lsls	r6, r0, #8
 8002ab2:	0850      	lsrs	r0, r2, #1
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	1980      	adds	r0, r0, r6
 8002ab8:	4179      	adcs	r1, r7
 8002aba:	2300      	movs	r3, #0
 8002abc:	f7fd fcac 	bl	8000418 <__aeabi_uldivmod>
 8002ac0:	0300      	lsls	r0, r0, #12
 8002ac2:	0b00      	lsrs	r0, r0, #12
 8002ac4:	60e0      	str	r0, [r4, #12]
    {
      status = SUCCESS;
 8002ac6:	2000      	movs	r0, #0
}
 8002ac8:	e000      	b.n	8002acc <LL_LPUART_Init+0x68>
  ErrorStatus status = ERROR;
 8002aca:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 8002acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ErrorStatus status = ERROR;
 8002ace:	2001      	movs	r0, #1
 8002ad0:	e7fc      	b.n	8002acc <LL_LPUART_Init+0x68>
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	e7fa      	b.n	8002acc <LL_LPUART_Init+0x68>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	efffe9f3 	.word	0xefffe9f3
 8002adc:	ffffcfff 	.word	0xffffcfff
 8002ae0:	fffffcff 	.word	0xfffffcff

08002ae4 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <RCC_GetHCLKClockFreq+0x14>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ae8:	0912      	lsrs	r2, r2, #4
 8002aea:	230f      	movs	r3, #15
 8002aec:	4013      	ands	r3, r2
 8002aee:	4a03      	ldr	r2, [pc, #12]	; (8002afc <RCC_GetHCLKClockFreq+0x18>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	40d8      	lsrs	r0, r3
}
 8002af4:	4770      	bx	lr
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	08003868 	.word	0x08003868

08002b00 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <RCC_GetPCLK1ClockFreq+0x14>)
 8002b02:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b04:	0a12      	lsrs	r2, r2, #8
 8002b06:	2307      	movs	r3, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	4a03      	ldr	r2, [pc, #12]	; (8002b18 <RCC_GetPCLK1ClockFreq+0x18>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	40d8      	lsrs	r0, r3
}
 8002b10:	4770      	bx	lr
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	40021000 	.word	0x40021000
 8002b18:	08003878 	.word	0x08003878

08002b1c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b1c:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002b20:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002b22:	03db      	lsls	r3, r3, #15
 8002b24:	d405      	bmi.n	8002b32 <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	06db      	lsls	r3, r3, #27
 8002b2c:	d512      	bpl.n	8002b54 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8002b2e:	480b      	ldr	r0, [pc, #44]	; (8002b5c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002b30:	e000      	b.n	8002b34 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002b34:	4908      	ldr	r1, [pc, #32]	; (8002b58 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8002b36:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002b38:	0c92      	lsrs	r2, r2, #18
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002b44:	68cb      	ldr	r3, [r1, #12]
 8002b46:	0d9b      	lsrs	r3, r3, #22
 8002b48:	2103      	movs	r1, #3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	3101      	adds	r1, #1
 8002b4e:	f7fd faed 	bl	800012c <__udivsi3>
}
 8002b52:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8002b54:	4804      	ldr	r0, [pc, #16]	; (8002b68 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8002b56:	e7ed      	b.n	8002b34 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	003d0900 	.word	0x003d0900
 8002b60:	007a1200 	.word	0x007a1200
 8002b64:	08003880 	.word	0x08003880
 8002b68:	00f42400 	.word	0x00f42400

08002b6c <RCC_GetSystemClockFreq>:
{
 8002b6c:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <RCC_GetSystemClockFreq+0x60>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	230c      	movs	r3, #12
 8002b74:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d023      	beq.n	8002bc2 <RCC_GetSystemClockFreq+0x56>
 8002b7a:	d809      	bhi.n	8002b90 <RCC_GetSystemClockFreq+0x24>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00c      	beq.n	8002b9a <RCC_GetSystemClockFreq+0x2e>
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d114      	bne.n	8002bae <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <RCC_GetSystemClockFreq+0x60>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	06db      	lsls	r3, r3, #27
 8002b8a:	d51c      	bpl.n	8002bc6 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8002b8c:	4810      	ldr	r0, [pc, #64]	; (8002bd0 <RCC_GetSystemClockFreq+0x64>)
 8002b8e:	e019      	b.n	8002bc4 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d10c      	bne.n	8002bae <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002b94:	f7ff ffc2 	bl	8002b1c <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002b98:	e014      	b.n	8002bc4 <RCC_GetSystemClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <RCC_GetSystemClockFreq+0x60>)
 8002b9c:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b9e:	0b52      	lsrs	r2, r2, #13
 8002ba0:	2307      	movs	r3, #7
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	2080      	movs	r0, #128	; 0x80
 8002ba8:	0200      	lsls	r0, r0, #8
 8002baa:	4098      	lsls	r0, r3
      break;
 8002bac:	e00a      	b.n	8002bc4 <RCC_GetSystemClockFreq+0x58>
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <RCC_GetSystemClockFreq+0x60>)
 8002bb0:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bb2:	0b52      	lsrs	r2, r2, #13
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	3301      	adds	r3, #1
 8002bba:	2080      	movs	r0, #128	; 0x80
 8002bbc:	0200      	lsls	r0, r0, #8
 8002bbe:	4098      	lsls	r0, r3
      break;
 8002bc0:	e000      	b.n	8002bc4 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 8002bc2:	4804      	ldr	r0, [pc, #16]	; (8002bd4 <RCC_GetSystemClockFreq+0x68>)
}
 8002bc4:	bd10      	pop	{r4, pc}
        frequency = HSI_VALUE;
 8002bc6:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8002bc8:	e7fc      	b.n	8002bc4 <RCC_GetSystemClockFreq+0x58>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	003d0900 	.word	0x003d0900
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	00f42400 	.word	0x00f42400

08002bdc <LL_RCC_GetUSARTClockFreq>:
{
 8002bdc:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002bde:	280c      	cmp	r0, #12
 8002be0:	d001      	beq.n	8002be6 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002be2:	2000      	movs	r0, #0
}
 8002be4:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <LL_RCC_GetUSARTClockFreq+0x70>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4003      	ands	r3, r0
 8002bec:	0400      	lsls	r0, r0, #16
 8002bee:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <LL_RCC_GetUSARTClockFreq+0x74>)
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d00f      	beq.n	8002c16 <LL_RCC_GetUSARTClockFreq+0x3a>
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <LL_RCC_GetUSARTClockFreq+0x78>)
 8002bf8:	4298      	cmp	r0, r3
 8002bfa:	d019      	beq.n	8002c30 <LL_RCC_GetUSARTClockFreq+0x54>
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8002bfe:	4298      	cmp	r0, r3
 8002c00:	d006      	beq.n	8002c10 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c02:	f7ff ffb3 	bl	8002b6c <RCC_GetSystemClockFreq>
 8002c06:	f7ff ff6d 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 8002c0a:	f7ff ff79 	bl	8002b00 <RCC_GetPCLK1ClockFreq>
        break;
 8002c0e:	e7e9      	b.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8002c10:	f7ff ffac 	bl	8002b6c <RCC_GetSystemClockFreq>
        break;
 8002c14:	e7e6      	b.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <LL_RCC_GetUSARTClockFreq+0x70>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	4018      	ands	r0, r3
 8002c20:	421a      	tst	r2, r3
 8002c22:	d0df      	beq.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <LL_RCC_GetUSARTClockFreq+0x70>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	06db      	lsls	r3, r3, #27
 8002c2a:	d40c      	bmi.n	8002c46 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8002c2c:	480b      	ldr	r0, [pc, #44]	; (8002c5c <LL_RCC_GetUSARTClockFreq+0x80>)
 8002c2e:	e7d9      	b.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <LL_RCC_GetUSARTClockFreq+0x70>)
 8002c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	0010      	movs	r0, r2
 8002c3a:	4018      	ands	r0, r3
 8002c3c:	421a      	tst	r2, r3
 8002c3e:	d0d1      	beq.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8002c40:	2080      	movs	r0, #128	; 0x80
 8002c42:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8002c44:	e7ce      	b.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8002c46:	4806      	ldr	r0, [pc, #24]	; (8002c60 <LL_RCC_GetUSARTClockFreq+0x84>)
 8002c48:	e7cc      	b.n	8002be4 <LL_RCC_GetUSARTClockFreq+0x8>
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	000c0008 	.word	0x000c0008
 8002c54:	000c000c 	.word	0x000c000c
 8002c58:	000c0004 	.word	0x000c0004
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	003d0900 	.word	0x003d0900

08002c64 <LL_RCC_GetLPUARTClockFreq>:
{
 8002c64:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4298      	cmp	r0, r3
 8002c72:	d011      	beq.n	8002c98 <LL_RCC_GetLPUARTClockFreq+0x34>
 8002c74:	23c0      	movs	r3, #192	; 0xc0
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d01a      	beq.n	8002cb2 <LL_RCC_GetLPUARTClockFreq+0x4e>
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4298      	cmp	r0, r3
 8002c82:	d006      	beq.n	8002c92 <LL_RCC_GetLPUARTClockFreq+0x2e>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002c84:	f7ff ff72 	bl	8002b6c <RCC_GetSystemClockFreq>
 8002c88:	f7ff ff2c 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 8002c8c:	f7ff ff38 	bl	8002b00 <RCC_GetPCLK1ClockFreq>
      break;
 8002c90:	e001      	b.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
      lpuart_frequency = RCC_GetSystemClockFreq();
 8002c92:	f7ff ff6b 	bl	8002b6c <RCC_GetSystemClockFreq>
}
 8002c96:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	4018      	ands	r0, r3
 8002ca2:	421a      	tst	r2, r3
 8002ca4:	d0f7      	beq.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	06db      	lsls	r3, r3, #27
 8002cac:	d40c      	bmi.n	8002cc8 <LL_RCC_GetLPUARTClockFreq+0x64>
          lpuart_frequency = HSI_VALUE;
 8002cae:	4808      	ldr	r0, [pc, #32]	; (8002cd0 <LL_RCC_GetLPUARTClockFreq+0x6c>)
 8002cb0:	e7f1      	b.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <LL_RCC_GetLPUARTClockFreq+0x68>)
 8002cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	0010      	movs	r0, r2
 8002cbc:	4018      	ands	r0, r3
 8002cbe:	421a      	tst	r2, r3
 8002cc0:	d0e9      	beq.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
        lpuart_frequency = LSE_VALUE;
 8002cc2:	2080      	movs	r0, #128	; 0x80
 8002cc4:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 8002cc6:	e7e6      	b.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
          lpuart_frequency = (HSI_VALUE >> 2U);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <LL_RCC_GetLPUARTClockFreq+0x70>)
 8002cca:	e7e4      	b.n	8002c96 <LL_RCC_GetLPUARTClockFreq+0x32>
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	003d0900 	.word	0x003d0900

08002cd8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cd8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002cda:	6a03      	ldr	r3, [r0, #32]
 8002cdc:	2401      	movs	r4, #1
 8002cde:	43a3      	bics	r3, r4
 8002ce0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ce2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ce4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ce6:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ce8:	2673      	movs	r6, #115	; 0x73
 8002cea:	43b2      	bics	r2, r6
 8002cec:	680e      	ldr	r6, [r1, #0]
 8002cee:	4332      	orrs	r2, r6

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002cf0:	2602      	movs	r6, #2
 8002cf2:	43b3      	bics	r3, r6
 8002cf4:	68ce      	ldr	r6, [r1, #12]
 8002cf6:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002cf8:	43a3      	bics	r3, r4
 8002cfa:	684c      	ldr	r4, [r1, #4]
 8002cfc:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002cfe:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d00:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002d02:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002d04:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d06:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002d08:	2000      	movs	r0, #0
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}

08002d0c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d0c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002d0e:	6a03      	ldr	r3, [r0, #32]
 8002d10:	2610      	movs	r6, #16
 8002d12:	43b3      	bics	r3, r6
 8002d14:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d16:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d18:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002d1a:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <OC2Config+0x3c>)
 8002d1e:	4022      	ands	r2, r4
 8002d20:	680c      	ldr	r4, [r1, #0]
 8002d22:	0224      	lsls	r4, r4, #8
 8002d24:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002d26:	2420      	movs	r4, #32
 8002d28:	43a3      	bics	r3, r4
 8002d2a:	68cc      	ldr	r4, [r1, #12]
 8002d2c:	0124      	lsls	r4, r4, #4
 8002d2e:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002d30:	43b3      	bics	r3, r6
 8002d32:	684c      	ldr	r4, [r1, #4]
 8002d34:	0124      	lsls	r4, r4, #4
 8002d36:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d38:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d3a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d3c:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002d3e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d40:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002d42:	2000      	movs	r0, #0
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	ffff8cff 	.word	0xffff8cff

08002d4c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d4c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d4e:	6a02      	ldr	r2, [r0, #32]
 8002d50:	4e0c      	ldr	r6, [pc, #48]	; (8002d84 <OC3Config+0x38>)
 8002d52:	4032      	ands	r2, r6
 8002d54:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d56:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d58:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002d5c:	2473      	movs	r4, #115	; 0x73
 8002d5e:	43a2      	bics	r2, r4
 8002d60:	680c      	ldr	r4, [r1, #0]
 8002d62:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d64:	4c08      	ldr	r4, [pc, #32]	; (8002d88 <OC3Config+0x3c>)
 8002d66:	4023      	ands	r3, r4
 8002d68:	68cc      	ldr	r4, [r1, #12]
 8002d6a:	0224      	lsls	r4, r4, #8
 8002d6c:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d6e:	4033      	ands	r3, r6
 8002d70:	684c      	ldr	r4, [r1, #4]
 8002d72:	0224      	lsls	r4, r4, #8
 8002d74:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d76:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d78:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002d7a:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002d7c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d7e:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002d80:	2000      	movs	r0, #0
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
 8002d84:	fffffeff 	.word	0xfffffeff
 8002d88:	fffffdff 	.word	0xfffffdff

08002d8c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d8c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002d8e:	6a02      	ldr	r2, [r0, #32]
 8002d90:	4e0d      	ldr	r6, [pc, #52]	; (8002dc8 <OC4Config+0x3c>)
 8002d92:	4032      	ands	r2, r6
 8002d94:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d96:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002d98:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d9a:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002d9c:	4c0b      	ldr	r4, [pc, #44]	; (8002dcc <OC4Config+0x40>)
 8002d9e:	4022      	ands	r2, r4
 8002da0:	680c      	ldr	r4, [r1, #0]
 8002da2:	0224      	lsls	r4, r4, #8
 8002da4:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002da6:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <OC4Config+0x44>)
 8002da8:	4023      	ands	r3, r4
 8002daa:	68cc      	ldr	r4, [r1, #12]
 8002dac:	0324      	lsls	r4, r4, #12
 8002dae:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002db0:	4033      	ands	r3, r6
 8002db2:	684c      	ldr	r4, [r1, #4]
 8002db4:	0324      	lsls	r4, r4, #12
 8002db6:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002db8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002dba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002dbc:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002dbe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002dc0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	ffffefff 	.word	0xffffefff
 8002dcc:	ffff8cff 	.word	0xffff8cff
 8002dd0:	ffffdfff 	.word	0xffffdfff

08002dd4 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002dd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	05d2      	lsls	r2, r2, #23
 8002dda:	4290      	cmp	r0, r2
 8002ddc:	d005      	beq.n	8002dea <LL_TIM_Init+0x16>
 8002dde:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <LL_TIM_Init+0x50>)
 8002de0:	4290      	cmp	r0, r2
 8002de2:	d002      	beq.n	8002dea <LL_TIM_Init+0x16>
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <LL_TIM_Init+0x54>)
 8002de6:	4290      	cmp	r0, r2
 8002de8:	d103      	bne.n	8002df2 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002dea:	2270      	movs	r2, #112	; 0x70
 8002dec:	4393      	bics	r3, r2
 8002dee:	684a      	ldr	r2, [r1, #4]
 8002df0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	05d2      	lsls	r2, r2, #23
 8002df6:	4290      	cmp	r0, r2
 8002df8:	d005      	beq.n	8002e06 <LL_TIM_Init+0x32>
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <LL_TIM_Init+0x50>)
 8002dfc:	4290      	cmp	r0, r2
 8002dfe:	d002      	beq.n	8002e06 <LL_TIM_Init+0x32>
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <LL_TIM_Init+0x54>)
 8002e02:	4290      	cmp	r0, r2
 8002e04:	d103      	bne.n	8002e0e <LL_TIM_Init+0x3a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <LL_TIM_Init+0x58>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ca      	ldr	r2, [r1, #12]
 8002e0c:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002e0e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002e10:	688b      	ldr	r3, [r1, #8]
 8002e12:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002e14:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002e16:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e18:	6943      	ldr	r3, [r0, #20]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	6143      	str	r3, [r0, #20]
}
 8002e20:	2000      	movs	r0, #0
 8002e22:	4770      	bx	lr
 8002e24:	40010800 	.word	0x40010800
 8002e28:	40011400 	.word	0x40011400
 8002e2c:	fffffcff 	.word	0xfffffcff

08002e30 <LL_TIM_OC_Init>:
{
 8002e30:	b510      	push	{r4, lr}
 8002e32:	000b      	movs	r3, r1
 8002e34:	0011      	movs	r1, r2
  switch (Channel)
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0052      	lsls	r2, r2, #1
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d015      	beq.n	8002e6a <LL_TIM_OC_Init+0x3a>
 8002e3e:	d808      	bhi.n	8002e52 <LL_TIM_OC_Init+0x22>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d00f      	beq.n	8002e64 <LL_TIM_OC_Init+0x34>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d102      	bne.n	8002e4e <LL_TIM_OC_Init+0x1e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e48:	f7ff ff60 	bl	8002d0c <OC2Config>
      break;
 8002e4c:	e009      	b.n	8002e62 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8002e4e:	2001      	movs	r0, #1
 8002e50:	e007      	b.n	8002e62 <LL_TIM_OC_Init+0x32>
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	0152      	lsls	r2, r2, #5
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d102      	bne.n	8002e60 <LL_TIM_OC_Init+0x30>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e5a:	f7ff ff97 	bl	8002d8c <OC4Config>
      break;
 8002e5e:	e000      	b.n	8002e62 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8002e60:	2001      	movs	r0, #1
}
 8002e62:	bd10      	pop	{r4, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e64:	f7ff ff38 	bl	8002cd8 <OC1Config>
      break;
 8002e68:	e7fb      	b.n	8002e62 <LL_TIM_OC_Init+0x32>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e6a:	f7ff ff6f 	bl	8002d4c <OC3Config>
      break;
 8002e6e:	e7f8      	b.n	8002e62 <LL_TIM_OC_Init+0x32>

08002e70 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	0004      	movs	r4, r0
 8002e74:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002e76:	6803      	ldr	r3, [r0, #0]
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	d440      	bmi.n	8002efe <LL_USART_Init+0x8e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002e7c:	6803      	ldr	r3, [r0, #0]
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <LL_USART_Init+0x9c>)
 8002e80:	401a      	ands	r2, r3
 8002e82:	684b      	ldr	r3, [r1, #4]
 8002e84:	68c9      	ldr	r1, [r1, #12]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6929      	ldr	r1, [r5, #16]
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	69a9      	ldr	r1, [r5, #24]
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e94:	6843      	ldr	r3, [r0, #4]
 8002e96:	4a1e      	ldr	r2, [pc, #120]	; (8002f10 <LL_USART_Init+0xa0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68aa      	ldr	r2, [r5, #8]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002ea0:	6883      	ldr	r3, [r0, #8]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <LL_USART_Init+0xa4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	696a      	ldr	r2, [r5, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <LL_USART_Init+0xa8>)
 8002eae:	4298      	cmp	r0, r3
 8002eb0:	d001      	beq.n	8002eb6 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	e024      	b.n	8002f00 <LL_USART_Init+0x90>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002eb6:	200c      	movs	r0, #12
 8002eb8:	f7ff fe90 	bl	8002bdc <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d020      	beq.n	8002f02 <LL_USART_Init+0x92>
        && (USART_InitStruct->BaudRate != 0U))
 8002ec0:	6829      	ldr	r1, [r5, #0]
 8002ec2:	2900      	cmp	r1, #0
 8002ec4:	d01f      	beq.n	8002f06 <LL_USART_Init+0x96>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 8002ec6:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	021b      	lsls	r3, r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d008      	beq.n	8002ee2 <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ed0:	084b      	lsrs	r3, r1, #1
 8002ed2:	18c0      	adds	r0, r0, r3
 8002ed4:	f7fd f92a 	bl	800012c <__udivsi3>
 8002ed8:	0400      	lsls	r0, r0, #16
 8002eda:	0c00      	lsrs	r0, r0, #16
 8002edc:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 8002ede:	2000      	movs	r0, #0
 8002ee0:	e00e      	b.n	8002f00 <LL_USART_Init+0x90>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002ee2:	0040      	lsls	r0, r0, #1
 8002ee4:	084b      	lsrs	r3, r1, #1
 8002ee6:	18c0      	adds	r0, r0, r3
 8002ee8:	f7fd f920 	bl	800012c <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <LL_USART_Init+0xac>)
 8002eee:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ef0:	0840      	lsrs	r0, r0, #1
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4010      	ands	r0, r2
 8002ef6:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8002ef8:	60e0      	str	r0, [r4, #12]
 8002efa:	2000      	movs	r0, #0
 8002efc:	e000      	b.n	8002f00 <LL_USART_Init+0x90>
  ErrorStatus status = ERROR;
 8002efe:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7fc      	b.n	8002f00 <LL_USART_Init+0x90>
 8002f06:	2001      	movs	r0, #1
 8002f08:	e7fa      	b.n	8002f00 <LL_USART_Init+0x90>
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	efff69f3 	.word	0xefff69f3
 8002f10:	ffffcfff 	.word	0xffffcfff
 8002f14:	fffffcff 	.word	0xfffffcff
 8002f18:	40004400 	.word	0x40004400
 8002f1c:	0000fff0 	.word	0x0000fff0

08002f20 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f20:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002f22:	21fa      	movs	r1, #250	; 0xfa
 8002f24:	0089      	lsls	r1, r1, #2
 8002f26:	f7fd f901 	bl	800012c <__udivsi3>
 8002f2a:	3801      	subs	r0, #1
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <LL_Init1msTick+0x1c>)
 8002f2e:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f34:	3205      	adds	r2, #5
 8002f36:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002f40:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <LL_mDelay+0x24>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f48:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002f4a:	1c43      	adds	r3, r0, #1
 8002f4c:	d000      	beq.n	8002f50 <LL_mDelay+0x10>
  {
    Delay++;
 8002f4e:	3001      	adds	r0, #1
  }

  while (Delay)
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d005      	beq.n	8002f60 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <LL_mDelay+0x24>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	03db      	lsls	r3, r3, #15
 8002f5a:	d5f9      	bpl.n	8002f50 <LL_mDelay+0x10>
    {
      Delay--;
 8002f5c:	3801      	subs	r0, #1
 8002f5e:	e7f7      	b.n	8002f50 <LL_mDelay+0x10>
    }
  }
}
 8002f60:	b002      	add	sp, #8
 8002f62:	4770      	bx	lr
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <LL_SetSystemCoreClock+0x8>)
 8002f6a:	6018      	str	r0, [r3, #0]
}
 8002f6c:	4770      	bx	lr
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000000 	.word	0x20000000

08002f74 <__errno>:
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <__errno+0x8>)
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	4770      	bx	lr
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <__libc_init_array>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	2600      	movs	r6, #0
 8002f84:	4d0c      	ldr	r5, [pc, #48]	; (8002fb8 <__libc_init_array+0x38>)
 8002f86:	4c0d      	ldr	r4, [pc, #52]	; (8002fbc <__libc_init_array+0x3c>)
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	42a6      	cmp	r6, r4
 8002f8e:	d109      	bne.n	8002fa4 <__libc_init_array+0x24>
 8002f90:	2600      	movs	r6, #0
 8002f92:	f000 fc5d 	bl	8003850 <_init>
 8002f96:	4d0a      	ldr	r5, [pc, #40]	; (8002fc0 <__libc_init_array+0x40>)
 8002f98:	4c0a      	ldr	r4, [pc, #40]	; (8002fc4 <__libc_init_array+0x44>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	42a6      	cmp	r6, r4
 8002fa0:	d105      	bne.n	8002fae <__libc_init_array+0x2e>
 8002fa2:	bd70      	pop	{r4, r5, r6, pc}
 8002fa4:	00b3      	lsls	r3, r6, #2
 8002fa6:	58eb      	ldr	r3, [r5, r3]
 8002fa8:	4798      	blx	r3
 8002faa:	3601      	adds	r6, #1
 8002fac:	e7ee      	b.n	8002f8c <__libc_init_array+0xc>
 8002fae:	00b3      	lsls	r3, r6, #2
 8002fb0:	58eb      	ldr	r3, [r5, r3]
 8002fb2:	4798      	blx	r3
 8002fb4:	3601      	adds	r6, #1
 8002fb6:	e7f2      	b.n	8002f9e <__libc_init_array+0x1e>
 8002fb8:	08003e6c 	.word	0x08003e6c
 8002fbc:	08003e6c 	.word	0x08003e6c
 8002fc0:	08003e6c 	.word	0x08003e6c
 8002fc4:	08003e70 	.word	0x08003e70

08002fc8 <memcpy>:
 8002fc8:	2300      	movs	r3, #0
 8002fca:	b510      	push	{r4, lr}
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d100      	bne.n	8002fd2 <memcpy+0xa>
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	5ccc      	ldrb	r4, [r1, r3]
 8002fd4:	54c4      	strb	r4, [r0, r3]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	e7f8      	b.n	8002fcc <memcpy+0x4>

08002fda <memset>:
 8002fda:	0003      	movs	r3, r0
 8002fdc:	1882      	adds	r2, r0, r2
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d100      	bne.n	8002fe4 <memset+0xa>
 8002fe2:	4770      	bx	lr
 8002fe4:	7019      	strb	r1, [r3, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	e7f9      	b.n	8002fde <memset+0x4>

08002fea <_vsniprintf_r>:
 8002fea:	b530      	push	{r4, r5, lr}
 8002fec:	0014      	movs	r4, r2
 8002fee:	0005      	movs	r5, r0
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	b09b      	sub	sp, #108	; 0x6c
 8002ff4:	2c00      	cmp	r4, #0
 8002ff6:	da05      	bge.n	8003004 <_vsniprintf_r+0x1a>
 8002ff8:	238b      	movs	r3, #139	; 0x8b
 8002ffa:	6003      	str	r3, [r0, #0]
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	4240      	negs	r0, r0
 8003000:	b01b      	add	sp, #108	; 0x6c
 8003002:	bd30      	pop	{r4, r5, pc}
 8003004:	2382      	movs	r3, #130	; 0x82
 8003006:	4668      	mov	r0, sp
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	8183      	strh	r3, [r0, #12]
 800300c:	2300      	movs	r3, #0
 800300e:	9100      	str	r1, [sp, #0]
 8003010:	9104      	str	r1, [sp, #16]
 8003012:	429c      	cmp	r4, r3
 8003014:	d000      	beq.n	8003018 <_vsniprintf_r+0x2e>
 8003016:	1e63      	subs	r3, r4, #1
 8003018:	9302      	str	r3, [sp, #8]
 800301a:	9305      	str	r3, [sp, #20]
 800301c:	2301      	movs	r3, #1
 800301e:	4669      	mov	r1, sp
 8003020:	425b      	negs	r3, r3
 8003022:	81cb      	strh	r3, [r1, #14]
 8003024:	0028      	movs	r0, r5
 8003026:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003028:	f000 f878 	bl	800311c <_svfiprintf_r>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	da01      	bge.n	8003034 <_vsniprintf_r+0x4a>
 8003030:	238b      	movs	r3, #139	; 0x8b
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	2c00      	cmp	r4, #0
 8003036:	d0e3      	beq.n	8003000 <_vsniprintf_r+0x16>
 8003038:	2300      	movs	r3, #0
 800303a:	9a00      	ldr	r2, [sp, #0]
 800303c:	7013      	strb	r3, [r2, #0]
 800303e:	e7df      	b.n	8003000 <_vsniprintf_r+0x16>

08003040 <vsniprintf>:
 8003040:	b507      	push	{r0, r1, r2, lr}
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	0013      	movs	r3, r2
 8003046:	000a      	movs	r2, r1
 8003048:	0001      	movs	r1, r0
 800304a:	4802      	ldr	r0, [pc, #8]	; (8003054 <vsniprintf+0x14>)
 800304c:	6800      	ldr	r0, [r0, #0]
 800304e:	f7ff ffcc 	bl	8002fea <_vsniprintf_r>
 8003052:	bd0e      	pop	{r1, r2, r3, pc}
 8003054:	2000000c 	.word	0x2000000c

08003058 <__ssputs_r>:
 8003058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305a:	688e      	ldr	r6, [r1, #8]
 800305c:	b085      	sub	sp, #20
 800305e:	0007      	movs	r7, r0
 8003060:	000c      	movs	r4, r1
 8003062:	9203      	str	r2, [sp, #12]
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	429e      	cmp	r6, r3
 8003068:	d83c      	bhi.n	80030e4 <__ssputs_r+0x8c>
 800306a:	2390      	movs	r3, #144	; 0x90
 800306c:	898a      	ldrh	r2, [r1, #12]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	421a      	tst	r2, r3
 8003072:	d034      	beq.n	80030de <__ssputs_r+0x86>
 8003074:	2503      	movs	r5, #3
 8003076:	6909      	ldr	r1, [r1, #16]
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	1a5b      	subs	r3, r3, r1
 800307c:	9302      	str	r3, [sp, #8]
 800307e:	6963      	ldr	r3, [r4, #20]
 8003080:	9802      	ldr	r0, [sp, #8]
 8003082:	435d      	muls	r5, r3
 8003084:	0feb      	lsrs	r3, r5, #31
 8003086:	195d      	adds	r5, r3, r5
 8003088:	9b01      	ldr	r3, [sp, #4]
 800308a:	106d      	asrs	r5, r5, #1
 800308c:	3301      	adds	r3, #1
 800308e:	181b      	adds	r3, r3, r0
 8003090:	42ab      	cmp	r3, r5
 8003092:	d900      	bls.n	8003096 <__ssputs_r+0x3e>
 8003094:	001d      	movs	r5, r3
 8003096:	0553      	lsls	r3, r2, #21
 8003098:	d532      	bpl.n	8003100 <__ssputs_r+0xa8>
 800309a:	0029      	movs	r1, r5
 800309c:	0038      	movs	r0, r7
 800309e:	f000 fb27 	bl	80036f0 <_malloc_r>
 80030a2:	1e06      	subs	r6, r0, #0
 80030a4:	d109      	bne.n	80030ba <__ssputs_r+0x62>
 80030a6:	230c      	movs	r3, #12
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	2340      	movs	r3, #64	; 0x40
 80030ac:	2001      	movs	r0, #1
 80030ae:	89a2      	ldrh	r2, [r4, #12]
 80030b0:	4240      	negs	r0, r0
 80030b2:	4313      	orrs	r3, r2
 80030b4:	81a3      	strh	r3, [r4, #12]
 80030b6:	b005      	add	sp, #20
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	9a02      	ldr	r2, [sp, #8]
 80030bc:	6921      	ldr	r1, [r4, #16]
 80030be:	f7ff ff83 	bl	8002fc8 <memcpy>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <__ssputs_r+0xc0>)
 80030c6:	401a      	ands	r2, r3
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	4313      	orrs	r3, r2
 80030cc:	81a3      	strh	r3, [r4, #12]
 80030ce:	9b02      	ldr	r3, [sp, #8]
 80030d0:	6126      	str	r6, [r4, #16]
 80030d2:	18f6      	adds	r6, r6, r3
 80030d4:	6026      	str	r6, [r4, #0]
 80030d6:	6165      	str	r5, [r4, #20]
 80030d8:	9e01      	ldr	r6, [sp, #4]
 80030da:	1aed      	subs	r5, r5, r3
 80030dc:	60a5      	str	r5, [r4, #8]
 80030de:	9b01      	ldr	r3, [sp, #4]
 80030e0:	429e      	cmp	r6, r3
 80030e2:	d900      	bls.n	80030e6 <__ssputs_r+0x8e>
 80030e4:	9e01      	ldr	r6, [sp, #4]
 80030e6:	0032      	movs	r2, r6
 80030e8:	9903      	ldr	r1, [sp, #12]
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	f000 faa3 	bl	8003636 <memmove>
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	2000      	movs	r0, #0
 80030f4:	1b9b      	subs	r3, r3, r6
 80030f6:	60a3      	str	r3, [r4, #8]
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	199e      	adds	r6, r3, r6
 80030fc:	6026      	str	r6, [r4, #0]
 80030fe:	e7da      	b.n	80030b6 <__ssputs_r+0x5e>
 8003100:	002a      	movs	r2, r5
 8003102:	0038      	movs	r0, r7
 8003104:	f000 fb52 	bl	80037ac <_realloc_r>
 8003108:	1e06      	subs	r6, r0, #0
 800310a:	d1e0      	bne.n	80030ce <__ssputs_r+0x76>
 800310c:	0038      	movs	r0, r7
 800310e:	6921      	ldr	r1, [r4, #16]
 8003110:	f000 faa4 	bl	800365c <_free_r>
 8003114:	e7c7      	b.n	80030a6 <__ssputs_r+0x4e>
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	fffffb7f 	.word	0xfffffb7f

0800311c <_svfiprintf_r>:
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	b0a1      	sub	sp, #132	; 0x84
 8003120:	9003      	str	r0, [sp, #12]
 8003122:	001d      	movs	r5, r3
 8003124:	898b      	ldrh	r3, [r1, #12]
 8003126:	000f      	movs	r7, r1
 8003128:	0016      	movs	r6, r2
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	d511      	bpl.n	8003152 <_svfiprintf_r+0x36>
 800312e:	690b      	ldr	r3, [r1, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10e      	bne.n	8003152 <_svfiprintf_r+0x36>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fadb 	bl	80036f0 <_malloc_r>
 800313a:	6038      	str	r0, [r7, #0]
 800313c:	6138      	str	r0, [r7, #16]
 800313e:	2800      	cmp	r0, #0
 8003140:	d105      	bne.n	800314e <_svfiprintf_r+0x32>
 8003142:	230c      	movs	r3, #12
 8003144:	9a03      	ldr	r2, [sp, #12]
 8003146:	3801      	subs	r0, #1
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	b021      	add	sp, #132	; 0x84
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	2340      	movs	r3, #64	; 0x40
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	2300      	movs	r3, #0
 8003154:	ac08      	add	r4, sp, #32
 8003156:	6163      	str	r3, [r4, #20]
 8003158:	3320      	adds	r3, #32
 800315a:	7663      	strb	r3, [r4, #25]
 800315c:	3310      	adds	r3, #16
 800315e:	76a3      	strb	r3, [r4, #26]
 8003160:	9507      	str	r5, [sp, #28]
 8003162:	0035      	movs	r5, r6
 8003164:	782b      	ldrb	r3, [r5, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <_svfiprintf_r+0x52>
 800316a:	2b25      	cmp	r3, #37	; 0x25
 800316c:	d147      	bne.n	80031fe <_svfiprintf_r+0xe2>
 800316e:	1bab      	subs	r3, r5, r6
 8003170:	9305      	str	r3, [sp, #20]
 8003172:	42b5      	cmp	r5, r6
 8003174:	d00c      	beq.n	8003190 <_svfiprintf_r+0x74>
 8003176:	0032      	movs	r2, r6
 8003178:	0039      	movs	r1, r7
 800317a:	9803      	ldr	r0, [sp, #12]
 800317c:	f7ff ff6c 	bl	8003058 <__ssputs_r>
 8003180:	1c43      	adds	r3, r0, #1
 8003182:	d100      	bne.n	8003186 <_svfiprintf_r+0x6a>
 8003184:	e0ae      	b.n	80032e4 <_svfiprintf_r+0x1c8>
 8003186:	6962      	ldr	r2, [r4, #20]
 8003188:	9b05      	ldr	r3, [sp, #20]
 800318a:	4694      	mov	ip, r2
 800318c:	4463      	add	r3, ip
 800318e:	6163      	str	r3, [r4, #20]
 8003190:	782b      	ldrb	r3, [r5, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d100      	bne.n	8003198 <_svfiprintf_r+0x7c>
 8003196:	e0a5      	b.n	80032e4 <_svfiprintf_r+0x1c8>
 8003198:	2201      	movs	r2, #1
 800319a:	2300      	movs	r3, #0
 800319c:	4252      	negs	r2, r2
 800319e:	6062      	str	r2, [r4, #4]
 80031a0:	a904      	add	r1, sp, #16
 80031a2:	3254      	adds	r2, #84	; 0x54
 80031a4:	1852      	adds	r2, r2, r1
 80031a6:	1c6e      	adds	r6, r5, #1
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	60e3      	str	r3, [r4, #12]
 80031ac:	60a3      	str	r3, [r4, #8]
 80031ae:	7013      	strb	r3, [r2, #0]
 80031b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80031b2:	2205      	movs	r2, #5
 80031b4:	7831      	ldrb	r1, [r6, #0]
 80031b6:	4854      	ldr	r0, [pc, #336]	; (8003308 <_svfiprintf_r+0x1ec>)
 80031b8:	f000 fa32 	bl	8003620 <memchr>
 80031bc:	1c75      	adds	r5, r6, #1
 80031be:	2800      	cmp	r0, #0
 80031c0:	d11f      	bne.n	8003202 <_svfiprintf_r+0xe6>
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	06d3      	lsls	r3, r2, #27
 80031c6:	d504      	bpl.n	80031d2 <_svfiprintf_r+0xb6>
 80031c8:	2353      	movs	r3, #83	; 0x53
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	185b      	adds	r3, r3, r1
 80031ce:	2120      	movs	r1, #32
 80031d0:	7019      	strb	r1, [r3, #0]
 80031d2:	0713      	lsls	r3, r2, #28
 80031d4:	d504      	bpl.n	80031e0 <_svfiprintf_r+0xc4>
 80031d6:	2353      	movs	r3, #83	; 0x53
 80031d8:	a904      	add	r1, sp, #16
 80031da:	185b      	adds	r3, r3, r1
 80031dc:	212b      	movs	r1, #43	; 0x2b
 80031de:	7019      	strb	r1, [r3, #0]
 80031e0:	7833      	ldrb	r3, [r6, #0]
 80031e2:	2b2a      	cmp	r3, #42	; 0x2a
 80031e4:	d016      	beq.n	8003214 <_svfiprintf_r+0xf8>
 80031e6:	0035      	movs	r5, r6
 80031e8:	2100      	movs	r1, #0
 80031ea:	200a      	movs	r0, #10
 80031ec:	68e3      	ldr	r3, [r4, #12]
 80031ee:	782a      	ldrb	r2, [r5, #0]
 80031f0:	1c6e      	adds	r6, r5, #1
 80031f2:	3a30      	subs	r2, #48	; 0x30
 80031f4:	2a09      	cmp	r2, #9
 80031f6:	d94e      	bls.n	8003296 <_svfiprintf_r+0x17a>
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d111      	bne.n	8003220 <_svfiprintf_r+0x104>
 80031fc:	e017      	b.n	800322e <_svfiprintf_r+0x112>
 80031fe:	3501      	adds	r5, #1
 8003200:	e7b0      	b.n	8003164 <_svfiprintf_r+0x48>
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <_svfiprintf_r+0x1ec>)
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	1ac0      	subs	r0, r0, r3
 8003208:	2301      	movs	r3, #1
 800320a:	4083      	lsls	r3, r0
 800320c:	4313      	orrs	r3, r2
 800320e:	002e      	movs	r6, r5
 8003210:	6023      	str	r3, [r4, #0]
 8003212:	e7ce      	b.n	80031b2 <_svfiprintf_r+0x96>
 8003214:	9b07      	ldr	r3, [sp, #28]
 8003216:	1d19      	adds	r1, r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	9107      	str	r1, [sp, #28]
 800321c:	2b00      	cmp	r3, #0
 800321e:	db01      	blt.n	8003224 <_svfiprintf_r+0x108>
 8003220:	930b      	str	r3, [sp, #44]	; 0x2c
 8003222:	e004      	b.n	800322e <_svfiprintf_r+0x112>
 8003224:	425b      	negs	r3, r3
 8003226:	60e3      	str	r3, [r4, #12]
 8003228:	2302      	movs	r3, #2
 800322a:	4313      	orrs	r3, r2
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	782b      	ldrb	r3, [r5, #0]
 8003230:	2b2e      	cmp	r3, #46	; 0x2e
 8003232:	d10a      	bne.n	800324a <_svfiprintf_r+0x12e>
 8003234:	786b      	ldrb	r3, [r5, #1]
 8003236:	2b2a      	cmp	r3, #42	; 0x2a
 8003238:	d135      	bne.n	80032a6 <_svfiprintf_r+0x18a>
 800323a:	9b07      	ldr	r3, [sp, #28]
 800323c:	3502      	adds	r5, #2
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9207      	str	r2, [sp, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	db2b      	blt.n	80032a0 <_svfiprintf_r+0x184>
 8003248:	9309      	str	r3, [sp, #36]	; 0x24
 800324a:	4e30      	ldr	r6, [pc, #192]	; (800330c <_svfiprintf_r+0x1f0>)
 800324c:	2203      	movs	r2, #3
 800324e:	0030      	movs	r0, r6
 8003250:	7829      	ldrb	r1, [r5, #0]
 8003252:	f000 f9e5 	bl	8003620 <memchr>
 8003256:	2800      	cmp	r0, #0
 8003258:	d006      	beq.n	8003268 <_svfiprintf_r+0x14c>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	4083      	lsls	r3, r0
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	3501      	adds	r5, #1
 8003264:	4313      	orrs	r3, r2
 8003266:	6023      	str	r3, [r4, #0]
 8003268:	7829      	ldrb	r1, [r5, #0]
 800326a:	2206      	movs	r2, #6
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <_svfiprintf_r+0x1f4>)
 800326e:	1c6e      	adds	r6, r5, #1
 8003270:	7621      	strb	r1, [r4, #24]
 8003272:	f000 f9d5 	bl	8003620 <memchr>
 8003276:	2800      	cmp	r0, #0
 8003278:	d03c      	beq.n	80032f4 <_svfiprintf_r+0x1d8>
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <_svfiprintf_r+0x1f8>)
 800327c:	2b00      	cmp	r3, #0
 800327e:	d125      	bne.n	80032cc <_svfiprintf_r+0x1b0>
 8003280:	2207      	movs	r2, #7
 8003282:	9b07      	ldr	r3, [sp, #28]
 8003284:	3307      	adds	r3, #7
 8003286:	4393      	bics	r3, r2
 8003288:	3308      	adds	r3, #8
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	6963      	ldr	r3, [r4, #20]
 800328e:	9a04      	ldr	r2, [sp, #16]
 8003290:	189b      	adds	r3, r3, r2
 8003292:	6163      	str	r3, [r4, #20]
 8003294:	e765      	b.n	8003162 <_svfiprintf_r+0x46>
 8003296:	4343      	muls	r3, r0
 8003298:	0035      	movs	r5, r6
 800329a:	2101      	movs	r1, #1
 800329c:	189b      	adds	r3, r3, r2
 800329e:	e7a6      	b.n	80031ee <_svfiprintf_r+0xd2>
 80032a0:	2301      	movs	r3, #1
 80032a2:	425b      	negs	r3, r3
 80032a4:	e7d0      	b.n	8003248 <_svfiprintf_r+0x12c>
 80032a6:	2300      	movs	r3, #0
 80032a8:	200a      	movs	r0, #10
 80032aa:	001a      	movs	r2, r3
 80032ac:	3501      	adds	r5, #1
 80032ae:	6063      	str	r3, [r4, #4]
 80032b0:	7829      	ldrb	r1, [r5, #0]
 80032b2:	1c6e      	adds	r6, r5, #1
 80032b4:	3930      	subs	r1, #48	; 0x30
 80032b6:	2909      	cmp	r1, #9
 80032b8:	d903      	bls.n	80032c2 <_svfiprintf_r+0x1a6>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c5      	beq.n	800324a <_svfiprintf_r+0x12e>
 80032be:	9209      	str	r2, [sp, #36]	; 0x24
 80032c0:	e7c3      	b.n	800324a <_svfiprintf_r+0x12e>
 80032c2:	4342      	muls	r2, r0
 80032c4:	0035      	movs	r5, r6
 80032c6:	2301      	movs	r3, #1
 80032c8:	1852      	adds	r2, r2, r1
 80032ca:	e7f1      	b.n	80032b0 <_svfiprintf_r+0x194>
 80032cc:	ab07      	add	r3, sp, #28
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	003a      	movs	r2, r7
 80032d2:	0021      	movs	r1, r4
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032d6:	9803      	ldr	r0, [sp, #12]
 80032d8:	e000      	b.n	80032dc <_svfiprintf_r+0x1c0>
 80032da:	bf00      	nop
 80032dc:	9004      	str	r0, [sp, #16]
 80032de:	9b04      	ldr	r3, [sp, #16]
 80032e0:	3301      	adds	r3, #1
 80032e2:	d1d3      	bne.n	800328c <_svfiprintf_r+0x170>
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80032e8:	065b      	lsls	r3, r3, #25
 80032ea:	d400      	bmi.n	80032ee <_svfiprintf_r+0x1d2>
 80032ec:	e72d      	b.n	800314a <_svfiprintf_r+0x2e>
 80032ee:	2001      	movs	r0, #1
 80032f0:	4240      	negs	r0, r0
 80032f2:	e72a      	b.n	800314a <_svfiprintf_r+0x2e>
 80032f4:	ab07      	add	r3, sp, #28
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	003a      	movs	r2, r7
 80032fa:	0021      	movs	r1, r4
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <_svfiprintf_r+0x1fc>)
 80032fe:	9803      	ldr	r0, [sp, #12]
 8003300:	f000 f87c 	bl	80033fc <_printf_i>
 8003304:	e7ea      	b.n	80032dc <_svfiprintf_r+0x1c0>
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	08003e30 	.word	0x08003e30
 800330c:	08003e36 	.word	0x08003e36
 8003310:	08003e3a 	.word	0x08003e3a
 8003314:	00000000 	.word	0x00000000
 8003318:	08003059 	.word	0x08003059

0800331c <_printf_common>:
 800331c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800331e:	0015      	movs	r5, r2
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	688a      	ldr	r2, [r1, #8]
 8003324:	690b      	ldr	r3, [r1, #16]
 8003326:	000c      	movs	r4, r1
 8003328:	9000      	str	r0, [sp, #0]
 800332a:	4293      	cmp	r3, r2
 800332c:	da00      	bge.n	8003330 <_printf_common+0x14>
 800332e:	0013      	movs	r3, r2
 8003330:	0022      	movs	r2, r4
 8003332:	602b      	str	r3, [r5, #0]
 8003334:	3243      	adds	r2, #67	; 0x43
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	2a00      	cmp	r2, #0
 800333a:	d001      	beq.n	8003340 <_printf_common+0x24>
 800333c:	3301      	adds	r3, #1
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	069b      	lsls	r3, r3, #26
 8003344:	d502      	bpl.n	800334c <_printf_common+0x30>
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	3302      	adds	r3, #2
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	6822      	ldr	r2, [r4, #0]
 800334e:	2306      	movs	r3, #6
 8003350:	0017      	movs	r7, r2
 8003352:	401f      	ands	r7, r3
 8003354:	421a      	tst	r2, r3
 8003356:	d027      	beq.n	80033a8 <_printf_common+0x8c>
 8003358:	0023      	movs	r3, r4
 800335a:	3343      	adds	r3, #67	; 0x43
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4193      	sbcs	r3, r2
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	0692      	lsls	r2, r2, #26
 8003366:	d430      	bmi.n	80033ca <_printf_common+0xae>
 8003368:	0022      	movs	r2, r4
 800336a:	9901      	ldr	r1, [sp, #4]
 800336c:	9800      	ldr	r0, [sp, #0]
 800336e:	9e08      	ldr	r6, [sp, #32]
 8003370:	3243      	adds	r2, #67	; 0x43
 8003372:	47b0      	blx	r6
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d025      	beq.n	80033c4 <_printf_common+0xa8>
 8003378:	2306      	movs	r3, #6
 800337a:	6820      	ldr	r0, [r4, #0]
 800337c:	682a      	ldr	r2, [r5, #0]
 800337e:	68e1      	ldr	r1, [r4, #12]
 8003380:	2500      	movs	r5, #0
 8003382:	4003      	ands	r3, r0
 8003384:	2b04      	cmp	r3, #4
 8003386:	d103      	bne.n	8003390 <_printf_common+0x74>
 8003388:	1a8d      	subs	r5, r1, r2
 800338a:	43eb      	mvns	r3, r5
 800338c:	17db      	asrs	r3, r3, #31
 800338e:	401d      	ands	r5, r3
 8003390:	68a3      	ldr	r3, [r4, #8]
 8003392:	6922      	ldr	r2, [r4, #16]
 8003394:	4293      	cmp	r3, r2
 8003396:	dd01      	ble.n	800339c <_printf_common+0x80>
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	18ed      	adds	r5, r5, r3
 800339c:	2700      	movs	r7, #0
 800339e:	42bd      	cmp	r5, r7
 80033a0:	d120      	bne.n	80033e4 <_printf_common+0xc8>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e010      	b.n	80033c8 <_printf_common+0xac>
 80033a6:	3701      	adds	r7, #1
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	682a      	ldr	r2, [r5, #0]
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	42bb      	cmp	r3, r7
 80033b0:	ddd2      	ble.n	8003358 <_printf_common+0x3c>
 80033b2:	0022      	movs	r2, r4
 80033b4:	2301      	movs	r3, #1
 80033b6:	9901      	ldr	r1, [sp, #4]
 80033b8:	9800      	ldr	r0, [sp, #0]
 80033ba:	9e08      	ldr	r6, [sp, #32]
 80033bc:	3219      	adds	r2, #25
 80033be:	47b0      	blx	r6
 80033c0:	1c43      	adds	r3, r0, #1
 80033c2:	d1f0      	bne.n	80033a6 <_printf_common+0x8a>
 80033c4:	2001      	movs	r0, #1
 80033c6:	4240      	negs	r0, r0
 80033c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80033ca:	2030      	movs	r0, #48	; 0x30
 80033cc:	18e1      	adds	r1, r4, r3
 80033ce:	3143      	adds	r1, #67	; 0x43
 80033d0:	7008      	strb	r0, [r1, #0]
 80033d2:	0021      	movs	r1, r4
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	3145      	adds	r1, #69	; 0x45
 80033d8:	7809      	ldrb	r1, [r1, #0]
 80033da:	18a2      	adds	r2, r4, r2
 80033dc:	3243      	adds	r2, #67	; 0x43
 80033de:	3302      	adds	r3, #2
 80033e0:	7011      	strb	r1, [r2, #0]
 80033e2:	e7c1      	b.n	8003368 <_printf_common+0x4c>
 80033e4:	0022      	movs	r2, r4
 80033e6:	2301      	movs	r3, #1
 80033e8:	9901      	ldr	r1, [sp, #4]
 80033ea:	9800      	ldr	r0, [sp, #0]
 80033ec:	9e08      	ldr	r6, [sp, #32]
 80033ee:	321a      	adds	r2, #26
 80033f0:	47b0      	blx	r6
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d0e6      	beq.n	80033c4 <_printf_common+0xa8>
 80033f6:	3701      	adds	r7, #1
 80033f8:	e7d1      	b.n	800339e <_printf_common+0x82>
	...

080033fc <_printf_i>:
 80033fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033fe:	b08b      	sub	sp, #44	; 0x2c
 8003400:	9206      	str	r2, [sp, #24]
 8003402:	000a      	movs	r2, r1
 8003404:	3243      	adds	r2, #67	; 0x43
 8003406:	9307      	str	r3, [sp, #28]
 8003408:	9005      	str	r0, [sp, #20]
 800340a:	9204      	str	r2, [sp, #16]
 800340c:	7e0a      	ldrb	r2, [r1, #24]
 800340e:	000c      	movs	r4, r1
 8003410:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003412:	2a78      	cmp	r2, #120	; 0x78
 8003414:	d806      	bhi.n	8003424 <_printf_i+0x28>
 8003416:	2a62      	cmp	r2, #98	; 0x62
 8003418:	d808      	bhi.n	800342c <_printf_i+0x30>
 800341a:	2a00      	cmp	r2, #0
 800341c:	d100      	bne.n	8003420 <_printf_i+0x24>
 800341e:	e0c0      	b.n	80035a2 <_printf_i+0x1a6>
 8003420:	2a58      	cmp	r2, #88	; 0x58
 8003422:	d052      	beq.n	80034ca <_printf_i+0xce>
 8003424:	0026      	movs	r6, r4
 8003426:	3642      	adds	r6, #66	; 0x42
 8003428:	7032      	strb	r2, [r6, #0]
 800342a:	e022      	b.n	8003472 <_printf_i+0x76>
 800342c:	0010      	movs	r0, r2
 800342e:	3863      	subs	r0, #99	; 0x63
 8003430:	2815      	cmp	r0, #21
 8003432:	d8f7      	bhi.n	8003424 <_printf_i+0x28>
 8003434:	f7fc fe70 	bl	8000118 <__gnu_thumb1_case_shi>
 8003438:	001f0016 	.word	0x001f0016
 800343c:	fff6fff6 	.word	0xfff6fff6
 8003440:	fff6fff6 	.word	0xfff6fff6
 8003444:	fff6001f 	.word	0xfff6001f
 8003448:	fff6fff6 	.word	0xfff6fff6
 800344c:	00a8fff6 	.word	0x00a8fff6
 8003450:	009a0036 	.word	0x009a0036
 8003454:	fff6fff6 	.word	0xfff6fff6
 8003458:	fff600b9 	.word	0xfff600b9
 800345c:	fff60036 	.word	0xfff60036
 8003460:	009efff6 	.word	0x009efff6
 8003464:	0026      	movs	r6, r4
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	3642      	adds	r6, #66	; 0x42
 800346a:	1d11      	adds	r1, r2, #4
 800346c:	6019      	str	r1, [r3, #0]
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	7033      	strb	r3, [r6, #0]
 8003472:	2301      	movs	r3, #1
 8003474:	e0a7      	b.n	80035c6 <_printf_i+0x1ca>
 8003476:	6808      	ldr	r0, [r1, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	1d0a      	adds	r2, r1, #4
 800347c:	0605      	lsls	r5, r0, #24
 800347e:	d50b      	bpl.n	8003498 <_printf_i+0x9c>
 8003480:	680d      	ldr	r5, [r1, #0]
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	2d00      	cmp	r5, #0
 8003486:	da03      	bge.n	8003490 <_printf_i+0x94>
 8003488:	232d      	movs	r3, #45	; 0x2d
 800348a:	9a04      	ldr	r2, [sp, #16]
 800348c:	426d      	negs	r5, r5
 800348e:	7013      	strb	r3, [r2, #0]
 8003490:	4b61      	ldr	r3, [pc, #388]	; (8003618 <_printf_i+0x21c>)
 8003492:	270a      	movs	r7, #10
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	e032      	b.n	80034fe <_printf_i+0x102>
 8003498:	680d      	ldr	r5, [r1, #0]
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	0641      	lsls	r1, r0, #25
 800349e:	d5f1      	bpl.n	8003484 <_printf_i+0x88>
 80034a0:	b22d      	sxth	r5, r5
 80034a2:	e7ef      	b.n	8003484 <_printf_i+0x88>
 80034a4:	680d      	ldr	r5, [r1, #0]
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	1d08      	adds	r0, r1, #4
 80034aa:	6018      	str	r0, [r3, #0]
 80034ac:	062e      	lsls	r6, r5, #24
 80034ae:	d501      	bpl.n	80034b4 <_printf_i+0xb8>
 80034b0:	680d      	ldr	r5, [r1, #0]
 80034b2:	e003      	b.n	80034bc <_printf_i+0xc0>
 80034b4:	066d      	lsls	r5, r5, #25
 80034b6:	d5fb      	bpl.n	80034b0 <_printf_i+0xb4>
 80034b8:	680d      	ldr	r5, [r1, #0]
 80034ba:	b2ad      	uxth	r5, r5
 80034bc:	4b56      	ldr	r3, [pc, #344]	; (8003618 <_printf_i+0x21c>)
 80034be:	270a      	movs	r7, #10
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	2a6f      	cmp	r2, #111	; 0x6f
 80034c4:	d117      	bne.n	80034f6 <_printf_i+0xfa>
 80034c6:	2708      	movs	r7, #8
 80034c8:	e015      	b.n	80034f6 <_printf_i+0xfa>
 80034ca:	3145      	adds	r1, #69	; 0x45
 80034cc:	700a      	strb	r2, [r1, #0]
 80034ce:	4a52      	ldr	r2, [pc, #328]	; (8003618 <_printf_i+0x21c>)
 80034d0:	9203      	str	r2, [sp, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	ca20      	ldmia	r2!, {r5}
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	0608      	lsls	r0, r1, #24
 80034dc:	d550      	bpl.n	8003580 <_printf_i+0x184>
 80034de:	07cb      	lsls	r3, r1, #31
 80034e0:	d502      	bpl.n	80034e8 <_printf_i+0xec>
 80034e2:	2320      	movs	r3, #32
 80034e4:	4319      	orrs	r1, r3
 80034e6:	6021      	str	r1, [r4, #0]
 80034e8:	2710      	movs	r7, #16
 80034ea:	2d00      	cmp	r5, #0
 80034ec:	d103      	bne.n	80034f6 <_printf_i+0xfa>
 80034ee:	2320      	movs	r3, #32
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	439a      	bics	r2, r3
 80034f4:	6022      	str	r2, [r4, #0]
 80034f6:	0023      	movs	r3, r4
 80034f8:	2200      	movs	r2, #0
 80034fa:	3343      	adds	r3, #67	; 0x43
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	60a3      	str	r3, [r4, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db03      	blt.n	800350e <_printf_i+0x112>
 8003506:	2204      	movs	r2, #4
 8003508:	6821      	ldr	r1, [r4, #0]
 800350a:	4391      	bics	r1, r2
 800350c:	6021      	str	r1, [r4, #0]
 800350e:	2d00      	cmp	r5, #0
 8003510:	d102      	bne.n	8003518 <_printf_i+0x11c>
 8003512:	9e04      	ldr	r6, [sp, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00c      	beq.n	8003532 <_printf_i+0x136>
 8003518:	9e04      	ldr	r6, [sp, #16]
 800351a:	0028      	movs	r0, r5
 800351c:	0039      	movs	r1, r7
 800351e:	f7fc fe8b 	bl	8000238 <__aeabi_uidivmod>
 8003522:	9b03      	ldr	r3, [sp, #12]
 8003524:	3e01      	subs	r6, #1
 8003526:	5c5b      	ldrb	r3, [r3, r1]
 8003528:	7033      	strb	r3, [r6, #0]
 800352a:	002b      	movs	r3, r5
 800352c:	0005      	movs	r5, r0
 800352e:	429f      	cmp	r7, r3
 8003530:	d9f3      	bls.n	800351a <_printf_i+0x11e>
 8003532:	2f08      	cmp	r7, #8
 8003534:	d109      	bne.n	800354a <_printf_i+0x14e>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	07db      	lsls	r3, r3, #31
 800353a:	d506      	bpl.n	800354a <_printf_i+0x14e>
 800353c:	6863      	ldr	r3, [r4, #4]
 800353e:	6922      	ldr	r2, [r4, #16]
 8003540:	4293      	cmp	r3, r2
 8003542:	dc02      	bgt.n	800354a <_printf_i+0x14e>
 8003544:	2330      	movs	r3, #48	; 0x30
 8003546:	3e01      	subs	r6, #1
 8003548:	7033      	strb	r3, [r6, #0]
 800354a:	9b04      	ldr	r3, [sp, #16]
 800354c:	1b9b      	subs	r3, r3, r6
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	9b07      	ldr	r3, [sp, #28]
 8003552:	0021      	movs	r1, r4
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	9805      	ldr	r0, [sp, #20]
 8003558:	9b06      	ldr	r3, [sp, #24]
 800355a:	aa09      	add	r2, sp, #36	; 0x24
 800355c:	f7ff fede 	bl	800331c <_printf_common>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d135      	bne.n	80035d0 <_printf_i+0x1d4>
 8003564:	2001      	movs	r0, #1
 8003566:	4240      	negs	r0, r0
 8003568:	b00b      	add	sp, #44	; 0x2c
 800356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356c:	2220      	movs	r2, #32
 800356e:	6809      	ldr	r1, [r1, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	6022      	str	r2, [r4, #0]
 8003574:	0022      	movs	r2, r4
 8003576:	2178      	movs	r1, #120	; 0x78
 8003578:	3245      	adds	r2, #69	; 0x45
 800357a:	7011      	strb	r1, [r2, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <_printf_i+0x220>)
 800357e:	e7a7      	b.n	80034d0 <_printf_i+0xd4>
 8003580:	0648      	lsls	r0, r1, #25
 8003582:	d5ac      	bpl.n	80034de <_printf_i+0xe2>
 8003584:	b2ad      	uxth	r5, r5
 8003586:	e7aa      	b.n	80034de <_printf_i+0xe2>
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	680d      	ldr	r5, [r1, #0]
 800358c:	1d10      	adds	r0, r2, #4
 800358e:	6949      	ldr	r1, [r1, #20]
 8003590:	6018      	str	r0, [r3, #0]
 8003592:	6813      	ldr	r3, [r2, #0]
 8003594:	062e      	lsls	r6, r5, #24
 8003596:	d501      	bpl.n	800359c <_printf_i+0x1a0>
 8003598:	6019      	str	r1, [r3, #0]
 800359a:	e002      	b.n	80035a2 <_printf_i+0x1a6>
 800359c:	066d      	lsls	r5, r5, #25
 800359e:	d5fb      	bpl.n	8003598 <_printf_i+0x19c>
 80035a0:	8019      	strh	r1, [r3, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9e04      	ldr	r6, [sp, #16]
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	e7d2      	b.n	8003550 <_printf_i+0x154>
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	1d11      	adds	r1, r2, #4
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	6816      	ldr	r6, [r2, #0]
 80035b2:	2100      	movs	r1, #0
 80035b4:	0030      	movs	r0, r6
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	f000 f832 	bl	8003620 <memchr>
 80035bc:	2800      	cmp	r0, #0
 80035be:	d001      	beq.n	80035c4 <_printf_i+0x1c8>
 80035c0:	1b80      	subs	r0, r0, r6
 80035c2:	6060      	str	r0, [r4, #4]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	6123      	str	r3, [r4, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	7013      	strb	r3, [r2, #0]
 80035ce:	e7bf      	b.n	8003550 <_printf_i+0x154>
 80035d0:	6923      	ldr	r3, [r4, #16]
 80035d2:	0032      	movs	r2, r6
 80035d4:	9906      	ldr	r1, [sp, #24]
 80035d6:	9805      	ldr	r0, [sp, #20]
 80035d8:	9d07      	ldr	r5, [sp, #28]
 80035da:	47a8      	blx	r5
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d0c1      	beq.n	8003564 <_printf_i+0x168>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	079b      	lsls	r3, r3, #30
 80035e4:	d415      	bmi.n	8003612 <_printf_i+0x216>
 80035e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035e8:	68e0      	ldr	r0, [r4, #12]
 80035ea:	4298      	cmp	r0, r3
 80035ec:	dabc      	bge.n	8003568 <_printf_i+0x16c>
 80035ee:	0018      	movs	r0, r3
 80035f0:	e7ba      	b.n	8003568 <_printf_i+0x16c>
 80035f2:	0022      	movs	r2, r4
 80035f4:	2301      	movs	r3, #1
 80035f6:	9906      	ldr	r1, [sp, #24]
 80035f8:	9805      	ldr	r0, [sp, #20]
 80035fa:	9e07      	ldr	r6, [sp, #28]
 80035fc:	3219      	adds	r2, #25
 80035fe:	47b0      	blx	r6
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	d0af      	beq.n	8003564 <_printf_i+0x168>
 8003604:	3501      	adds	r5, #1
 8003606:	68e3      	ldr	r3, [r4, #12]
 8003608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	42ab      	cmp	r3, r5
 800360e:	dcf0      	bgt.n	80035f2 <_printf_i+0x1f6>
 8003610:	e7e9      	b.n	80035e6 <_printf_i+0x1ea>
 8003612:	2500      	movs	r5, #0
 8003614:	e7f7      	b.n	8003606 <_printf_i+0x20a>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	08003e41 	.word	0x08003e41
 800361c:	08003e52 	.word	0x08003e52

08003620 <memchr>:
 8003620:	b2c9      	uxtb	r1, r1
 8003622:	1882      	adds	r2, r0, r2
 8003624:	4290      	cmp	r0, r2
 8003626:	d101      	bne.n	800362c <memchr+0xc>
 8003628:	2000      	movs	r0, #0
 800362a:	4770      	bx	lr
 800362c:	7803      	ldrb	r3, [r0, #0]
 800362e:	428b      	cmp	r3, r1
 8003630:	d0fb      	beq.n	800362a <memchr+0xa>
 8003632:	3001      	adds	r0, #1
 8003634:	e7f6      	b.n	8003624 <memchr+0x4>

08003636 <memmove>:
 8003636:	b510      	push	{r4, lr}
 8003638:	4288      	cmp	r0, r1
 800363a:	d902      	bls.n	8003642 <memmove+0xc>
 800363c:	188b      	adds	r3, r1, r2
 800363e:	4298      	cmp	r0, r3
 8003640:	d303      	bcc.n	800364a <memmove+0x14>
 8003642:	2300      	movs	r3, #0
 8003644:	e007      	b.n	8003656 <memmove+0x20>
 8003646:	5c8b      	ldrb	r3, [r1, r2]
 8003648:	5483      	strb	r3, [r0, r2]
 800364a:	3a01      	subs	r2, #1
 800364c:	d2fb      	bcs.n	8003646 <memmove+0x10>
 800364e:	bd10      	pop	{r4, pc}
 8003650:	5ccc      	ldrb	r4, [r1, r3]
 8003652:	54c4      	strb	r4, [r0, r3]
 8003654:	3301      	adds	r3, #1
 8003656:	429a      	cmp	r2, r3
 8003658:	d1fa      	bne.n	8003650 <memmove+0x1a>
 800365a:	e7f8      	b.n	800364e <memmove+0x18>

0800365c <_free_r>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	0005      	movs	r5, r0
 8003660:	2900      	cmp	r1, #0
 8003662:	d010      	beq.n	8003686 <_free_r+0x2a>
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da00      	bge.n	800366e <_free_r+0x12>
 800366c:	18e4      	adds	r4, r4, r3
 800366e:	0028      	movs	r0, r5
 8003670:	f000 f8d4 	bl	800381c <__malloc_lock>
 8003674:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <_free_r+0x90>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <_free_r+0x2c>
 800367c:	6063      	str	r3, [r4, #4]
 800367e:	6014      	str	r4, [r2, #0]
 8003680:	0028      	movs	r0, r5
 8003682:	f000 f8d3 	bl	800382c <__malloc_unlock>
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	42a3      	cmp	r3, r4
 800368a:	d908      	bls.n	800369e <_free_r+0x42>
 800368c:	6821      	ldr	r1, [r4, #0]
 800368e:	1860      	adds	r0, r4, r1
 8003690:	4283      	cmp	r3, r0
 8003692:	d1f3      	bne.n	800367c <_free_r+0x20>
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	1841      	adds	r1, r0, r1
 800369a:	6021      	str	r1, [r4, #0]
 800369c:	e7ee      	b.n	800367c <_free_r+0x20>
 800369e:	001a      	movs	r2, r3
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <_free_r+0x4e>
 80036a6:	42a3      	cmp	r3, r4
 80036a8:	d9f9      	bls.n	800369e <_free_r+0x42>
 80036aa:	6811      	ldr	r1, [r2, #0]
 80036ac:	1850      	adds	r0, r2, r1
 80036ae:	42a0      	cmp	r0, r4
 80036b0:	d10b      	bne.n	80036ca <_free_r+0x6e>
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	1809      	adds	r1, r1, r0
 80036b6:	1850      	adds	r0, r2, r1
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	4283      	cmp	r3, r0
 80036bc:	d1e0      	bne.n	8003680 <_free_r+0x24>
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	1841      	adds	r1, r0, r1
 80036c4:	6011      	str	r1, [r2, #0]
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e7da      	b.n	8003680 <_free_r+0x24>
 80036ca:	42a0      	cmp	r0, r4
 80036cc:	d902      	bls.n	80036d4 <_free_r+0x78>
 80036ce:	230c      	movs	r3, #12
 80036d0:	602b      	str	r3, [r5, #0]
 80036d2:	e7d5      	b.n	8003680 <_free_r+0x24>
 80036d4:	6821      	ldr	r1, [r4, #0]
 80036d6:	1860      	adds	r0, r4, r1
 80036d8:	4283      	cmp	r3, r0
 80036da:	d103      	bne.n	80036e4 <_free_r+0x88>
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	1841      	adds	r1, r0, r1
 80036e2:	6021      	str	r1, [r4, #0]
 80036e4:	6063      	str	r3, [r4, #4]
 80036e6:	6054      	str	r4, [r2, #4]
 80036e8:	e7ca      	b.n	8003680 <_free_r+0x24>
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	200000d4 	.word	0x200000d4

080036f0 <_malloc_r>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	2303      	movs	r3, #3
 80036f4:	1ccd      	adds	r5, r1, #3
 80036f6:	439d      	bics	r5, r3
 80036f8:	3508      	adds	r5, #8
 80036fa:	0006      	movs	r6, r0
 80036fc:	2d0c      	cmp	r5, #12
 80036fe:	d21f      	bcs.n	8003740 <_malloc_r+0x50>
 8003700:	250c      	movs	r5, #12
 8003702:	42a9      	cmp	r1, r5
 8003704:	d81e      	bhi.n	8003744 <_malloc_r+0x54>
 8003706:	0030      	movs	r0, r6
 8003708:	f000 f888 	bl	800381c <__malloc_lock>
 800370c:	4925      	ldr	r1, [pc, #148]	; (80037a4 <_malloc_r+0xb4>)
 800370e:	680a      	ldr	r2, [r1, #0]
 8003710:	0014      	movs	r4, r2
 8003712:	2c00      	cmp	r4, #0
 8003714:	d11a      	bne.n	800374c <_malloc_r+0x5c>
 8003716:	4f24      	ldr	r7, [pc, #144]	; (80037a8 <_malloc_r+0xb8>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <_malloc_r+0x38>
 800371e:	0021      	movs	r1, r4
 8003720:	0030      	movs	r0, r6
 8003722:	f000 f869 	bl	80037f8 <_sbrk_r>
 8003726:	6038      	str	r0, [r7, #0]
 8003728:	0029      	movs	r1, r5
 800372a:	0030      	movs	r0, r6
 800372c:	f000 f864 	bl	80037f8 <_sbrk_r>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d12b      	bne.n	800378c <_malloc_r+0x9c>
 8003734:	230c      	movs	r3, #12
 8003736:	0030      	movs	r0, r6
 8003738:	6033      	str	r3, [r6, #0]
 800373a:	f000 f877 	bl	800382c <__malloc_unlock>
 800373e:	e003      	b.n	8003748 <_malloc_r+0x58>
 8003740:	2d00      	cmp	r5, #0
 8003742:	dade      	bge.n	8003702 <_malloc_r+0x12>
 8003744:	230c      	movs	r3, #12
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	2000      	movs	r0, #0
 800374a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	1b5b      	subs	r3, r3, r5
 8003750:	d419      	bmi.n	8003786 <_malloc_r+0x96>
 8003752:	2b0b      	cmp	r3, #11
 8003754:	d903      	bls.n	800375e <_malloc_r+0x6e>
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	18e4      	adds	r4, r4, r3
 800375a:	6025      	str	r5, [r4, #0]
 800375c:	e003      	b.n	8003766 <_malloc_r+0x76>
 800375e:	6863      	ldr	r3, [r4, #4]
 8003760:	42a2      	cmp	r2, r4
 8003762:	d10e      	bne.n	8003782 <_malloc_r+0x92>
 8003764:	600b      	str	r3, [r1, #0]
 8003766:	0030      	movs	r0, r6
 8003768:	f000 f860 	bl	800382c <__malloc_unlock>
 800376c:	0020      	movs	r0, r4
 800376e:	2207      	movs	r2, #7
 8003770:	300b      	adds	r0, #11
 8003772:	1d23      	adds	r3, r4, #4
 8003774:	4390      	bics	r0, r2
 8003776:	1ac2      	subs	r2, r0, r3
 8003778:	4298      	cmp	r0, r3
 800377a:	d0e6      	beq.n	800374a <_malloc_r+0x5a>
 800377c:	1a1b      	subs	r3, r3, r0
 800377e:	50a3      	str	r3, [r4, r2]
 8003780:	e7e3      	b.n	800374a <_malloc_r+0x5a>
 8003782:	6053      	str	r3, [r2, #4]
 8003784:	e7ef      	b.n	8003766 <_malloc_r+0x76>
 8003786:	0022      	movs	r2, r4
 8003788:	6864      	ldr	r4, [r4, #4]
 800378a:	e7c2      	b.n	8003712 <_malloc_r+0x22>
 800378c:	2303      	movs	r3, #3
 800378e:	1cc4      	adds	r4, r0, #3
 8003790:	439c      	bics	r4, r3
 8003792:	42a0      	cmp	r0, r4
 8003794:	d0e1      	beq.n	800375a <_malloc_r+0x6a>
 8003796:	1a21      	subs	r1, r4, r0
 8003798:	0030      	movs	r0, r6
 800379a:	f000 f82d 	bl	80037f8 <_sbrk_r>
 800379e:	1c43      	adds	r3, r0, #1
 80037a0:	d1db      	bne.n	800375a <_malloc_r+0x6a>
 80037a2:	e7c7      	b.n	8003734 <_malloc_r+0x44>
 80037a4:	200000d4 	.word	0x200000d4
 80037a8:	200000d8 	.word	0x200000d8

080037ac <_realloc_r>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	0007      	movs	r7, r0
 80037b0:	000d      	movs	r5, r1
 80037b2:	0016      	movs	r6, r2
 80037b4:	2900      	cmp	r1, #0
 80037b6:	d105      	bne.n	80037c4 <_realloc_r+0x18>
 80037b8:	0011      	movs	r1, r2
 80037ba:	f7ff ff99 	bl	80036f0 <_malloc_r>
 80037be:	0004      	movs	r4, r0
 80037c0:	0020      	movs	r0, r4
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d103      	bne.n	80037d0 <_realloc_r+0x24>
 80037c8:	f7ff ff48 	bl	800365c <_free_r>
 80037cc:	0034      	movs	r4, r6
 80037ce:	e7f7      	b.n	80037c0 <_realloc_r+0x14>
 80037d0:	f000 f834 	bl	800383c <_malloc_usable_size_r>
 80037d4:	002c      	movs	r4, r5
 80037d6:	42b0      	cmp	r0, r6
 80037d8:	d2f2      	bcs.n	80037c0 <_realloc_r+0x14>
 80037da:	0031      	movs	r1, r6
 80037dc:	0038      	movs	r0, r7
 80037de:	f7ff ff87 	bl	80036f0 <_malloc_r>
 80037e2:	1e04      	subs	r4, r0, #0
 80037e4:	d0ec      	beq.n	80037c0 <_realloc_r+0x14>
 80037e6:	0029      	movs	r1, r5
 80037e8:	0032      	movs	r2, r6
 80037ea:	f7ff fbed 	bl	8002fc8 <memcpy>
 80037ee:	0029      	movs	r1, r5
 80037f0:	0038      	movs	r0, r7
 80037f2:	f7ff ff33 	bl	800365c <_free_r>
 80037f6:	e7e3      	b.n	80037c0 <_realloc_r+0x14>

080037f8 <_sbrk_r>:
 80037f8:	2300      	movs	r3, #0
 80037fa:	b570      	push	{r4, r5, r6, lr}
 80037fc:	4d06      	ldr	r5, [pc, #24]	; (8003818 <_sbrk_r+0x20>)
 80037fe:	0004      	movs	r4, r0
 8003800:	0008      	movs	r0, r1
 8003802:	602b      	str	r3, [r5, #0]
 8003804:	f7fd fb02 	bl	8000e0c <_sbrk>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	d103      	bne.n	8003814 <_sbrk_r+0x1c>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d000      	beq.n	8003814 <_sbrk_r+0x1c>
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	46c0      	nop			; (mov r8, r8)
 8003818:	20000560 	.word	0x20000560

0800381c <__malloc_lock>:
 800381c:	b510      	push	{r4, lr}
 800381e:	4802      	ldr	r0, [pc, #8]	; (8003828 <__malloc_lock+0xc>)
 8003820:	f000 f814 	bl	800384c <__retarget_lock_acquire_recursive>
 8003824:	bd10      	pop	{r4, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	20000568 	.word	0x20000568

0800382c <__malloc_unlock>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4802      	ldr	r0, [pc, #8]	; (8003838 <__malloc_unlock+0xc>)
 8003830:	f000 f80d 	bl	800384e <__retarget_lock_release_recursive>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	20000568 	.word	0x20000568

0800383c <_malloc_usable_size_r>:
 800383c:	1f0b      	subs	r3, r1, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1f18      	subs	r0, r3, #4
 8003842:	2b00      	cmp	r3, #0
 8003844:	da01      	bge.n	800384a <_malloc_usable_size_r+0xe>
 8003846:	580b      	ldr	r3, [r1, r0]
 8003848:	18c0      	adds	r0, r0, r3
 800384a:	4770      	bx	lr

0800384c <__retarget_lock_acquire_recursive>:
 800384c:	4770      	bx	lr

0800384e <__retarget_lock_release_recursive>:
 800384e:	4770      	bx	lr

08003850 <_init>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr

0800385c <_fini>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003862:	bc08      	pop	{r3}
 8003864:	469e      	mov	lr, r3
 8003866:	4770      	bx	lr
