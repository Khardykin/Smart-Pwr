
Smart-Pwr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005778  08005778  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005780  08005780  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000008c  08005814  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08005814  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abbe  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fc3  00000000  00000000  0003ac72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007b20  00000000  00000000  0003fc35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00047758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00047fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010306  00000000  00000000  00048bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c8b  00000000  00000000  00058ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004e720  00000000  00000000  0006cb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000bb289  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018ac  00000000  00000000  000bb2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005080 	.word	0x08005080

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08005080 	.word	0x08005080

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f824 	bl	8000494 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_d2uiz>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	2200      	movs	r2, #0
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <__aeabi_d2uiz+0x38>)
 800045e:	0004      	movs	r4, r0
 8000460:	000d      	movs	r5, r1
 8000462:	f001 f9e7 	bl	8001834 <__aeabi_dcmpge>
 8000466:	2800      	cmp	r0, #0
 8000468:	d104      	bne.n	8000474 <__aeabi_d2uiz+0x1c>
 800046a:	0020      	movs	r0, r4
 800046c:	0029      	movs	r1, r5
 800046e:	f001 f92f 	bl	80016d0 <__aeabi_d2iz>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <__aeabi_d2uiz+0x38>)
 8000476:	2200      	movs	r2, #0
 8000478:	0020      	movs	r0, r4
 800047a:	0029      	movs	r1, r5
 800047c:	f000 fd96 	bl	8000fac <__aeabi_dsub>
 8000480:	f001 f926 	bl	80016d0 <__aeabi_d2iz>
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	061b      	lsls	r3, r3, #24
 8000488:	469c      	mov	ip, r3
 800048a:	4460      	add	r0, ip
 800048c:	e7f1      	b.n	8000472 <__aeabi_d2uiz+0x1a>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	41e00000 	.word	0x41e00000

08000494 <__udivmoddi4>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	0004      	movs	r4, r0
 80004a2:	000d      	movs	r5, r1
 80004a4:	4692      	mov	sl, r2
 80004a6:	4699      	mov	r9, r3
 80004a8:	b083      	sub	sp, #12
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d830      	bhi.n	8000510 <__udivmoddi4+0x7c>
 80004ae:	d02d      	beq.n	800050c <__udivmoddi4+0x78>
 80004b0:	4649      	mov	r1, r9
 80004b2:	4650      	mov	r0, sl
 80004b4:	f001 f9e6 	bl	8001884 <__clzdi2>
 80004b8:	0029      	movs	r1, r5
 80004ba:	0006      	movs	r6, r0
 80004bc:	0020      	movs	r0, r4
 80004be:	f001 f9e1 	bl	8001884 <__clzdi2>
 80004c2:	1a33      	subs	r3, r6, r0
 80004c4:	4698      	mov	r8, r3
 80004c6:	3b20      	subs	r3, #32
 80004c8:	469b      	mov	fp, r3
 80004ca:	d433      	bmi.n	8000534 <__udivmoddi4+0xa0>
 80004cc:	465a      	mov	r2, fp
 80004ce:	4653      	mov	r3, sl
 80004d0:	4093      	lsls	r3, r2
 80004d2:	4642      	mov	r2, r8
 80004d4:	001f      	movs	r7, r3
 80004d6:	4653      	mov	r3, sl
 80004d8:	4093      	lsls	r3, r2
 80004da:	001e      	movs	r6, r3
 80004dc:	42af      	cmp	r7, r5
 80004de:	d83a      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d100      	bne.n	80004e6 <__udivmoddi4+0x52>
 80004e4:	e078      	b.n	80005d8 <__udivmoddi4+0x144>
 80004e6:	465b      	mov	r3, fp
 80004e8:	1ba4      	subs	r4, r4, r6
 80004ea:	41bd      	sbcs	r5, r7
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	da00      	bge.n	80004f2 <__udivmoddi4+0x5e>
 80004f0:	e075      	b.n	80005de <__udivmoddi4+0x14a>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	465a      	mov	r2, fp
 80004fe:	4093      	lsls	r3, r2
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2301      	movs	r3, #1
 8000504:	4642      	mov	r2, r8
 8000506:	4093      	lsls	r3, r2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	e028      	b.n	800055e <__udivmoddi4+0xca>
 800050c:	4282      	cmp	r2, r0
 800050e:	d9cf      	bls.n	80004b0 <__udivmoddi4+0x1c>
 8000510:	2200      	movs	r2, #0
 8000512:	2300      	movs	r3, #0
 8000514:	9200      	str	r2, [sp, #0]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <__udivmoddi4+0x8e>
 800051e:	601c      	str	r4, [r3, #0]
 8000520:	605d      	str	r5, [r3, #4]
 8000522:	9800      	ldr	r0, [sp, #0]
 8000524:	9901      	ldr	r1, [sp, #4]
 8000526:	b003      	add	sp, #12
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	46bb      	mov	fp, r7
 800052c:	46b2      	mov	sl, r6
 800052e:	46a9      	mov	r9, r5
 8000530:	46a0      	mov	r8, r4
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	4642      	mov	r2, r8
 8000536:	2320      	movs	r3, #32
 8000538:	1a9b      	subs	r3, r3, r2
 800053a:	4652      	mov	r2, sl
 800053c:	40da      	lsrs	r2, r3
 800053e:	4641      	mov	r1, r8
 8000540:	0013      	movs	r3, r2
 8000542:	464a      	mov	r2, r9
 8000544:	408a      	lsls	r2, r1
 8000546:	0017      	movs	r7, r2
 8000548:	4642      	mov	r2, r8
 800054a:	431f      	orrs	r7, r3
 800054c:	4653      	mov	r3, sl
 800054e:	4093      	lsls	r3, r2
 8000550:	001e      	movs	r6, r3
 8000552:	42af      	cmp	r7, r5
 8000554:	d9c4      	bls.n	80004e0 <__udivmoddi4+0x4c>
 8000556:	2200      	movs	r2, #0
 8000558:	2300      	movs	r3, #0
 800055a:	9200      	str	r2, [sp, #0]
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4643      	mov	r3, r8
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0d9      	beq.n	8000518 <__udivmoddi4+0x84>
 8000564:	07fb      	lsls	r3, r7, #31
 8000566:	0872      	lsrs	r2, r6, #1
 8000568:	431a      	orrs	r2, r3
 800056a:	4646      	mov	r6, r8
 800056c:	087b      	lsrs	r3, r7, #1
 800056e:	e00e      	b.n	800058e <__udivmoddi4+0xfa>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d101      	bne.n	8000578 <__udivmoddi4+0xe4>
 8000574:	42a2      	cmp	r2, r4
 8000576:	d80c      	bhi.n	8000592 <__udivmoddi4+0xfe>
 8000578:	1aa4      	subs	r4, r4, r2
 800057a:	419d      	sbcs	r5, r3
 800057c:	2001      	movs	r0, #1
 800057e:	1924      	adds	r4, r4, r4
 8000580:	416d      	adcs	r5, r5
 8000582:	2100      	movs	r1, #0
 8000584:	3e01      	subs	r6, #1
 8000586:	1824      	adds	r4, r4, r0
 8000588:	414d      	adcs	r5, r1
 800058a:	2e00      	cmp	r6, #0
 800058c:	d006      	beq.n	800059c <__udivmoddi4+0x108>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d9ee      	bls.n	8000570 <__udivmoddi4+0xdc>
 8000592:	3e01      	subs	r6, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2e00      	cmp	r6, #0
 800059a:	d1f8      	bne.n	800058e <__udivmoddi4+0xfa>
 800059c:	9800      	ldr	r0, [sp, #0]
 800059e:	9901      	ldr	r1, [sp, #4]
 80005a0:	465b      	mov	r3, fp
 80005a2:	1900      	adds	r0, r0, r4
 80005a4:	4169      	adcs	r1, r5
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db24      	blt.n	80005f4 <__udivmoddi4+0x160>
 80005aa:	002b      	movs	r3, r5
 80005ac:	465a      	mov	r2, fp
 80005ae:	4644      	mov	r4, r8
 80005b0:	40d3      	lsrs	r3, r2
 80005b2:	002a      	movs	r2, r5
 80005b4:	40e2      	lsrs	r2, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	465b      	mov	r3, fp
 80005ba:	0015      	movs	r5, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db2a      	blt.n	8000616 <__udivmoddi4+0x182>
 80005c0:	0026      	movs	r6, r4
 80005c2:	409e      	lsls	r6, r3
 80005c4:	0033      	movs	r3, r6
 80005c6:	0026      	movs	r6, r4
 80005c8:	4647      	mov	r7, r8
 80005ca:	40be      	lsls	r6, r7
 80005cc:	0032      	movs	r2, r6
 80005ce:	1a80      	subs	r0, r0, r2
 80005d0:	4199      	sbcs	r1, r3
 80005d2:	9000      	str	r0, [sp, #0]
 80005d4:	9101      	str	r1, [sp, #4]
 80005d6:	e79f      	b.n	8000518 <__udivmoddi4+0x84>
 80005d8:	42a3      	cmp	r3, r4
 80005da:	d8bc      	bhi.n	8000556 <__udivmoddi4+0xc2>
 80005dc:	e783      	b.n	80004e6 <__udivmoddi4+0x52>
 80005de:	4642      	mov	r2, r8
 80005e0:	2320      	movs	r3, #32
 80005e2:	2100      	movs	r1, #0
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	9100      	str	r1, [sp, #0]
 80005ea:	9201      	str	r2, [sp, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	9201      	str	r2, [sp, #4]
 80005f2:	e786      	b.n	8000502 <__udivmoddi4+0x6e>
 80005f4:	4642      	mov	r2, r8
 80005f6:	2320      	movs	r3, #32
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	002a      	movs	r2, r5
 80005fc:	4646      	mov	r6, r8
 80005fe:	409a      	lsls	r2, r3
 8000600:	0023      	movs	r3, r4
 8000602:	40f3      	lsrs	r3, r6
 8000604:	4644      	mov	r4, r8
 8000606:	4313      	orrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	40e2      	lsrs	r2, r4
 800060c:	001c      	movs	r4, r3
 800060e:	465b      	mov	r3, fp
 8000610:	0015      	movs	r5, r2
 8000612:	2b00      	cmp	r3, #0
 8000614:	dad4      	bge.n	80005c0 <__udivmoddi4+0x12c>
 8000616:	4642      	mov	r2, r8
 8000618:	002f      	movs	r7, r5
 800061a:	2320      	movs	r3, #32
 800061c:	0026      	movs	r6, r4
 800061e:	4097      	lsls	r7, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	40de      	lsrs	r6, r3
 8000624:	003b      	movs	r3, r7
 8000626:	4333      	orrs	r3, r6
 8000628:	e7cd      	b.n	80005c6 <__udivmoddi4+0x132>
 800062a:	46c0      	nop			; (mov r8, r8)

0800062c <__aeabi_fmul>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	4657      	mov	r7, sl
 8000630:	464e      	mov	r6, r9
 8000632:	4645      	mov	r5, r8
 8000634:	46de      	mov	lr, fp
 8000636:	0244      	lsls	r4, r0, #9
 8000638:	b5e0      	push	{r5, r6, r7, lr}
 800063a:	0045      	lsls	r5, r0, #1
 800063c:	1c0f      	adds	r7, r1, #0
 800063e:	0a64      	lsrs	r4, r4, #9
 8000640:	0e2d      	lsrs	r5, r5, #24
 8000642:	0fc6      	lsrs	r6, r0, #31
 8000644:	2d00      	cmp	r5, #0
 8000646:	d047      	beq.n	80006d8 <__aeabi_fmul+0xac>
 8000648:	2dff      	cmp	r5, #255	; 0xff
 800064a:	d04d      	beq.n	80006e8 <__aeabi_fmul+0xbc>
 800064c:	2300      	movs	r3, #0
 800064e:	2080      	movs	r0, #128	; 0x80
 8000650:	469a      	mov	sl, r3
 8000652:	469b      	mov	fp, r3
 8000654:	00e4      	lsls	r4, r4, #3
 8000656:	04c0      	lsls	r0, r0, #19
 8000658:	4304      	orrs	r4, r0
 800065a:	3d7f      	subs	r5, #127	; 0x7f
 800065c:	0278      	lsls	r0, r7, #9
 800065e:	0a43      	lsrs	r3, r0, #9
 8000660:	4699      	mov	r9, r3
 8000662:	007a      	lsls	r2, r7, #1
 8000664:	0ffb      	lsrs	r3, r7, #31
 8000666:	4698      	mov	r8, r3
 8000668:	0e12      	lsrs	r2, r2, #24
 800066a:	464b      	mov	r3, r9
 800066c:	d044      	beq.n	80006f8 <__aeabi_fmul+0xcc>
 800066e:	2aff      	cmp	r2, #255	; 0xff
 8000670:	d011      	beq.n	8000696 <__aeabi_fmul+0x6a>
 8000672:	00d8      	lsls	r0, r3, #3
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	04db      	lsls	r3, r3, #19
 8000678:	4303      	orrs	r3, r0
 800067a:	4699      	mov	r9, r3
 800067c:	2000      	movs	r0, #0
 800067e:	3a7f      	subs	r2, #127	; 0x7f
 8000680:	18ad      	adds	r5, r5, r2
 8000682:	4647      	mov	r7, r8
 8000684:	4653      	mov	r3, sl
 8000686:	4077      	eors	r7, r6
 8000688:	1c69      	adds	r1, r5, #1
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d83f      	bhi.n	800070e <__aeabi_fmul+0xe2>
 800068e:	4a72      	ldr	r2, [pc, #456]	; (8000858 <__aeabi_fmul+0x22c>)
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	58d3      	ldr	r3, [r2, r3]
 8000694:	469f      	mov	pc, r3
 8000696:	35ff      	adds	r5, #255	; 0xff
 8000698:	2b00      	cmp	r3, #0
 800069a:	d000      	beq.n	800069e <__aeabi_fmul+0x72>
 800069c:	e079      	b.n	8000792 <__aeabi_fmul+0x166>
 800069e:	4652      	mov	r2, sl
 80006a0:	2302      	movs	r3, #2
 80006a2:	431a      	orrs	r2, r3
 80006a4:	4692      	mov	sl, r2
 80006a6:	2002      	movs	r0, #2
 80006a8:	e7eb      	b.n	8000682 <__aeabi_fmul+0x56>
 80006aa:	4647      	mov	r7, r8
 80006ac:	464c      	mov	r4, r9
 80006ae:	4683      	mov	fp, r0
 80006b0:	465b      	mov	r3, fp
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d028      	beq.n	8000708 <__aeabi_fmul+0xdc>
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d100      	bne.n	80006bc <__aeabi_fmul+0x90>
 80006ba:	e0c6      	b.n	800084a <__aeabi_fmul+0x21e>
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d14f      	bne.n	8000760 <__aeabi_fmul+0x134>
 80006c0:	2000      	movs	r0, #0
 80006c2:	2400      	movs	r4, #0
 80006c4:	05c0      	lsls	r0, r0, #23
 80006c6:	07ff      	lsls	r7, r7, #31
 80006c8:	4320      	orrs	r0, r4
 80006ca:	4338      	orrs	r0, r7
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
 80006ce:	46bb      	mov	fp, r7
 80006d0:	46b2      	mov	sl, r6
 80006d2:	46a9      	mov	r9, r5
 80006d4:	46a0      	mov	r8, r4
 80006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d171      	bne.n	80007c0 <__aeabi_fmul+0x194>
 80006dc:	2304      	movs	r3, #4
 80006de:	469a      	mov	sl, r3
 80006e0:	3b03      	subs	r3, #3
 80006e2:	2500      	movs	r5, #0
 80006e4:	469b      	mov	fp, r3
 80006e6:	e7b9      	b.n	800065c <__aeabi_fmul+0x30>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d163      	bne.n	80007b4 <__aeabi_fmul+0x188>
 80006ec:	2308      	movs	r3, #8
 80006ee:	469a      	mov	sl, r3
 80006f0:	3b06      	subs	r3, #6
 80006f2:	25ff      	movs	r5, #255	; 0xff
 80006f4:	469b      	mov	fp, r3
 80006f6:	e7b1      	b.n	800065c <__aeabi_fmul+0x30>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d150      	bne.n	800079e <__aeabi_fmul+0x172>
 80006fc:	4652      	mov	r2, sl
 80006fe:	3301      	adds	r3, #1
 8000700:	431a      	orrs	r2, r3
 8000702:	4692      	mov	sl, r2
 8000704:	2001      	movs	r0, #1
 8000706:	e7bc      	b.n	8000682 <__aeabi_fmul+0x56>
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	2400      	movs	r4, #0
 800070c:	e7da      	b.n	80006c4 <__aeabi_fmul+0x98>
 800070e:	4648      	mov	r0, r9
 8000710:	0c26      	lsrs	r6, r4, #16
 8000712:	0424      	lsls	r4, r4, #16
 8000714:	0c22      	lsrs	r2, r4, #16
 8000716:	0404      	lsls	r4, r0, #16
 8000718:	0c24      	lsrs	r4, r4, #16
 800071a:	464b      	mov	r3, r9
 800071c:	0020      	movs	r0, r4
 800071e:	0c1b      	lsrs	r3, r3, #16
 8000720:	4350      	muls	r0, r2
 8000722:	4374      	muls	r4, r6
 8000724:	435a      	muls	r2, r3
 8000726:	435e      	muls	r6, r3
 8000728:	1912      	adds	r2, r2, r4
 800072a:	0c03      	lsrs	r3, r0, #16
 800072c:	189b      	adds	r3, r3, r2
 800072e:	429c      	cmp	r4, r3
 8000730:	d903      	bls.n	800073a <__aeabi_fmul+0x10e>
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	0252      	lsls	r2, r2, #9
 8000736:	4694      	mov	ip, r2
 8000738:	4466      	add	r6, ip
 800073a:	0400      	lsls	r0, r0, #16
 800073c:	041a      	lsls	r2, r3, #16
 800073e:	0c00      	lsrs	r0, r0, #16
 8000740:	1812      	adds	r2, r2, r0
 8000742:	0194      	lsls	r4, r2, #6
 8000744:	1e60      	subs	r0, r4, #1
 8000746:	4184      	sbcs	r4, r0
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	0e92      	lsrs	r2, r2, #26
 800074c:	199b      	adds	r3, r3, r6
 800074e:	4314      	orrs	r4, r2
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	431c      	orrs	r4, r3
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	d572      	bpl.n	800083e <__aeabi_fmul+0x212>
 8000758:	2001      	movs	r0, #1
 800075a:	0863      	lsrs	r3, r4, #1
 800075c:	4004      	ands	r4, r0
 800075e:	431c      	orrs	r4, r3
 8000760:	0008      	movs	r0, r1
 8000762:	307f      	adds	r0, #127	; 0x7f
 8000764:	2800      	cmp	r0, #0
 8000766:	dd3c      	ble.n	80007e2 <__aeabi_fmul+0x1b6>
 8000768:	0763      	lsls	r3, r4, #29
 800076a:	d004      	beq.n	8000776 <__aeabi_fmul+0x14a>
 800076c:	230f      	movs	r3, #15
 800076e:	4023      	ands	r3, r4
 8000770:	2b04      	cmp	r3, #4
 8000772:	d000      	beq.n	8000776 <__aeabi_fmul+0x14a>
 8000774:	3404      	adds	r4, #4
 8000776:	0123      	lsls	r3, r4, #4
 8000778:	d503      	bpl.n	8000782 <__aeabi_fmul+0x156>
 800077a:	3180      	adds	r1, #128	; 0x80
 800077c:	0008      	movs	r0, r1
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <__aeabi_fmul+0x230>)
 8000780:	401c      	ands	r4, r3
 8000782:	28fe      	cmp	r0, #254	; 0xfe
 8000784:	dcc0      	bgt.n	8000708 <__aeabi_fmul+0xdc>
 8000786:	01a4      	lsls	r4, r4, #6
 8000788:	0a64      	lsrs	r4, r4, #9
 800078a:	b2c0      	uxtb	r0, r0
 800078c:	e79a      	b.n	80006c4 <__aeabi_fmul+0x98>
 800078e:	0037      	movs	r7, r6
 8000790:	e78e      	b.n	80006b0 <__aeabi_fmul+0x84>
 8000792:	4652      	mov	r2, sl
 8000794:	2303      	movs	r3, #3
 8000796:	431a      	orrs	r2, r3
 8000798:	4692      	mov	sl, r2
 800079a:	2003      	movs	r0, #3
 800079c:	e771      	b.n	8000682 <__aeabi_fmul+0x56>
 800079e:	4648      	mov	r0, r9
 80007a0:	f001 f852 	bl	8001848 <__clzsi2>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1f43      	subs	r3, r0, #5
 80007a8:	409a      	lsls	r2, r3
 80007aa:	1a2d      	subs	r5, r5, r0
 80007ac:	4691      	mov	r9, r2
 80007ae:	2000      	movs	r0, #0
 80007b0:	3d76      	subs	r5, #118	; 0x76
 80007b2:	e766      	b.n	8000682 <__aeabi_fmul+0x56>
 80007b4:	230c      	movs	r3, #12
 80007b6:	469a      	mov	sl, r3
 80007b8:	3b09      	subs	r3, #9
 80007ba:	25ff      	movs	r5, #255	; 0xff
 80007bc:	469b      	mov	fp, r3
 80007be:	e74d      	b.n	800065c <__aeabi_fmul+0x30>
 80007c0:	0020      	movs	r0, r4
 80007c2:	f001 f841 	bl	8001848 <__clzsi2>
 80007c6:	2576      	movs	r5, #118	; 0x76
 80007c8:	1f43      	subs	r3, r0, #5
 80007ca:	409c      	lsls	r4, r3
 80007cc:	2300      	movs	r3, #0
 80007ce:	426d      	negs	r5, r5
 80007d0:	469a      	mov	sl, r3
 80007d2:	469b      	mov	fp, r3
 80007d4:	1a2d      	subs	r5, r5, r0
 80007d6:	e741      	b.n	800065c <__aeabi_fmul+0x30>
 80007d8:	2480      	movs	r4, #128	; 0x80
 80007da:	2700      	movs	r7, #0
 80007dc:	20ff      	movs	r0, #255	; 0xff
 80007de:	03e4      	lsls	r4, r4, #15
 80007e0:	e770      	b.n	80006c4 <__aeabi_fmul+0x98>
 80007e2:	2301      	movs	r3, #1
 80007e4:	1a1b      	subs	r3, r3, r0
 80007e6:	2b1b      	cmp	r3, #27
 80007e8:	dd00      	ble.n	80007ec <__aeabi_fmul+0x1c0>
 80007ea:	e769      	b.n	80006c0 <__aeabi_fmul+0x94>
 80007ec:	319e      	adds	r1, #158	; 0x9e
 80007ee:	0020      	movs	r0, r4
 80007f0:	408c      	lsls	r4, r1
 80007f2:	40d8      	lsrs	r0, r3
 80007f4:	1e63      	subs	r3, r4, #1
 80007f6:	419c      	sbcs	r4, r3
 80007f8:	4304      	orrs	r4, r0
 80007fa:	0763      	lsls	r3, r4, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fmul+0x1dc>
 80007fe:	230f      	movs	r3, #15
 8000800:	4023      	ands	r3, r4
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fmul+0x1dc>
 8000806:	3404      	adds	r4, #4
 8000808:	0163      	lsls	r3, r4, #5
 800080a:	d51a      	bpl.n	8000842 <__aeabi_fmul+0x216>
 800080c:	2001      	movs	r0, #1
 800080e:	2400      	movs	r4, #0
 8000810:	e758      	b.n	80006c4 <__aeabi_fmul+0x98>
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	03c0      	lsls	r0, r0, #15
 8000816:	4204      	tst	r4, r0
 8000818:	d009      	beq.n	800082e <__aeabi_fmul+0x202>
 800081a:	464b      	mov	r3, r9
 800081c:	4203      	tst	r3, r0
 800081e:	d106      	bne.n	800082e <__aeabi_fmul+0x202>
 8000820:	464c      	mov	r4, r9
 8000822:	4304      	orrs	r4, r0
 8000824:	0264      	lsls	r4, r4, #9
 8000826:	4647      	mov	r7, r8
 8000828:	20ff      	movs	r0, #255	; 0xff
 800082a:	0a64      	lsrs	r4, r4, #9
 800082c:	e74a      	b.n	80006c4 <__aeabi_fmul+0x98>
 800082e:	2080      	movs	r0, #128	; 0x80
 8000830:	03c0      	lsls	r0, r0, #15
 8000832:	4304      	orrs	r4, r0
 8000834:	0264      	lsls	r4, r4, #9
 8000836:	0037      	movs	r7, r6
 8000838:	20ff      	movs	r0, #255	; 0xff
 800083a:	0a64      	lsrs	r4, r4, #9
 800083c:	e742      	b.n	80006c4 <__aeabi_fmul+0x98>
 800083e:	0029      	movs	r1, r5
 8000840:	e78e      	b.n	8000760 <__aeabi_fmul+0x134>
 8000842:	01a4      	lsls	r4, r4, #6
 8000844:	2000      	movs	r0, #0
 8000846:	0a64      	lsrs	r4, r4, #9
 8000848:	e73c      	b.n	80006c4 <__aeabi_fmul+0x98>
 800084a:	2080      	movs	r0, #128	; 0x80
 800084c:	03c0      	lsls	r0, r0, #15
 800084e:	4304      	orrs	r4, r0
 8000850:	0264      	lsls	r4, r4, #9
 8000852:	20ff      	movs	r0, #255	; 0xff
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	e735      	b.n	80006c4 <__aeabi_fmul+0x98>
 8000858:	08005098 	.word	0x08005098
 800085c:	f7ffffff 	.word	0xf7ffffff

08000860 <__aeabi_ui2f>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	1e05      	subs	r5, r0, #0
 8000864:	d00e      	beq.n	8000884 <__aeabi_ui2f+0x24>
 8000866:	f000 ffef 	bl	8001848 <__clzsi2>
 800086a:	239e      	movs	r3, #158	; 0x9e
 800086c:	0004      	movs	r4, r0
 800086e:	1a1b      	subs	r3, r3, r0
 8000870:	2b96      	cmp	r3, #150	; 0x96
 8000872:	dc0c      	bgt.n	800088e <__aeabi_ui2f+0x2e>
 8000874:	2808      	cmp	r0, #8
 8000876:	dd01      	ble.n	800087c <__aeabi_ui2f+0x1c>
 8000878:	3c08      	subs	r4, #8
 800087a:	40a5      	lsls	r5, r4
 800087c:	026d      	lsls	r5, r5, #9
 800087e:	0a6d      	lsrs	r5, r5, #9
 8000880:	b2d8      	uxtb	r0, r3
 8000882:	e001      	b.n	8000888 <__aeabi_ui2f+0x28>
 8000884:	2000      	movs	r0, #0
 8000886:	2500      	movs	r5, #0
 8000888:	05c0      	lsls	r0, r0, #23
 800088a:	4328      	orrs	r0, r5
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	2b99      	cmp	r3, #153	; 0x99
 8000890:	dd09      	ble.n	80008a6 <__aeabi_ui2f+0x46>
 8000892:	0002      	movs	r2, r0
 8000894:	0029      	movs	r1, r5
 8000896:	321b      	adds	r2, #27
 8000898:	4091      	lsls	r1, r2
 800089a:	1e4a      	subs	r2, r1, #1
 800089c:	4191      	sbcs	r1, r2
 800089e:	2205      	movs	r2, #5
 80008a0:	1a12      	subs	r2, r2, r0
 80008a2:	40d5      	lsrs	r5, r2
 80008a4:	430d      	orrs	r5, r1
 80008a6:	2c05      	cmp	r4, #5
 80008a8:	dd01      	ble.n	80008ae <__aeabi_ui2f+0x4e>
 80008aa:	1f62      	subs	r2, r4, #5
 80008ac:	4095      	lsls	r5, r2
 80008ae:	0029      	movs	r1, r5
 80008b0:	4e08      	ldr	r6, [pc, #32]	; (80008d4 <__aeabi_ui2f+0x74>)
 80008b2:	4031      	ands	r1, r6
 80008b4:	076a      	lsls	r2, r5, #29
 80008b6:	d009      	beq.n	80008cc <__aeabi_ui2f+0x6c>
 80008b8:	200f      	movs	r0, #15
 80008ba:	4028      	ands	r0, r5
 80008bc:	2804      	cmp	r0, #4
 80008be:	d005      	beq.n	80008cc <__aeabi_ui2f+0x6c>
 80008c0:	3104      	adds	r1, #4
 80008c2:	014a      	lsls	r2, r1, #5
 80008c4:	d502      	bpl.n	80008cc <__aeabi_ui2f+0x6c>
 80008c6:	239f      	movs	r3, #159	; 0x9f
 80008c8:	4031      	ands	r1, r6
 80008ca:	1b1b      	subs	r3, r3, r4
 80008cc:	0189      	lsls	r1, r1, #6
 80008ce:	0a4d      	lsrs	r5, r1, #9
 80008d0:	b2d8      	uxtb	r0, r3
 80008d2:	e7d9      	b.n	8000888 <__aeabi_ui2f+0x28>
 80008d4:	fbffffff 	.word	0xfbffffff

080008d8 <__aeabi_dadd>:
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	464f      	mov	r7, r9
 80008dc:	46d6      	mov	lr, sl
 80008de:	4646      	mov	r6, r8
 80008e0:	000d      	movs	r5, r1
 80008e2:	0001      	movs	r1, r0
 80008e4:	0018      	movs	r0, r3
 80008e6:	b5c0      	push	{r6, r7, lr}
 80008e8:	0017      	movs	r7, r2
 80008ea:	032b      	lsls	r3, r5, #12
 80008ec:	0a5a      	lsrs	r2, r3, #9
 80008ee:	0f4b      	lsrs	r3, r1, #29
 80008f0:	4313      	orrs	r3, r2
 80008f2:	00ca      	lsls	r2, r1, #3
 80008f4:	4691      	mov	r9, r2
 80008f6:	0302      	lsls	r2, r0, #12
 80008f8:	006e      	lsls	r6, r5, #1
 80008fa:	0041      	lsls	r1, r0, #1
 80008fc:	0a52      	lsrs	r2, r2, #9
 80008fe:	0fec      	lsrs	r4, r5, #31
 8000900:	0f7d      	lsrs	r5, r7, #29
 8000902:	4315      	orrs	r5, r2
 8000904:	0d76      	lsrs	r6, r6, #21
 8000906:	0d49      	lsrs	r1, r1, #21
 8000908:	0fc0      	lsrs	r0, r0, #31
 800090a:	4682      	mov	sl, r0
 800090c:	46ac      	mov	ip, r5
 800090e:	00ff      	lsls	r7, r7, #3
 8000910:	1a72      	subs	r2, r6, r1
 8000912:	4284      	cmp	r4, r0
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x40>
 8000916:	e098      	b.n	8000a4a <__aeabi_dadd+0x172>
 8000918:	2a00      	cmp	r2, #0
 800091a:	dc00      	bgt.n	800091e <__aeabi_dadd+0x46>
 800091c:	e081      	b.n	8000a22 <__aeabi_dadd+0x14a>
 800091e:	2900      	cmp	r1, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x4c>
 8000922:	e0b6      	b.n	8000a92 <__aeabi_dadd+0x1ba>
 8000924:	49c9      	ldr	r1, [pc, #804]	; (8000c4c <__aeabi_dadd+0x374>)
 8000926:	428e      	cmp	r6, r1
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x54>
 800092a:	e172      	b.n	8000c12 <__aeabi_dadd+0x33a>
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	0028      	movs	r0, r5
 8000930:	0409      	lsls	r1, r1, #16
 8000932:	4308      	orrs	r0, r1
 8000934:	4684      	mov	ip, r0
 8000936:	2a38      	cmp	r2, #56	; 0x38
 8000938:	dd00      	ble.n	800093c <__aeabi_dadd+0x64>
 800093a:	e15e      	b.n	8000bfa <__aeabi_dadd+0x322>
 800093c:	2a1f      	cmp	r2, #31
 800093e:	dd00      	ble.n	8000942 <__aeabi_dadd+0x6a>
 8000940:	e1ee      	b.n	8000d20 <__aeabi_dadd+0x448>
 8000942:	2020      	movs	r0, #32
 8000944:	0039      	movs	r1, r7
 8000946:	4665      	mov	r5, ip
 8000948:	1a80      	subs	r0, r0, r2
 800094a:	4087      	lsls	r7, r0
 800094c:	40d1      	lsrs	r1, r2
 800094e:	4085      	lsls	r5, r0
 8000950:	430d      	orrs	r5, r1
 8000952:	0039      	movs	r1, r7
 8000954:	1e4f      	subs	r7, r1, #1
 8000956:	41b9      	sbcs	r1, r7
 8000958:	4667      	mov	r7, ip
 800095a:	40d7      	lsrs	r7, r2
 800095c:	4329      	orrs	r1, r5
 800095e:	1bdb      	subs	r3, r3, r7
 8000960:	464a      	mov	r2, r9
 8000962:	1a55      	subs	r5, r2, r1
 8000964:	45a9      	cmp	r9, r5
 8000966:	4189      	sbcs	r1, r1
 8000968:	4249      	negs	r1, r1
 800096a:	1a5b      	subs	r3, r3, r1
 800096c:	4698      	mov	r8, r3
 800096e:	4643      	mov	r3, r8
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	d400      	bmi.n	8000976 <__aeabi_dadd+0x9e>
 8000974:	e0cc      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000976:	4643      	mov	r3, r8
 8000978:	025b      	lsls	r3, r3, #9
 800097a:	0a5b      	lsrs	r3, r3, #9
 800097c:	4698      	mov	r8, r3
 800097e:	4643      	mov	r3, r8
 8000980:	2b00      	cmp	r3, #0
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0xae>
 8000984:	e12c      	b.n	8000be0 <__aeabi_dadd+0x308>
 8000986:	4640      	mov	r0, r8
 8000988:	f000 ff5e 	bl	8001848 <__clzsi2>
 800098c:	0001      	movs	r1, r0
 800098e:	3908      	subs	r1, #8
 8000990:	2220      	movs	r2, #32
 8000992:	0028      	movs	r0, r5
 8000994:	4643      	mov	r3, r8
 8000996:	1a52      	subs	r2, r2, r1
 8000998:	408b      	lsls	r3, r1
 800099a:	40d0      	lsrs	r0, r2
 800099c:	408d      	lsls	r5, r1
 800099e:	4303      	orrs	r3, r0
 80009a0:	428e      	cmp	r6, r1
 80009a2:	dd00      	ble.n	80009a6 <__aeabi_dadd+0xce>
 80009a4:	e117      	b.n	8000bd6 <__aeabi_dadd+0x2fe>
 80009a6:	1b8e      	subs	r6, r1, r6
 80009a8:	1c72      	adds	r2, r6, #1
 80009aa:	2a1f      	cmp	r2, #31
 80009ac:	dd00      	ble.n	80009b0 <__aeabi_dadd+0xd8>
 80009ae:	e1a7      	b.n	8000d00 <__aeabi_dadd+0x428>
 80009b0:	2120      	movs	r1, #32
 80009b2:	0018      	movs	r0, r3
 80009b4:	002e      	movs	r6, r5
 80009b6:	1a89      	subs	r1, r1, r2
 80009b8:	408d      	lsls	r5, r1
 80009ba:	4088      	lsls	r0, r1
 80009bc:	40d6      	lsrs	r6, r2
 80009be:	40d3      	lsrs	r3, r2
 80009c0:	1e69      	subs	r1, r5, #1
 80009c2:	418d      	sbcs	r5, r1
 80009c4:	4330      	orrs	r0, r6
 80009c6:	4698      	mov	r8, r3
 80009c8:	2600      	movs	r6, #0
 80009ca:	4305      	orrs	r5, r0
 80009cc:	076b      	lsls	r3, r5, #29
 80009ce:	d009      	beq.n	80009e4 <__aeabi_dadd+0x10c>
 80009d0:	230f      	movs	r3, #15
 80009d2:	402b      	ands	r3, r5
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d005      	beq.n	80009e4 <__aeabi_dadd+0x10c>
 80009d8:	1d2b      	adds	r3, r5, #4
 80009da:	42ab      	cmp	r3, r5
 80009dc:	41ad      	sbcs	r5, r5
 80009de:	426d      	negs	r5, r5
 80009e0:	44a8      	add	r8, r5
 80009e2:	001d      	movs	r5, r3
 80009e4:	4643      	mov	r3, r8
 80009e6:	021b      	lsls	r3, r3, #8
 80009e8:	d400      	bmi.n	80009ec <__aeabi_dadd+0x114>
 80009ea:	e094      	b.n	8000b16 <__aeabi_dadd+0x23e>
 80009ec:	4b97      	ldr	r3, [pc, #604]	; (8000c4c <__aeabi_dadd+0x374>)
 80009ee:	1c72      	adds	r2, r6, #1
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x11e>
 80009f4:	e09d      	b.n	8000b32 <__aeabi_dadd+0x25a>
 80009f6:	4641      	mov	r1, r8
 80009f8:	4b95      	ldr	r3, [pc, #596]	; (8000c50 <__aeabi_dadd+0x378>)
 80009fa:	08ed      	lsrs	r5, r5, #3
 80009fc:	4019      	ands	r1, r3
 80009fe:	000b      	movs	r3, r1
 8000a00:	0552      	lsls	r2, r2, #21
 8000a02:	0749      	lsls	r1, r1, #29
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	4329      	orrs	r1, r5
 8000a08:	0b1b      	lsrs	r3, r3, #12
 8000a0a:	0d52      	lsrs	r2, r2, #21
 8000a0c:	0512      	lsls	r2, r2, #20
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4323      	orrs	r3, r4
 8000a14:	0008      	movs	r0, r1
 8000a16:	0019      	movs	r1, r3
 8000a18:	bce0      	pop	{r5, r6, r7}
 8000a1a:	46ba      	mov	sl, r7
 8000a1c:	46b1      	mov	r9, r6
 8000a1e:	46a8      	mov	r8, r5
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a22:	2a00      	cmp	r2, #0
 8000a24:	d043      	beq.n	8000aae <__aeabi_dadd+0x1d6>
 8000a26:	1b8a      	subs	r2, r1, r6
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d000      	beq.n	8000a2e <__aeabi_dadd+0x156>
 8000a2c:	e12a      	b.n	8000c84 <__aeabi_dadd+0x3ac>
 8000a2e:	464c      	mov	r4, r9
 8000a30:	431c      	orrs	r4, r3
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dadd+0x15e>
 8000a34:	e1d1      	b.n	8000dda <__aeabi_dadd+0x502>
 8000a36:	1e54      	subs	r4, r2, #1
 8000a38:	2a01      	cmp	r2, #1
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x166>
 8000a3c:	e21f      	b.n	8000e7e <__aeabi_dadd+0x5a6>
 8000a3e:	4d83      	ldr	r5, [pc, #524]	; (8000c4c <__aeabi_dadd+0x374>)
 8000a40:	42aa      	cmp	r2, r5
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x16e>
 8000a44:	e272      	b.n	8000f2c <__aeabi_dadd+0x654>
 8000a46:	0022      	movs	r2, r4
 8000a48:	e123      	b.n	8000c92 <__aeabi_dadd+0x3ba>
 8000a4a:	2a00      	cmp	r2, #0
 8000a4c:	dc00      	bgt.n	8000a50 <__aeabi_dadd+0x178>
 8000a4e:	e098      	b.n	8000b82 <__aeabi_dadd+0x2aa>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	d042      	beq.n	8000ada <__aeabi_dadd+0x202>
 8000a54:	497d      	ldr	r1, [pc, #500]	; (8000c4c <__aeabi_dadd+0x374>)
 8000a56:	428e      	cmp	r6, r1
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x184>
 8000a5a:	e0da      	b.n	8000c12 <__aeabi_dadd+0x33a>
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0028      	movs	r0, r5
 8000a60:	0409      	lsls	r1, r1, #16
 8000a62:	4308      	orrs	r0, r1
 8000a64:	4684      	mov	ip, r0
 8000a66:	2a38      	cmp	r2, #56	; 0x38
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_dadd+0x194>
 8000a6a:	e129      	b.n	8000cc0 <__aeabi_dadd+0x3e8>
 8000a6c:	2a1f      	cmp	r2, #31
 8000a6e:	dc00      	bgt.n	8000a72 <__aeabi_dadd+0x19a>
 8000a70:	e187      	b.n	8000d82 <__aeabi_dadd+0x4aa>
 8000a72:	0011      	movs	r1, r2
 8000a74:	4665      	mov	r5, ip
 8000a76:	3920      	subs	r1, #32
 8000a78:	40cd      	lsrs	r5, r1
 8000a7a:	2a20      	cmp	r2, #32
 8000a7c:	d004      	beq.n	8000a88 <__aeabi_dadd+0x1b0>
 8000a7e:	2040      	movs	r0, #64	; 0x40
 8000a80:	4661      	mov	r1, ip
 8000a82:	1a82      	subs	r2, r0, r2
 8000a84:	4091      	lsls	r1, r2
 8000a86:	430f      	orrs	r7, r1
 8000a88:	0039      	movs	r1, r7
 8000a8a:	1e4f      	subs	r7, r1, #1
 8000a8c:	41b9      	sbcs	r1, r7
 8000a8e:	430d      	orrs	r5, r1
 8000a90:	e11b      	b.n	8000cca <__aeabi_dadd+0x3f2>
 8000a92:	0029      	movs	r1, r5
 8000a94:	4339      	orrs	r1, r7
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x1c2>
 8000a98:	e0b5      	b.n	8000c06 <__aeabi_dadd+0x32e>
 8000a9a:	1e51      	subs	r1, r2, #1
 8000a9c:	2a01      	cmp	r2, #1
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x1ca>
 8000aa0:	e1ab      	b.n	8000dfa <__aeabi_dadd+0x522>
 8000aa2:	486a      	ldr	r0, [pc, #424]	; (8000c4c <__aeabi_dadd+0x374>)
 8000aa4:	4282      	cmp	r2, r0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x1d2>
 8000aa8:	e1b2      	b.n	8000e10 <__aeabi_dadd+0x538>
 8000aaa:	000a      	movs	r2, r1
 8000aac:	e743      	b.n	8000936 <__aeabi_dadd+0x5e>
 8000aae:	4969      	ldr	r1, [pc, #420]	; (8000c54 <__aeabi_dadd+0x37c>)
 8000ab0:	1c75      	adds	r5, r6, #1
 8000ab2:	420d      	tst	r5, r1
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_dadd+0x1e0>
 8000ab6:	e0cf      	b.n	8000c58 <__aeabi_dadd+0x380>
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d000      	beq.n	8000abe <__aeabi_dadd+0x1e6>
 8000abc:	e193      	b.n	8000de6 <__aeabi_dadd+0x50e>
 8000abe:	4649      	mov	r1, r9
 8000ac0:	4319      	orrs	r1, r3
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_dadd+0x1ee>
 8000ac4:	e1d1      	b.n	8000e6a <__aeabi_dadd+0x592>
 8000ac6:	4661      	mov	r1, ip
 8000ac8:	4339      	orrs	r1, r7
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x1f6>
 8000acc:	e1e3      	b.n	8000e96 <__aeabi_dadd+0x5be>
 8000ace:	4649      	mov	r1, r9
 8000ad0:	0758      	lsls	r0, r3, #29
 8000ad2:	08c9      	lsrs	r1, r1, #3
 8000ad4:	4301      	orrs	r1, r0
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	e026      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000ada:	0029      	movs	r1, r5
 8000adc:	4339      	orrs	r1, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x20a>
 8000ae0:	e091      	b.n	8000c06 <__aeabi_dadd+0x32e>
 8000ae2:	1e51      	subs	r1, r2, #1
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d005      	beq.n	8000af4 <__aeabi_dadd+0x21c>
 8000ae8:	4858      	ldr	r0, [pc, #352]	; (8000c4c <__aeabi_dadd+0x374>)
 8000aea:	4282      	cmp	r2, r0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x218>
 8000aee:	e18f      	b.n	8000e10 <__aeabi_dadd+0x538>
 8000af0:	000a      	movs	r2, r1
 8000af2:	e7b8      	b.n	8000a66 <__aeabi_dadd+0x18e>
 8000af4:	003d      	movs	r5, r7
 8000af6:	444d      	add	r5, r9
 8000af8:	454d      	cmp	r5, r9
 8000afa:	4189      	sbcs	r1, r1
 8000afc:	4463      	add	r3, ip
 8000afe:	4698      	mov	r8, r3
 8000b00:	4249      	negs	r1, r1
 8000b02:	4488      	add	r8, r1
 8000b04:	4643      	mov	r3, r8
 8000b06:	2602      	movs	r6, #2
 8000b08:	021b      	lsls	r3, r3, #8
 8000b0a:	d500      	bpl.n	8000b0e <__aeabi_dadd+0x236>
 8000b0c:	e0eb      	b.n	8000ce6 <__aeabi_dadd+0x40e>
 8000b0e:	3e01      	subs	r6, #1
 8000b10:	076b      	lsls	r3, r5, #29
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x23e>
 8000b14:	e75c      	b.n	80009d0 <__aeabi_dadd+0xf8>
 8000b16:	4643      	mov	r3, r8
 8000b18:	08e9      	lsrs	r1, r5, #3
 8000b1a:	075a      	lsls	r2, r3, #29
 8000b1c:	4311      	orrs	r1, r2
 8000b1e:	0032      	movs	r2, r6
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	484a      	ldr	r0, [pc, #296]	; (8000c4c <__aeabi_dadd+0x374>)
 8000b24:	4282      	cmp	r2, r0
 8000b26:	d021      	beq.n	8000b6c <__aeabi_dadd+0x294>
 8000b28:	031b      	lsls	r3, r3, #12
 8000b2a:	0552      	lsls	r2, r2, #21
 8000b2c:	0b1b      	lsrs	r3, r3, #12
 8000b2e:	0d52      	lsrs	r2, r2, #21
 8000b30:	e76c      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000b32:	2300      	movs	r3, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	e769      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000b38:	002a      	movs	r2, r5
 8000b3a:	433a      	orrs	r2, r7
 8000b3c:	d069      	beq.n	8000c12 <__aeabi_dadd+0x33a>
 8000b3e:	464a      	mov	r2, r9
 8000b40:	0758      	lsls	r0, r3, #29
 8000b42:	08d1      	lsrs	r1, r2, #3
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	031b      	lsls	r3, r3, #12
 8000b4a:	4308      	orrs	r0, r1
 8000b4c:	421a      	tst	r2, r3
 8000b4e:	d007      	beq.n	8000b60 <__aeabi_dadd+0x288>
 8000b50:	0029      	movs	r1, r5
 8000b52:	08ed      	lsrs	r5, r5, #3
 8000b54:	421d      	tst	r5, r3
 8000b56:	d103      	bne.n	8000b60 <__aeabi_dadd+0x288>
 8000b58:	002a      	movs	r2, r5
 8000b5a:	08ff      	lsrs	r7, r7, #3
 8000b5c:	0748      	lsls	r0, r1, #29
 8000b5e:	4338      	orrs	r0, r7
 8000b60:	0f43      	lsrs	r3, r0, #29
 8000b62:	00c1      	lsls	r1, r0, #3
 8000b64:	075b      	lsls	r3, r3, #29
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	4319      	orrs	r1, r3
 8000b6a:	0013      	movs	r3, r2
 8000b6c:	000a      	movs	r2, r1
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x29c>
 8000b72:	e213      	b.n	8000f9c <__aeabi_dadd+0x6c4>
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	0312      	lsls	r2, r2, #12
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	031b      	lsls	r3, r3, #12
 8000b7c:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <__aeabi_dadd+0x374>)
 8000b7e:	0b1b      	lsrs	r3, r3, #12
 8000b80:	e744      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d04b      	beq.n	8000c1e <__aeabi_dadd+0x346>
 8000b86:	1b8a      	subs	r2, r1, r6
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_dadd+0x2b6>
 8000b8c:	e0e7      	b.n	8000d5e <__aeabi_dadd+0x486>
 8000b8e:	482f      	ldr	r0, [pc, #188]	; (8000c4c <__aeabi_dadd+0x374>)
 8000b90:	4281      	cmp	r1, r0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_dadd+0x2be>
 8000b94:	e195      	b.n	8000ec2 <__aeabi_dadd+0x5ea>
 8000b96:	2080      	movs	r0, #128	; 0x80
 8000b98:	0400      	lsls	r0, r0, #16
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	2a38      	cmp	r2, #56	; 0x38
 8000b9e:	dd00      	ble.n	8000ba2 <__aeabi_dadd+0x2ca>
 8000ba0:	e143      	b.n	8000e2a <__aeabi_dadd+0x552>
 8000ba2:	2a1f      	cmp	r2, #31
 8000ba4:	dd00      	ble.n	8000ba8 <__aeabi_dadd+0x2d0>
 8000ba6:	e1db      	b.n	8000f60 <__aeabi_dadd+0x688>
 8000ba8:	2020      	movs	r0, #32
 8000baa:	001d      	movs	r5, r3
 8000bac:	464e      	mov	r6, r9
 8000bae:	1a80      	subs	r0, r0, r2
 8000bb0:	4085      	lsls	r5, r0
 8000bb2:	40d6      	lsrs	r6, r2
 8000bb4:	4335      	orrs	r5, r6
 8000bb6:	464e      	mov	r6, r9
 8000bb8:	4086      	lsls	r6, r0
 8000bba:	0030      	movs	r0, r6
 8000bbc:	40d3      	lsrs	r3, r2
 8000bbe:	1e46      	subs	r6, r0, #1
 8000bc0:	41b0      	sbcs	r0, r6
 8000bc2:	449c      	add	ip, r3
 8000bc4:	4305      	orrs	r5, r0
 8000bc6:	19ed      	adds	r5, r5, r7
 8000bc8:	42bd      	cmp	r5, r7
 8000bca:	419b      	sbcs	r3, r3
 8000bcc:	425b      	negs	r3, r3
 8000bce:	4463      	add	r3, ip
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	000e      	movs	r6, r1
 8000bd4:	e07f      	b.n	8000cd6 <__aeabi_dadd+0x3fe>
 8000bd6:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <__aeabi_dadd+0x378>)
 8000bd8:	1a76      	subs	r6, r6, r1
 8000bda:	4013      	ands	r3, r2
 8000bdc:	4698      	mov	r8, r3
 8000bde:	e6f5      	b.n	80009cc <__aeabi_dadd+0xf4>
 8000be0:	0028      	movs	r0, r5
 8000be2:	f000 fe31 	bl	8001848 <__clzsi2>
 8000be6:	0001      	movs	r1, r0
 8000be8:	3118      	adds	r1, #24
 8000bea:	291f      	cmp	r1, #31
 8000bec:	dc00      	bgt.n	8000bf0 <__aeabi_dadd+0x318>
 8000bee:	e6cf      	b.n	8000990 <__aeabi_dadd+0xb8>
 8000bf0:	002b      	movs	r3, r5
 8000bf2:	3808      	subs	r0, #8
 8000bf4:	4083      	lsls	r3, r0
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	e6d2      	b.n	80009a0 <__aeabi_dadd+0xc8>
 8000bfa:	4662      	mov	r2, ip
 8000bfc:	433a      	orrs	r2, r7
 8000bfe:	0011      	movs	r1, r2
 8000c00:	1e4f      	subs	r7, r1, #1
 8000c02:	41b9      	sbcs	r1, r7
 8000c04:	e6ac      	b.n	8000960 <__aeabi_dadd+0x88>
 8000c06:	4649      	mov	r1, r9
 8000c08:	0758      	lsls	r0, r3, #29
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	4301      	orrs	r1, r0
 8000c0e:	08db      	lsrs	r3, r3, #3
 8000c10:	e787      	b.n	8000b22 <__aeabi_dadd+0x24a>
 8000c12:	4649      	mov	r1, r9
 8000c14:	075a      	lsls	r2, r3, #29
 8000c16:	08c9      	lsrs	r1, r1, #3
 8000c18:	4311      	orrs	r1, r2
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	e7a6      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000c1e:	490d      	ldr	r1, [pc, #52]	; (8000c54 <__aeabi_dadd+0x37c>)
 8000c20:	1c70      	adds	r0, r6, #1
 8000c22:	4208      	tst	r0, r1
 8000c24:	d000      	beq.n	8000c28 <__aeabi_dadd+0x350>
 8000c26:	e0bb      	b.n	8000da0 <__aeabi_dadd+0x4c8>
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_dadd+0x356>
 8000c2c:	e114      	b.n	8000e58 <__aeabi_dadd+0x580>
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4319      	orrs	r1, r3
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x35e>
 8000c34:	e175      	b.n	8000f22 <__aeabi_dadd+0x64a>
 8000c36:	0029      	movs	r1, r5
 8000c38:	4339      	orrs	r1, r7
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_dadd+0x366>
 8000c3c:	e17e      	b.n	8000f3c <__aeabi_dadd+0x664>
 8000c3e:	4649      	mov	r1, r9
 8000c40:	0758      	lsls	r0, r3, #29
 8000c42:	08c9      	lsrs	r1, r1, #3
 8000c44:	4301      	orrs	r1, r0
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	e76e      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	000007ff 	.word	0x000007ff
 8000c50:	ff7fffff 	.word	0xff7fffff
 8000c54:	000007fe 	.word	0x000007fe
 8000c58:	4649      	mov	r1, r9
 8000c5a:	1bcd      	subs	r5, r1, r7
 8000c5c:	4661      	mov	r1, ip
 8000c5e:	1a58      	subs	r0, r3, r1
 8000c60:	45a9      	cmp	r9, r5
 8000c62:	4189      	sbcs	r1, r1
 8000c64:	4249      	negs	r1, r1
 8000c66:	4688      	mov	r8, r1
 8000c68:	0001      	movs	r1, r0
 8000c6a:	4640      	mov	r0, r8
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	4688      	mov	r8, r1
 8000c70:	0209      	lsls	r1, r1, #8
 8000c72:	d500      	bpl.n	8000c76 <__aeabi_dadd+0x39e>
 8000c74:	e0a6      	b.n	8000dc4 <__aeabi_dadd+0x4ec>
 8000c76:	4641      	mov	r1, r8
 8000c78:	4329      	orrs	r1, r5
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dadd+0x3a6>
 8000c7c:	e67f      	b.n	800097e <__aeabi_dadd+0xa6>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	2400      	movs	r4, #0
 8000c82:	e751      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000c84:	4cc7      	ldr	r4, [pc, #796]	; (8000fa4 <__aeabi_dadd+0x6cc>)
 8000c86:	42a1      	cmp	r1, r4
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dadd+0x3b4>
 8000c8a:	e0c7      	b.n	8000e1c <__aeabi_dadd+0x544>
 8000c8c:	2480      	movs	r4, #128	; 0x80
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	2a38      	cmp	r2, #56	; 0x38
 8000c94:	dc54      	bgt.n	8000d40 <__aeabi_dadd+0x468>
 8000c96:	2a1f      	cmp	r2, #31
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_dadd+0x3c4>
 8000c9a:	e0cc      	b.n	8000e36 <__aeabi_dadd+0x55e>
 8000c9c:	2420      	movs	r4, #32
 8000c9e:	4648      	mov	r0, r9
 8000ca0:	1aa4      	subs	r4, r4, r2
 8000ca2:	001d      	movs	r5, r3
 8000ca4:	464e      	mov	r6, r9
 8000ca6:	40a0      	lsls	r0, r4
 8000ca8:	40d6      	lsrs	r6, r2
 8000caa:	40a5      	lsls	r5, r4
 8000cac:	0004      	movs	r4, r0
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	4335      	orrs	r5, r6
 8000cb4:	1e66      	subs	r6, r4, #1
 8000cb6:	41b4      	sbcs	r4, r6
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	469c      	mov	ip, r3
 8000cbc:	4325      	orrs	r5, r4
 8000cbe:	e044      	b.n	8000d4a <__aeabi_dadd+0x472>
 8000cc0:	4662      	mov	r2, ip
 8000cc2:	433a      	orrs	r2, r7
 8000cc4:	0015      	movs	r5, r2
 8000cc6:	1e6f      	subs	r7, r5, #1
 8000cc8:	41bd      	sbcs	r5, r7
 8000cca:	444d      	add	r5, r9
 8000ccc:	454d      	cmp	r5, r9
 8000cce:	4189      	sbcs	r1, r1
 8000cd0:	4249      	negs	r1, r1
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	4498      	add	r8, r3
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	d400      	bmi.n	8000cde <__aeabi_dadd+0x406>
 8000cdc:	e718      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000cde:	4bb1      	ldr	r3, [pc, #708]	; (8000fa4 <__aeabi_dadd+0x6cc>)
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d049      	beq.n	8000d7a <__aeabi_dadd+0x4a2>
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	4baf      	ldr	r3, [pc, #700]	; (8000fa8 <__aeabi_dadd+0x6d0>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	401a      	ands	r2, r3
 8000cee:	0013      	movs	r3, r2
 8000cf0:	086a      	lsrs	r2, r5, #1
 8000cf2:	400d      	ands	r5, r1
 8000cf4:	4315      	orrs	r5, r2
 8000cf6:	07d9      	lsls	r1, r3, #31
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	430d      	orrs	r5, r1
 8000cfe:	e665      	b.n	80009cc <__aeabi_dadd+0xf4>
 8000d00:	0018      	movs	r0, r3
 8000d02:	3e1f      	subs	r6, #31
 8000d04:	40f0      	lsrs	r0, r6
 8000d06:	2a20      	cmp	r2, #32
 8000d08:	d003      	beq.n	8000d12 <__aeabi_dadd+0x43a>
 8000d0a:	2140      	movs	r1, #64	; 0x40
 8000d0c:	1a8a      	subs	r2, r1, r2
 8000d0e:	4093      	lsls	r3, r2
 8000d10:	431d      	orrs	r5, r3
 8000d12:	1e69      	subs	r1, r5, #1
 8000d14:	418d      	sbcs	r5, r1
 8000d16:	2300      	movs	r3, #0
 8000d18:	2600      	movs	r6, #0
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	4305      	orrs	r5, r0
 8000d1e:	e6f7      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000d20:	0011      	movs	r1, r2
 8000d22:	4665      	mov	r5, ip
 8000d24:	3920      	subs	r1, #32
 8000d26:	40cd      	lsrs	r5, r1
 8000d28:	2a20      	cmp	r2, #32
 8000d2a:	d004      	beq.n	8000d36 <__aeabi_dadd+0x45e>
 8000d2c:	2040      	movs	r0, #64	; 0x40
 8000d2e:	4661      	mov	r1, ip
 8000d30:	1a82      	subs	r2, r0, r2
 8000d32:	4091      	lsls	r1, r2
 8000d34:	430f      	orrs	r7, r1
 8000d36:	0039      	movs	r1, r7
 8000d38:	1e4f      	subs	r7, r1, #1
 8000d3a:	41b9      	sbcs	r1, r7
 8000d3c:	4329      	orrs	r1, r5
 8000d3e:	e60f      	b.n	8000960 <__aeabi_dadd+0x88>
 8000d40:	464a      	mov	r2, r9
 8000d42:	4313      	orrs	r3, r2
 8000d44:	001d      	movs	r5, r3
 8000d46:	1e6b      	subs	r3, r5, #1
 8000d48:	419d      	sbcs	r5, r3
 8000d4a:	1b7d      	subs	r5, r7, r5
 8000d4c:	42af      	cmp	r7, r5
 8000d4e:	419b      	sbcs	r3, r3
 8000d50:	4662      	mov	r2, ip
 8000d52:	425b      	negs	r3, r3
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	4698      	mov	r8, r3
 8000d58:	4654      	mov	r4, sl
 8000d5a:	000e      	movs	r6, r1
 8000d5c:	e607      	b.n	800096e <__aeabi_dadd+0x96>
 8000d5e:	4648      	mov	r0, r9
 8000d60:	4318      	orrs	r0, r3
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x48e>
 8000d64:	e0b3      	b.n	8000ece <__aeabi_dadd+0x5f6>
 8000d66:	1e50      	subs	r0, r2, #1
 8000d68:	2a01      	cmp	r2, #1
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x496>
 8000d6c:	e10d      	b.n	8000f8a <__aeabi_dadd+0x6b2>
 8000d6e:	4d8d      	ldr	r5, [pc, #564]	; (8000fa4 <__aeabi_dadd+0x6cc>)
 8000d70:	42aa      	cmp	r2, r5
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x49e>
 8000d74:	e0a5      	b.n	8000ec2 <__aeabi_dadd+0x5ea>
 8000d76:	0002      	movs	r2, r0
 8000d78:	e710      	b.n	8000b9c <__aeabi_dadd+0x2c4>
 8000d7a:	0032      	movs	r2, r6
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e644      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000d82:	2120      	movs	r1, #32
 8000d84:	0038      	movs	r0, r7
 8000d86:	1a89      	subs	r1, r1, r2
 8000d88:	4665      	mov	r5, ip
 8000d8a:	408f      	lsls	r7, r1
 8000d8c:	408d      	lsls	r5, r1
 8000d8e:	40d0      	lsrs	r0, r2
 8000d90:	1e79      	subs	r1, r7, #1
 8000d92:	418f      	sbcs	r7, r1
 8000d94:	4305      	orrs	r5, r0
 8000d96:	433d      	orrs	r5, r7
 8000d98:	4667      	mov	r7, ip
 8000d9a:	40d7      	lsrs	r7, r2
 8000d9c:	19db      	adds	r3, r3, r7
 8000d9e:	e794      	b.n	8000cca <__aeabi_dadd+0x3f2>
 8000da0:	4a80      	ldr	r2, [pc, #512]	; (8000fa4 <__aeabi_dadd+0x6cc>)
 8000da2:	4290      	cmp	r0, r2
 8000da4:	d100      	bne.n	8000da8 <__aeabi_dadd+0x4d0>
 8000da6:	e0ec      	b.n	8000f82 <__aeabi_dadd+0x6aa>
 8000da8:	0039      	movs	r1, r7
 8000daa:	4449      	add	r1, r9
 8000dac:	4549      	cmp	r1, r9
 8000dae:	4192      	sbcs	r2, r2
 8000db0:	4463      	add	r3, ip
 8000db2:	4252      	negs	r2, r2
 8000db4:	189b      	adds	r3, r3, r2
 8000db6:	07dd      	lsls	r5, r3, #31
 8000db8:	0849      	lsrs	r1, r1, #1
 8000dba:	085b      	lsrs	r3, r3, #1
 8000dbc:	4698      	mov	r8, r3
 8000dbe:	0006      	movs	r6, r0
 8000dc0:	430d      	orrs	r5, r1
 8000dc2:	e6a5      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	1abd      	subs	r5, r7, r2
 8000dc8:	42af      	cmp	r7, r5
 8000dca:	4189      	sbcs	r1, r1
 8000dcc:	4662      	mov	r2, ip
 8000dce:	4249      	negs	r1, r1
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	1a5b      	subs	r3, r3, r1
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	4654      	mov	r4, sl
 8000dd8:	e5d1      	b.n	800097e <__aeabi_dadd+0xa6>
 8000dda:	076c      	lsls	r4, r5, #29
 8000ddc:	08f9      	lsrs	r1, r7, #3
 8000dde:	4321      	orrs	r1, r4
 8000de0:	08eb      	lsrs	r3, r5, #3
 8000de2:	0004      	movs	r4, r0
 8000de4:	e69d      	b.n	8000b22 <__aeabi_dadd+0x24a>
 8000de6:	464a      	mov	r2, r9
 8000de8:	431a      	orrs	r2, r3
 8000dea:	d175      	bne.n	8000ed8 <__aeabi_dadd+0x600>
 8000dec:	4661      	mov	r1, ip
 8000dee:	4339      	orrs	r1, r7
 8000df0:	d114      	bne.n	8000e1c <__aeabi_dadd+0x544>
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	2400      	movs	r4, #0
 8000df6:	031b      	lsls	r3, r3, #12
 8000df8:	e6bc      	b.n	8000b74 <__aeabi_dadd+0x29c>
 8000dfa:	464a      	mov	r2, r9
 8000dfc:	1bd5      	subs	r5, r2, r7
 8000dfe:	45a9      	cmp	r9, r5
 8000e00:	4189      	sbcs	r1, r1
 8000e02:	4662      	mov	r2, ip
 8000e04:	4249      	negs	r1, r1
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	2601      	movs	r6, #1
 8000e0e:	e5ae      	b.n	800096e <__aeabi_dadd+0x96>
 8000e10:	464a      	mov	r2, r9
 8000e12:	08d1      	lsrs	r1, r2, #3
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	4311      	orrs	r1, r2
 8000e18:	08db      	lsrs	r3, r3, #3
 8000e1a:	e6a7      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000e1c:	4663      	mov	r3, ip
 8000e1e:	08f9      	lsrs	r1, r7, #3
 8000e20:	075a      	lsls	r2, r3, #29
 8000e22:	4654      	mov	r4, sl
 8000e24:	4311      	orrs	r1, r2
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	e6a0      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000e2a:	464a      	mov	r2, r9
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	001d      	movs	r5, r3
 8000e30:	1e6b      	subs	r3, r5, #1
 8000e32:	419d      	sbcs	r5, r3
 8000e34:	e6c7      	b.n	8000bc6 <__aeabi_dadd+0x2ee>
 8000e36:	0014      	movs	r4, r2
 8000e38:	001e      	movs	r6, r3
 8000e3a:	3c20      	subs	r4, #32
 8000e3c:	40e6      	lsrs	r6, r4
 8000e3e:	2a20      	cmp	r2, #32
 8000e40:	d005      	beq.n	8000e4e <__aeabi_dadd+0x576>
 8000e42:	2440      	movs	r4, #64	; 0x40
 8000e44:	1aa2      	subs	r2, r4, r2
 8000e46:	4093      	lsls	r3, r2
 8000e48:	464a      	mov	r2, r9
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	4691      	mov	r9, r2
 8000e4e:	464d      	mov	r5, r9
 8000e50:	1e6b      	subs	r3, r5, #1
 8000e52:	419d      	sbcs	r5, r3
 8000e54:	4335      	orrs	r5, r6
 8000e56:	e778      	b.n	8000d4a <__aeabi_dadd+0x472>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_dadd+0x588>
 8000e5e:	e66b      	b.n	8000b38 <__aeabi_dadd+0x260>
 8000e60:	076b      	lsls	r3, r5, #29
 8000e62:	08f9      	lsrs	r1, r7, #3
 8000e64:	4319      	orrs	r1, r3
 8000e66:	08eb      	lsrs	r3, r5, #3
 8000e68:	e680      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000e6a:	4661      	mov	r1, ip
 8000e6c:	4339      	orrs	r1, r7
 8000e6e:	d054      	beq.n	8000f1a <__aeabi_dadd+0x642>
 8000e70:	4663      	mov	r3, ip
 8000e72:	08f9      	lsrs	r1, r7, #3
 8000e74:	075c      	lsls	r4, r3, #29
 8000e76:	4321      	orrs	r1, r4
 8000e78:	08db      	lsrs	r3, r3, #3
 8000e7a:	0004      	movs	r4, r0
 8000e7c:	e654      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000e7e:	464a      	mov	r2, r9
 8000e80:	1abd      	subs	r5, r7, r2
 8000e82:	42af      	cmp	r7, r5
 8000e84:	4189      	sbcs	r1, r1
 8000e86:	4662      	mov	r2, ip
 8000e88:	4249      	negs	r1, r1
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	4698      	mov	r8, r3
 8000e90:	0004      	movs	r4, r0
 8000e92:	2601      	movs	r6, #1
 8000e94:	e56b      	b.n	800096e <__aeabi_dadd+0x96>
 8000e96:	464a      	mov	r2, r9
 8000e98:	1bd5      	subs	r5, r2, r7
 8000e9a:	45a9      	cmp	r9, r5
 8000e9c:	4189      	sbcs	r1, r1
 8000e9e:	4662      	mov	r2, ip
 8000ea0:	4249      	negs	r1, r1
 8000ea2:	1a9a      	subs	r2, r3, r2
 8000ea4:	1a52      	subs	r2, r2, r1
 8000ea6:	4690      	mov	r8, r2
 8000ea8:	0212      	lsls	r2, r2, #8
 8000eaa:	d532      	bpl.n	8000f12 <__aeabi_dadd+0x63a>
 8000eac:	464a      	mov	r2, r9
 8000eae:	1abd      	subs	r5, r7, r2
 8000eb0:	42af      	cmp	r7, r5
 8000eb2:	4189      	sbcs	r1, r1
 8000eb4:	4662      	mov	r2, ip
 8000eb6:	4249      	negs	r1, r1
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	1a5b      	subs	r3, r3, r1
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	0004      	movs	r4, r0
 8000ec0:	e584      	b.n	80009cc <__aeabi_dadd+0xf4>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	08f9      	lsrs	r1, r7, #3
 8000ec6:	075a      	lsls	r2, r3, #29
 8000ec8:	4311      	orrs	r1, r2
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	e64e      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000ece:	08f9      	lsrs	r1, r7, #3
 8000ed0:	0768      	lsls	r0, r5, #29
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	08eb      	lsrs	r3, r5, #3
 8000ed6:	e624      	b.n	8000b22 <__aeabi_dadd+0x24a>
 8000ed8:	4662      	mov	r2, ip
 8000eda:	433a      	orrs	r2, r7
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dadd+0x608>
 8000ede:	e698      	b.n	8000c12 <__aeabi_dadd+0x33a>
 8000ee0:	464a      	mov	r2, r9
 8000ee2:	08d1      	lsrs	r1, r2, #3
 8000ee4:	075a      	lsls	r2, r3, #29
 8000ee6:	4311      	orrs	r1, r2
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	2380      	movs	r3, #128	; 0x80
 8000eec:	031b      	lsls	r3, r3, #12
 8000eee:	421a      	tst	r2, r3
 8000ef0:	d008      	beq.n	8000f04 <__aeabi_dadd+0x62c>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	08c5      	lsrs	r5, r0, #3
 8000ef6:	421d      	tst	r5, r3
 8000ef8:	d104      	bne.n	8000f04 <__aeabi_dadd+0x62c>
 8000efa:	4654      	mov	r4, sl
 8000efc:	002a      	movs	r2, r5
 8000efe:	08f9      	lsrs	r1, r7, #3
 8000f00:	0743      	lsls	r3, r0, #29
 8000f02:	4319      	orrs	r1, r3
 8000f04:	0f4b      	lsrs	r3, r1, #29
 8000f06:	00c9      	lsls	r1, r1, #3
 8000f08:	075b      	lsls	r3, r3, #29
 8000f0a:	08c9      	lsrs	r1, r1, #3
 8000f0c:	4319      	orrs	r1, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	e62c      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000f12:	4641      	mov	r1, r8
 8000f14:	4329      	orrs	r1, r5
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dadd+0x642>
 8000f18:	e5fa      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	000a      	movs	r2, r1
 8000f1e:	2400      	movs	r4, #0
 8000f20:	e602      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000f22:	076b      	lsls	r3, r5, #29
 8000f24:	08f9      	lsrs	r1, r7, #3
 8000f26:	4319      	orrs	r1, r3
 8000f28:	08eb      	lsrs	r3, r5, #3
 8000f2a:	e5fd      	b.n	8000b28 <__aeabi_dadd+0x250>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	08f9      	lsrs	r1, r7, #3
 8000f30:	075b      	lsls	r3, r3, #29
 8000f32:	4319      	orrs	r1, r3
 8000f34:	4663      	mov	r3, ip
 8000f36:	0004      	movs	r4, r0
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	e617      	b.n	8000b6c <__aeabi_dadd+0x294>
 8000f3c:	003d      	movs	r5, r7
 8000f3e:	444d      	add	r5, r9
 8000f40:	4463      	add	r3, ip
 8000f42:	454d      	cmp	r5, r9
 8000f44:	4189      	sbcs	r1, r1
 8000f46:	4698      	mov	r8, r3
 8000f48:	4249      	negs	r1, r1
 8000f4a:	4488      	add	r8, r1
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	d400      	bmi.n	8000f54 <__aeabi_dadd+0x67c>
 8000f52:	e5dd      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000f54:	4642      	mov	r2, r8
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <__aeabi_dadd+0x6d0>)
 8000f58:	2601      	movs	r6, #1
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	4690      	mov	r8, r2
 8000f5e:	e5d7      	b.n	8000b10 <__aeabi_dadd+0x238>
 8000f60:	0010      	movs	r0, r2
 8000f62:	001e      	movs	r6, r3
 8000f64:	3820      	subs	r0, #32
 8000f66:	40c6      	lsrs	r6, r0
 8000f68:	2a20      	cmp	r2, #32
 8000f6a:	d005      	beq.n	8000f78 <__aeabi_dadd+0x6a0>
 8000f6c:	2040      	movs	r0, #64	; 0x40
 8000f6e:	1a82      	subs	r2, r0, r2
 8000f70:	4093      	lsls	r3, r2
 8000f72:	464a      	mov	r2, r9
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	464d      	mov	r5, r9
 8000f7a:	1e6b      	subs	r3, r5, #1
 8000f7c:	419d      	sbcs	r5, r3
 8000f7e:	4335      	orrs	r5, r6
 8000f80:	e621      	b.n	8000bc6 <__aeabi_dadd+0x2ee>
 8000f82:	0002      	movs	r2, r0
 8000f84:	2300      	movs	r3, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	e540      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000f8a:	464a      	mov	r2, r9
 8000f8c:	19d5      	adds	r5, r2, r7
 8000f8e:	42bd      	cmp	r5, r7
 8000f90:	4189      	sbcs	r1, r1
 8000f92:	4463      	add	r3, ip
 8000f94:	4698      	mov	r8, r3
 8000f96:	4249      	negs	r1, r1
 8000f98:	4488      	add	r8, r1
 8000f9a:	e5b3      	b.n	8000b04 <__aeabi_dadd+0x22c>
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4a01      	ldr	r2, [pc, #4]	; (8000fa4 <__aeabi_dadd+0x6cc>)
 8000fa0:	000b      	movs	r3, r1
 8000fa2:	e533      	b.n	8000a0c <__aeabi_dadd+0x134>
 8000fa4:	000007ff 	.word	0x000007ff
 8000fa8:	ff7fffff 	.word	0xff7fffff

08000fac <__aeabi_dsub>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	4657      	mov	r7, sl
 8000fb0:	464e      	mov	r6, r9
 8000fb2:	4645      	mov	r5, r8
 8000fb4:	46de      	mov	lr, fp
 8000fb6:	0004      	movs	r4, r0
 8000fb8:	b5e0      	push	{r5, r6, r7, lr}
 8000fba:	001f      	movs	r7, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	030b      	lsls	r3, r1, #12
 8000fc0:	0f62      	lsrs	r2, r4, #29
 8000fc2:	004e      	lsls	r6, r1, #1
 8000fc4:	0fcd      	lsrs	r5, r1, #31
 8000fc6:	0a5b      	lsrs	r3, r3, #9
 8000fc8:	0339      	lsls	r1, r7, #12
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	0a49      	lsrs	r1, r1, #9
 8000fce:	00e2      	lsls	r2, r4, #3
 8000fd0:	0f44      	lsrs	r4, r0, #29
 8000fd2:	4321      	orrs	r1, r4
 8000fd4:	4cc2      	ldr	r4, [pc, #776]	; (80012e0 <__aeabi_dsub+0x334>)
 8000fd6:	4691      	mov	r9, r2
 8000fd8:	4692      	mov	sl, r2
 8000fda:	00c0      	lsls	r0, r0, #3
 8000fdc:	007a      	lsls	r2, r7, #1
 8000fde:	4680      	mov	r8, r0
 8000fe0:	0d76      	lsrs	r6, r6, #21
 8000fe2:	0d52      	lsrs	r2, r2, #21
 8000fe4:	0fff      	lsrs	r7, r7, #31
 8000fe6:	42a2      	cmp	r2, r4
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dsub+0x40>
 8000fea:	e0b4      	b.n	8001156 <__aeabi_dsub+0x1aa>
 8000fec:	2401      	movs	r4, #1
 8000fee:	4067      	eors	r7, r4
 8000ff0:	46bb      	mov	fp, r7
 8000ff2:	42bd      	cmp	r5, r7
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dsub+0x4c>
 8000ff6:	e088      	b.n	800110a <__aeabi_dsub+0x15e>
 8000ff8:	1ab4      	subs	r4, r6, r2
 8000ffa:	46a4      	mov	ip, r4
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	dc00      	bgt.n	8001002 <__aeabi_dsub+0x56>
 8001000:	e0b2      	b.n	8001168 <__aeabi_dsub+0x1bc>
 8001002:	2a00      	cmp	r2, #0
 8001004:	d100      	bne.n	8001008 <__aeabi_dsub+0x5c>
 8001006:	e0c5      	b.n	8001194 <__aeabi_dsub+0x1e8>
 8001008:	4ab5      	ldr	r2, [pc, #724]	; (80012e0 <__aeabi_dsub+0x334>)
 800100a:	4296      	cmp	r6, r2
 800100c:	d100      	bne.n	8001010 <__aeabi_dsub+0x64>
 800100e:	e28b      	b.n	8001528 <__aeabi_dsub+0x57c>
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0412      	lsls	r2, r2, #16
 8001014:	4311      	orrs	r1, r2
 8001016:	4662      	mov	r2, ip
 8001018:	2a38      	cmp	r2, #56	; 0x38
 800101a:	dd00      	ble.n	800101e <__aeabi_dsub+0x72>
 800101c:	e1a1      	b.n	8001362 <__aeabi_dsub+0x3b6>
 800101e:	2a1f      	cmp	r2, #31
 8001020:	dd00      	ble.n	8001024 <__aeabi_dsub+0x78>
 8001022:	e216      	b.n	8001452 <__aeabi_dsub+0x4a6>
 8001024:	2720      	movs	r7, #32
 8001026:	000c      	movs	r4, r1
 8001028:	1abf      	subs	r7, r7, r2
 800102a:	40bc      	lsls	r4, r7
 800102c:	0002      	movs	r2, r0
 800102e:	46a0      	mov	r8, r4
 8001030:	4664      	mov	r4, ip
 8001032:	40b8      	lsls	r0, r7
 8001034:	40e2      	lsrs	r2, r4
 8001036:	4644      	mov	r4, r8
 8001038:	4314      	orrs	r4, r2
 800103a:	0002      	movs	r2, r0
 800103c:	1e50      	subs	r0, r2, #1
 800103e:	4182      	sbcs	r2, r0
 8001040:	4660      	mov	r0, ip
 8001042:	40c1      	lsrs	r1, r0
 8001044:	4322      	orrs	r2, r4
 8001046:	1a5b      	subs	r3, r3, r1
 8001048:	4649      	mov	r1, r9
 800104a:	1a8c      	subs	r4, r1, r2
 800104c:	45a1      	cmp	r9, r4
 800104e:	4192      	sbcs	r2, r2
 8001050:	4252      	negs	r2, r2
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	4698      	mov	r8, r3
 8001056:	4643      	mov	r3, r8
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	d400      	bmi.n	800105e <__aeabi_dsub+0xb2>
 800105c:	e117      	b.n	800128e <__aeabi_dsub+0x2e2>
 800105e:	4643      	mov	r3, r8
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	0a5b      	lsrs	r3, r3, #9
 8001064:	4698      	mov	r8, r3
 8001066:	4643      	mov	r3, r8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d100      	bne.n	800106e <__aeabi_dsub+0xc2>
 800106c:	e16c      	b.n	8001348 <__aeabi_dsub+0x39c>
 800106e:	4640      	mov	r0, r8
 8001070:	f000 fbea 	bl	8001848 <__clzsi2>
 8001074:	0002      	movs	r2, r0
 8001076:	3a08      	subs	r2, #8
 8001078:	2120      	movs	r1, #32
 800107a:	0020      	movs	r0, r4
 800107c:	4643      	mov	r3, r8
 800107e:	1a89      	subs	r1, r1, r2
 8001080:	4093      	lsls	r3, r2
 8001082:	40c8      	lsrs	r0, r1
 8001084:	4094      	lsls	r4, r2
 8001086:	4303      	orrs	r3, r0
 8001088:	4296      	cmp	r6, r2
 800108a:	dd00      	ble.n	800108e <__aeabi_dsub+0xe2>
 800108c:	e157      	b.n	800133e <__aeabi_dsub+0x392>
 800108e:	1b96      	subs	r6, r2, r6
 8001090:	1c71      	adds	r1, r6, #1
 8001092:	291f      	cmp	r1, #31
 8001094:	dd00      	ble.n	8001098 <__aeabi_dsub+0xec>
 8001096:	e1cb      	b.n	8001430 <__aeabi_dsub+0x484>
 8001098:	2220      	movs	r2, #32
 800109a:	0018      	movs	r0, r3
 800109c:	0026      	movs	r6, r4
 800109e:	1a52      	subs	r2, r2, r1
 80010a0:	4094      	lsls	r4, r2
 80010a2:	4090      	lsls	r0, r2
 80010a4:	40ce      	lsrs	r6, r1
 80010a6:	40cb      	lsrs	r3, r1
 80010a8:	1e62      	subs	r2, r4, #1
 80010aa:	4194      	sbcs	r4, r2
 80010ac:	4330      	orrs	r0, r6
 80010ae:	4698      	mov	r8, r3
 80010b0:	2600      	movs	r6, #0
 80010b2:	4304      	orrs	r4, r0
 80010b4:	0763      	lsls	r3, r4, #29
 80010b6:	d009      	beq.n	80010cc <__aeabi_dsub+0x120>
 80010b8:	230f      	movs	r3, #15
 80010ba:	4023      	ands	r3, r4
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d005      	beq.n	80010cc <__aeabi_dsub+0x120>
 80010c0:	1d23      	adds	r3, r4, #4
 80010c2:	42a3      	cmp	r3, r4
 80010c4:	41a4      	sbcs	r4, r4
 80010c6:	4264      	negs	r4, r4
 80010c8:	44a0      	add	r8, r4
 80010ca:	001c      	movs	r4, r3
 80010cc:	4643      	mov	r3, r8
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	d400      	bmi.n	80010d4 <__aeabi_dsub+0x128>
 80010d2:	e0df      	b.n	8001294 <__aeabi_dsub+0x2e8>
 80010d4:	4b82      	ldr	r3, [pc, #520]	; (80012e0 <__aeabi_dsub+0x334>)
 80010d6:	3601      	adds	r6, #1
 80010d8:	429e      	cmp	r6, r3
 80010da:	d100      	bne.n	80010de <__aeabi_dsub+0x132>
 80010dc:	e0fb      	b.n	80012d6 <__aeabi_dsub+0x32a>
 80010de:	4642      	mov	r2, r8
 80010e0:	4b80      	ldr	r3, [pc, #512]	; (80012e4 <__aeabi_dsub+0x338>)
 80010e2:	08e4      	lsrs	r4, r4, #3
 80010e4:	401a      	ands	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	0571      	lsls	r1, r6, #21
 80010ea:	0752      	lsls	r2, r2, #29
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	4322      	orrs	r2, r4
 80010f0:	0b1b      	lsrs	r3, r3, #12
 80010f2:	0d49      	lsrs	r1, r1, #21
 80010f4:	0509      	lsls	r1, r1, #20
 80010f6:	07ed      	lsls	r5, r5, #31
 80010f8:	4319      	orrs	r1, r3
 80010fa:	4329      	orrs	r1, r5
 80010fc:	0010      	movs	r0, r2
 80010fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001100:	46bb      	mov	fp, r7
 8001102:	46b2      	mov	sl, r6
 8001104:	46a9      	mov	r9, r5
 8001106:	46a0      	mov	r8, r4
 8001108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110a:	1ab4      	subs	r4, r6, r2
 800110c:	46a4      	mov	ip, r4
 800110e:	2c00      	cmp	r4, #0
 8001110:	dd58      	ble.n	80011c4 <__aeabi_dsub+0x218>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dsub+0x16c>
 8001116:	e09e      	b.n	8001256 <__aeabi_dsub+0x2aa>
 8001118:	4a71      	ldr	r2, [pc, #452]	; (80012e0 <__aeabi_dsub+0x334>)
 800111a:	4296      	cmp	r6, r2
 800111c:	d100      	bne.n	8001120 <__aeabi_dsub+0x174>
 800111e:	e13b      	b.n	8001398 <__aeabi_dsub+0x3ec>
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	0412      	lsls	r2, r2, #16
 8001124:	4311      	orrs	r1, r2
 8001126:	4662      	mov	r2, ip
 8001128:	2a38      	cmp	r2, #56	; 0x38
 800112a:	dd00      	ble.n	800112e <__aeabi_dsub+0x182>
 800112c:	e0c1      	b.n	80012b2 <__aeabi_dsub+0x306>
 800112e:	2a1f      	cmp	r2, #31
 8001130:	dc00      	bgt.n	8001134 <__aeabi_dsub+0x188>
 8001132:	e1bb      	b.n	80014ac <__aeabi_dsub+0x500>
 8001134:	000c      	movs	r4, r1
 8001136:	3a20      	subs	r2, #32
 8001138:	40d4      	lsrs	r4, r2
 800113a:	0022      	movs	r2, r4
 800113c:	4664      	mov	r4, ip
 800113e:	2c20      	cmp	r4, #32
 8001140:	d004      	beq.n	800114c <__aeabi_dsub+0x1a0>
 8001142:	2740      	movs	r7, #64	; 0x40
 8001144:	1b3f      	subs	r7, r7, r4
 8001146:	40b9      	lsls	r1, r7
 8001148:	4308      	orrs	r0, r1
 800114a:	4680      	mov	r8, r0
 800114c:	4644      	mov	r4, r8
 800114e:	1e61      	subs	r1, r4, #1
 8001150:	418c      	sbcs	r4, r1
 8001152:	4314      	orrs	r4, r2
 8001154:	e0b1      	b.n	80012ba <__aeabi_dsub+0x30e>
 8001156:	000c      	movs	r4, r1
 8001158:	4304      	orrs	r4, r0
 800115a:	d02a      	beq.n	80011b2 <__aeabi_dsub+0x206>
 800115c:	46bb      	mov	fp, r7
 800115e:	42bd      	cmp	r5, r7
 8001160:	d02d      	beq.n	80011be <__aeabi_dsub+0x212>
 8001162:	4c61      	ldr	r4, [pc, #388]	; (80012e8 <__aeabi_dsub+0x33c>)
 8001164:	46a4      	mov	ip, r4
 8001166:	44b4      	add	ip, r6
 8001168:	4664      	mov	r4, ip
 800116a:	2c00      	cmp	r4, #0
 800116c:	d05c      	beq.n	8001228 <__aeabi_dsub+0x27c>
 800116e:	1b94      	subs	r4, r2, r6
 8001170:	46a4      	mov	ip, r4
 8001172:	2e00      	cmp	r6, #0
 8001174:	d000      	beq.n	8001178 <__aeabi_dsub+0x1cc>
 8001176:	e115      	b.n	80013a4 <__aeabi_dsub+0x3f8>
 8001178:	464d      	mov	r5, r9
 800117a:	431d      	orrs	r5, r3
 800117c:	d100      	bne.n	8001180 <__aeabi_dsub+0x1d4>
 800117e:	e1c3      	b.n	8001508 <__aeabi_dsub+0x55c>
 8001180:	1e65      	subs	r5, r4, #1
 8001182:	2c01      	cmp	r4, #1
 8001184:	d100      	bne.n	8001188 <__aeabi_dsub+0x1dc>
 8001186:	e20c      	b.n	80015a2 <__aeabi_dsub+0x5f6>
 8001188:	4e55      	ldr	r6, [pc, #340]	; (80012e0 <__aeabi_dsub+0x334>)
 800118a:	42b4      	cmp	r4, r6
 800118c:	d100      	bne.n	8001190 <__aeabi_dsub+0x1e4>
 800118e:	e1f8      	b.n	8001582 <__aeabi_dsub+0x5d6>
 8001190:	46ac      	mov	ip, r5
 8001192:	e10e      	b.n	80013b2 <__aeabi_dsub+0x406>
 8001194:	000a      	movs	r2, r1
 8001196:	4302      	orrs	r2, r0
 8001198:	d100      	bne.n	800119c <__aeabi_dsub+0x1f0>
 800119a:	e136      	b.n	800140a <__aeabi_dsub+0x45e>
 800119c:	0022      	movs	r2, r4
 800119e:	3a01      	subs	r2, #1
 80011a0:	2c01      	cmp	r4, #1
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dsub+0x1fa>
 80011a4:	e1c6      	b.n	8001534 <__aeabi_dsub+0x588>
 80011a6:	4c4e      	ldr	r4, [pc, #312]	; (80012e0 <__aeabi_dsub+0x334>)
 80011a8:	45a4      	cmp	ip, r4
 80011aa:	d100      	bne.n	80011ae <__aeabi_dsub+0x202>
 80011ac:	e0f4      	b.n	8001398 <__aeabi_dsub+0x3ec>
 80011ae:	4694      	mov	ip, r2
 80011b0:	e731      	b.n	8001016 <__aeabi_dsub+0x6a>
 80011b2:	2401      	movs	r4, #1
 80011b4:	4067      	eors	r7, r4
 80011b6:	46bb      	mov	fp, r7
 80011b8:	42bd      	cmp	r5, r7
 80011ba:	d000      	beq.n	80011be <__aeabi_dsub+0x212>
 80011bc:	e71c      	b.n	8000ff8 <__aeabi_dsub+0x4c>
 80011be:	4c4a      	ldr	r4, [pc, #296]	; (80012e8 <__aeabi_dsub+0x33c>)
 80011c0:	46a4      	mov	ip, r4
 80011c2:	44b4      	add	ip, r6
 80011c4:	4664      	mov	r4, ip
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x220>
 80011ca:	e0cf      	b.n	800136c <__aeabi_dsub+0x3c0>
 80011cc:	1b94      	subs	r4, r2, r6
 80011ce:	46a4      	mov	ip, r4
 80011d0:	2e00      	cmp	r6, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dsub+0x22a>
 80011d4:	e15c      	b.n	8001490 <__aeabi_dsub+0x4e4>
 80011d6:	4e42      	ldr	r6, [pc, #264]	; (80012e0 <__aeabi_dsub+0x334>)
 80011d8:	42b2      	cmp	r2, r6
 80011da:	d100      	bne.n	80011de <__aeabi_dsub+0x232>
 80011dc:	e1ec      	b.n	80015b8 <__aeabi_dsub+0x60c>
 80011de:	2680      	movs	r6, #128	; 0x80
 80011e0:	0436      	lsls	r6, r6, #16
 80011e2:	4333      	orrs	r3, r6
 80011e4:	4664      	mov	r4, ip
 80011e6:	2c38      	cmp	r4, #56	; 0x38
 80011e8:	dd00      	ble.n	80011ec <__aeabi_dsub+0x240>
 80011ea:	e1b3      	b.n	8001554 <__aeabi_dsub+0x5a8>
 80011ec:	2c1f      	cmp	r4, #31
 80011ee:	dd00      	ble.n	80011f2 <__aeabi_dsub+0x246>
 80011f0:	e238      	b.n	8001664 <__aeabi_dsub+0x6b8>
 80011f2:	2620      	movs	r6, #32
 80011f4:	1b36      	subs	r6, r6, r4
 80011f6:	001c      	movs	r4, r3
 80011f8:	40b4      	lsls	r4, r6
 80011fa:	464f      	mov	r7, r9
 80011fc:	46a0      	mov	r8, r4
 80011fe:	4664      	mov	r4, ip
 8001200:	40e7      	lsrs	r7, r4
 8001202:	4644      	mov	r4, r8
 8001204:	433c      	orrs	r4, r7
 8001206:	464f      	mov	r7, r9
 8001208:	40b7      	lsls	r7, r6
 800120a:	003e      	movs	r6, r7
 800120c:	1e77      	subs	r7, r6, #1
 800120e:	41be      	sbcs	r6, r7
 8001210:	4334      	orrs	r4, r6
 8001212:	4666      	mov	r6, ip
 8001214:	40f3      	lsrs	r3, r6
 8001216:	18c9      	adds	r1, r1, r3
 8001218:	1824      	adds	r4, r4, r0
 800121a:	4284      	cmp	r4, r0
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	4698      	mov	r8, r3
 8001222:	0016      	movs	r6, r2
 8001224:	4488      	add	r8, r1
 8001226:	e04e      	b.n	80012c6 <__aeabi_dsub+0x31a>
 8001228:	4a30      	ldr	r2, [pc, #192]	; (80012ec <__aeabi_dsub+0x340>)
 800122a:	1c74      	adds	r4, r6, #1
 800122c:	4214      	tst	r4, r2
 800122e:	d000      	beq.n	8001232 <__aeabi_dsub+0x286>
 8001230:	e0d6      	b.n	80013e0 <__aeabi_dsub+0x434>
 8001232:	464a      	mov	r2, r9
 8001234:	431a      	orrs	r2, r3
 8001236:	2e00      	cmp	r6, #0
 8001238:	d000      	beq.n	800123c <__aeabi_dsub+0x290>
 800123a:	e15b      	b.n	80014f4 <__aeabi_dsub+0x548>
 800123c:	2a00      	cmp	r2, #0
 800123e:	d100      	bne.n	8001242 <__aeabi_dsub+0x296>
 8001240:	e1a5      	b.n	800158e <__aeabi_dsub+0x5e2>
 8001242:	000a      	movs	r2, r1
 8001244:	4302      	orrs	r2, r0
 8001246:	d000      	beq.n	800124a <__aeabi_dsub+0x29e>
 8001248:	e1bb      	b.n	80015c2 <__aeabi_dsub+0x616>
 800124a:	464a      	mov	r2, r9
 800124c:	0759      	lsls	r1, r3, #29
 800124e:	08d2      	lsrs	r2, r2, #3
 8001250:	430a      	orrs	r2, r1
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	e027      	b.n	80012a6 <__aeabi_dsub+0x2fa>
 8001256:	000a      	movs	r2, r1
 8001258:	4302      	orrs	r2, r0
 800125a:	d100      	bne.n	800125e <__aeabi_dsub+0x2b2>
 800125c:	e174      	b.n	8001548 <__aeabi_dsub+0x59c>
 800125e:	0022      	movs	r2, r4
 8001260:	3a01      	subs	r2, #1
 8001262:	2c01      	cmp	r4, #1
 8001264:	d005      	beq.n	8001272 <__aeabi_dsub+0x2c6>
 8001266:	4c1e      	ldr	r4, [pc, #120]	; (80012e0 <__aeabi_dsub+0x334>)
 8001268:	45a4      	cmp	ip, r4
 800126a:	d100      	bne.n	800126e <__aeabi_dsub+0x2c2>
 800126c:	e094      	b.n	8001398 <__aeabi_dsub+0x3ec>
 800126e:	4694      	mov	ip, r2
 8001270:	e759      	b.n	8001126 <__aeabi_dsub+0x17a>
 8001272:	4448      	add	r0, r9
 8001274:	4548      	cmp	r0, r9
 8001276:	4192      	sbcs	r2, r2
 8001278:	185b      	adds	r3, r3, r1
 800127a:	4698      	mov	r8, r3
 800127c:	0004      	movs	r4, r0
 800127e:	4252      	negs	r2, r2
 8001280:	4490      	add	r8, r2
 8001282:	4643      	mov	r3, r8
 8001284:	2602      	movs	r6, #2
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	d500      	bpl.n	800128c <__aeabi_dsub+0x2e0>
 800128a:	e0c4      	b.n	8001416 <__aeabi_dsub+0x46a>
 800128c:	3e01      	subs	r6, #1
 800128e:	0763      	lsls	r3, r4, #29
 8001290:	d000      	beq.n	8001294 <__aeabi_dsub+0x2e8>
 8001292:	e711      	b.n	80010b8 <__aeabi_dsub+0x10c>
 8001294:	4643      	mov	r3, r8
 8001296:	46b4      	mov	ip, r6
 8001298:	0759      	lsls	r1, r3, #29
 800129a:	08e2      	lsrs	r2, r4, #3
 800129c:	430a      	orrs	r2, r1
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	490f      	ldr	r1, [pc, #60]	; (80012e0 <__aeabi_dsub+0x334>)
 80012a2:	458c      	cmp	ip, r1
 80012a4:	d040      	beq.n	8001328 <__aeabi_dsub+0x37c>
 80012a6:	4661      	mov	r1, ip
 80012a8:	031b      	lsls	r3, r3, #12
 80012aa:	0549      	lsls	r1, r1, #21
 80012ac:	0b1b      	lsrs	r3, r3, #12
 80012ae:	0d49      	lsrs	r1, r1, #21
 80012b0:	e720      	b.n	80010f4 <__aeabi_dsub+0x148>
 80012b2:	4301      	orrs	r1, r0
 80012b4:	000c      	movs	r4, r1
 80012b6:	1e61      	subs	r1, r4, #1
 80012b8:	418c      	sbcs	r4, r1
 80012ba:	444c      	add	r4, r9
 80012bc:	454c      	cmp	r4, r9
 80012be:	4192      	sbcs	r2, r2
 80012c0:	4252      	negs	r2, r2
 80012c2:	4690      	mov	r8, r2
 80012c4:	4498      	add	r8, r3
 80012c6:	4643      	mov	r3, r8
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	d5e0      	bpl.n	800128e <__aeabi_dsub+0x2e2>
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__aeabi_dsub+0x334>)
 80012ce:	3601      	adds	r6, #1
 80012d0:	429e      	cmp	r6, r3
 80012d2:	d000      	beq.n	80012d6 <__aeabi_dsub+0x32a>
 80012d4:	e09f      	b.n	8001416 <__aeabi_dsub+0x46a>
 80012d6:	0031      	movs	r1, r6
 80012d8:	2300      	movs	r3, #0
 80012da:	2200      	movs	r2, #0
 80012dc:	e70a      	b.n	80010f4 <__aeabi_dsub+0x148>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000007ff 	.word	0x000007ff
 80012e4:	ff7fffff 	.word	0xff7fffff
 80012e8:	fffff801 	.word	0xfffff801
 80012ec:	000007fe 	.word	0x000007fe
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dsub+0x34a>
 80012f4:	e160      	b.n	80015b8 <__aeabi_dsub+0x60c>
 80012f6:	000a      	movs	r2, r1
 80012f8:	4302      	orrs	r2, r0
 80012fa:	d04d      	beq.n	8001398 <__aeabi_dsub+0x3ec>
 80012fc:	464a      	mov	r2, r9
 80012fe:	075c      	lsls	r4, r3, #29
 8001300:	08d2      	lsrs	r2, r2, #3
 8001302:	4322      	orrs	r2, r4
 8001304:	2480      	movs	r4, #128	; 0x80
 8001306:	08db      	lsrs	r3, r3, #3
 8001308:	0324      	lsls	r4, r4, #12
 800130a:	4223      	tst	r3, r4
 800130c:	d007      	beq.n	800131e <__aeabi_dsub+0x372>
 800130e:	08ce      	lsrs	r6, r1, #3
 8001310:	4226      	tst	r6, r4
 8001312:	d104      	bne.n	800131e <__aeabi_dsub+0x372>
 8001314:	465d      	mov	r5, fp
 8001316:	0033      	movs	r3, r6
 8001318:	08c2      	lsrs	r2, r0, #3
 800131a:	0749      	lsls	r1, r1, #29
 800131c:	430a      	orrs	r2, r1
 800131e:	0f51      	lsrs	r1, r2, #29
 8001320:	00d2      	lsls	r2, r2, #3
 8001322:	08d2      	lsrs	r2, r2, #3
 8001324:	0749      	lsls	r1, r1, #29
 8001326:	430a      	orrs	r2, r1
 8001328:	0011      	movs	r1, r2
 800132a:	4319      	orrs	r1, r3
 800132c:	d100      	bne.n	8001330 <__aeabi_dsub+0x384>
 800132e:	e1c8      	b.n	80016c2 <__aeabi_dsub+0x716>
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	0309      	lsls	r1, r1, #12
 8001334:	430b      	orrs	r3, r1
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	49d5      	ldr	r1, [pc, #852]	; (8001690 <__aeabi_dsub+0x6e4>)
 800133a:	0b1b      	lsrs	r3, r3, #12
 800133c:	e6da      	b.n	80010f4 <__aeabi_dsub+0x148>
 800133e:	49d5      	ldr	r1, [pc, #852]	; (8001694 <__aeabi_dsub+0x6e8>)
 8001340:	1ab6      	subs	r6, r6, r2
 8001342:	400b      	ands	r3, r1
 8001344:	4698      	mov	r8, r3
 8001346:	e6b5      	b.n	80010b4 <__aeabi_dsub+0x108>
 8001348:	0020      	movs	r0, r4
 800134a:	f000 fa7d 	bl	8001848 <__clzsi2>
 800134e:	0002      	movs	r2, r0
 8001350:	3218      	adds	r2, #24
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dc00      	bgt.n	8001358 <__aeabi_dsub+0x3ac>
 8001356:	e68f      	b.n	8001078 <__aeabi_dsub+0xcc>
 8001358:	0023      	movs	r3, r4
 800135a:	3808      	subs	r0, #8
 800135c:	4083      	lsls	r3, r0
 800135e:	2400      	movs	r4, #0
 8001360:	e692      	b.n	8001088 <__aeabi_dsub+0xdc>
 8001362:	4308      	orrs	r0, r1
 8001364:	0002      	movs	r2, r0
 8001366:	1e50      	subs	r0, r2, #1
 8001368:	4182      	sbcs	r2, r0
 800136a:	e66d      	b.n	8001048 <__aeabi_dsub+0x9c>
 800136c:	4cca      	ldr	r4, [pc, #808]	; (8001698 <__aeabi_dsub+0x6ec>)
 800136e:	1c72      	adds	r2, r6, #1
 8001370:	4222      	tst	r2, r4
 8001372:	d000      	beq.n	8001376 <__aeabi_dsub+0x3ca>
 8001374:	e0ad      	b.n	80014d2 <__aeabi_dsub+0x526>
 8001376:	464a      	mov	r2, r9
 8001378:	431a      	orrs	r2, r3
 800137a:	2e00      	cmp	r6, #0
 800137c:	d1b8      	bne.n	80012f0 <__aeabi_dsub+0x344>
 800137e:	2a00      	cmp	r2, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x3d8>
 8001382:	e158      	b.n	8001636 <__aeabi_dsub+0x68a>
 8001384:	000a      	movs	r2, r1
 8001386:	4302      	orrs	r2, r0
 8001388:	d000      	beq.n	800138c <__aeabi_dsub+0x3e0>
 800138a:	e159      	b.n	8001640 <__aeabi_dsub+0x694>
 800138c:	464a      	mov	r2, r9
 800138e:	0759      	lsls	r1, r3, #29
 8001390:	08d2      	lsrs	r2, r2, #3
 8001392:	430a      	orrs	r2, r1
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	e786      	b.n	80012a6 <__aeabi_dsub+0x2fa>
 8001398:	464a      	mov	r2, r9
 800139a:	0759      	lsls	r1, r3, #29
 800139c:	08d2      	lsrs	r2, r2, #3
 800139e:	430a      	orrs	r2, r1
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	e7c1      	b.n	8001328 <__aeabi_dsub+0x37c>
 80013a4:	4dba      	ldr	r5, [pc, #744]	; (8001690 <__aeabi_dsub+0x6e4>)
 80013a6:	42aa      	cmp	r2, r5
 80013a8:	d100      	bne.n	80013ac <__aeabi_dsub+0x400>
 80013aa:	e11e      	b.n	80015ea <__aeabi_dsub+0x63e>
 80013ac:	2580      	movs	r5, #128	; 0x80
 80013ae:	042d      	lsls	r5, r5, #16
 80013b0:	432b      	orrs	r3, r5
 80013b2:	4664      	mov	r4, ip
 80013b4:	2c38      	cmp	r4, #56	; 0x38
 80013b6:	dc5d      	bgt.n	8001474 <__aeabi_dsub+0x4c8>
 80013b8:	2c1f      	cmp	r4, #31
 80013ba:	dd00      	ble.n	80013be <__aeabi_dsub+0x412>
 80013bc:	e0d0      	b.n	8001560 <__aeabi_dsub+0x5b4>
 80013be:	2520      	movs	r5, #32
 80013c0:	4667      	mov	r7, ip
 80013c2:	1b2d      	subs	r5, r5, r4
 80013c4:	464e      	mov	r6, r9
 80013c6:	001c      	movs	r4, r3
 80013c8:	40fe      	lsrs	r6, r7
 80013ca:	40ac      	lsls	r4, r5
 80013cc:	4334      	orrs	r4, r6
 80013ce:	464e      	mov	r6, r9
 80013d0:	40ae      	lsls	r6, r5
 80013d2:	0035      	movs	r5, r6
 80013d4:	40fb      	lsrs	r3, r7
 80013d6:	1e6e      	subs	r6, r5, #1
 80013d8:	41b5      	sbcs	r5, r6
 80013da:	1ac9      	subs	r1, r1, r3
 80013dc:	432c      	orrs	r4, r5
 80013de:	e04e      	b.n	800147e <__aeabi_dsub+0x4d2>
 80013e0:	464a      	mov	r2, r9
 80013e2:	1a14      	subs	r4, r2, r0
 80013e4:	45a1      	cmp	r9, r4
 80013e6:	4192      	sbcs	r2, r2
 80013e8:	4252      	negs	r2, r2
 80013ea:	4690      	mov	r8, r2
 80013ec:	1a5f      	subs	r7, r3, r1
 80013ee:	003a      	movs	r2, r7
 80013f0:	4647      	mov	r7, r8
 80013f2:	1bd2      	subs	r2, r2, r7
 80013f4:	4690      	mov	r8, r2
 80013f6:	0212      	lsls	r2, r2, #8
 80013f8:	d500      	bpl.n	80013fc <__aeabi_dsub+0x450>
 80013fa:	e08b      	b.n	8001514 <__aeabi_dsub+0x568>
 80013fc:	4642      	mov	r2, r8
 80013fe:	4322      	orrs	r2, r4
 8001400:	d000      	beq.n	8001404 <__aeabi_dsub+0x458>
 8001402:	e630      	b.n	8001066 <__aeabi_dsub+0xba>
 8001404:	2300      	movs	r3, #0
 8001406:	2500      	movs	r5, #0
 8001408:	e74d      	b.n	80012a6 <__aeabi_dsub+0x2fa>
 800140a:	464a      	mov	r2, r9
 800140c:	0759      	lsls	r1, r3, #29
 800140e:	08d2      	lsrs	r2, r2, #3
 8001410:	430a      	orrs	r2, r1
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	e744      	b.n	80012a0 <__aeabi_dsub+0x2f4>
 8001416:	4642      	mov	r2, r8
 8001418:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <__aeabi_dsub+0x6e8>)
 800141a:	0861      	lsrs	r1, r4, #1
 800141c:	401a      	ands	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	2201      	movs	r2, #1
 8001422:	4014      	ands	r4, r2
 8001424:	430c      	orrs	r4, r1
 8001426:	07da      	lsls	r2, r3, #31
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	4698      	mov	r8, r3
 800142c:	4314      	orrs	r4, r2
 800142e:	e641      	b.n	80010b4 <__aeabi_dsub+0x108>
 8001430:	001a      	movs	r2, r3
 8001432:	3e1f      	subs	r6, #31
 8001434:	40f2      	lsrs	r2, r6
 8001436:	0016      	movs	r6, r2
 8001438:	2920      	cmp	r1, #32
 800143a:	d003      	beq.n	8001444 <__aeabi_dsub+0x498>
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	1a51      	subs	r1, r2, r1
 8001440:	408b      	lsls	r3, r1
 8001442:	431c      	orrs	r4, r3
 8001444:	1e62      	subs	r2, r4, #1
 8001446:	4194      	sbcs	r4, r2
 8001448:	2300      	movs	r3, #0
 800144a:	4334      	orrs	r4, r6
 800144c:	4698      	mov	r8, r3
 800144e:	2600      	movs	r6, #0
 8001450:	e71d      	b.n	800128e <__aeabi_dsub+0x2e2>
 8001452:	000c      	movs	r4, r1
 8001454:	3a20      	subs	r2, #32
 8001456:	40d4      	lsrs	r4, r2
 8001458:	0022      	movs	r2, r4
 800145a:	4664      	mov	r4, ip
 800145c:	2c20      	cmp	r4, #32
 800145e:	d004      	beq.n	800146a <__aeabi_dsub+0x4be>
 8001460:	2740      	movs	r7, #64	; 0x40
 8001462:	1b3f      	subs	r7, r7, r4
 8001464:	40b9      	lsls	r1, r7
 8001466:	4308      	orrs	r0, r1
 8001468:	4680      	mov	r8, r0
 800146a:	4644      	mov	r4, r8
 800146c:	1e61      	subs	r1, r4, #1
 800146e:	418c      	sbcs	r4, r1
 8001470:	4322      	orrs	r2, r4
 8001472:	e5e9      	b.n	8001048 <__aeabi_dsub+0x9c>
 8001474:	464c      	mov	r4, r9
 8001476:	4323      	orrs	r3, r4
 8001478:	001c      	movs	r4, r3
 800147a:	1e63      	subs	r3, r4, #1
 800147c:	419c      	sbcs	r4, r3
 800147e:	1b04      	subs	r4, r0, r4
 8001480:	42a0      	cmp	r0, r4
 8001482:	419b      	sbcs	r3, r3
 8001484:	425b      	negs	r3, r3
 8001486:	1acb      	subs	r3, r1, r3
 8001488:	4698      	mov	r8, r3
 800148a:	465d      	mov	r5, fp
 800148c:	0016      	movs	r6, r2
 800148e:	e5e2      	b.n	8001056 <__aeabi_dsub+0xaa>
 8001490:	464e      	mov	r6, r9
 8001492:	431e      	orrs	r6, r3
 8001494:	d100      	bne.n	8001498 <__aeabi_dsub+0x4ec>
 8001496:	e0ae      	b.n	80015f6 <__aeabi_dsub+0x64a>
 8001498:	1e66      	subs	r6, r4, #1
 800149a:	2c01      	cmp	r4, #1
 800149c:	d100      	bne.n	80014a0 <__aeabi_dsub+0x4f4>
 800149e:	e0fd      	b.n	800169c <__aeabi_dsub+0x6f0>
 80014a0:	4f7b      	ldr	r7, [pc, #492]	; (8001690 <__aeabi_dsub+0x6e4>)
 80014a2:	42bc      	cmp	r4, r7
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dsub+0x4fc>
 80014a6:	e107      	b.n	80016b8 <__aeabi_dsub+0x70c>
 80014a8:	46b4      	mov	ip, r6
 80014aa:	e69b      	b.n	80011e4 <__aeabi_dsub+0x238>
 80014ac:	4664      	mov	r4, ip
 80014ae:	2220      	movs	r2, #32
 80014b0:	1b12      	subs	r2, r2, r4
 80014b2:	000c      	movs	r4, r1
 80014b4:	4094      	lsls	r4, r2
 80014b6:	0007      	movs	r7, r0
 80014b8:	4090      	lsls	r0, r2
 80014ba:	46a0      	mov	r8, r4
 80014bc:	4664      	mov	r4, ip
 80014be:	1e42      	subs	r2, r0, #1
 80014c0:	4190      	sbcs	r0, r2
 80014c2:	4662      	mov	r2, ip
 80014c4:	40e7      	lsrs	r7, r4
 80014c6:	4644      	mov	r4, r8
 80014c8:	40d1      	lsrs	r1, r2
 80014ca:	433c      	orrs	r4, r7
 80014cc:	4304      	orrs	r4, r0
 80014ce:	185b      	adds	r3, r3, r1
 80014d0:	e6f3      	b.n	80012ba <__aeabi_dsub+0x30e>
 80014d2:	4c6f      	ldr	r4, [pc, #444]	; (8001690 <__aeabi_dsub+0x6e4>)
 80014d4:	42a2      	cmp	r2, r4
 80014d6:	d100      	bne.n	80014da <__aeabi_dsub+0x52e>
 80014d8:	e0d5      	b.n	8001686 <__aeabi_dsub+0x6da>
 80014da:	4448      	add	r0, r9
 80014dc:	185b      	adds	r3, r3, r1
 80014de:	4548      	cmp	r0, r9
 80014e0:	4189      	sbcs	r1, r1
 80014e2:	4249      	negs	r1, r1
 80014e4:	185b      	adds	r3, r3, r1
 80014e6:	07dc      	lsls	r4, r3, #31
 80014e8:	0840      	lsrs	r0, r0, #1
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	4698      	mov	r8, r3
 80014ee:	0016      	movs	r6, r2
 80014f0:	4304      	orrs	r4, r0
 80014f2:	e6cc      	b.n	800128e <__aeabi_dsub+0x2e2>
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d000      	beq.n	80014fa <__aeabi_dsub+0x54e>
 80014f8:	e082      	b.n	8001600 <__aeabi_dsub+0x654>
 80014fa:	000a      	movs	r2, r1
 80014fc:	4302      	orrs	r2, r0
 80014fe:	d140      	bne.n	8001582 <__aeabi_dsub+0x5d6>
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	2500      	movs	r5, #0
 8001504:	031b      	lsls	r3, r3, #12
 8001506:	e713      	b.n	8001330 <__aeabi_dsub+0x384>
 8001508:	074b      	lsls	r3, r1, #29
 800150a:	08c2      	lsrs	r2, r0, #3
 800150c:	431a      	orrs	r2, r3
 800150e:	465d      	mov	r5, fp
 8001510:	08cb      	lsrs	r3, r1, #3
 8001512:	e6c5      	b.n	80012a0 <__aeabi_dsub+0x2f4>
 8001514:	464a      	mov	r2, r9
 8001516:	1a84      	subs	r4, r0, r2
 8001518:	42a0      	cmp	r0, r4
 800151a:	4192      	sbcs	r2, r2
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	4252      	negs	r2, r2
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	4698      	mov	r8, r3
 8001524:	465d      	mov	r5, fp
 8001526:	e59e      	b.n	8001066 <__aeabi_dsub+0xba>
 8001528:	464a      	mov	r2, r9
 800152a:	0759      	lsls	r1, r3, #29
 800152c:	08d2      	lsrs	r2, r2, #3
 800152e:	430a      	orrs	r2, r1
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	e6f9      	b.n	8001328 <__aeabi_dsub+0x37c>
 8001534:	464a      	mov	r2, r9
 8001536:	1a14      	subs	r4, r2, r0
 8001538:	45a1      	cmp	r9, r4
 800153a:	4192      	sbcs	r2, r2
 800153c:	1a5b      	subs	r3, r3, r1
 800153e:	4252      	negs	r2, r2
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	4698      	mov	r8, r3
 8001544:	2601      	movs	r6, #1
 8001546:	e586      	b.n	8001056 <__aeabi_dsub+0xaa>
 8001548:	464a      	mov	r2, r9
 800154a:	0759      	lsls	r1, r3, #29
 800154c:	08d2      	lsrs	r2, r2, #3
 800154e:	430a      	orrs	r2, r1
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	e6a5      	b.n	80012a0 <__aeabi_dsub+0x2f4>
 8001554:	464c      	mov	r4, r9
 8001556:	4323      	orrs	r3, r4
 8001558:	001c      	movs	r4, r3
 800155a:	1e63      	subs	r3, r4, #1
 800155c:	419c      	sbcs	r4, r3
 800155e:	e65b      	b.n	8001218 <__aeabi_dsub+0x26c>
 8001560:	4665      	mov	r5, ip
 8001562:	001e      	movs	r6, r3
 8001564:	3d20      	subs	r5, #32
 8001566:	40ee      	lsrs	r6, r5
 8001568:	2c20      	cmp	r4, #32
 800156a:	d005      	beq.n	8001578 <__aeabi_dsub+0x5cc>
 800156c:	2540      	movs	r5, #64	; 0x40
 800156e:	1b2d      	subs	r5, r5, r4
 8001570:	40ab      	lsls	r3, r5
 8001572:	464c      	mov	r4, r9
 8001574:	431c      	orrs	r4, r3
 8001576:	46a2      	mov	sl, r4
 8001578:	4654      	mov	r4, sl
 800157a:	1e63      	subs	r3, r4, #1
 800157c:	419c      	sbcs	r4, r3
 800157e:	4334      	orrs	r4, r6
 8001580:	e77d      	b.n	800147e <__aeabi_dsub+0x4d2>
 8001582:	074b      	lsls	r3, r1, #29
 8001584:	08c2      	lsrs	r2, r0, #3
 8001586:	431a      	orrs	r2, r3
 8001588:	465d      	mov	r5, fp
 800158a:	08cb      	lsrs	r3, r1, #3
 800158c:	e6cc      	b.n	8001328 <__aeabi_dsub+0x37c>
 800158e:	000a      	movs	r2, r1
 8001590:	4302      	orrs	r2, r0
 8001592:	d100      	bne.n	8001596 <__aeabi_dsub+0x5ea>
 8001594:	e736      	b.n	8001404 <__aeabi_dsub+0x458>
 8001596:	074b      	lsls	r3, r1, #29
 8001598:	08c2      	lsrs	r2, r0, #3
 800159a:	431a      	orrs	r2, r3
 800159c:	465d      	mov	r5, fp
 800159e:	08cb      	lsrs	r3, r1, #3
 80015a0:	e681      	b.n	80012a6 <__aeabi_dsub+0x2fa>
 80015a2:	464a      	mov	r2, r9
 80015a4:	1a84      	subs	r4, r0, r2
 80015a6:	42a0      	cmp	r0, r4
 80015a8:	4192      	sbcs	r2, r2
 80015aa:	1acb      	subs	r3, r1, r3
 80015ac:	4252      	negs	r2, r2
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	4698      	mov	r8, r3
 80015b2:	465d      	mov	r5, fp
 80015b4:	2601      	movs	r6, #1
 80015b6:	e54e      	b.n	8001056 <__aeabi_dsub+0xaa>
 80015b8:	074b      	lsls	r3, r1, #29
 80015ba:	08c2      	lsrs	r2, r0, #3
 80015bc:	431a      	orrs	r2, r3
 80015be:	08cb      	lsrs	r3, r1, #3
 80015c0:	e6b2      	b.n	8001328 <__aeabi_dsub+0x37c>
 80015c2:	464a      	mov	r2, r9
 80015c4:	1a14      	subs	r4, r2, r0
 80015c6:	45a1      	cmp	r9, r4
 80015c8:	4192      	sbcs	r2, r2
 80015ca:	1a5f      	subs	r7, r3, r1
 80015cc:	4252      	negs	r2, r2
 80015ce:	1aba      	subs	r2, r7, r2
 80015d0:	4690      	mov	r8, r2
 80015d2:	0212      	lsls	r2, r2, #8
 80015d4:	d56b      	bpl.n	80016ae <__aeabi_dsub+0x702>
 80015d6:	464a      	mov	r2, r9
 80015d8:	1a84      	subs	r4, r0, r2
 80015da:	42a0      	cmp	r0, r4
 80015dc:	4192      	sbcs	r2, r2
 80015de:	1acb      	subs	r3, r1, r3
 80015e0:	4252      	negs	r2, r2
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	4698      	mov	r8, r3
 80015e6:	465d      	mov	r5, fp
 80015e8:	e564      	b.n	80010b4 <__aeabi_dsub+0x108>
 80015ea:	074b      	lsls	r3, r1, #29
 80015ec:	08c2      	lsrs	r2, r0, #3
 80015ee:	431a      	orrs	r2, r3
 80015f0:	465d      	mov	r5, fp
 80015f2:	08cb      	lsrs	r3, r1, #3
 80015f4:	e698      	b.n	8001328 <__aeabi_dsub+0x37c>
 80015f6:	074b      	lsls	r3, r1, #29
 80015f8:	08c2      	lsrs	r2, r0, #3
 80015fa:	431a      	orrs	r2, r3
 80015fc:	08cb      	lsrs	r3, r1, #3
 80015fe:	e64f      	b.n	80012a0 <__aeabi_dsub+0x2f4>
 8001600:	000a      	movs	r2, r1
 8001602:	4302      	orrs	r2, r0
 8001604:	d090      	beq.n	8001528 <__aeabi_dsub+0x57c>
 8001606:	464a      	mov	r2, r9
 8001608:	075c      	lsls	r4, r3, #29
 800160a:	08d2      	lsrs	r2, r2, #3
 800160c:	4314      	orrs	r4, r2
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	0312      	lsls	r2, r2, #12
 8001614:	4213      	tst	r3, r2
 8001616:	d008      	beq.n	800162a <__aeabi_dsub+0x67e>
 8001618:	08ce      	lsrs	r6, r1, #3
 800161a:	4216      	tst	r6, r2
 800161c:	d105      	bne.n	800162a <__aeabi_dsub+0x67e>
 800161e:	08c0      	lsrs	r0, r0, #3
 8001620:	0749      	lsls	r1, r1, #29
 8001622:	4308      	orrs	r0, r1
 8001624:	0004      	movs	r4, r0
 8001626:	465d      	mov	r5, fp
 8001628:	0033      	movs	r3, r6
 800162a:	0f61      	lsrs	r1, r4, #29
 800162c:	00e2      	lsls	r2, r4, #3
 800162e:	0749      	lsls	r1, r1, #29
 8001630:	08d2      	lsrs	r2, r2, #3
 8001632:	430a      	orrs	r2, r1
 8001634:	e678      	b.n	8001328 <__aeabi_dsub+0x37c>
 8001636:	074b      	lsls	r3, r1, #29
 8001638:	08c2      	lsrs	r2, r0, #3
 800163a:	431a      	orrs	r2, r3
 800163c:	08cb      	lsrs	r3, r1, #3
 800163e:	e632      	b.n	80012a6 <__aeabi_dsub+0x2fa>
 8001640:	4448      	add	r0, r9
 8001642:	185b      	adds	r3, r3, r1
 8001644:	4548      	cmp	r0, r9
 8001646:	4192      	sbcs	r2, r2
 8001648:	4698      	mov	r8, r3
 800164a:	4252      	negs	r2, r2
 800164c:	4490      	add	r8, r2
 800164e:	4643      	mov	r3, r8
 8001650:	0004      	movs	r4, r0
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	d400      	bmi.n	8001658 <__aeabi_dsub+0x6ac>
 8001656:	e61a      	b.n	800128e <__aeabi_dsub+0x2e2>
 8001658:	4642      	mov	r2, r8
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <__aeabi_dsub+0x6e8>)
 800165c:	2601      	movs	r6, #1
 800165e:	401a      	ands	r2, r3
 8001660:	4690      	mov	r8, r2
 8001662:	e614      	b.n	800128e <__aeabi_dsub+0x2e2>
 8001664:	4666      	mov	r6, ip
 8001666:	001f      	movs	r7, r3
 8001668:	3e20      	subs	r6, #32
 800166a:	40f7      	lsrs	r7, r6
 800166c:	2c20      	cmp	r4, #32
 800166e:	d005      	beq.n	800167c <__aeabi_dsub+0x6d0>
 8001670:	2640      	movs	r6, #64	; 0x40
 8001672:	1b36      	subs	r6, r6, r4
 8001674:	40b3      	lsls	r3, r6
 8001676:	464c      	mov	r4, r9
 8001678:	431c      	orrs	r4, r3
 800167a:	46a2      	mov	sl, r4
 800167c:	4654      	mov	r4, sl
 800167e:	1e63      	subs	r3, r4, #1
 8001680:	419c      	sbcs	r4, r3
 8001682:	433c      	orrs	r4, r7
 8001684:	e5c8      	b.n	8001218 <__aeabi_dsub+0x26c>
 8001686:	0011      	movs	r1, r2
 8001688:	2300      	movs	r3, #0
 800168a:	2200      	movs	r2, #0
 800168c:	e532      	b.n	80010f4 <__aeabi_dsub+0x148>
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	000007ff 	.word	0x000007ff
 8001694:	ff7fffff 	.word	0xff7fffff
 8001698:	000007fe 	.word	0x000007fe
 800169c:	464a      	mov	r2, r9
 800169e:	1814      	adds	r4, r2, r0
 80016a0:	4284      	cmp	r4, r0
 80016a2:	4192      	sbcs	r2, r2
 80016a4:	185b      	adds	r3, r3, r1
 80016a6:	4698      	mov	r8, r3
 80016a8:	4252      	negs	r2, r2
 80016aa:	4490      	add	r8, r2
 80016ac:	e5e9      	b.n	8001282 <__aeabi_dsub+0x2d6>
 80016ae:	4642      	mov	r2, r8
 80016b0:	4322      	orrs	r2, r4
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dsub+0x70a>
 80016b4:	e6a6      	b.n	8001404 <__aeabi_dsub+0x458>
 80016b6:	e5ea      	b.n	800128e <__aeabi_dsub+0x2e2>
 80016b8:	074b      	lsls	r3, r1, #29
 80016ba:	08c2      	lsrs	r2, r0, #3
 80016bc:	431a      	orrs	r2, r3
 80016be:	08cb      	lsrs	r3, r1, #3
 80016c0:	e632      	b.n	8001328 <__aeabi_dsub+0x37c>
 80016c2:	2200      	movs	r2, #0
 80016c4:	4901      	ldr	r1, [pc, #4]	; (80016cc <__aeabi_dsub+0x720>)
 80016c6:	0013      	movs	r3, r2
 80016c8:	e514      	b.n	80010f4 <__aeabi_dsub+0x148>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__aeabi_d2iz>:
 80016d0:	000a      	movs	r2, r1
 80016d2:	b530      	push	{r4, r5, lr}
 80016d4:	4c13      	ldr	r4, [pc, #76]	; (8001724 <__aeabi_d2iz+0x54>)
 80016d6:	0053      	lsls	r3, r2, #1
 80016d8:	0309      	lsls	r1, r1, #12
 80016da:	0005      	movs	r5, r0
 80016dc:	0b09      	lsrs	r1, r1, #12
 80016de:	2000      	movs	r0, #0
 80016e0:	0d5b      	lsrs	r3, r3, #21
 80016e2:	0fd2      	lsrs	r2, r2, #31
 80016e4:	42a3      	cmp	r3, r4
 80016e6:	dd04      	ble.n	80016f2 <__aeabi_d2iz+0x22>
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <__aeabi_d2iz+0x58>)
 80016ea:	4283      	cmp	r3, r0
 80016ec:	dd02      	ble.n	80016f4 <__aeabi_d2iz+0x24>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <__aeabi_d2iz+0x5c>)
 80016f0:	18d0      	adds	r0, r2, r3
 80016f2:	bd30      	pop	{r4, r5, pc}
 80016f4:	2080      	movs	r0, #128	; 0x80
 80016f6:	0340      	lsls	r0, r0, #13
 80016f8:	4301      	orrs	r1, r0
 80016fa:	480d      	ldr	r0, [pc, #52]	; (8001730 <__aeabi_d2iz+0x60>)
 80016fc:	1ac0      	subs	r0, r0, r3
 80016fe:	281f      	cmp	r0, #31
 8001700:	dd08      	ble.n	8001714 <__aeabi_d2iz+0x44>
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <__aeabi_d2iz+0x64>)
 8001704:	1ac3      	subs	r3, r0, r3
 8001706:	40d9      	lsrs	r1, r3
 8001708:	000b      	movs	r3, r1
 800170a:	4258      	negs	r0, r3
 800170c:	2a00      	cmp	r2, #0
 800170e:	d1f0      	bne.n	80016f2 <__aeabi_d2iz+0x22>
 8001710:	0018      	movs	r0, r3
 8001712:	e7ee      	b.n	80016f2 <__aeabi_d2iz+0x22>
 8001714:	4c08      	ldr	r4, [pc, #32]	; (8001738 <__aeabi_d2iz+0x68>)
 8001716:	40c5      	lsrs	r5, r0
 8001718:	46a4      	mov	ip, r4
 800171a:	4463      	add	r3, ip
 800171c:	4099      	lsls	r1, r3
 800171e:	000b      	movs	r3, r1
 8001720:	432b      	orrs	r3, r5
 8001722:	e7f2      	b.n	800170a <__aeabi_d2iz+0x3a>
 8001724:	000003fe 	.word	0x000003fe
 8001728:	0000041d 	.word	0x0000041d
 800172c:	7fffffff 	.word	0x7fffffff
 8001730:	00000433 	.word	0x00000433
 8001734:	00000413 	.word	0x00000413
 8001738:	fffffbed 	.word	0xfffffbed

0800173c <__aeabi_f2d>:
 800173c:	b570      	push	{r4, r5, r6, lr}
 800173e:	0043      	lsls	r3, r0, #1
 8001740:	0246      	lsls	r6, r0, #9
 8001742:	0fc4      	lsrs	r4, r0, #31
 8001744:	20fe      	movs	r0, #254	; 0xfe
 8001746:	0e1b      	lsrs	r3, r3, #24
 8001748:	1c59      	adds	r1, r3, #1
 800174a:	0a75      	lsrs	r5, r6, #9
 800174c:	4208      	tst	r0, r1
 800174e:	d00c      	beq.n	800176a <__aeabi_f2d+0x2e>
 8001750:	22e0      	movs	r2, #224	; 0xe0
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4694      	mov	ip, r2
 8001756:	076d      	lsls	r5, r5, #29
 8001758:	0b36      	lsrs	r6, r6, #12
 800175a:	4463      	add	r3, ip
 800175c:	051b      	lsls	r3, r3, #20
 800175e:	4333      	orrs	r3, r6
 8001760:	07e4      	lsls	r4, r4, #31
 8001762:	4323      	orrs	r3, r4
 8001764:	0028      	movs	r0, r5
 8001766:	0019      	movs	r1, r3
 8001768:	bd70      	pop	{r4, r5, r6, pc}
 800176a:	2b00      	cmp	r3, #0
 800176c:	d114      	bne.n	8001798 <__aeabi_f2d+0x5c>
 800176e:	2d00      	cmp	r5, #0
 8001770:	d01b      	beq.n	80017aa <__aeabi_f2d+0x6e>
 8001772:	0028      	movs	r0, r5
 8001774:	f000 f868 	bl	8001848 <__clzsi2>
 8001778:	280a      	cmp	r0, #10
 800177a:	dc1c      	bgt.n	80017b6 <__aeabi_f2d+0x7a>
 800177c:	230b      	movs	r3, #11
 800177e:	002a      	movs	r2, r5
 8001780:	1a1b      	subs	r3, r3, r0
 8001782:	40da      	lsrs	r2, r3
 8001784:	0003      	movs	r3, r0
 8001786:	3315      	adds	r3, #21
 8001788:	409d      	lsls	r5, r3
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <__aeabi_f2d+0x88>)
 800178c:	0312      	lsls	r2, r2, #12
 800178e:	1a1b      	subs	r3, r3, r0
 8001790:	055b      	lsls	r3, r3, #21
 8001792:	0b16      	lsrs	r6, r2, #12
 8001794:	0d5b      	lsrs	r3, r3, #21
 8001796:	e7e1      	b.n	800175c <__aeabi_f2d+0x20>
 8001798:	2d00      	cmp	r5, #0
 800179a:	d009      	beq.n	80017b0 <__aeabi_f2d+0x74>
 800179c:	0b32      	lsrs	r2, r6, #12
 800179e:	2680      	movs	r6, #128	; 0x80
 80017a0:	0336      	lsls	r6, r6, #12
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <__aeabi_f2d+0x8c>)
 80017a4:	076d      	lsls	r5, r5, #29
 80017a6:	4316      	orrs	r6, r2
 80017a8:	e7d8      	b.n	800175c <__aeabi_f2d+0x20>
 80017aa:	2300      	movs	r3, #0
 80017ac:	2600      	movs	r6, #0
 80017ae:	e7d5      	b.n	800175c <__aeabi_f2d+0x20>
 80017b0:	2600      	movs	r6, #0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <__aeabi_f2d+0x8c>)
 80017b4:	e7d2      	b.n	800175c <__aeabi_f2d+0x20>
 80017b6:	0003      	movs	r3, r0
 80017b8:	002a      	movs	r2, r5
 80017ba:	3b0b      	subs	r3, #11
 80017bc:	409a      	lsls	r2, r3
 80017be:	2500      	movs	r5, #0
 80017c0:	e7e3      	b.n	800178a <__aeabi_f2d+0x4e>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	00000389 	.word	0x00000389
 80017c8:	000007ff 	.word	0x000007ff

080017cc <__aeabi_cdrcmple>:
 80017cc:	4684      	mov	ip, r0
 80017ce:	1c10      	adds	r0, r2, #0
 80017d0:	4662      	mov	r2, ip
 80017d2:	468c      	mov	ip, r1
 80017d4:	1c19      	adds	r1, r3, #0
 80017d6:	4663      	mov	r3, ip
 80017d8:	e000      	b.n	80017dc <__aeabi_cdcmpeq>
 80017da:	46c0      	nop			; (mov r8, r8)

080017dc <__aeabi_cdcmpeq>:
 80017dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017de:	f000 f90b 	bl	80019f8 <__ledf2>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d401      	bmi.n	80017ea <__aeabi_cdcmpeq+0xe>
 80017e6:	2100      	movs	r1, #0
 80017e8:	42c8      	cmn	r0, r1
 80017ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080017ec <__aeabi_dcmpeq>:
 80017ec:	b510      	push	{r4, lr}
 80017ee:	f000 f855 	bl	800189c <__eqdf2>
 80017f2:	4240      	negs	r0, r0
 80017f4:	3001      	adds	r0, #1
 80017f6:	bd10      	pop	{r4, pc}

080017f8 <__aeabi_dcmplt>:
 80017f8:	b510      	push	{r4, lr}
 80017fa:	f000 f8fd 	bl	80019f8 <__ledf2>
 80017fe:	2800      	cmp	r0, #0
 8001800:	db01      	blt.n	8001806 <__aeabi_dcmplt+0xe>
 8001802:	2000      	movs	r0, #0
 8001804:	bd10      	pop	{r4, pc}
 8001806:	2001      	movs	r0, #1
 8001808:	bd10      	pop	{r4, pc}
 800180a:	46c0      	nop			; (mov r8, r8)

0800180c <__aeabi_dcmple>:
 800180c:	b510      	push	{r4, lr}
 800180e:	f000 f8f3 	bl	80019f8 <__ledf2>
 8001812:	2800      	cmp	r0, #0
 8001814:	dd01      	ble.n	800181a <__aeabi_dcmple+0xe>
 8001816:	2000      	movs	r0, #0
 8001818:	bd10      	pop	{r4, pc}
 800181a:	2001      	movs	r0, #1
 800181c:	bd10      	pop	{r4, pc}
 800181e:	46c0      	nop			; (mov r8, r8)

08001820 <__aeabi_dcmpgt>:
 8001820:	b510      	push	{r4, lr}
 8001822:	f000 f877 	bl	8001914 <__gedf2>
 8001826:	2800      	cmp	r0, #0
 8001828:	dc01      	bgt.n	800182e <__aeabi_dcmpgt+0xe>
 800182a:	2000      	movs	r0, #0
 800182c:	bd10      	pop	{r4, pc}
 800182e:	2001      	movs	r0, #1
 8001830:	bd10      	pop	{r4, pc}
 8001832:	46c0      	nop			; (mov r8, r8)

08001834 <__aeabi_dcmpge>:
 8001834:	b510      	push	{r4, lr}
 8001836:	f000 f86d 	bl	8001914 <__gedf2>
 800183a:	2800      	cmp	r0, #0
 800183c:	da01      	bge.n	8001842 <__aeabi_dcmpge+0xe>
 800183e:	2000      	movs	r0, #0
 8001840:	bd10      	pop	{r4, pc}
 8001842:	2001      	movs	r0, #1
 8001844:	bd10      	pop	{r4, pc}
 8001846:	46c0      	nop			; (mov r8, r8)

08001848 <__clzsi2>:
 8001848:	211c      	movs	r1, #28
 800184a:	2301      	movs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	4298      	cmp	r0, r3
 8001850:	d301      	bcc.n	8001856 <__clzsi2+0xe>
 8001852:	0c00      	lsrs	r0, r0, #16
 8001854:	3910      	subs	r1, #16
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	4298      	cmp	r0, r3
 800185a:	d301      	bcc.n	8001860 <__clzsi2+0x18>
 800185c:	0a00      	lsrs	r0, r0, #8
 800185e:	3908      	subs	r1, #8
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	4298      	cmp	r0, r3
 8001864:	d301      	bcc.n	800186a <__clzsi2+0x22>
 8001866:	0900      	lsrs	r0, r0, #4
 8001868:	3904      	subs	r1, #4
 800186a:	a202      	add	r2, pc, #8	; (adr r2, 8001874 <__clzsi2+0x2c>)
 800186c:	5c10      	ldrb	r0, [r2, r0]
 800186e:	1840      	adds	r0, r0, r1
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	02020304 	.word	0x02020304
 8001878:	01010101 	.word	0x01010101
	...

08001884 <__clzdi2>:
 8001884:	b510      	push	{r4, lr}
 8001886:	2900      	cmp	r1, #0
 8001888:	d103      	bne.n	8001892 <__clzdi2+0xe>
 800188a:	f7ff ffdd 	bl	8001848 <__clzsi2>
 800188e:	3020      	adds	r0, #32
 8001890:	e002      	b.n	8001898 <__clzdi2+0x14>
 8001892:	1c08      	adds	r0, r1, #0
 8001894:	f7ff ffd8 	bl	8001848 <__clzsi2>
 8001898:	bd10      	pop	{r4, pc}
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <__eqdf2>:
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189e:	464f      	mov	r7, r9
 80018a0:	4646      	mov	r6, r8
 80018a2:	46d6      	mov	lr, sl
 80018a4:	4694      	mov	ip, r2
 80018a6:	4691      	mov	r9, r2
 80018a8:	031a      	lsls	r2, r3, #12
 80018aa:	0b12      	lsrs	r2, r2, #12
 80018ac:	4d18      	ldr	r5, [pc, #96]	; (8001910 <__eqdf2+0x74>)
 80018ae:	b5c0      	push	{r6, r7, lr}
 80018b0:	004c      	lsls	r4, r1, #1
 80018b2:	030f      	lsls	r7, r1, #12
 80018b4:	4692      	mov	sl, r2
 80018b6:	005a      	lsls	r2, r3, #1
 80018b8:	0006      	movs	r6, r0
 80018ba:	4680      	mov	r8, r0
 80018bc:	0b3f      	lsrs	r7, r7, #12
 80018be:	2001      	movs	r0, #1
 80018c0:	0d64      	lsrs	r4, r4, #21
 80018c2:	0fc9      	lsrs	r1, r1, #31
 80018c4:	0d52      	lsrs	r2, r2, #21
 80018c6:	0fdb      	lsrs	r3, r3, #31
 80018c8:	42ac      	cmp	r4, r5
 80018ca:	d00a      	beq.n	80018e2 <__eqdf2+0x46>
 80018cc:	42aa      	cmp	r2, r5
 80018ce:	d003      	beq.n	80018d8 <__eqdf2+0x3c>
 80018d0:	4294      	cmp	r4, r2
 80018d2:	d101      	bne.n	80018d8 <__eqdf2+0x3c>
 80018d4:	4557      	cmp	r7, sl
 80018d6:	d00d      	beq.n	80018f4 <__eqdf2+0x58>
 80018d8:	bce0      	pop	{r5, r6, r7}
 80018da:	46ba      	mov	sl, r7
 80018dc:	46b1      	mov	r9, r6
 80018de:	46a8      	mov	r8, r5
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	003d      	movs	r5, r7
 80018e4:	4335      	orrs	r5, r6
 80018e6:	d1f7      	bne.n	80018d8 <__eqdf2+0x3c>
 80018e8:	42a2      	cmp	r2, r4
 80018ea:	d1f5      	bne.n	80018d8 <__eqdf2+0x3c>
 80018ec:	4652      	mov	r2, sl
 80018ee:	4665      	mov	r5, ip
 80018f0:	432a      	orrs	r2, r5
 80018f2:	d1f1      	bne.n	80018d8 <__eqdf2+0x3c>
 80018f4:	2001      	movs	r0, #1
 80018f6:	45c8      	cmp	r8, r9
 80018f8:	d1ee      	bne.n	80018d8 <__eqdf2+0x3c>
 80018fa:	4299      	cmp	r1, r3
 80018fc:	d006      	beq.n	800190c <__eqdf2+0x70>
 80018fe:	2c00      	cmp	r4, #0
 8001900:	d1ea      	bne.n	80018d8 <__eqdf2+0x3c>
 8001902:	433e      	orrs	r6, r7
 8001904:	0030      	movs	r0, r6
 8001906:	1e46      	subs	r6, r0, #1
 8001908:	41b0      	sbcs	r0, r6
 800190a:	e7e5      	b.n	80018d8 <__eqdf2+0x3c>
 800190c:	2000      	movs	r0, #0
 800190e:	e7e3      	b.n	80018d8 <__eqdf2+0x3c>
 8001910:	000007ff 	.word	0x000007ff

08001914 <__gedf2>:
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	464e      	mov	r6, r9
 8001918:	4645      	mov	r5, r8
 800191a:	4657      	mov	r7, sl
 800191c:	46de      	mov	lr, fp
 800191e:	0004      	movs	r4, r0
 8001920:	0018      	movs	r0, r3
 8001922:	b5e0      	push	{r5, r6, r7, lr}
 8001924:	0016      	movs	r6, r2
 8001926:	031b      	lsls	r3, r3, #12
 8001928:	0b1b      	lsrs	r3, r3, #12
 800192a:	4d32      	ldr	r5, [pc, #200]	; (80019f4 <__gedf2+0xe0>)
 800192c:	030f      	lsls	r7, r1, #12
 800192e:	004a      	lsls	r2, r1, #1
 8001930:	4699      	mov	r9, r3
 8001932:	0043      	lsls	r3, r0, #1
 8001934:	46a4      	mov	ip, r4
 8001936:	46b0      	mov	r8, r6
 8001938:	0b3f      	lsrs	r7, r7, #12
 800193a:	0d52      	lsrs	r2, r2, #21
 800193c:	0fc9      	lsrs	r1, r1, #31
 800193e:	0d5b      	lsrs	r3, r3, #21
 8001940:	0fc0      	lsrs	r0, r0, #31
 8001942:	42aa      	cmp	r2, r5
 8001944:	d029      	beq.n	800199a <__gedf2+0x86>
 8001946:	42ab      	cmp	r3, r5
 8001948:	d018      	beq.n	800197c <__gedf2+0x68>
 800194a:	2a00      	cmp	r2, #0
 800194c:	d12a      	bne.n	80019a4 <__gedf2+0x90>
 800194e:	433c      	orrs	r4, r7
 8001950:	46a3      	mov	fp, r4
 8001952:	4265      	negs	r5, r4
 8001954:	4165      	adcs	r5, r4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <__gedf2+0x4c>
 800195a:	464c      	mov	r4, r9
 800195c:	4326      	orrs	r6, r4
 800195e:	d027      	beq.n	80019b0 <__gedf2+0x9c>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d115      	bne.n	8001990 <__gedf2+0x7c>
 8001964:	4281      	cmp	r1, r0
 8001966:	d028      	beq.n	80019ba <__gedf2+0xa6>
 8001968:	2002      	movs	r0, #2
 800196a:	3901      	subs	r1, #1
 800196c:	4008      	ands	r0, r1
 800196e:	3801      	subs	r0, #1
 8001970:	bcf0      	pop	{r4, r5, r6, r7}
 8001972:	46bb      	mov	fp, r7
 8001974:	46b2      	mov	sl, r6
 8001976:	46a9      	mov	r9, r5
 8001978:	46a0      	mov	r8, r4
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	464d      	mov	r5, r9
 800197e:	432e      	orrs	r6, r5
 8001980:	d12f      	bne.n	80019e2 <__gedf2+0xce>
 8001982:	2a00      	cmp	r2, #0
 8001984:	d1ee      	bne.n	8001964 <__gedf2+0x50>
 8001986:	433c      	orrs	r4, r7
 8001988:	4265      	negs	r5, r4
 800198a:	4165      	adcs	r5, r4
 800198c:	2d00      	cmp	r5, #0
 800198e:	d0e9      	beq.n	8001964 <__gedf2+0x50>
 8001990:	2800      	cmp	r0, #0
 8001992:	d1ed      	bne.n	8001970 <__gedf2+0x5c>
 8001994:	2001      	movs	r0, #1
 8001996:	4240      	negs	r0, r0
 8001998:	e7ea      	b.n	8001970 <__gedf2+0x5c>
 800199a:	003d      	movs	r5, r7
 800199c:	4325      	orrs	r5, r4
 800199e:	d120      	bne.n	80019e2 <__gedf2+0xce>
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d0eb      	beq.n	800197c <__gedf2+0x68>
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1dd      	bne.n	8001964 <__gedf2+0x50>
 80019a8:	464c      	mov	r4, r9
 80019aa:	4326      	orrs	r6, r4
 80019ac:	d1da      	bne.n	8001964 <__gedf2+0x50>
 80019ae:	e7db      	b.n	8001968 <__gedf2+0x54>
 80019b0:	465b      	mov	r3, fp
 80019b2:	2000      	movs	r0, #0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0db      	beq.n	8001970 <__gedf2+0x5c>
 80019b8:	e7d6      	b.n	8001968 <__gedf2+0x54>
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dc0a      	bgt.n	80019d4 <__gedf2+0xc0>
 80019be:	dbe7      	blt.n	8001990 <__gedf2+0x7c>
 80019c0:	454f      	cmp	r7, r9
 80019c2:	d8d1      	bhi.n	8001968 <__gedf2+0x54>
 80019c4:	d010      	beq.n	80019e8 <__gedf2+0xd4>
 80019c6:	2000      	movs	r0, #0
 80019c8:	454f      	cmp	r7, r9
 80019ca:	d2d1      	bcs.n	8001970 <__gedf2+0x5c>
 80019cc:	2900      	cmp	r1, #0
 80019ce:	d0e1      	beq.n	8001994 <__gedf2+0x80>
 80019d0:	0008      	movs	r0, r1
 80019d2:	e7cd      	b.n	8001970 <__gedf2+0x5c>
 80019d4:	4243      	negs	r3, r0
 80019d6:	4158      	adcs	r0, r3
 80019d8:	2302      	movs	r3, #2
 80019da:	4240      	negs	r0, r0
 80019dc:	4018      	ands	r0, r3
 80019de:	3801      	subs	r0, #1
 80019e0:	e7c6      	b.n	8001970 <__gedf2+0x5c>
 80019e2:	2002      	movs	r0, #2
 80019e4:	4240      	negs	r0, r0
 80019e6:	e7c3      	b.n	8001970 <__gedf2+0x5c>
 80019e8:	45c4      	cmp	ip, r8
 80019ea:	d8bd      	bhi.n	8001968 <__gedf2+0x54>
 80019ec:	2000      	movs	r0, #0
 80019ee:	45c4      	cmp	ip, r8
 80019f0:	d2be      	bcs.n	8001970 <__gedf2+0x5c>
 80019f2:	e7eb      	b.n	80019cc <__gedf2+0xb8>
 80019f4:	000007ff 	.word	0x000007ff

080019f8 <__ledf2>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	464e      	mov	r6, r9
 80019fc:	4645      	mov	r5, r8
 80019fe:	4657      	mov	r7, sl
 8001a00:	46de      	mov	lr, fp
 8001a02:	0004      	movs	r4, r0
 8001a04:	0018      	movs	r0, r3
 8001a06:	b5e0      	push	{r5, r6, r7, lr}
 8001a08:	0016      	movs	r6, r2
 8001a0a:	031b      	lsls	r3, r3, #12
 8001a0c:	0b1b      	lsrs	r3, r3, #12
 8001a0e:	4d31      	ldr	r5, [pc, #196]	; (8001ad4 <__ledf2+0xdc>)
 8001a10:	030f      	lsls	r7, r1, #12
 8001a12:	004a      	lsls	r2, r1, #1
 8001a14:	4699      	mov	r9, r3
 8001a16:	0043      	lsls	r3, r0, #1
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	46b0      	mov	r8, r6
 8001a1c:	0b3f      	lsrs	r7, r7, #12
 8001a1e:	0d52      	lsrs	r2, r2, #21
 8001a20:	0fc9      	lsrs	r1, r1, #31
 8001a22:	0d5b      	lsrs	r3, r3, #21
 8001a24:	0fc0      	lsrs	r0, r0, #31
 8001a26:	42aa      	cmp	r2, r5
 8001a28:	d011      	beq.n	8001a4e <__ledf2+0x56>
 8001a2a:	42ab      	cmp	r3, r5
 8001a2c:	d014      	beq.n	8001a58 <__ledf2+0x60>
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d12f      	bne.n	8001a92 <__ledf2+0x9a>
 8001a32:	433c      	orrs	r4, r7
 8001a34:	46a3      	mov	fp, r4
 8001a36:	4265      	negs	r5, r4
 8001a38:	4165      	adcs	r5, r4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d114      	bne.n	8001a68 <__ledf2+0x70>
 8001a3e:	464c      	mov	r4, r9
 8001a40:	4326      	orrs	r6, r4
 8001a42:	d111      	bne.n	8001a68 <__ledf2+0x70>
 8001a44:	465b      	mov	r3, fp
 8001a46:	2000      	movs	r0, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d017      	beq.n	8001a7c <__ledf2+0x84>
 8001a4c:	e010      	b.n	8001a70 <__ledf2+0x78>
 8001a4e:	003d      	movs	r5, r7
 8001a50:	4325      	orrs	r5, r4
 8001a52:	d112      	bne.n	8001a7a <__ledf2+0x82>
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d11c      	bne.n	8001a92 <__ledf2+0x9a>
 8001a58:	464d      	mov	r5, r9
 8001a5a:	432e      	orrs	r6, r5
 8001a5c:	d10d      	bne.n	8001a7a <__ledf2+0x82>
 8001a5e:	2a00      	cmp	r2, #0
 8001a60:	d104      	bne.n	8001a6c <__ledf2+0x74>
 8001a62:	433c      	orrs	r4, r7
 8001a64:	4265      	negs	r5, r4
 8001a66:	4165      	adcs	r5, r4
 8001a68:	2d00      	cmp	r5, #0
 8001a6a:	d10d      	bne.n	8001a88 <__ledf2+0x90>
 8001a6c:	4281      	cmp	r1, r0
 8001a6e:	d016      	beq.n	8001a9e <__ledf2+0xa6>
 8001a70:	2002      	movs	r0, #2
 8001a72:	3901      	subs	r1, #1
 8001a74:	4008      	ands	r0, r1
 8001a76:	3801      	subs	r0, #1
 8001a78:	e000      	b.n	8001a7c <__ledf2+0x84>
 8001a7a:	2002      	movs	r0, #2
 8001a7c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a7e:	46bb      	mov	fp, r7
 8001a80:	46b2      	mov	sl, r6
 8001a82:	46a9      	mov	r9, r5
 8001a84:	46a0      	mov	r8, r4
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d1f7      	bne.n	8001a7c <__ledf2+0x84>
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	e7f4      	b.n	8001a7c <__ledf2+0x84>
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ea      	bne.n	8001a6c <__ledf2+0x74>
 8001a96:	464c      	mov	r4, r9
 8001a98:	4326      	orrs	r6, r4
 8001a9a:	d1e7      	bne.n	8001a6c <__ledf2+0x74>
 8001a9c:	e7e8      	b.n	8001a70 <__ledf2+0x78>
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dd06      	ble.n	8001ab0 <__ledf2+0xb8>
 8001aa2:	4243      	negs	r3, r0
 8001aa4:	4158      	adcs	r0, r3
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	4240      	negs	r0, r0
 8001aaa:	4018      	ands	r0, r3
 8001aac:	3801      	subs	r0, #1
 8001aae:	e7e5      	b.n	8001a7c <__ledf2+0x84>
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbe9      	blt.n	8001a88 <__ledf2+0x90>
 8001ab4:	454f      	cmp	r7, r9
 8001ab6:	d8db      	bhi.n	8001a70 <__ledf2+0x78>
 8001ab8:	d006      	beq.n	8001ac8 <__ledf2+0xd0>
 8001aba:	2000      	movs	r0, #0
 8001abc:	454f      	cmp	r7, r9
 8001abe:	d2dd      	bcs.n	8001a7c <__ledf2+0x84>
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d0e3      	beq.n	8001a8c <__ledf2+0x94>
 8001ac4:	0008      	movs	r0, r1
 8001ac6:	e7d9      	b.n	8001a7c <__ledf2+0x84>
 8001ac8:	45c4      	cmp	ip, r8
 8001aca:	d8d1      	bhi.n	8001a70 <__ledf2+0x78>
 8001acc:	2000      	movs	r0, #0
 8001ace:	45c4      	cmp	ip, r8
 8001ad0:	d2d4      	bcs.n	8001a7c <__ledf2+0x84>
 8001ad2:	e7f5      	b.n	8001ac0 <__ledf2+0xc8>
 8001ad4:	000007ff 	.word	0x000007ff

08001ad8 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001adc:	2214      	movs	r2, #20
 8001ade:	2100      	movs	r1, #0
 8001ae0:	a80d      	add	r0, sp, #52	; 0x34
 8001ae2:	f002 fe92 	bl	800480a <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001ae6:	2210      	movs	r2, #16
 8001ae8:	2100      	movs	r1, #0
 8001aea:	a809      	add	r0, sp, #36	; 0x24
 8001aec:	f002 fe8d 	bl	800480a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	2210      	movs	r2, #16
 8001af2:	2100      	movs	r1, #0
 8001af4:	a805      	add	r0, sp, #20
 8001af6:	f002 fe88 	bl	800480a <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <MX_ADC_Init+0x154>)
 8001afc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001afe:	2080      	movs	r0, #128	; 0x80
 8001b00:	0080      	lsls	r0, r0, #2
 8001b02:	4301      	orrs	r1, r0
 8001b04:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	4002      	ands	r2, r0
 8001b0a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b0c:	9a02      	ldr	r2, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	2701      	movs	r7, #1
 8001b12:	433a      	orrs	r2, r7
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	403b      	ands	r3, r7
 8001b1a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b1c:	9b01      	ldr	r3, [sp, #4]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001b1e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b24:	2500      	movs	r5, #0
 8001b26:	9507      	str	r5, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	3861      	subs	r0, #97	; 0x61
 8001b2a:	38ff      	subs	r0, #255	; 0xff
 8001b2c:	a903      	add	r1, sp, #12
 8001b2e:	05c0      	lsls	r0, r0, #23
 8001b30:	f002 fb1c 	bl	800416c <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b34:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <MX_ADC_Init+0x158>)
 8001b36:	21c3      	movs	r1, #195	; 0xc3
 8001b38:	0089      	lsls	r1, r1, #2
 8001b3a:	585a      	ldr	r2, [r3, r1]
 8001b3c:	20ff      	movs	r0, #255	; 0xff
 8001b3e:	4382      	bics	r2, r0
 8001b40:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0152      	lsls	r2, r2, #5
 8001b46:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b48:	4c3a      	ldr	r4, [pc, #232]	; (8001c34 <MX_ADC_Init+0x15c>)
 8001b4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b4c:	433b      	orrs	r3, r7
 8001b4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	02db      	lsls	r3, r3, #11
 8001b56:	4313      	orrs	r3, r2
 8001b58:	62a3      	str	r3, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b5a:	4e37      	ldr	r6, [pc, #220]	; (8001c38 <MX_ADC_Init+0x160>)
 8001b5c:	6830      	ldr	r0, [r6, #0]
 8001b5e:	4a37      	ldr	r2, [pc, #220]	; (8001c3c <MX_ADC_Init+0x164>)
 8001b60:	4010      	ands	r0, r2
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0409      	lsls	r1, r1, #16
 8001b66:	4301      	orrs	r1, r0
 8001b68:	6031      	str	r1, [r6, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	0289      	lsls	r1, r1, #10
 8001b70:	4319      	orrs	r1, r3
 8001b72:	62a1      	str	r1, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b74:	6833      	ldr	r3, [r6, #0]
 8001b76:	401a      	ands	r2, r3
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	03db      	lsls	r3, r3, #15
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	6033      	str	r3, [r6, #0]
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);
  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b80:	950d      	str	r5, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	025b      	lsls	r3, r3, #9
 8001b86:	930e      	str	r3, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001b88:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001b8a:	9510      	str	r5, [sp, #64]	; 0x40
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001b8c:	9511      	str	r5, [sp, #68]	; 0x44
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b8e:	a90d      	add	r1, sp, #52	; 0x34
 8001b90:	0020      	movs	r0, r4
 8001b92:	f002 fa6f 	bl	8004074 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001b96:	6963      	ldr	r3, [r4, #20]
 8001b98:	2207      	movs	r2, #7
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	3a02      	subs	r2, #2
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	6163      	str	r3, [r4, #20]
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	43bb      	bics	r3, r7
 8001ba6:	431f      	orrs	r7, r3
 8001ba8:	6127      	str	r7, [r4, #16]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8001baa:	6923      	ldr	r3, [r4, #16]
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <MX_ADC_Init+0x168>)
 8001bae:	401a      	ands	r2, r3
 8001bb0:	238e      	movs	r3, #142	; 0x8e
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
 8001bb8:	6923      	ldr	r3, [r4, #16]
 8001bba:	4a22      	ldr	r2, [pc, #136]	; (8001c44 <MX_ADC_Init+0x16c>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001bc0:	68e3      	ldr	r3, [r4, #12]
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	438b      	bics	r3, r1
 8001bc6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8001bc8:	6833      	ldr	r3, [r6, #0]
 8001bca:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <MX_ADC_Init+0x170>)
 8001bcc:	401a      	ands	r2, r3
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	049b      	lsls	r3, r3, #18
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6033      	str	r3, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001bd6:	6863      	ldr	r3, [r4, #4]
 8001bd8:	438b      	bics	r3, r1
 8001bda:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	2208      	movs	r2, #8
 8001be0:	4393      	bics	r3, r2
 8001be2:	6063      	str	r3, [r4, #4]
  LL_ADC_SetOverSamplingDiscont(ADC1, LL_ADC_OVS_REG_CONT);
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
  LL_ADC_DisableIT_EOC(ADC1);
  LL_ADC_DisableIT_EOS(ADC1);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	061b      	lsls	r3, r3, #24
 8001be8:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001bea:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001bec:	950b      	str	r5, [sp, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001bee:	950c      	str	r5, [sp, #48]	; 0x30
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001bf0:	a909      	add	r1, sp, #36	; 0x24
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f002 fa24 	bl	8004040 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8001bf8:	68a3      	ldr	r3, [r4, #8]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <MX_ADC_Init+0x174>)
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	055b      	lsls	r3, r3, #21
 8001c02:	4313      	orrs	r3, r2
 8001c04:	60a3      	str	r3, [r4, #8]
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_ADC_Init+0x178>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <MX_ADC_Init+0x17c>)
 8001c0c:	f7fe fa8e 	bl	800012c <__udivsi3>
 8001c10:	0003      	movs	r3, r0
 8001c12:	0080      	lsls	r0, r0, #2
 8001c14:	18c0      	adds	r0, r0, r3
 8001c16:	0040      	lsls	r0, r0, #1
 8001c18:	210a      	movs	r1, #10
 8001c1a:	f7fe fa87 	bl	800012c <__udivsi3>
  while(wait_loop_index != 0)
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_ADC_Init+0x14e>
  {
    wait_loop_index--;
 8001c22:	3801      	subs	r0, #1
 8001c24:	e7fb      	b.n	8001c1e <MX_ADC_Init+0x146>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c26:	b013      	add	sp, #76	; 0x4c
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	40012400 	.word	0x40012400
 8001c38:	40012708 	.word	0x40012708
 8001c3c:	ff3fffff 	.word	0xff3fffff
 8001c40:	fffffe03 	.word	0xfffffe03
 8001c44:	fffffdff 	.word	0xfffffdff
 8001c48:	fdffffff 	.word	0xfdffffff
 8001c4c:	6fffffe8 	.word	0x6fffffe8
 8001c50:	2000001c 	.word	0x2000001c
 8001c54:	00030d40 	.word	0x00030d40

08001c58 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 8001c58:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <MX_CRC_Init+0x40>)
 8001c5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c5e:	2080      	movs	r0, #128	; 0x80
 8001c60:	0140      	lsls	r0, r0, #5
 8001c62:	4301      	orrs	r1, r0
 8001c64:	6311      	str	r1, [r2, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c68:	4003      	ands	r3, r0
 8001c6a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c6c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_CRC_Init+0x44>)
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	2160      	movs	r1, #96	; 0x60
 8001c74:	438a      	bics	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	3120      	adds	r1, #32
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 8001c80:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <MX_CRC_Init+0x48>)
 8001c82:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	3968      	subs	r1, #104	; 0x68
 8001c88:	438a      	bics	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4252      	negs	r2, r2
 8001c90:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c92:	b002      	add	sp, #8
 8001c94:	4770      	bx	lr
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40023000 	.word	0x40023000
 8001ca0:	04c11db7 	.word	0x04c11db7

08001ca4 <CalcCRC>:

/* USER CODE BEGIN 1 */

uint32_t CalcCRC(uint32_t* buff, uint8_t len){
 8001ca4:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <CalcCRC+0x28>)
 8001ca8:	6893      	ldr	r3, [r2, #8]
 8001caa:	2401      	movs	r4, #1
 8001cac:	4323      	orrs	r3, r4
 8001cae:	6093      	str	r3, [r2, #8]
  uint8_t i;
  uint32_t tmp;

  LL_CRC_ResetCRCCalculationUnit(CRC);

  for(i = 0; i < len; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	428b      	cmp	r3, r1
 8001cb4:	d206      	bcs.n	8001cc4 <CalcCRC+0x20>
    LL_CRC_FeedData32(CRC,buff[i]);
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	5884      	ldr	r4, [r0, r2]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <CalcCRC+0x28>)
 8001cbc:	6014      	str	r4, [r2, #0]
  for(i = 0; i < len; i++){
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	e7f6      	b.n	8001cb2 <CalcCRC+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 8001cc4:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <CalcCRC+0x28>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
  }

  tmp = LL_CRC_ReadData32(CRC);
  return(tmp);

}
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40023000 	.word	0x40023000

08001cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	46d6      	mov	lr, sl
 8001cd4:	464f      	mov	r7, r9
 8001cd6:	4646      	mov	r6, r8
 8001cd8:	b5c0      	push	{r6, r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001cdc:	ae0a      	add	r6, sp, #40	; 0x28
 8001cde:	2308      	movs	r3, #8
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	0030      	movs	r0, r6
 8001ce8:	f002 fd8f 	bl	800480a <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	2400      	movs	r4, #0
 8001cee:	9409      	str	r4, [sp, #36]	; 0x24
  SET_BIT(RCC->IOPENR, Periphs);
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <MX_GPIO_Init+0xd0>)
 8001cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001cfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001d00:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	2501      	movs	r5, #1
 8001d06:	432a      	orrs	r2, r5
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	402a      	ands	r2, r5
 8001d0e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001d10:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	2102      	movs	r1, #2
 8001d16:	4688      	mov	r8, r1
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	400b      	ands	r3, r1
 8001d20:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d22:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d24:	27a0      	movs	r7, #160	; 0xa0
 8001d26:	05ff      	lsls	r7, r7, #23
 8001d28:	464b      	mov	r3, r9
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_GPIO_Init+0xd4>)
 8001d2e:	469a      	mov	sl, r3
 8001d30:	6199      	str	r1, [r3, #24]

  /**/
  LL_GPIO_SetOutputPin(HEAT_GPIO_Port, HEAT_Pin);

  /**/
  GPIO_InitStruct.Pin = TURN_ON_IR_Pin;
 8001d32:	464b      	mov	r3, r9
 8001d34:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d36:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d38:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d3c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(TURN_ON_IR_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	a904      	add	r1, sp, #16
 8001d40:	0038      	movs	r0, r7
 8001d42:	f002 fa13 	bl	800416c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HEAT_Pin;
 8001d46:	4643      	mov	r3, r8
 8001d48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d4a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d4c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d50:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(HEAT_GPIO_Port, &GPIO_InitStruct);
 8001d52:	a904      	add	r1, sp, #16
 8001d54:	4650      	mov	r0, sl
 8001d56:	f002 fa09 	bl	800416c <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8001d5a:	4a13      	ldr	r2, [pc, #76]	; (8001da8 <MX_GPIO_Init+0xd8>)
 8001d5c:	68d3      	ldr	r3, [r2, #12]
 8001d5e:	210f      	movs	r1, #15
 8001d60:	438b      	bics	r3, r1
 8001d62:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4911      	ldr	r1, [pc, #68]	; (8001dac <MX_GPIO_Init+0xdc>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	60fa      	str	r2, [r7, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	400b      	ands	r3, r1
 8001d70:	603b      	str	r3, [r7, #0]

  /**/
  LL_GPIO_SetPinMode(RDY_ADS1115_GPIO_Port, RDY_ADS1115_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8001d72:	2310      	movs	r3, #16
 8001d74:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 8001d76:	7135      	strb	r5, [r6, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001d78:	7174      	strb	r4, [r6, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001d7a:	71b5      	strb	r5, [r6, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001d7c:	0030      	movs	r0, r6
 8001d7e:	f002 f991 	bl	80040a4 <LL_EXTI_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <MX_GPIO_Init+0xe0>)
 8001d84:	21c1      	movs	r1, #193	; 0xc1
 8001d86:	0089      	lsls	r1, r1, #2
 8001d88:	5853      	ldr	r3, [r2, r1]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 8001d94:	b00c      	add	sp, #48	; 0x30
 8001d96:	bce0      	pop	{r5, r6, r7}
 8001d98:	46ba      	mov	sl, r7
 8001d9a:	46b1      	mov	r9, r6
 8001d9c:	46a8      	mov	r8, r5
 8001d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	50000400 	.word	0x50000400
 8001da8:	40010000 	.word	0x40010000
 8001dac:	fffffcff 	.word	0xfffffcff
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46c6      	mov	lr, r8
 8001db8:	b500      	push	{lr}
 8001dba:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001dbc:	221c      	movs	r2, #28
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	a809      	add	r0, sp, #36	; 0x24
 8001dc2:	f002 fd22 	bl	800480a <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8001dc6:	4c2a      	ldr	r4, [pc, #168]	; (8001e70 <MX_I2C1_Init+0xbc>)
 8001dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dca:	2602      	movs	r6, #2
 8001dcc:	4333      	orrs	r3, r6
 8001dce:	62e3      	str	r3, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dd2:	4033      	ands	r3, r6
 8001dd4:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001dd6:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001dd8:	2340      	movs	r3, #64	; 0x40
 8001dda:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ddc:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dde:	3b3d      	subs	r3, #61	; 0x3d
 8001de0:	4698      	mov	r8, r3
 8001de2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001de4:	2501      	movs	r5, #1
 8001de6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001de8:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001dea:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	4f21      	ldr	r7, [pc, #132]	; (8001e74 <MX_I2C1_Init+0xc0>)
 8001dee:	a903      	add	r1, sp, #12
 8001df0:	0038      	movs	r0, r7
 8001df2:	f002 f9bb 	bl	800416c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dfa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001e00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e02:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001e04:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e06:	a903      	add	r1, sp, #12
 8001e08:	0038      	movs	r0, r7
 8001e0a:	f002 f9af 	bl	800416c <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0389      	lsls	r1, r1, #14
 8001e14:	430a      	orrs	r2, r1
 8001e16:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001e1e:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001e20:	4c15      	ldr	r4, [pc, #84]	; (8001e78 <MX_I2C1_Init+0xc4>)
 8001e22:	6862      	ldr	r2, [r4, #4]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	049b      	lsls	r3, r3, #18
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001e2c:	68e3      	ldr	r3, [r4, #12]
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <MX_I2C1_Init+0xc8>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_I2C1_Init+0xcc>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <MX_I2C1_Init+0xd0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	6023      	str	r3, [r4, #0]
  */
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001e44:	2300      	movs	r3, #0
 8001e46:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0000061E;
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <MX_I2C1_Init+0xd4>)
 8001e4a:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001e4c:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 8001e4e:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 8001e50:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001e52:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001e54:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001e56:	a909      	add	r1, sp, #36	; 0x24
 8001e58:	0020      	movs	r0, r4
 8001e5a:	f002 f9df 	bl	800421c <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001e5e:	68e3      	ldr	r3, [r4, #12]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <MX_I2C1_Init+0xd8>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	60e3      	str	r3, [r4, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e66:	b010      	add	sp, #64	; 0x40
 8001e68:	bc80      	pop	{r7}
 8001e6a:	46b8      	mov	r8, r7
 8001e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	40021000 	.word	0x40021000
 8001e74:	50000400 	.word	0x50000400
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	ffff7fff 	.word	0xffff7fff
 8001e80:	fff7ffff 	.word	0xfff7ffff
 8001e84:	fffdffff 	.word	0xfffdffff
 8001e88:	0000061e 	.word	0x0000061e
 8001e8c:	fffff801 	.word	0xfffff801

08001e90 <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001e90:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_LPTIM1_Init+0x70>)
 8001e94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e96:	2280      	movs	r2, #128	; 0x80
 8001e98:	0612      	lsls	r2, r2, #24
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	0fdb      	lsrs	r3, r3, #31
 8001ea2:	07db      	lsls	r3, r3, #31
 8001ea4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ea6:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_LPTIM1_Init+0x74>)
 8001eaa:	21c3      	movs	r1, #195	; 0xc3
 8001eac:	0089      	lsls	r1, r1, #2
 8001eae:	585a      	ldr	r2, [r3, r1]
 8001eb0:	4815      	ldr	r0, [pc, #84]	; (8001f08 <MX_LPTIM1_Init+0x78>)
 8001eb2:	4002      	ands	r2, r0
 8001eb4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	0192      	lsls	r2, r2, #6
 8001eba:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <MX_LPTIM1_Init+0x7c>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	438a      	bics	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4911      	ldr	r1, [pc, #68]	; (8001f10 <MX_LPTIM1_Init+0x80>)
 8001eca:	4011      	ands	r1, r2
 8001ecc:	22e0      	movs	r2, #224	; 0xe0
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	490f      	ldr	r1, [pc, #60]	; (8001f14 <MX_LPTIM1_Init+0x84>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <MX_LPTIM1_Init+0x88>)
 8001ee0:	4011      	ands	r1, r2
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	03d2      	lsls	r2, r2, #15
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	490b      	ldr	r1, [pc, #44]	; (8001f1c <MX_LPTIM1_Init+0x8c>)
 8001eee:	400a      	ands	r2, r1
 8001ef0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	490a      	ldr	r1, [pc, #40]	; (8001f20 <MX_LPTIM1_Init+0x90>)
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
  LL_LPTIM_TrigSw(LPTIM1);
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001efa:	b002      	add	sp, #8
 8001efc:	4770      	bx	lr
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40021000 	.word	0x40021000
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	ffff00ff 	.word	0xffff00ff
 8001f0c:	40007c00 	.word	0x40007c00
 8001f10:	fffff1ff 	.word	0xfffff1ff
 8001f14:	ffdfffff 	.word	0xffdfffff
 8001f18:	ffbfffff 	.word	0xffbfffff
 8001f1c:	ff7fffff 	.word	0xff7fffff
 8001f20:	fff9ffff 	.word	0xfff9ffff

08001f24 <printUID>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printUID(void){
 8001f24:	b500      	push	{lr}
 8001f26:	b087      	sub	sp, #28
#ifdef DEBUG_MY
	uint32_t *idBase = (uint32_t*)(UID_BASE);
	uint8_t s[4];
	int i;
	//memcpy(s0,(uint8_t*)idBase0,3);
	for(i = 0; i < 3; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e008      	b.n	8001f3e <printUID+0x1a>
		s[2-i] = (*idBase >> (8 * i)) & 0xff;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <printUID+0x5c>)
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	00da      	lsls	r2, r3, #3
 8001f32:	40d1      	lsrs	r1, r2
 8001f34:	2202      	movs	r2, #2
 8001f36:	1ad2      	subs	r2, r2, r3
 8001f38:	a805      	add	r0, sp, #20
 8001f3a:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 3; i++)
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	ddf4      	ble.n	8001f2c <printUID+0x8>
	s[3]= 0;
 8001f42:	ab05      	add	r3, sp, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	70da      	strb	r2, [r3, #3]

	uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
	uint8_t s2[5];

	for(i = 0; i < 4; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e008      	b.n	8001f5e <printUID+0x3a>
		s2[3-i] = (*idBase2 >> (8 * i)) & 0xff;
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <printUID+0x60>)
 8001f4e:	6811      	ldr	r1, [r2, #0]
 8001f50:	00da      	lsls	r2, r3, #3
 8001f52:	40d1      	lsrs	r1, r2
 8001f54:	2203      	movs	r2, #3
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	a803      	add	r0, sp, #12
 8001f5a:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 4; i++)
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	ddf4      	ble.n	8001f4c <printUID+0x28>
	s2[4]= 0;
 8001f62:	ab03      	add	r3, sp, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	711a      	strb	r2, [r3, #4]

	idBase = (uint32_t*)(UID_BASE + 0x14);

	d_printf("\n\rUID %02X-\"%s\"-\"%s\"-%08lx", (*idBase >> 24) & 0xff, s, s2, *idBase2);
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <printUID+0x64>)
 8001f6a:	78d1      	ldrb	r1, [r2, #3]
 8001f6c:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <printUID+0x60>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	9200      	str	r2, [sp, #0]
 8001f72:	aa05      	add	r2, sp, #20
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <printUID+0x68>)
 8001f76:	f000 fda9 	bl	8002acc <d_printf>
#endif
}
 8001f7a:	b007      	add	sp, #28
 8001f7c:	bd00      	pop	{pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	1ff80050 	.word	0x1ff80050
 8001f84:	1ff80054 	.word	0x1ff80054
 8001f88:	1ff80064 	.word	0x1ff80064
 8001f8c:	080050d8 	.word	0x080050d8

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001f92:	4a36      	ldr	r2, [pc, #216]	; (800206c <SystemClock_Config+0xdc>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	438b      	bics	r3, r1
 8001f9a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001f9c:	4b33      	ldr	r3, [pc, #204]	; (800206c <SystemClock_Config+0xdc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001fa0:	07db      	lsls	r3, r3, #31
 8001fa2:	d4fb      	bmi.n	8001f9c <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001fa4:	4932      	ldr	r1, [pc, #200]	; (8002070 <SystemClock_Config+0xe0>)
 8001fa6:	680b      	ldr	r3, [r1, #0]
 8001fa8:	4a32      	ldr	r2, [pc, #200]	; (8002074 <SystemClock_Config+0xe4>)
 8001faa:	401a      	ands	r2, r3
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001fb4:	4a30      	ldr	r2, [pc, #192]	; (8002078 <SystemClock_Config+0xe8>)
 8001fb6:	6811      	ldr	r1, [r2, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <SystemClock_Config+0xe8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	059b      	lsls	r3, r3, #22
 8001fc6:	d5fb      	bpl.n	8001fc0 <SystemClock_Config+0x30>
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <SystemClock_Config+0xe8>)
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	492b      	ldr	r1, [pc, #172]	; (800207c <SystemClock_Config+0xec>)
 8001fce:	4011      	ands	r1, r2
 8001fd0:	22a0      	movs	r2, #160	; 0xa0
 8001fd2:	0212      	lsls	r2, r2, #8
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	0212      	lsls	r2, r2, #8
 8001fdc:	0a12      	lsrs	r2, r2, #8
 8001fde:	605a      	str	r2, [r3, #4]
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe0:	4823      	ldr	r0, [pc, #140]	; (8002070 <SystemClock_Config+0xe0>)
 8001fe2:	6801      	ldr	r1, [r0, #0]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	6001      	str	r1, [r0, #0]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8001fec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fee:	4821      	ldr	r0, [pc, #132]	; (8002074 <SystemClock_Config+0xe4>)
 8001ff0:	4001      	ands	r1, r0
 8001ff2:	6519      	str	r1, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8001ff4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <SystemClock_Config+0xe8>)
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	059b      	lsls	r3, r3, #22
 8002000:	d5fb      	bpl.n	8001ffa <SystemClock_Config+0x6a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <SystemClock_Config+0xe8>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	21f0      	movs	r1, #240	; 0xf0
 8002008:	438a      	bics	r2, r1
 800200a:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	491c      	ldr	r1, [pc, #112]	; (8002080 <SystemClock_Config+0xf0>)
 8002010:	400a      	ands	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	491b      	ldr	r1, [pc, #108]	; (8002084 <SystemClock_Config+0xf4>)
 8002018:	400a      	ands	r2, r1
 800201a:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	2103      	movs	r1, #3
 8002020:	438a      	bics	r2, r1
 8002022:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <SystemClock_Config+0xe8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	220c      	movs	r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800202a:	421a      	tst	r2, r3
 800202c:	d1fa      	bne.n	8002024 <SystemClock_Config+0x94>
  {

  }

  LL_Init1msTick(2097000);
 800202e:	4c16      	ldr	r4, [pc, #88]	; (8002088 <SystemClock_Config+0xf8>)
 8002030:	0020      	movs	r0, r4
 8002032:	f002 fb8d 	bl	8004750 <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8002036:	0020      	movs	r0, r4
 8002038:	f002 fbae 	bl	8004798 <LL_SetSystemCoreClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <SystemClock_Config+0xe8>)
 800203e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002040:	210c      	movs	r1, #12
 8002042:	438a      	bics	r2, r1
 8002044:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002048:	4910      	ldr	r1, [pc, #64]	; (800208c <SystemClock_Config+0xfc>)
 800204a:	4011      	ands	r1, r2
 800204c:	22c0      	movs	r2, #192	; 0xc0
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	430a      	orrs	r2, r1
 8002052:	64da      	str	r2, [r3, #76]	; 0x4c
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8002054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <SystemClock_Config+0x100>)
 8002058:	400a      	ands	r2, r1
 800205a:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 800205c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205e:	490d      	ldr	r1, [pc, #52]	; (8002094 <SystemClock_Config+0x104>)
 8002060:	4011      	ands	r1, r2
 8002062:	22c0      	movs	r2, #192	; 0xc0
 8002064:	0312      	lsls	r2, r2, #12
 8002066:	430a      	orrs	r2, r1
 8002068:	64da      	str	r2, [r3, #76]	; 0x4c
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_LSE);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
}
 800206a:	bd10      	pop	{r4, pc}
 800206c:	40022000 	.word	0x40022000
 8002070:	40007000 	.word	0x40007000
 8002074:	ffffe7ff 	.word	0xffffe7ff
 8002078:	40021000 	.word	0x40021000
 800207c:	ffff1fff 	.word	0xffff1fff
 8002080:	fffff8ff 	.word	0xfffff8ff
 8002084:	ffffc7ff 	.word	0xffffc7ff
 8002088:	001fff68 	.word	0x001fff68
 800208c:	fffff3ff 	.word	0xfffff3ff
 8002090:	ffffcfff 	.word	0xffffcfff
 8002094:	fff3ffff 	.word	0xfff3ffff

08002098 <main>:
{
 8002098:	b530      	push	{r4, r5, lr}
 800209a:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 800209c:	4b66      	ldr	r3, [pc, #408]	; (8002238 <main+0x1a0>)
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	2201      	movs	r2, #1
 80020a2:	4311      	orrs	r1, r2
 80020a4:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a8:	400a      	ands	r2, r1
 80020aa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80020ac:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0549      	lsls	r1, r1, #21
 80020b4:	430a      	orrs	r2, r1
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	400b      	ands	r3, r1
 80020bc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80020be:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 80020c0:	f7ff ff66 	bl	8001f90 <SystemClock_Config>
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <main+0x1a4>)
 80020c6:	6813      	ldr	r3, [r2, #0]
 80020c8:	2102      	movs	r1, #2
 80020ca:	430b      	orrs	r3, r1
 80020cc:	6013      	str	r3, [r2, #0]
  MX_GPIO_Init();
 80020ce:	f7ff fdff 	bl	8001cd0 <MX_GPIO_Init>
  MX_ADC_Init();
 80020d2:	f7ff fd01 	bl	8001ad8 <MX_ADC_Init>
  MX_I2C1_Init();
 80020d6:	f7ff fe6d 	bl	8001db4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80020da:	f000 fa4d 	bl	8002578 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 80020de:	f000 fac1 	bl	8002664 <MX_USART2_UART_Init>
  MX_TIM22_Init();
 80020e2:	f000 f9eb 	bl	80024bc <MX_TIM22_Init>
  MX_CRC_Init();
 80020e6:	f7ff fdb7 	bl	8001c58 <MX_CRC_Init>
  MX_TIM21_Init();
 80020ea:	f000 f991 	bl	8002410 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 80020ee:	f7ff fecf 	bl	8001e90 <MX_LPTIM1_Init>
  MX_TIM2_Init();
 80020f2:	f000 f95b 	bl	80023ac <MX_TIM2_Init>
  	debug_init();
 80020f6:	f000 fcb5 	bl	8002a64 <debug_init>
	d_printf("\n\r\n\r%s %s", date, time);
 80020fa:	4a51      	ldr	r2, [pc, #324]	; (8002240 <main+0x1a8>)
 80020fc:	4951      	ldr	r1, [pc, #324]	; (8002244 <main+0x1ac>)
 80020fe:	4852      	ldr	r0, [pc, #328]	; (8002248 <main+0x1b0>)
 8002100:	f000 fce4 	bl	8002acc <d_printf>
	printUID();
 8002104:	f7ff ff0e 	bl	8001f24 <printUID>
	ADC1_COMMON->CCR |= LL_ADC_PATH_INTERNAL_TEMPSENSOR;
 8002108:	4a50      	ldr	r2, [pc, #320]	; (800224c <main+0x1b4>)
 800210a:	6811      	ldr	r1, [r2, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	430b      	orrs	r3, r1
 8002112:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002114:	494e      	ldr	r1, [pc, #312]	; (8002250 <main+0x1b8>)
 8002116:	688b      	ldr	r3, [r1, #8]
 8002118:	4a4e      	ldr	r2, [pc, #312]	; (8002254 <main+0x1bc>)
 800211a:	401a      	ands	r2, r3
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <main+0x1b8>)
 8002126:	689b      	ldr	r3, [r3, #8]
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8002128:	2b00      	cmp	r3, #0
 800212a:	dbfb      	blt.n	8002124 <main+0x8c>
	LL_mDelay(2);
 800212c:	2002      	movs	r0, #2
 800212e:	f002 fb1f 	bl	8004770 <LL_mDelay>
	read_config_from_eeprom();
 8002132:	f000 fe23 	bl	8002d7c <read_config_from_eeprom>
	dev_init();
 8002136:	f001 fa3d 	bl	80035b4 <dev_init>
	d_printf("\n\rSN %09lu", dev.Config.Serial);
 800213a:	4c47      	ldr	r4, [pc, #284]	; (8002258 <main+0x1c0>)
 800213c:	23e4      	movs	r3, #228	; 0xe4
 800213e:	58e1      	ldr	r1, [r4, r3]
 8002140:	4846      	ldr	r0, [pc, #280]	; (800225c <main+0x1c4>)
 8002142:	f000 fcc3 	bl	8002acc <d_printf>
	d_printf("\n\r");
 8002146:	4846      	ldr	r0, [pc, #280]	; (8002260 <main+0x1c8>)
 8002148:	f000 fcc0 	bl	8002acc <d_printf>
	SET_TURN_ON;
 800214c:	23a0      	movs	r3, #160	; 0xa0
 800214e:	05db      	lsls	r3, r3, #23
 8002150:	2208      	movs	r2, #8
 8002152:	619a      	str	r2, [r3, #24]
	LL_mDelay(500);
 8002154:	20fa      	movs	r0, #250	; 0xfa
 8002156:	0040      	lsls	r0, r0, #1
 8002158:	f002 fb0a 	bl	8004770 <LL_mDelay>
	modbus_init();
 800215c:	f000 ff94 	bl	8003088 <modbus_init>
	ADS_Init(dev.Config.FID);
 8002160:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8002162:	f001 f909 	bl	8003378 <ADS_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	05d2      	lsls	r2, r2, #23
 800216a:	6813      	ldr	r3, [r2, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	430b      	orrs	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002172:	4837      	ldr	r0, [pc, #220]	; (8002250 <main+0x1b8>)
 8002174:	6883      	ldr	r3, [r0, #8]
 8002176:	4a37      	ldr	r2, [pc, #220]	; (8002254 <main+0x1bc>)
 8002178:	4013      	ands	r3, r2
 800217a:	430b      	orrs	r3, r1
 800217c:	6083      	str	r3, [r0, #8]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800217e:	6843      	ldr	r3, [r0, #4]
 8002180:	2404      	movs	r4, #4
 8002182:	4323      	orrs	r3, r4
 8002184:	6043      	str	r3, [r0, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8002186:	4a37      	ldr	r2, [pc, #220]	; (8002264 <main+0x1cc>)
 8002188:	68d3      	ldr	r3, [r2, #12]
 800218a:	2502      	movs	r5, #2
 800218c:	432b      	orrs	r3, r5
 800218e:	60d3      	str	r3, [r2, #12]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8002190:	4b35      	ldr	r3, [pc, #212]	; (8002268 <main+0x1d0>)
 8002192:	6918      	ldr	r0, [r3, #16]
 8002194:	4308      	orrs	r0, r1
 8002196:	6118      	str	r0, [r3, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	0c12      	lsrs	r2, r2, #16
 800219c:	0412      	lsls	r2, r2, #16
 800219e:	430a      	orrs	r2, r1
 80021a0:	619a      	str	r2, [r3, #24]
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	4329      	orrs	r1, r5
 80021a6:	6099      	str	r1, [r3, #8]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	2106      	movs	r1, #6
 80021ac:	438a      	bics	r2, r1
 80021ae:	4322      	orrs	r2, r4
 80021b0:	611a      	str	r2, [r3, #16]
	HourTimer = CntSec;
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <main+0x1d4>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <main+0x1d8>)
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e01c      	b.n	80021f6 <main+0x15e>
			f_Time500ms = FALSE;
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <main+0x1dc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
			dev_proc();
 80021c2:	f001 fa71 	bl	80036a8 <dev_proc>
 80021c6:	e01e      	b.n	8002206 <main+0x16e>
			f_Time250ms = FALSE;
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <main+0x1e0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80021ce:	4a20      	ldr	r2, [pc, #128]	; (8002250 <main+0x1b8>)
 80021d0:	6893      	ldr	r3, [r2, #8]
 80021d2:	4920      	ldr	r1, [pc, #128]	; (8002254 <main+0x1bc>)
 80021d4:	400b      	ands	r3, r1
 80021d6:	2104      	movs	r1, #4
 80021d8:	430b      	orrs	r3, r1
 80021da:	6093      	str	r3, [r2, #8]
		if(f_AdcCycleEnd){
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <main+0x1e4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <main+0x178>
		if((uint32_t)(CntSec - HourTimer) >= SEC_PER_MHOUR){
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <main+0x1d4>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <main+0x1d8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	21e1      	movs	r1, #225	; 0xe1
 80021f0:	0109      	lsls	r1, r1, #4
 80021f2:	428b      	cmp	r3, r1
 80021f4:	d212      	bcs.n	800221c <main+0x184>
		mb_proc();
 80021f6:	f001 fea9 	bl	8003f4c <mb_proc>
		heat_proc();
 80021fa:	f001 f9fd 	bl	80035f8 <heat_proc>
		if(f_Time500ms){
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <main+0x1dc>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1da      	bne.n	80021bc <main+0x124>
		if(f_Time250ms){
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <main+0x1e0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0e6      	beq.n	80021dc <main+0x144>
 800220e:	e7db      	b.n	80021c8 <main+0x130>
			f_AdcCycleEnd = FALSE;
 8002210:	4b1a      	ldr	r3, [pc, #104]	; (800227c <main+0x1e4>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
			Adc_read_data();
 8002216:	f001 faa7 	bl	8003768 <Adc_read_data>
 800221a:	e7e3      	b.n	80021e4 <main+0x14c>
			HourTimer = CntSec;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <main+0x1d8>)
 800221e:	601a      	str	r2, [r3, #0]
			arh.MHour++;
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <main+0x1e8>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	1c50      	adds	r0, r2, #1
 8002226:	6018      	str	r0, [r3, #0]
			if((arh.MHour % 24) == 0){
 8002228:	2118      	movs	r1, #24
 800222a:	f7fe f805 	bl	8000238 <__aeabi_uidivmod>
 800222e:	2900      	cmp	r1, #0
 8002230:	d1e1      	bne.n	80021f6 <main+0x15e>
				DayArhivStore();
 8002232:	f000 fa89 	bl	8002748 <DayArhivStore>
 8002236:	e7de      	b.n	80021f6 <main+0x15e>
 8002238:	40021000 	.word	0x40021000
 800223c:	e000e010 	.word	0xe000e010
 8002240:	20000010 	.word	0x20000010
 8002244:	20000000 	.word	0x20000000
 8002248:	080050f4 	.word	0x080050f4
 800224c:	40012708 	.word	0x40012708
 8002250:	40012400 	.word	0x40012400
 8002254:	7fffffe8 	.word	0x7fffffe8
 8002258:	20000440 	.word	0x20000440
 800225c:	08005100 	.word	0x08005100
 8002260:	0800510c 	.word	0x0800510c
 8002264:	40011400 	.word	0x40011400
 8002268:	40007c00 	.word	0x40007c00
 800226c:	200000c0 	.word	0x200000c0
 8002270:	200000d0 	.word	0x200000d0
 8002274:	200000d6 	.word	0x200000d6
 8002278:	200000d5 	.word	0x200000d5
 800227c:	20000575 	.word	0x20000575
 8002280:	200000f8 	.word	0x200000f8

08002284 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002284:	e7fe      	b.n	8002284 <NMI_Handler>

08002286 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler>

08002288 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228a:	4770      	bx	lr

0800228c <SysTick_Handler>:
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
#ifdef CONFIG_PI
	flag_1ms = 1;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <SysTick_Handler+0x10>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
	count_1ms += 1;
 8002292:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <SysTick_Handler+0x14>)
 8002294:	6813      	ldr	r3, [r2, #0]
 8002296:	3301      	adds	r3, #1
 8002298:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800229a:	4770      	bx	lr
 800229c:	20000582 	.word	0x20000582
 80022a0:	200000a8 	.word	0x200000a8

080022a4 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <EXTI4_15_IRQHandler+0x10>)
 80022a6:	695b      	ldr	r3, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 80022a8:	06db      	lsls	r3, r3, #27
 80022aa:	d502      	bpl.n	80022b2 <EXTI4_15_IRQHandler+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80022ac:	4b01      	ldr	r3, [pc, #4]	; (80022b4 <EXTI4_15_IRQHandler+0x10>)
 80022ae:	2210      	movs	r2, #16
 80022b0:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80022b2:	4770      	bx	lr
 80022b4:	40010400 	.word	0x40010400

080022b8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80022b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	__NOP();
 80022ba:	46c0      	nop			; (mov r8, r8)

	Adc_Eoc_Callback();
 80022bc:	f001 fa30 	bl	8003720 <Adc_Eoc_Callback>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP));
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <ADC1_COMP_IRQHandler+0x40>)
 80022c2:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 80022c4:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80022c6:	681b      	ldr	r3, [r3, #0]

	if(LL_ADC_IsActiveFlag_OVR(ADC1)){
		//		LL_ADC_ClearFlag_OVR(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 80022c8:	075b      	lsls	r3, r3, #29
 80022ca:	d502      	bpl.n	80022d2 <ADC1_COMP_IRQHandler+0x1a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <ADC1_COMP_IRQHandler+0x40>)
 80022ce:	2204      	movs	r2, #4
 80022d0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <ADC1_COMP_IRQHandler+0x40>)
 80022d4:	681b      	ldr	r3, [r3, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 80022d6:	071b      	lsls	r3, r3, #28
 80022d8:	d506      	bpl.n	80022e8 <ADC1_COMP_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <ADC1_COMP_IRQHandler+0x40>)
 80022dc:	2208      	movs	r2, #8
 80022de:	601a      	str	r2, [r3, #0]
		LL_ADC_ClearFlag_EOS(ADC1);
		adc_cnt = 0;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <ADC1_COMP_IRQHandler+0x44>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80022e6:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->CR,
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <ADC1_COMP_IRQHandler+0x40>)
 80022ea:	6893      	ldr	r3, [r2, #8]
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <ADC1_COMP_IRQHandler+0x48>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	2104      	movs	r1, #4
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6093      	str	r3, [r2, #8]
 80022f6:	e7f6      	b.n	80022e6 <ADC1_COMP_IRQHandler+0x2e>
 80022f8:	40012400 	.word	0x40012400
 80022fc:	200000d4 	.word	0x200000d4
 8002300:	7fffffe8 	.word	0x7fffffe8

08002304 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8002304:	b510      	push	{r4, lr}
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <LPTIM1_IRQHandler+0x1c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	079b      	lsls	r3, r3, #30
 800230c:	d504      	bpl.n	8002318 <LPTIM1_IRQHandler+0x14>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 800230e:	4a04      	ldr	r2, [pc, #16]	; (8002320 <LPTIM1_IRQHandler+0x1c>)
 8002310:	6853      	ldr	r3, [r2, #4]
 8002312:	2102      	movs	r1, #2
 8002314:	430b      	orrs	r3, r1
 8002316:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1)){
		LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
	}

	timer_1_128();
 8002318:	f001 f8ae 	bl	8003478 <timer_1_128>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800231c:	bd10      	pop	{r4, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	40007c00 	.word	0x40007c00

08002324 <TIM21_IRQHandler>:
  /* USER CODE BEGIN TIM21_IRQn 1 */
#ifdef CONFIG_MIPEX
	MSI_Callback_Capture_Timer();
#endif
  /* USER CODE END TIM21_IRQn 1 */
}
 8002324:	4770      	bx	lr
	...

08002328 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8002328:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <TIM22_IRQHandler+0x24>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	079b      	lsls	r3, r3, #30
 8002330:	d503      	bpl.n	800233a <TIM22_IRQHandler+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <TIM22_IRQHandler+0x24>)
 8002334:	2203      	movs	r2, #3
 8002336:	4252      	negs	r2, r2
 8002338:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_CC1(TIM22);
	}


	Modbus_TO_timer();
 800233a:	f000 fec7 	bl	80030cc <Modbus_TO_timer>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800233e:	4a03      	ldr	r2, [pc, #12]	; (800234c <TIM22_IRQHandler+0x24>)
 8002340:	6813      	ldr	r3, [r2, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	438b      	bics	r3, r1
 8002346:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM22_IRQn 0 */
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8002348:	bd10      	pop	{r4, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	40011400 	.word	0x40011400

08002350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002350:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	Debug_UART_IRQHandler();
 8002352:	f000 fc2d 	bl	8002bb0 <Debug_UART_IRQHandler>
#endif
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002356:	bd10      	pop	{r4, pc}

08002358 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8002358:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	Modbus_LPUART_IRQHandler();
 800235a:	f000 ff1b 	bl	8003194 <Modbus_LPUART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800235e:	bd10      	pop	{r4, pc}

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b510      	push	{r4, lr}
 8002362:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <_sbrk+0x38>)
 8002366:	490d      	ldr	r1, [pc, #52]	; (800239c <_sbrk+0x3c>)
 8002368:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <_sbrk+0x40>)
 800236c:	6809      	ldr	r1, [r1, #0]
 800236e:	2900      	cmp	r1, #0
 8002370:	d007      	beq.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002372:	490b      	ldr	r1, [pc, #44]	; (80023a0 <_sbrk+0x40>)
 8002374:	6808      	ldr	r0, [r1, #0]
 8002376:	18c3      	adds	r3, r0, r3
 8002378:	4293      	cmp	r3, r2
 800237a:	d806      	bhi.n	800238a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <_sbrk+0x40>)
 800237e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002380:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002382:	4907      	ldr	r1, [pc, #28]	; (80023a0 <_sbrk+0x40>)
 8002384:	4807      	ldr	r0, [pc, #28]	; (80023a4 <_sbrk+0x44>)
 8002386:	6008      	str	r0, [r1, #0]
 8002388:	e7f3      	b.n	8002372 <_sbrk+0x12>
    errno = ENOMEM;
 800238a:	f002 fa0b 	bl	80047a4 <__errno>
 800238e:	230c      	movs	r3, #12
 8002390:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002392:	2001      	movs	r0, #1
 8002394:	4240      	negs	r0, r0
 8002396:	e7f3      	b.n	8002380 <_sbrk+0x20>
 8002398:	20002000 	.word	0x20002000
 800239c:	00000400 	.word	0x00000400
 80023a0:	200000ac 	.word	0x200000ac
 80023a4:	200005a8 	.word	0x200005a8

080023a8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a8:	4770      	bx	lr
	...

080023ac <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023ac:	b510      	push	{r4, lr}
 80023ae:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80023b0:	2300      	movs	r3, #0
 80023b2:	466a      	mov	r2, sp
 80023b4:	8153      	strh	r3, [r2, #10]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023b6:	4913      	ldr	r1, [pc, #76]	; (8002404 <MX_TIM2_Init+0x58>)
 80023b8:	6b88      	ldr	r0, [r1, #56]	; 0x38
 80023ba:	2201      	movs	r2, #1
 80023bc:	4310      	orrs	r0, r2
 80023be:	6388      	str	r0, [r1, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023c0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80023c2:	400a      	ands	r2, r1
 80023c4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80023c6:	9a01      	ldr	r2, [sp, #4]
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = LL_TIM_IC_FILTER_FDIV1_N4-LL_TIM_IC_FILTER_FDIV1_N2;
 80023c8:	466a      	mov	r2, sp
 80023ca:	8113      	strh	r3, [r2, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023cc:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 65535;
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <MX_TIM2_Init+0x5c>)
 80023d0:	9204      	str	r2, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80023d2:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80023d4:	2480      	movs	r4, #128	; 0x80
 80023d6:	05e4      	lsls	r4, r4, #23
 80023d8:	a902      	add	r1, sp, #8
 80023da:	0020      	movs	r0, r4
 80023dc:	f002 f912 	bl	8004604 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	4393      	bics	r3, r2
 80023e6:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023e8:	68a3      	ldr	r3, [r4, #8]
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <MX_TIM2_Init+0x60>)
 80023ec:	400b      	ands	r3, r1
 80023ee:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023f0:	6863      	ldr	r3, [r4, #4]
 80023f2:	2170      	movs	r1, #112	; 0x70
 80023f4:	438b      	bics	r3, r1
 80023f6:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80023f8:	68a3      	ldr	r3, [r4, #8]
 80023fa:	4393      	bics	r3, r2
 80023fc:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM2);
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023fe:	b006      	add	sp, #24
 8002400:	bd10      	pop	{r4, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	40021000 	.word	0x40021000
 8002408:	0000ffff 	.word	0x0000ffff
 800240c:	ffffbff8 	.word	0xffffbff8

08002410 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8002410:	b570      	push	{r4, r5, r6, lr}
 8002412:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002414:	2300      	movs	r3, #0
 8002416:	466a      	mov	r2, sp
 8002418:	8153      	strh	r3, [r2, #10]
  SET_BIT(RCC->APB2ENR, Periphs);
 800241a:	4924      	ldr	r1, [pc, #144]	; (80024ac <MX_TIM21_Init+0x9c>)
 800241c:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800241e:	2204      	movs	r2, #4
 8002420:	4310      	orrs	r0, r2
 8002422:	6348      	str	r0, [r1, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002424:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002426:	400a      	ands	r2, r1
 8002428:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800242a:	9a01      	ldr	r2, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800242c:	4d20      	ldr	r5, [pc, #128]	; (80024b0 <MX_TIM21_Init+0xa0>)
 800242e:	21c5      	movs	r1, #197	; 0xc5
 8002430:	0089      	lsls	r1, r1, #2
 8002432:	586a      	ldr	r2, [r5, r1]
 8002434:	20ff      	movs	r0, #255	; 0xff
 8002436:	4382      	bics	r2, r0
 8002438:	506a      	str	r2, [r5, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	2680      	movs	r6, #128	; 0x80
 800243c:	0376      	lsls	r6, r6, #13
 800243e:	602e      	str	r6, [r5, #0]
  NVIC_EnableIRQ(TIM21_IRQn);

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002440:	466a      	mov	r2, sp
 8002442:	8113      	strh	r3, [r2, #8]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002444:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 65535;
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <MX_TIM21_Init+0xa4>)
 8002448:	9204      	str	r2, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800244a:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 800244c:	4c1a      	ldr	r4, [pc, #104]	; (80024b8 <MX_TIM21_Init+0xa8>)
 800244e:	a902      	add	r1, sp, #8
 8002450:	0020      	movs	r0, r4
 8002452:	f002 f8d7 	bl	8004604 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	2280      	movs	r2, #128	; 0x80
 800245a:	4393      	bics	r3, r2
 800245c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800245e:	6863      	ldr	r3, [r4, #4]
 8002460:	2170      	movs	r1, #112	; 0x70
 8002462:	438b      	bics	r3, r1
 8002464:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002466:	68a3      	ldr	r3, [r4, #8]
 8002468:	4393      	bics	r3, r2
 800246a:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800246c:	69a3      	ldr	r3, [r4, #24]
 800246e:	396d      	subs	r1, #109	; 0x6d
 8002470:	438b      	bics	r3, r1
 8002472:	3902      	subs	r1, #2
 8002474:	430b      	orrs	r3, r1
 8002476:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002478:	69a3      	ldr	r3, [r4, #24]
 800247a:	310b      	adds	r1, #11
 800247c:	438b      	bics	r3, r1
 800247e:	430b      	orrs	r3, r1
 8002480:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8002482:	69a3      	ldr	r3, [r4, #24]
 8002484:	31e4      	adds	r1, #228	; 0xe4
 8002486:	438b      	bics	r3, r1
 8002488:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 800248a:	6a23      	ldr	r3, [r4, #32]
 800248c:	39e6      	subs	r1, #230	; 0xe6
 800248e:	438b      	bics	r3, r1
 8002490:	6223      	str	r3, [r4, #32]
  MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
 8002492:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002494:	3135      	adds	r1, #53	; 0x35
 8002496:	438b      	bics	r3, r1
 8002498:	392f      	subs	r1, #47	; 0x2f
 800249a:	430b      	orrs	r3, r1
 800249c:	6523      	str	r3, [r4, #80]	; 0x50
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	50ae      	str	r6, [r5, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024a4:	f3bf 8f6f 	isb	sy
  LL_TIM_SetRemap(TIM21, LL_TIM_TIM21_TI1_RMP_LSE);
  /* USER CODE BEGIN TIM21_Init 2 */
  NVIC_DisableIRQ(TIM21_IRQn);
  /* USER CODE END TIM21_Init 2 */

}
 80024a8:	b006      	add	sp, #24
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	0000ffff 	.word	0x0000ffff
 80024b8:	40010800 	.word	0x40010800

080024bc <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	46c6      	mov	lr, r8
 80024c0:	b500      	push	{lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024c4:	2500      	movs	r5, #0
 80024c6:	466b      	mov	r3, sp
 80024c8:	835d      	strh	r5, [r3, #26]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80024ca:	2210      	movs	r2, #16
 80024cc:	2100      	movs	r1, #0
 80024ce:	a802      	add	r0, sp, #8
 80024d0:	f002 f99b 	bl	800480a <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <MX_TIM22_Init+0xa4>)
 80024d6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80024d8:	2320      	movs	r3, #32
 80024da:	4319      	orrs	r1, r3
 80024dc:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80024de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024e0:	4013      	ands	r3, r2
 80024e2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80024e4:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <MX_TIM22_Init+0xa8>)
 80024e8:	21c5      	movs	r1, #197	; 0xc5
 80024ea:	0089      	lsls	r1, r1, #2
 80024ec:	585a      	ldr	r2, [r3, r1]
 80024ee:	481e      	ldr	r0, [pc, #120]	; (8002568 <MX_TIM22_Init+0xac>)
 80024f0:	4002      	ands	r2, r0
 80024f2:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	03d2      	lsls	r2, r2, #15
 80024f8:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM22_IRQn);

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 80024fa:	2704      	movs	r7, #4
 80024fc:	466b      	mov	r3, sp
 80024fe:	831f      	strh	r7, [r3, #24]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002500:	9507      	str	r5, [sp, #28]
  TIM_InitStruct.Autoreload = 1911;
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <MX_TIM22_Init+0xb0>)
 8002504:	4698      	mov	r8, r3
 8002506:	9308      	str	r3, [sp, #32]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002508:	9509      	str	r5, [sp, #36]	; 0x24
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 800250a:	4c19      	ldr	r4, [pc, #100]	; (8002570 <MX_TIM22_Init+0xb4>)
 800250c:	a906      	add	r1, sp, #24
 800250e:	0020      	movs	r0, r4
 8002510:	f002 f878 	bl	8004604 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	2680      	movs	r6, #128	; 0x80
 8002518:	43b3      	bics	r3, r6
 800251a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800251c:	68a3      	ldr	r3, [r4, #8]
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <MX_TIM22_Init+0xb8>)
 8002520:	4013      	ands	r3, r2
 8002522:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM22);
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002524:	9502      	str	r5, [sp, #8]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002526:	9503      	str	r5, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 1911;
 8002528:	4643      	mov	r3, r8
 800252a:	9304      	str	r3, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800252c:	9505      	str	r5, [sp, #20]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800252e:	aa02      	add	r2, sp, #8
 8002530:	2101      	movs	r1, #1
 8002532:	0020      	movs	r0, r4
 8002534:	f002 f894 	bl	8004660 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002538:	69a3      	ldr	r3, [r4, #24]
 800253a:	43bb      	bics	r3, r7
 800253c:	61a3      	str	r3, [r4, #24]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	2208      	movs	r2, #8
 8002542:	4393      	bics	r3, r2
 8002544:	4313      	orrs	r3, r2
 8002546:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	3268      	adds	r2, #104	; 0x68
 800254c:	4393      	bics	r3, r2
 800254e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002550:	68a3      	ldr	r3, [r4, #8]
 8002552:	43b3      	bics	r3, r6
 8002554:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM22);
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8002556:	b00a      	add	sp, #40	; 0x28
 8002558:	bc80      	pop	{r7}
 800255a:	46b8      	mov	r8, r7
 800255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	40021000 	.word	0x40021000
 8002564:	e000e100 	.word	0xe000e100
 8002568:	ff00ffff 	.word	0xff00ffff
 800256c:	00000777 	.word	0x00000777
 8002570:	40011400 	.word	0x40011400
 8002574:	ffffbff8 	.word	0xffffbff8

08002578 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002578:	b530      	push	{r4, r5, lr}
 800257a:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800257c:	2218      	movs	r2, #24
 800257e:	2100      	movs	r1, #0
 8002580:	a808      	add	r0, sp, #32
 8002582:	f002 f942 	bl	800480a <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002586:	4b30      	ldr	r3, [pc, #192]	; (8002648 <MX_LPUART1_UART_Init+0xd0>)
 8002588:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800258a:	2080      	movs	r0, #128	; 0x80
 800258c:	02c0      	lsls	r0, r0, #11
 800258e:	4301      	orrs	r1, r0
 8002590:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002594:	4002      	ands	r2, r0
 8002596:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8002598:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800259a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259c:	2501      	movs	r5, #1
 800259e:	432a      	orrs	r2, r5
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	402b      	ands	r3, r5
 80025a6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80025a8:	9b00      	ldr	r3, [sp, #0]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80025aa:	2304      	movs	r3, #4
 80025ac:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ae:	3b02      	subs	r3, #2
 80025b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025b2:	3301      	adds	r3, #1
 80025b4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80025b6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80025b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80025ba:	3303      	adds	r3, #3
 80025bc:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	20a0      	movs	r0, #160	; 0xa0
 80025c0:	a902      	add	r1, sp, #8
 80025c2:	05c0      	lsls	r0, r0, #23
 80025c4:	f001 fdd2 	bl	800416c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c8:	4b20      	ldr	r3, [pc, #128]	; (800264c <MX_LPUART1_UART_Init+0xd4>)
 80025ca:	21c7      	movs	r1, #199	; 0xc7
 80025cc:	0089      	lsls	r1, r1, #2
 80025ce:	585a      	ldr	r2, [r3, r1]
 80025d0:	481f      	ldr	r0, [pc, #124]	; (8002650 <MX_LPUART1_UART_Init+0xd8>)
 80025d2:	4002      	ands	r2, r0
 80025d4:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	0592      	lsls	r2, r2, #22
 80025da:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(LPUART1_IRQn);

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 80025dc:	2396      	movs	r3, #150	; 0x96
 80025de:	019b      	lsls	r3, r3, #6
 80025e0:	9308      	str	r3, [sp, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80025e2:	2300      	movs	r3, #0
 80025e4:	9309      	str	r3, [sp, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80025e6:	930a      	str	r3, [sp, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80025e8:	930b      	str	r3, [sp, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80025ea:	330c      	adds	r3, #12
 80025ec:	930c      	str	r3, [sp, #48]	; 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80025ee:	4c19      	ldr	r4, [pc, #100]	; (8002654 <MX_LPUART1_UART_Init+0xdc>)
 80025f0:	a908      	add	r1, sp, #32
 80025f2:	0020      	movs	r0, r4
 80025f4:	f001 fe4e 	bl	8004294 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR3, USART_CR3_HDSEL);
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	2208      	movs	r2, #8
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_RTSE);
 8002600:	68a3      	ldr	r3, [r4, #8]
 8002602:	4a15      	ldr	r2, [pc, #84]	; (8002658 <MX_LPUART1_UART_Init+0xe0>)
 8002604:	4013      	ands	r3, r2
 8002606:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002608:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260c:	f385 8810 	msr	PRIMASK, r5
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSIE);
 8002610:	68a3      	ldr	r3, [r4, #8]
 8002612:	4912      	ldr	r1, [pc, #72]	; (800265c <MX_LPUART1_UART_Init+0xe4>)
 8002614:	400b      	ands	r3, r1
 8002616:	60a3      	str	r3, [r4, #8]
 8002618:	f382 8810 	msr	PRIMASK, r2
  SET_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 800261c:	68a2      	ldr	r2, [r4, #8]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4313      	orrs	r3, r2
 8002624:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002626:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262a:	f385 8810 	msr	PRIMASK, r5
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_EIE);
 800262e:	68a3      	ldr	r3, [r4, #8]
 8002630:	43ab      	bics	r3, r5
 8002632:	60a3      	str	r3, [r4, #8]
 8002634:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 8002638:	68a3      	ldr	r3, [r4, #8]
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <MX_LPUART1_UART_Init+0xe8>)
 800263c:	4013      	ands	r3, r2
 800263e:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
 8002640:	69e3      	ldr	r3, [r4, #28]
  LL_LPUART_IsActiveFlag_CTS(LPUART1);
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002642:	b00f      	add	sp, #60	; 0x3c
 8002644:	bd30      	pop	{r4, r5, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	40021000 	.word	0x40021000
 800264c:	e000e100 	.word	0xe000e100
 8002650:	ffff00ff 	.word	0xffff00ff
 8002654:	40004800 	.word	0x40004800
 8002658:	fffffeff 	.word	0xfffffeff
 800265c:	fffffbff 	.word	0xfffffbff
 8002660:	fffffdff 	.word	0xfffffdff

08002664 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	46ce      	mov	lr, r9
 8002668:	4647      	mov	r7, r8
 800266a:	b580      	push	{r7, lr}
 800266c:	b091      	sub	sp, #68	; 0x44

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800266e:	221c      	movs	r2, #28
 8002670:	2100      	movs	r1, #0
 8002672:	a809      	add	r0, sp, #36	; 0x24
 8002674:	f002 f8c9 	bl	800480a <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <MX_USART2_UART_Init+0xd4>)
 800267a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800267c:	2080      	movs	r0, #128	; 0x80
 800267e:	0280      	lsls	r0, r0, #10
 8002680:	4301      	orrs	r1, r0
 8002682:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002686:	4002      	ands	r2, r0
 8002688:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800268a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800268c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268e:	2501      	movs	r5, #1
 8002690:	432a      	orrs	r2, r5
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	402b      	ands	r3, r5
 8002698:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800269a:	9b01      	ldr	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA9   ------> USART2_TX
  PA10   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DEBUG_USART2_TX_Pin;
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026a2:	3bff      	subs	r3, #255	; 0xff
 80026a4:	3bff      	subs	r3, #255	; 0xff
 80026a6:	4699      	mov	r9, r3
 80026a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	3301      	adds	r3, #1
 80026ac:	4698      	mov	r8, r3
 80026ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026b0:	2400      	movs	r4, #0
 80026b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026b4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80026b6:	2704      	movs	r7, #4
 80026b8:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80026ba:	26a0      	movs	r6, #160	; 0xa0
 80026bc:	05f6      	lsls	r6, r6, #23
 80026be:	a903      	add	r1, sp, #12
 80026c0:	0030      	movs	r0, r6
 80026c2:	f001 fd53 	bl	800416c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = DEBUG_USART2_RX_Pin;
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026cc:	464b      	mov	r3, r9
 80026ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026d0:	4643      	mov	r3, r8
 80026d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026d4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026d6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80026d8:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 80026da:	a903      	add	r1, sp, #12
 80026dc:	0030      	movs	r0, r6
 80026de:	f001 fd45 	bl	800416c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e2:	4a16      	ldr	r2, [pc, #88]	; (800273c <MX_USART2_UART_Init+0xd8>)
 80026e4:	21c7      	movs	r1, #199	; 0xc7
 80026e6:	0089      	lsls	r1, r1, #2
 80026e8:	5853      	ldr	r3, [r2, r1]
 80026ea:	20ff      	movs	r0, #255	; 0xff
 80026ec:	4383      	bics	r3, r0
 80026ee:	387f      	subs	r0, #127	; 0x7f
 80026f0:	4303      	orrs	r3, r0
 80026f2:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	055b      	lsls	r3, r3, #21
 80026f8:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80026fa:	2396      	movs	r3, #150	; 0x96
 80026fc:	019b      	lsls	r3, r3, #6
 80026fe:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002700:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002702:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002704:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002706:	230c      	movs	r3, #12
 8002708:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800270a:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800270c:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800270e:	4c0c      	ldr	r4, [pc, #48]	; (8002740 <MX_USART2_UART_Init+0xdc>)
 8002710:	a909      	add	r1, sp, #36	; 0x24
 8002712:	0020      	movs	r0, r4
 8002714:	f001 ffc4 	bl	80046a0 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002718:	6863      	ldr	r3, [r4, #4]
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <MX_USART2_UART_Init+0xe0>)
 800271c:	4013      	ands	r3, r2
 800271e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002720:	68a3      	ldr	r3, [r4, #8]
 8002722:	222a      	movs	r2, #42	; 0x2a
 8002724:	4393      	bics	r3, r2
 8002726:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	432b      	orrs	r3, r5
 800272c:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800272e:	b011      	add	sp, #68	; 0x44
 8002730:	bcc0      	pop	{r6, r7}
 8002732:	46b9      	mov	r9, r7
 8002734:	46b0      	mov	r8, r6
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	e000e100 	.word	0xe000e100
 8002740:	40004400 	.word	0x40004400
 8002744:	ffffb7ff 	.word	0xffffb7ff

08002748 <DayArhivStore>:
#include "arhiv.h"
#include "string.h"

ARCHIVE_TYPEDEF arh;

void DayArhivStore(void){
 8002748:	b510      	push	{r4, lr}
  uint32_t tmp;

  //ArhivStoreNote(ARCHIVE_CURRENT_VALUE,*(uint32_t*)&dgs.RegState.CurrentValue);

  //memcpy(&tmp,&arh.ValueMax,4);
  tmp = arh.ValueMax << 16;
 800274a:	4c0b      	ldr	r4, [pc, #44]	; (8002778 <DayArhivStore+0x30>)
 800274c:	88a3      	ldrh	r3, [r4, #4]
 800274e:	041b      	lsls	r3, r3, #16

  tmp |= arh.ValueMin;
 8002750:	88e1      	ldrh	r1, [r4, #6]
 8002752:	4319      	orrs	r1, r3

  ArhivStoreNote(ARCHIVE_MAX_MIN_VALUE,tmp);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 fc63 	bl	8003020 <ArhivStoreNote>

  arh.ValueMax = dev.RegInput.Value;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <DayArhivStore+0x34>)
 800275c:	22f6      	movs	r2, #246	; 0xf6
 800275e:	5a9a      	ldrh	r2, [r3, r2]
 8002760:	80a2      	strh	r2, [r4, #4]
  arh.ValueMin = dev.RegInput.Value;
 8002762:	80e2      	strh	r2, [r4, #6]
/*
  tmp = dev.RegInput.TempSensor/10 + (arh.Temper_Max << 24) + (arh.Temper_Min << 16);

  ArhivStoreNote(ARCHIVE_TEMPERATURA, tmp);
*/
  arh.Temper_Max = dev.RegInput.TempSensor/10;
 8002764:	22fc      	movs	r2, #252	; 0xfc
 8002766:	5e98      	ldrsh	r0, [r3, r2]
 8002768:	210a      	movs	r1, #10
 800276a:	f7fd fd69 	bl	8000240 <__divsi3>
 800276e:	b240      	sxtb	r0, r0
 8002770:	72a0      	strb	r0, [r4, #10]
  arh.Temper_Min = dev.RegInput.TempSensor/10;
 8002772:	72e0      	strb	r0, [r4, #11]

}
 8002774:	bd10      	pop	{r4, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	200000f8 	.word	0x200000f8
 800277c:	20000440 	.word	0x20000440

08002780 <CalibGasZero>:
#include "arhiv.h"
#include "flash.h"

//==============================================================================

void CalibGasZero(void){
 8002780:	b510      	push	{r4, lr}

	uint32_t tmp;

	dev.Config.CalibZeroTemper = dev.RegInput.TempSensor;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <CalibGasZero+0x24>)
 8002784:	21fc      	movs	r1, #252	; 0xfc
 8002786:	5e5a      	ldrsh	r2, [r3, r1]
 8002788:	5a58      	ldrh	r0, [r3, r1]
 800278a:	3922      	subs	r1, #34	; 0x22
 800278c:	5258      	strh	r0, [r3, r1]
	dev.Config.CalibZeroADC = dev.RegInput.ADC_0;
 800278e:	3148      	adds	r1, #72	; 0x48
 8002790:	5a59      	ldrh	r1, [r3, r1]
 8002792:	20dc      	movs	r0, #220	; 0xdc
 8002794:	5219      	strh	r1, [r3, r0]

	tmp = dev.RegInput.TempSensor << 16;
 8002796:	0412      	lsls	r2, r2, #16
	tmp |= dev.RegInput.ADC_0;
 8002798:	4311      	orrs	r1, r2

	ArhivStoreNote(ARCHIVE_SET_CALIB_ZERO,tmp);
 800279a:	38d8      	subs	r0, #216	; 0xd8
 800279c:	f000 fc40 	bl	8003020 <ArhivStoreNote>

}
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	20000440 	.word	0x20000440

080027a8 <CalibGasConc>:

void CalibGasConc(void){
 80027a8:	b510      	push	{r4, lr}

	uint32_t tmp;

	dev.Config.CalibConcTemper = dev.RegInput.TempSensor;
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <CalibGasConc+0x28>)
 80027ac:	22fc      	movs	r2, #252	; 0xfc
 80027ae:	5a99      	ldrh	r1, [r3, r2]
 80027b0:	3a1e      	subs	r2, #30
 80027b2:	5299      	strh	r1, [r3, r2]
	dev.Config.CalibConcADC = dev.RegInput.ADC_0;
 80027b4:	3244      	adds	r2, #68	; 0x44
 80027b6:	5a99      	ldrh	r1, [r3, r2]
 80027b8:	3a42      	subs	r2, #66	; 0x42
 80027ba:	5299      	strh	r1, [r3, r2]

	tmp = dev.Config.ValueCalib << 16;
 80027bc:	899a      	ldrh	r2, [r3, #12]
 80027be:	0412      	lsls	r2, r2, #16
	tmp |= dev.RegInput.ADC_TK;
 80027c0:	2192      	movs	r1, #146	; 0x92
 80027c2:	0049      	lsls	r1, r1, #1
 80027c4:	5a59      	ldrh	r1, [r3, r1]
 80027c6:	4311      	orrs	r1, r2

	ArhivStoreNote(ARCHIVE_SET_CALIB_CONC,tmp);
 80027c8:	2005      	movs	r0, #5
 80027ca:	f000 fc29 	bl	8003020 <ArhivStoreNote>
}
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	20000440 	.word	0x20000440

080027d4 <get_koef_temper_conc>:

//==============================================================================

#define K_MUL 1

uint32_t get_koef_temper_conc(int16_t temperat){
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d6:	46ce      	mov	lr, r9
 80027d8:	4647      	mov	r7, r8
 80027da:	b580      	push	{r7, lr}
 80027dc:	b083      	sub	sp, #12

	if(temperat < -600)
 80027de:	4b32      	ldr	r3, [pc, #200]	; (80028a8 <get_koef_temper_conc+0xd4>)
 80027e0:	4298      	cmp	r0, r3
 80027e2:	db06      	blt.n	80027f2 <get_koef_temper_conc+0x1e>
		temperat = -600;

	if(temperat > 500)
 80027e4:	23fa      	movs	r3, #250	; 0xfa
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4298      	cmp	r0, r3
 80027ea:	dd03      	ble.n	80027f4 <get_koef_temper_conc+0x20>
		temperat = 500;
 80027ec:	20fa      	movs	r0, #250	; 0xfa
 80027ee:	0040      	lsls	r0, r0, #1
 80027f0:	e000      	b.n	80027f4 <get_koef_temper_conc+0x20>
		temperat = -600;
 80027f2:	482d      	ldr	r0, [pc, #180]	; (80028a8 <get_koef_temper_conc+0xd4>)

	int32_t dk;

	uint32_t koef_1, koef_2;

	temper_1 = dev.Config.temp_corr_conc[0].Temp;
 80027f4:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <get_koef_temper_conc+0xd8>)
 80027f6:	2266      	movs	r2, #102	; 0x66
 80027f8:	5e9d      	ldrsh	r5, [r3, r2]
	koef_1 = dev.Config.temp_corr_conc[0].Koef;
 80027fa:	2268      	movs	r2, #104	; 0x68
 80027fc:	5a9e      	ldrh	r6, [r3, r2]

	temper_2 = dev.Config.temp_corr_conc[1].Temp;
 80027fe:	3202      	adds	r2, #2
 8002800:	5e99      	ldrsh	r1, [r3, r2]
 8002802:	468c      	mov	ip, r1
	koef_2 = dev.Config.temp_corr_conc[1].Koef;
 8002804:	226c      	movs	r2, #108	; 0x6c
 8002806:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 8002808:	2e00      	cmp	r6, #0
 800280a:	d043      	beq.n	8002894 <get_koef_temper_conc+0xc0>

		return temper_koef;

	}

	if(koef_2 == 0){
 800280c:	2a00      	cmp	r2, #0
 800280e:	d043      	beq.n	8002898 <get_koef_temper_conc+0xc4>

		return temper_koef;

	}

	if(temperat < temper_1){
 8002810:	42a8      	cmp	r0, r5
 8002812:	db41      	blt.n	8002898 <get_koef_temper_conc+0xc4>
		temper_koef = koef_1 * K_MUL;

		return temper_koef;
	}

	if((temperat >= temper_1) && (temperat <= temper_2))
 8002814:	4288      	cmp	r0, r1
 8002816:	dd29      	ble.n	800286c <get_koef_temper_conc+0x98>
	BOOL find_temper = FALSE;
 8002818:	2300      	movs	r3, #0
 800281a:	4699      	mov	r9, r3
 800281c:	2700      	movs	r7, #0
 800281e:	2301      	movs	r3, #1
 8002820:	24fa      	movs	r4, #250	; 0xfa
 8002822:	00a4      	lsls	r4, r4, #2
 8002824:	9401      	str	r4, [sp, #4]
 8002826:	e001      	b.n	800282c <get_koef_temper_conc+0x58>
		find_temper = TRUE;

	for(i = 1; (i < 7) && (!find_temper) && (!find_null); i++){
 8002828:	3301      	adds	r3, #1
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b06      	cmp	r3, #6
 800282e:	d820      	bhi.n	8002872 <get_koef_temper_conc+0x9e>
 8002830:	464c      	mov	r4, r9
 8002832:	433c      	orrs	r4, r7
 8002834:	d11d      	bne.n	8002872 <get_koef_temper_conc+0x9e>

		temper_1 = dev.Config.temp_corr_conc[i].Temp;
 8002836:	4c1d      	ldr	r4, [pc, #116]	; (80028ac <get_koef_temper_conc+0xd8>)
 8002838:	001a      	movs	r2, r3
 800283a:	3218      	adds	r2, #24
 800283c:	0092      	lsls	r2, r2, #2
 800283e:	18a2      	adds	r2, r4, r2
 8002840:	2606      	movs	r6, #6
 8002842:	5f95      	ldrsh	r5, [r2, r6]
		koef_1 = dev.Config.temp_corr_conc[i].Koef;
 8002844:	8916      	ldrh	r6, [r2, #8]

		temper_2 = dev.Config.temp_corr_conc[i+1].Temp;
 8002846:	001a      	movs	r2, r3
 8002848:	3219      	adds	r2, #25
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	18a2      	adds	r2, r4, r2
 800284e:	2406      	movs	r4, #6
 8002850:	5f11      	ldrsh	r1, [r2, r4]
 8002852:	468c      	mov	ip, r1
		koef_2 = dev.Config.temp_corr_conc[i+1].Koef;
 8002854:	8912      	ldrh	r2, [r2, #8]

		if(koef_2 == 0){
 8002856:	2a00      	cmp	r2, #0
 8002858:	d101      	bne.n	800285e <get_koef_temper_conc+0x8a>
			temper_koef = koef_1 * K_MUL;
 800285a:	9601      	str	r6, [sp, #4]
			find_null = TRUE;
 800285c:	2701      	movs	r7, #1
		}

		if((temperat >= temper_1) && (temperat <= temper_2))
 800285e:	42a8      	cmp	r0, r5
 8002860:	dbe2      	blt.n	8002828 <get_koef_temper_conc+0x54>
 8002862:	4560      	cmp	r0, ip
 8002864:	dce0      	bgt.n	8002828 <get_koef_temper_conc+0x54>
			find_temper = TRUE;
 8002866:	2101      	movs	r1, #1
 8002868:	4689      	mov	r9, r1
 800286a:	e7dd      	b.n	8002828 <get_koef_temper_conc+0x54>
		find_temper = TRUE;
 800286c:	2301      	movs	r3, #1
 800286e:	4699      	mov	r9, r3
 8002870:	e7d4      	b.n	800281c <get_koef_temper_conc+0x48>

	}

	if(find_temper){
 8002872:	464b      	mov	r3, r9
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <get_koef_temper_conc+0xb8>

		dt = temperat - temper_1;
 8002878:	1b40      	subs	r0, r0, r5
 800287a:	b203      	sxth	r3, r0

		dk = (koef_2 - koef_1) * dt * K_MUL / (temper_2 - temper_1);
 800287c:	1b90      	subs	r0, r2, r6
 800287e:	4358      	muls	r0, r3
 8002880:	4663      	mov	r3, ip
 8002882:	1b59      	subs	r1, r3, r5
 8002884:	f7fd fc52 	bl	800012c <__udivsi3>

		temper_koef =  (koef_1 * K_MUL) + dk;
 8002888:	1836      	adds	r6, r6, r0
 800288a:	e005      	b.n	8002898 <get_koef_temper_conc+0xc4>

	}else if(temperat > temper_2){
 800288c:	4560      	cmp	r0, ip
 800288e:	dc09      	bgt.n	80028a4 <get_koef_temper_conc+0xd0>
 8002890:	9e01      	ldr	r6, [sp, #4]
 8002892:	e001      	b.n	8002898 <get_koef_temper_conc+0xc4>
		return temper_koef;
 8002894:	26fa      	movs	r6, #250	; 0xfa
 8002896:	00b6      	lsls	r6, r6, #2
		temper_koef = koef_2 * K_MUL;

	}

	return temper_koef;
}
 8002898:	0030      	movs	r0, r6
 800289a:	b003      	add	sp, #12
 800289c:	bcc0      	pop	{r6, r7}
 800289e:	46b9      	mov	r9, r7
 80028a0:	46b0      	mov	r8, r6
 80028a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temper_koef = koef_2 * K_MUL;
 80028a4:	0016      	movs	r6, r2
 80028a6:	e7f7      	b.n	8002898 <get_koef_temper_conc+0xc4>
 80028a8:	fffffda8 	.word	0xfffffda8
 80028ac:	20000440 	.word	0x20000440

080028b0 <LinearizKoef>:
	memset(dev.Config.linear,0,sizeof(dev.Config.linear));
#endif

}

uint16_t LinearizKoef(uint32_t value){
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	46ce      	mov	lr, r9
 80028b4:	4647      	mov	r7, r8
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b083      	sub	sp, #12
 80028ba:	0005      	movs	r5, r0

	int16_t dt, val_1, val_2;
	int32_t dk;
	uint32_t koef_1, koef_2;

	val_1 = dev.Config.linear[0].Conc;
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <LinearizKoef+0xb8>)
 80028be:	2286      	movs	r2, #134	; 0x86
 80028c0:	5e9e      	ldrsh	r6, [r3, r2]
	koef_1 = dev.Config.linear[0].Koef;
 80028c2:	2288      	movs	r2, #136	; 0x88
 80028c4:	5a98      	ldrh	r0, [r3, r2]
 80028c6:	4681      	mov	r9, r0

	val_2 = dev.Config.linear[1].Conc;;
 80028c8:	3202      	adds	r2, #2
 80028ca:	5e9c      	ldrsh	r4, [r3, r2]
	koef_2 = dev.Config.linear[1].Koef;
 80028cc:	228c      	movs	r2, #140	; 0x8c
 80028ce:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d046      	beq.n	8002962 <LinearizKoef+0xb2>

		return linear_koef;

	}

	if(koef_2 == 0){
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d03b      	beq.n	8002950 <LinearizKoef+0xa0>

		return linear_koef;

	}

	if(value < val_1){
 80028d8:	42ae      	cmp	r6, r5
 80028da:	d839      	bhi.n	8002950 <LinearizKoef+0xa0>
		linear_koef = koef_1 * K_MUL;

		return linear_koef;
	}

	if((value >= val_1) && (value <= val_2))
 80028dc:	42ac      	cmp	r4, r5
 80028de:	d206      	bcs.n	80028ee <LinearizKoef+0x3e>
	BOOL find_val = FALSE;
 80028e0:	2100      	movs	r1, #0
			linear_koef = koef_1 * K_MUL;
			find_null = TRUE;
		}

		if((value >= val_1) && (value <= val_2))
			find_val = TRUE;
 80028e2:	2000      	movs	r0, #0
 80028e4:	2301      	movs	r3, #1
 80028e6:	27fa      	movs	r7, #250	; 0xfa
 80028e8:	00bf      	lsls	r7, r7, #2
 80028ea:	9701      	str	r7, [sp, #4]
 80028ec:	e003      	b.n	80028f6 <LinearizKoef+0x46>
		find_val = TRUE;
 80028ee:	2101      	movs	r1, #1
 80028f0:	e7f7      	b.n	80028e2 <LinearizKoef+0x32>
	for(i = 1; (i < 7) && (!find_val) && (!find_null); i++){
 80028f2:	3301      	adds	r3, #1
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d81d      	bhi.n	8002936 <LinearizKoef+0x86>
 80028fa:	000f      	movs	r7, r1
 80028fc:	4307      	orrs	r7, r0
 80028fe:	d11a      	bne.n	8002936 <LinearizKoef+0x86>
		val_1 = dev.Config.linear[i].Conc;
 8002900:	4c19      	ldr	r4, [pc, #100]	; (8002968 <LinearizKoef+0xb8>)
 8002902:	001a      	movs	r2, r3
 8002904:	3220      	adds	r2, #32
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	18a2      	adds	r2, r4, r2
 800290a:	2706      	movs	r7, #6
 800290c:	5fd6      	ldrsh	r6, [r2, r7]
		koef_1 = dev.Config.linear[i].Koef;
 800290e:	8912      	ldrh	r2, [r2, #8]
 8002910:	4691      	mov	r9, r2
		val_2 = dev.Config.linear[i+1].Conc;
 8002912:	001a      	movs	r2, r3
 8002914:	3221      	adds	r2, #33	; 0x21
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	18a2      	adds	r2, r4, r2
 800291a:	2706      	movs	r7, #6
 800291c:	5fd4      	ldrsh	r4, [r2, r7]
		koef_2 = dev.Config.linear[i+1].Koef;
 800291e:	8912      	ldrh	r2, [r2, #8]
		if(koef_2 == 0){
 8002920:	2a00      	cmp	r2, #0
 8002922:	d102      	bne.n	800292a <LinearizKoef+0x7a>
			linear_koef = koef_1 * K_MUL;
 8002924:	4648      	mov	r0, r9
 8002926:	9001      	str	r0, [sp, #4]
			find_null = TRUE;
 8002928:	2001      	movs	r0, #1
		if((value >= val_1) && (value <= val_2))
 800292a:	42ae      	cmp	r6, r5
 800292c:	d8e1      	bhi.n	80028f2 <LinearizKoef+0x42>
 800292e:	42ac      	cmp	r4, r5
 8002930:	d3df      	bcc.n	80028f2 <LinearizKoef+0x42>
			find_val = TRUE;
 8002932:	2101      	movs	r1, #1
 8002934:	e7dd      	b.n	80028f2 <LinearizKoef+0x42>

	}

	if(find_val){
 8002936:	2900      	cmp	r1, #0
 8002938:	d00f      	beq.n	800295a <LinearizKoef+0xaa>

		dt = value - val_1;
 800293a:	1bad      	subs	r5, r5, r6
 800293c:	b22d      	sxth	r5, r5

//		dk = (koef_2 - koef_1) * dt * K_MUL / (val_2 - val_1);

		dk = (koef_2 - koef_1) * dt * K_MUL;
 800293e:	464b      	mov	r3, r9
 8002940:	1ad0      	subs	r0, r2, r3
 8002942:	4368      	muls	r0, r5
		dk /= (val_2 - val_1);
 8002944:	1ba1      	subs	r1, r4, r6
 8002946:	f7fd fc7b 	bl	8000240 <__divsi3>

		linear_koef =  (koef_1 * K_MUL) + dk;
 800294a:	0002      	movs	r2, r0
 800294c:	444a      	add	r2, r9
//	value_tmp += 500;
//	value_tmp /= 1000;



	return (uint16_t) linear_koef;
 800294e:	b290      	uxth	r0, r2

}
 8002950:	b003      	add	sp, #12
 8002952:	bcc0      	pop	{r6, r7}
 8002954:	46b9      	mov	r9, r7
 8002956:	46b0      	mov	r8, r6
 8002958:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if(value > val_2){
 800295a:	42ac      	cmp	r4, r5
 800295c:	d3f7      	bcc.n	800294e <LinearizKoef+0x9e>
 800295e:	9a01      	ldr	r2, [sp, #4]
 8002960:	e7f5      	b.n	800294e <LinearizKoef+0x9e>
		return linear_koef;
 8002962:	20fa      	movs	r0, #250	; 0xfa
 8002964:	0080      	lsls	r0, r0, #2
 8002966:	e7f3      	b.n	8002950 <LinearizKoef+0xa0>
 8002968:	20000440 	.word	0x20000440

0800296c <SetGasValue>:

}

//==============================================================================

void SetGasValue(void){
 800296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296e:	46c6      	mov	lr, r8
 8002970:	b500      	push	{lr}
	uint32_t koef_tc;

//	dev.RegInput.ADC_0 = dev.Config.CalibConcADC;
//	dev.RegInput.TempSensor = dev.Config.CalibConcTemper;
#if 1
	adc = (int16_t)(dev.RegInput.ADC_0 - dev.Config.CalibZeroADC);
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <SetGasValue+0xe8>)
 8002974:	2291      	movs	r2, #145	; 0x91
 8002976:	0052      	lsls	r2, r2, #1
 8002978:	5a9c      	ldrh	r4, [r3, r2]
 800297a:	3a46      	subs	r2, #70	; 0x46
 800297c:	5a9a      	ldrh	r2, [r3, r2]
 800297e:	1aa4      	subs	r4, r4, r2
 8002980:	b224      	sxth	r4, r4
		adc = (int16_t)(dev.RegInput.ADC_0 - dev.Config.CalibZeroADC);
	else
		adc = 0;
#endif

	if((dev.Config.CalibConcADC - dev.Config.CalibZeroADC) != 0){
 8002982:	21e0      	movs	r1, #224	; 0xe0
 8002984:	5a59      	ldrh	r1, [r3, r1]
 8002986:	428a      	cmp	r2, r1
 8002988:	d00f      	beq.n	80029aa <SetGasValue+0x3e>
		k = (int16_t)(dev.Config.ValueCalib * 10000) / (int16_t)(dev.Config.CalibConcADC - dev.Config.CalibZeroADC);
 800298a:	899b      	ldrh	r3, [r3, #12]
 800298c:	4832      	ldr	r0, [pc, #200]	; (8002a58 <SetGasValue+0xec>)
 800298e:	4358      	muls	r0, r3
 8002990:	b200      	sxth	r0, r0
 8002992:	1a89      	subs	r1, r1, r2
 8002994:	b209      	sxth	r1, r1
 8002996:	f7fd fc53 	bl	8000240 <__divsi3>
	}
	else{
		k = 10000;
	}

	if(!(((adc < 0) && (k < 0)) || ((adc > 0) && (k > 0)))){
 800299a:	2c00      	cmp	r4, #0
 800299c:	db07      	blt.n	80029ae <SetGasValue+0x42>
 800299e:	2c00      	cmp	r4, #0
 80029a0:	dd08      	ble.n	80029b4 <SetGasValue+0x48>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	dc07      	bgt.n	80029b6 <SetGasValue+0x4a>
		adc = 0;
 80029a6:	2400      	movs	r4, #0
 80029a8:	e005      	b.n	80029b6 <SetGasValue+0x4a>
		k = 10000;
 80029aa:	482b      	ldr	r0, [pc, #172]	; (8002a58 <SetGasValue+0xec>)
 80029ac:	e7f5      	b.n	800299a <SetGasValue+0x2e>
	if(!(((adc < 0) && (k < 0)) || ((adc > 0) && (k > 0)))){
 80029ae:	2800      	cmp	r0, #0
 80029b0:	daf5      	bge.n	800299e <SetGasValue+0x32>
 80029b2:	e000      	b.n	80029b6 <SetGasValue+0x4a>
		adc = 0;
 80029b4:	2400      	movs	r4, #0
	}

	val = adc*k;
 80029b6:	4360      	muls	r0, r4
	val += 5000;
 80029b8:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <SetGasValue+0xf0>)
 80029ba:	469c      	mov	ip, r3
 80029bc:	4460      	add	r0, ip
	val /= 10000;
 80029be:	4926      	ldr	r1, [pc, #152]	; (8002a58 <SetGasValue+0xec>)
 80029c0:	f7fd fbb4 	bl	800012c <__udivsi3>
 80029c4:	4680      	mov	r8, r0

//	dev.RegInput.Value_0 = val;

	kc = get_koef_temper_conc(dev.Config.CalibConcTemper);
 80029c6:	4e23      	ldr	r6, [pc, #140]	; (8002a54 <SetGasValue+0xe8>)
 80029c8:	23de      	movs	r3, #222	; 0xde
 80029ca:	5ef0      	ldrsh	r0, [r6, r3]
 80029cc:	f7ff ff02 	bl	80027d4 <get_koef_temper_conc>
 80029d0:	0005      	movs	r5, r0
	koef_tc = get_koef_temper_conc(dev.RegInput.TempSensor);
 80029d2:	23fc      	movs	r3, #252	; 0xfc
 80029d4:	5ef0      	ldrsh	r0, [r6, r3]
 80029d6:	f7ff fefd 	bl	80027d4 <get_koef_temper_conc>
 80029da:	0007      	movs	r7, r0

	val *= kc;
 80029dc:	4643      	mov	r3, r8
 80029de:	435d      	muls	r5, r3

	val0 = val;
	val0 += 500;
 80029e0:	0028      	movs	r0, r5
 80029e2:	30f5      	adds	r0, #245	; 0xf5
 80029e4:	30ff      	adds	r0, #255	; 0xff
	val0 /= 1000;
 80029e6:	21fa      	movs	r1, #250	; 0xfa
 80029e8:	0089      	lsls	r1, r1, #2
 80029ea:	f7fd fb9f 	bl	800012c <__udivsi3>
	dev.RegInput.Value_0 = val0;
 80029ee:	2390      	movs	r3, #144	; 0x90
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	52f0      	strh	r0, [r6, r3]

	val += (koef_tc >> 1);
 80029f4:	087b      	lsrs	r3, r7, #1
 80029f6:	4698      	mov	r8, r3
 80029f8:	0028      	movs	r0, r5
 80029fa:	4440      	add	r0, r8
	val /= koef_tc;
 80029fc:	0039      	movs	r1, r7
 80029fe:	f7fd fb95 	bl	800012c <__udivsi3>
 8002a02:	0005      	movs	r5, r0

	uint32_t lin_val;
	uint16_t koef_lin;

	koef_lin = LinearizKoef(val);;
 8002a04:	f7ff ff54 	bl	80028b0 <LinearizKoef>

	lin_val = val * koef_lin;
 8002a08:	4368      	muls	r0, r5
	lin_val = (lin_val + 500) / 1000;
 8002a0a:	30f5      	adds	r0, #245	; 0xf5
 8002a0c:	30ff      	adds	r0, #255	; 0xff
 8002a0e:	21fa      	movs	r1, #250	; 0xfa
 8002a10:	0089      	lsls	r1, r1, #2
 8002a12:	f7fd fb8b 	bl	800012c <__udivsi3>

	dev.RegInput.Value = lin_val;
 8002a16:	b285      	uxth	r5, r0
 8002a18:	23f6      	movs	r3, #246	; 0xf6
 8002a1a:	52f5      	strh	r5, [r6, r3]


	val = 1000 * adc;
 8002a1c:	0163      	lsls	r3, r4, #5
 8002a1e:	1b1b      	subs	r3, r3, r4
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	191c      	adds	r4, r3, r4
 8002a24:	00e4      	lsls	r4, r4, #3
	val += (koef_tc >> 1);
 8002a26:	0020      	movs	r0, r4
 8002a28:	4440      	add	r0, r8
	val /= koef_tc;
 8002a2a:	0039      	movs	r1, r7
 8002a2c:	f7fd fb7e 	bl	800012c <__udivsi3>

	dev.RegInput.ADC_TK = val;
 8002a30:	2392      	movs	r3, #146	; 0x92
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	52f0      	strh	r0, [r6, r3]
	d_printf("ADC: %04d, ADC_TK %04d", adc, dev.RegInput.ADC_TK);
//	d_printf("\n\r");
//	d_printf("Val: %04d, Val_0 %04d", dev.RegInput.Value,dev.RegInput.Value_0);
#endif

	if(arh.ValueMax < dev.RegInput.Value)
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <SetGasValue+0xf4>)
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	429d      	cmp	r5, r3
 8002a3c:	d901      	bls.n	8002a42 <SetGasValue+0xd6>
		arh.ValueMax = dev.RegInput.Value;
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <SetGasValue+0xf4>)
 8002a40:	809d      	strh	r5, [r3, #4]

	if(arh.ValueMin > dev.RegInput.Value)
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <SetGasValue+0xf4>)
 8002a44:	88db      	ldrh	r3, [r3, #6]
 8002a46:	429d      	cmp	r5, r3
 8002a48:	d201      	bcs.n	8002a4e <SetGasValue+0xe2>
		arh.ValueMin = dev.RegInput.Value;
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SetGasValue+0xf4>)
 8002a4c:	80dd      	strh	r5, [r3, #6]

}
 8002a4e:	bc80      	pop	{r7}
 8002a50:	46b8      	mov	r8, r7
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a54:	20000440 	.word	0x20000440
 8002a58:	00002710 	.word	0x00002710
 8002a5c:	00001388 	.word	0x00001388
 8002a60:	200000f8 	.word	0x200000f8

08002a64 <debug_init>:
#define TX_BUF_SIZE 256

uint8_t tx_buffer[TX_BUF_SIZE];
ring_buffer dbg_ring_buff_tx;

void debug_init(void){
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	b086      	sub	sp, #24

  DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <debug_init+0x58>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	2002      	movs	r0, #2
 8002a76:	4302      	orrs	r2, r0
 8002a78:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STANDBY;
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	3002      	adds	r0, #2
 8002a7e:	4302      	orrs	r2, r0
 8002a80:	605a      	str	r2, [r3, #4]
}

static inline ring_buffer ring_buffer_init(uint8_t *buffer, uint16_t size)
{
  ring_buffer ring;
  ring.write_offset = 0;
 8002a82:	466a      	mov	r2, sp
 8002a84:	2300      	movs	r3, #0
 8002a86:	8013      	strh	r3, [r2, #0]
  ring.read_offset = 0;
 8002a88:	8053      	strh	r3, [r2, #2]
  ring.size = size;
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	33ff      	adds	r3, #255	; 0xff
 8002a8e:	8093      	strh	r3, [r2, #4]
  ring.buffer = buffer;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <debug_init+0x5c>)
 8002a92:	6093      	str	r3, [r2, #8]
  return ring;
 8002a94:	ab03      	add	r3, sp, #12
 8002a96:	0018      	movs	r0, r3
 8002a98:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002a9a:	c070      	stmia	r0!, {r4, r5, r6}

  dbg_ring_buff_tx = ring_buffer_init(tx_buffer, TX_BUF_SIZE);
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <debug_init+0x60>)
 8002a9e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8002aa0:	c231      	stmia	r2!, {r0, r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <debug_init+0x64>)
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	311f      	adds	r1, #31
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	f380 8810 	msr	PRIMASK, r0

  LL_LPUART_EnableIT_RXNE(DBG_UART);

}
 8002ab8:	b006      	add	sp, #24
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	40015800 	.word	0x40015800
 8002ac0:	20000104 	.word	0x20000104
 8002ac4:	20000208 	.word	0x20000208
 8002ac8:	40004400 	.word	0x40004400

08002acc <d_printf>:

void d_printf(const char *format, ...){
 8002acc:	b40f      	push	{r0, r1, r2, r3}
 8002ace:	b530      	push	{r4, r5, lr}
 8002ad0:	b0af      	sub	sp, #188	; 0xbc
 8002ad2:	ab32      	add	r3, sp, #200	; 0xc8
 8002ad4:	cb04      	ldmia	r3!, {r2}

  //return;

  va_list args;

  va_start(args, format);
 8002ad6:	9300      	str	r3, [sp, #0]
  vsnprintf((char*)aString,180,format,args);
 8002ad8:	21b4      	movs	r1, #180	; 0xb4
 8002ada:	a801      	add	r0, sp, #4
 8002adc:	f001 fec8 	bl	8004870 <vsniprintf>
  va_end(args);

  len = strlen((char*)aString);
 8002ae0:	a801      	add	r0, sp, #4
 8002ae2:	f7fd fb11 	bl	8000108 <strlen>
 8002ae6:	b2c0      	uxtb	r0, r0

  for(uint16_t i=0;i<len;i++)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	e005      	b.n	8002af8 <d_printf+0x2c>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8002aec:	3301      	adds	r3, #1
 8002aee:	b29b      	uxth	r3, r3
}

static inline void ring_buffer_put(ring_buffer *ring, uint8_t data)
{
  ring->buffer[ring->write_offset] = data;
  ring->write_offset = ring_buffer_get_next_write(ring);
 8002af0:	4912      	ldr	r1, [pc, #72]	; (8002b3c <d_printf+0x70>)
 8002af2:	800b      	strh	r3, [r1, #0]
 8002af4:	3201      	adds	r2, #1
 8002af6:	b292      	uxth	r2, r2
 8002af8:	b283      	uxth	r3, r0
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d90d      	bls.n	8002b1a <d_printf+0x4e>
    ring_buffer_put(&dbg_ring_buff_tx,aString[i]);
 8002afe:	ab01      	add	r3, sp, #4
 8002b00:	5c9c      	ldrb	r4, [r3, r2]
  ring->buffer[ring->write_offset] = data;
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <d_printf+0x70>)
 8002b04:	880b      	ldrh	r3, [r1, #0]
 8002b06:	688d      	ldr	r5, [r1, #8]
 8002b08:	54ec      	strb	r4, [r5, r3]
  return get_next(ring->write_offset, ring->size);
 8002b0a:	880b      	ldrh	r3, [r1, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8002b10:	3901      	subs	r1, #1
 8002b12:	428b      	cmp	r3, r1
 8002b14:	d1ea      	bne.n	8002aec <d_printf+0x20>
 8002b16:	2300      	movs	r3, #0
 8002b18:	e7ea      	b.n	8002af0 <d_printf+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 8002b24:	4a06      	ldr	r2, [pc, #24]	; (8002b40 <d_printf+0x74>)
 8002b26:	6813      	ldr	r3, [r2, #0]
 8002b28:	2080      	movs	r0, #128	; 0x80
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	f381 8810 	msr	PRIMASK, r1

  LL_LPUART_EnableIT_TXE(DBG_UART);


}
 8002b32:	b02f      	add	sp, #188	; 0xbc
 8002b34:	bc30      	pop	{r4, r5}
 8002b36:	bc08      	pop	{r3}
 8002b38:	b004      	add	sp, #16
 8002b3a:	4718      	bx	r3
 8002b3c:	20000208 	.word	0x20000208
 8002b40:	40004400 	.word	0x40004400

08002b44 <Debug_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <Debug_TXEmpty_Callback+0x50>)
 8002b46:	885a      	ldrh	r2, [r3, #2]
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
	}
}

void Debug_TXEmpty_Callback(void){

  if(ring_buffer_is_empty(&dbg_ring_buff_tx))
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d010      	beq.n	8002b74 <Debug_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 8002b52:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <Debug_TXEmpty_Callback+0x50>)
 8002b54:	8853      	ldrh	r3, [r2, #2]
 8002b56:	6891      	ldr	r1, [r2, #8]
 8002b58:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 8002b5a:	8853      	ldrh	r3, [r2, #2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8002b60:	3a01      	subs	r2, #1
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <Debug_TXEmpty_Callback+0x4a>
 8002b66:	3301      	adds	r3, #1
 8002b68:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <Debug_TXEmpty_Callback+0x50>)
 8002b6c:	8053      	strh	r3, [r2, #2]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <Debug_TXEmpty_Callback+0x54>)
 8002b70:	6299      	str	r1, [r3, #40]	; 0x28

  }else{
    LL_LPUART_TransmitData8(DBG_UART,ring_buffer_get(&dbg_ring_buff_tx));
  }

}
 8002b72:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 8002b7e:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <Debug_TXEmpty_Callback+0x54>)
 8002b80:	6813      	ldr	r3, [r2, #0]
 8002b82:	2080      	movs	r0, #128	; 0x80
 8002b84:	4383      	bics	r3, r0
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	f381 8810 	msr	PRIMASK, r1
}
 8002b8c:	e7f1      	b.n	8002b72 <Debug_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e7eb      	b.n	8002b6a <Debug_TXEmpty_Callback+0x26>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	20000208 	.word	0x20000208
 8002b98:	40004400 	.word	0x40004400

08002b9c <Debug_RXNEmpty_Callback>:
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <Debug_RXNEmpty_Callback+0xc>)
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24

uint8_t dbg_cmd;

void Debug_RXNEmpty_Callback(void){

	dbg_cmd = LL_LPUART_ReceiveData8(DBG_UART);
 8002ba0:	4b02      	ldr	r3, [pc, #8]	; (8002bac <Debug_RXNEmpty_Callback+0x10>)
 8002ba2:	701a      	strb	r2, [r3, #0]

//	debugMenu(dbg_cmd);
}
 8002ba4:	4770      	bx	lr
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	20000204 	.word	0x20000204

08002bb0 <Debug_UART_IRQHandler>:
void Debug_UART_IRQHandler(void){
 8002bb0:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	d505      	bpl.n	8002bc6 <Debug_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	d501      	bpl.n	8002bc6 <Debug_UART_IRQHandler+0x16>
		Debug_TXEmpty_Callback();
 8002bc2:	f7ff ffbf 	bl	8002b44 <Debug_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	d505      	bpl.n	8002bda <Debug_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	069b      	lsls	r3, r3, #26
 8002bd4:	d501      	bpl.n	8002bda <Debug_UART_IRQHandler+0x2a>
		Debug_RXNEmpty_Callback();
 8002bd6:	f7ff ffe1 	bl	8002b9c <Debug_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002bda:	4b04      	ldr	r3, [pc, #16]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	071b      	lsls	r3, r3, #28
 8002be0:	d502      	bpl.n	8002be8 <Debug_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8002be2:	4b02      	ldr	r3, [pc, #8]	; (8002bec <Debug_UART_IRQHandler+0x3c>)
 8002be4:	2208      	movs	r2, #8
 8002be6:	621a      	str	r2, [r3, #32]
}
 8002be8:	bd10      	pop	{r4, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	40004400 	.word	0x40004400

08002bf0 <EEPROM_WaitEOP>:
// Ожидание завершения операции (стирание или записи) EEPROM с таймаутом
//
void EEPROM_WaitEOP(){

	// Таймаут 10 мсек
	uint32_t Timeout = 10;
 8002bf0:	220a      	movs	r2, #10

	while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <EEPROM_WaitEOP+0x24>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	079b      	lsls	r3, r3, #30
 8002bf8:	d408      	bmi.n	8002c0c <EEPROM_WaitEOP+0x1c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <EEPROM_WaitEOP+0x28>)
 8002bfc:	681b      	ldr	r3, [r3, #0]

		if (LL_SYSTICK_IsActiveCounterFlag())
 8002bfe:	03db      	lsls	r3, r3, #15
 8002c00:	d5f7      	bpl.n	8002bf2 <EEPROM_WaitEOP+0x2>
		{
			if(Timeout-- == 0)
 8002c02:	1e53      	subs	r3, r2, #1
 8002c04:	2a00      	cmp	r2, #0
 8002c06:	d004      	beq.n	8002c12 <EEPROM_WaitEOP+0x22>
 8002c08:	001a      	movs	r2, r3
 8002c0a:	e7f2      	b.n	8002bf2 <EEPROM_WaitEOP+0x2>
			}
		}

	}

	FLASH->SR = FLASH_SR_EOP;
 8002c0c:	4b01      	ldr	r3, [pc, #4]	; (8002c14 <EEPROM_WaitEOP+0x24>)
 8002c0e:	2202      	movs	r2, #2
 8002c10:	619a      	str	r2, [r3, #24]

}
 8002c12:	4770      	bx	lr
 8002c14:	40022000 	.word	0x40022000
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <writeWordToEEPROM>:

void writeWordToEEPROM(uint16_t address, uint32_t data) {
 8002c1c:	b510      	push	{r4, lr}

	if(*(__IO uint32_t *) (EEPROM_BASE_ADR + address) != data){
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <writeWordToEEPROM+0x18>)
 8002c20:	469c      	mov	ip, r3
 8002c22:	4460      	add	r0, ip
 8002c24:	6803      	ldr	r3, [r0, #0]
 8002c26:	428b      	cmp	r3, r1
 8002c28:	d100      	bne.n	8002c2c <writeWordToEEPROM+0x10>

		EEPROM_WaitEOP();

	}

}
 8002c2a:	bd10      	pop	{r4, pc}
		*(__IO uint32_t *) (EEPROM_BASE_ADR + address) = data;
 8002c2c:	6001      	str	r1, [r0, #0]
		EEPROM_WaitEOP();
 8002c2e:	f7ff ffdf 	bl	8002bf0 <EEPROM_WaitEOP>
}
 8002c32:	e7fa      	b.n	8002c2a <writeWordToEEPROM+0xe>
 8002c34:	08080000 	.word	0x08080000

08002c38 <write_mem_to_eeprom>:

void write_mem_to_eeprom(uint16_t address, uint32_t *ptr, uint8_t len){
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	0007      	movs	r7, r0
 8002c3c:	000e      	movs	r6, r1
 8002c3e:	0015      	movs	r5, r2

	int i;

	for(i=0;i<len;i++){
 8002c40:	2400      	movs	r4, #0
 8002c42:	42a5      	cmp	r5, r4
 8002c44:	dd07      	ble.n	8002c56 <write_mem_to_eeprom+0x1e>

		writeWordToEEPROM(address + i*4, ptr[i]);
 8002c46:	00a3      	lsls	r3, r4, #2
 8002c48:	58f1      	ldr	r1, [r6, r3]
 8002c4a:	18f8      	adds	r0, r7, r3
 8002c4c:	b280      	uxth	r0, r0
 8002c4e:	f7ff ffe5 	bl	8002c1c <writeWordToEEPROM>
	for(i=0;i<len;i++){
 8002c52:	3401      	adds	r4, #1
 8002c54:	e7f5      	b.n	8002c42 <write_mem_to_eeprom+0xa>

	}

}
 8002c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c58 <eeprom_config_write_bank>:

void eeprom_config_write_bank(uint8_t bank){
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	0004      	movs	r4, r0

	dev.Config.crc = CalcCRC((uint32_t*)&dev.Config,(sizeof(Config_td)/4)-1);
 8002c5c:	4e0e      	ldr	r6, [pc, #56]	; (8002c98 <eeprom_config_write_bank+0x40>)
 8002c5e:	213a      	movs	r1, #58	; 0x3a
 8002c60:	0030      	movs	r0, r6
 8002c62:	f7ff f81f 	bl	8001ca4 <CalcCRC>
 8002c66:	23e8      	movs	r3, #232	; 0xe8
 8002c68:	50f0      	str	r0, [r6, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6e:	b672      	cpsid	i

	__enter_critical();

	FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8002c70:	4d0a      	ldr	r5, [pc, #40]	; (8002c9c <eeprom_config_write_bank+0x44>)
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <eeprom_config_write_bank+0x48>)
 8002c74:	60ea      	str	r2, [r5, #12]
	FLASH->PEKEYR = (uint32_t) 0x02030405U;
 8002c76:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <eeprom_config_write_bank+0x4c>)
 8002c78:	60ea      	str	r2, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7a:	f383 8810 	msr	PRIMASK, r3

	__exit_critical();

	write_mem_to_eeprom(EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * bank,
 8002c7e:	20ec      	movs	r0, #236	; 0xec
 8002c80:	4360      	muls	r0, r4
 8002c82:	b280      	uxth	r0, r0
 8002c84:	223b      	movs	r2, #59	; 0x3b
 8002c86:	0031      	movs	r1, r6
 8002c88:	f7ff ffd6 	bl	8002c38 <write_mem_to_eeprom>
			(uint32_t*)&dev.Config,sizeof(Config_td)/4);


	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002c8c:	686b      	ldr	r3, [r5, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4313      	orrs	r3, r2
 8002c92:	606b      	str	r3, [r5, #4]

}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000440 	.word	0x20000440
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	89abcdef 	.word	0x89abcdef
 8002ca4:	02030405 	.word	0x02030405

08002ca8 <eeprom_config_write>:

void eeprom_config_write(void) {
 8002ca8:	b510      	push	{r4, lr}

	dev.Config.Counter++;
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <eeprom_config_write+0x2c>)
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	6013      	str	r3, [r2, #0]

	d_printf("\n\r");
 8002cb2:	4809      	ldr	r0, [pc, #36]	; (8002cd8 <eeprom_config_write+0x30>)
 8002cb4:	f7ff ff0a 	bl	8002acc <d_printf>
	eeprom_config_write_bank(nConfigBank);
 8002cb8:	4c08      	ldr	r4, [pc, #32]	; (8002cdc <eeprom_config_write+0x34>)
 8002cba:	7820      	ldrb	r0, [r4, #0]
 8002cbc:	f7ff ffcc 	bl	8002c58 <eeprom_config_write_bank>
	d_printf("Config write");
 8002cc0:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <eeprom_config_write+0x38>)
 8002cc2:	f7ff ff03 	bl	8002acc <d_printf>

	f_AdcDataBad = TRUE;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <eeprom_config_write+0x3c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]

	nConfigBank ^= 1;
 8002ccc:	7823      	ldrb	r3, [r4, #0]
 8002cce:	4053      	eors	r3, r2
 8002cd0:	7023      	strb	r3, [r4, #0]


}
 8002cd2:	bd10      	pop	{r4, pc}
 8002cd4:	20000440 	.word	0x20000440
 8002cd8:	0800510c 	.word	0x0800510c
 8002cdc:	200000b0 	.word	0x200000b0
 8002ce0:	08005134 	.word	0x08005134
 8002ce4:	20000574 	.word	0x20000574

08002ce8 <factory_config_write>:
}

//==============================================================================
// Запись заводских настроек во FLASH
//
void factory_config_write(void){
 8002ce8:	b510      	push	{r4, lr}

	eeprom_config_write_bank(2);
 8002cea:	2002      	movs	r0, #2
 8002cec:	f7ff ffb4 	bl	8002c58 <eeprom_config_write_bank>

	d_printf("\n\rFactory config write");
 8002cf0:	4801      	ldr	r0, [pc, #4]	; (8002cf8 <factory_config_write+0x10>)
 8002cf2:	f7ff feeb 	bl	8002acc <d_printf>

}
 8002cf6:	bd10      	pop	{r4, pc}
 8002cf8:	08005144 	.word	0x08005144

08002cfc <factory_config_read>:

//==============================================================================
// Чтение заводских настроек из FLASH
//
BOOL factory_config_read(void){
 8002cfc:	b510      	push	{r4, lr}
 8002cfe:	b0bc      	sub	sp, #240	; 0xf0

	uint32_t tmp;

	// Чтение заводских настроек во временную структуру

	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 8002d00:	2300      	movs	r3, #0
 8002d02:	e007      	b.n	8002d14 <factory_config_read+0x18>

		((uint32_t*) &ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * 2 + (i * 4)));
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4919      	ldr	r1, [pc, #100]	; (8002d6c <factory_config_read+0x70>)
 8002d08:	1859      	adds	r1, r3, r1
 8002d0a:	6808      	ldr	r0, [r1, #0]
 8002d0c:	a901      	add	r1, sp, #4
 8002d0e:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 8002d10:	3201      	adds	r2, #1
 8002d12:	b253      	sxtb	r3, r2
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	2a3a      	cmp	r2, #58	; 0x3a
 8002d18:	d9f4      	bls.n	8002d04 <factory_config_read+0x8>
	}

	// Проверка CRC

	crc = CalcCRC((uint32_t*)&ConfigTmp, (EEPROM_CONFIG_LEN/4)-1);
 8002d1a:	213a      	movs	r1, #58	; 0x3a
 8002d1c:	a801      	add	r0, sp, #4
 8002d1e:	f7fe ffc1 	bl	8001ca4 <CalcCRC>

	if( ConfigTmp.crc != crc){
 8002d22:	23e8      	movs	r3, #232	; 0xe8
 8002d24:	466a      	mov	r2, sp
 8002d26:	3204      	adds	r2, #4
 8002d28:	58d3      	ldr	r3, [r2, r3]
 8002d2a:	4283      	cmp	r3, r0
 8002d2c:	d006      	beq.n	8002d3c <factory_config_read+0x40>

		d_printf("\n\rNo Data Factory",0);
 8002d2e:	2100      	movs	r1, #0
 8002d30:	480f      	ldr	r0, [pc, #60]	; (8002d70 <factory_config_read+0x74>)
 8002d32:	f7ff fecb 	bl	8002acc <d_printf>

		return FALSE;
 8002d36:	2000      	movs	r0, #0

	eeprom_config_write();

	return TRUE;

}
 8002d38:	b03c      	add	sp, #240	; 0xf0
 8002d3a:	bd10      	pop	{r4, pc}
	d_printf("\n\rLoad Factory");
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <factory_config_read+0x78>)
 8002d3e:	f7ff fec5 	bl	8002acc <d_printf>
	tmp = dev.Config.Counter;
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <factory_config_read+0x7c>)
 8002d44:	681c      	ldr	r4, [r3, #0]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	2a3a      	cmp	r2, #58	; 0x3a
 8002d4c:	d807      	bhi.n	8002d5e <factory_config_read+0x62>
		((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp)[i];
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	a901      	add	r1, sp, #4
 8002d52:	58c8      	ldr	r0, [r1, r3]
 8002d54:	4908      	ldr	r1, [pc, #32]	; (8002d78 <factory_config_read+0x7c>)
 8002d56:	50c8      	str	r0, [r1, r3]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8002d58:	3201      	adds	r2, #1
 8002d5a:	b253      	sxtb	r3, r2
 8002d5c:	e7f4      	b.n	8002d48 <factory_config_read+0x4c>
	dev.Config.Counter = tmp;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <factory_config_read+0x7c>)
 8002d60:	601c      	str	r4, [r3, #0]
	eeprom_config_write();
 8002d62:	f7ff ffa1 	bl	8002ca8 <eeprom_config_write>
	return TRUE;
 8002d66:	2001      	movs	r0, #1
 8002d68:	e7e6      	b.n	8002d38 <factory_config_read+0x3c>
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	080801d8 	.word	0x080801d8
 8002d70:	0800515c 	.word	0x0800515c
 8002d74:	08005170 	.word	0x08005170
 8002d78:	20000440 	.word	0x20000440

08002d7c <read_config_from_eeprom>:
void read_config_from_eeprom(void){
 8002d7c:	b530      	push	{r4, r5, lr}
 8002d7e:	b0f9      	sub	sp, #484	; 0x1e4
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 8002d80:	2300      	movs	r3, #0
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	2a75      	cmp	r2, #117	; 0x75
 8002d86:	d808      	bhi.n	8002d9a <read_config_from_eeprom+0x1e>
		((uint32_t*) ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + (i * 4)));
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4943      	ldr	r1, [pc, #268]	; (8002e98 <read_config_from_eeprom+0x11c>)
 8002d8c:	1859      	adds	r1, r3, r1
 8002d8e:	6808      	ldr	r0, [r1, #0]
 8002d90:	a902      	add	r1, sp, #8
 8002d92:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 8002d94:	3201      	adds	r2, #1
 8002d96:	b253      	sxtb	r3, r2
 8002d98:	e7f3      	b.n	8002d82 <read_config_from_eeprom+0x6>
	for(int8_t i = 0; i < 2; i++){
 8002d9a:	2400      	movs	r4, #0
 8002d9c:	e004      	b.n	8002da8 <read_config_from_eeprom+0x2c>
			fValid[i] = TRUE;
 8002d9e:	ab01      	add	r3, sp, #4
 8002da0:	2201      	movs	r2, #1
 8002da2:	551a      	strb	r2, [r3, r4]
	for(int8_t i = 0; i < 2; i++){
 8002da4:	3401      	adds	r4, #1
 8002da6:	b264      	sxtb	r4, r4
 8002da8:	2c01      	cmp	r4, #1
 8002daa:	dc12      	bgt.n	8002dd2 <read_config_from_eeprom+0x56>
		crc = CalcCRC((uint32_t*)&ConfigTmp[i], (EEPROM_CONFIG_LEN/4)-1);
 8002dac:	25ec      	movs	r5, #236	; 0xec
 8002dae:	4365      	muls	r5, r4
 8002db0:	ab02      	add	r3, sp, #8
 8002db2:	1958      	adds	r0, r3, r5
 8002db4:	213a      	movs	r1, #58	; 0x3a
 8002db6:	f7fe ff75 	bl	8001ca4 <CalcCRC>
		if( ConfigTmp[i].crc == crc){
 8002dba:	ab02      	add	r3, sp, #8
 8002dbc:	469c      	mov	ip, r3
 8002dbe:	4465      	add	r5, ip
 8002dc0:	002b      	movs	r3, r5
 8002dc2:	33e8      	adds	r3, #232	; 0xe8
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4283      	cmp	r3, r0
 8002dc8:	d0e9      	beq.n	8002d9e <read_config_from_eeprom+0x22>
			fValid[i] = FALSE;
 8002dca:	ab01      	add	r3, sp, #4
 8002dcc:	2200      	movs	r2, #0
 8002dce:	551a      	strb	r2, [r3, r4]
 8002dd0:	e7e8      	b.n	8002da4 <read_config_from_eeprom+0x28>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 8002dd2:	ab01      	add	r3, sp, #4
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d010      	beq.n	8002dfc <read_config_from_eeprom+0x80>
	}else if((fValid[0] == FALSE) && (fValid[1] == TRUE)){
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <read_config_from_eeprom+0x6a>
 8002dde:	aa01      	add	r2, sp, #4
 8002de0:	7852      	ldrb	r2, [r2, #1]
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	d01e      	beq.n	8002e24 <read_config_from_eeprom+0xa8>
		nConfigBank = 0;
 8002de6:	4a2d      	ldr	r2, [pc, #180]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002de8:	2100      	movs	r1, #0
 8002dea:	7011      	strb	r1, [r2, #0]
	if((fValid[0] == FALSE) && (fValid[1] == FALSE)){
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d132      	bne.n	8002e56 <read_config_from_eeprom+0xda>
 8002df0:	ab01      	add	r3, sp, #4
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d019      	beq.n	8002e2c <read_config_from_eeprom+0xb0>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e02d      	b.n	8002e58 <read_config_from_eeprom+0xdc>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 8002dfc:	aa01      	add	r2, sp, #4
 8002dfe:	7852      	ldrb	r2, [r2, #1]
 8002e00:	2a01      	cmp	r2, #1
 8002e02:	d1ea      	bne.n	8002dda <read_config_from_eeprom+0x5e>
		if(ConfigTmp[0].Counter < ConfigTmp[1].Counter){
 8002e04:	32eb      	adds	r2, #235	; 0xeb
 8002e06:	4669      	mov	r1, sp
 8002e08:	2008      	movs	r0, #8
 8002e0a:	1809      	adds	r1, r1, r0
 8002e0c:	588a      	ldr	r2, [r1, r2]
 8002e0e:	9902      	ldr	r1, [sp, #8]
 8002e10:	4291      	cmp	r1, r2
 8002e12:	d203      	bcs.n	8002e1c <read_config_from_eeprom+0xa0>
			nConfigBank = 1;
 8002e14:	4a21      	ldr	r2, [pc, #132]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	7011      	strb	r1, [r2, #0]
 8002e1a:	e7e7      	b.n	8002dec <read_config_from_eeprom+0x70>
			nConfigBank = 0;
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	7011      	strb	r1, [r2, #0]
 8002e22:	e7e3      	b.n	8002dec <read_config_from_eeprom+0x70>
		nConfigBank = 1;
 8002e24:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	7011      	strb	r1, [r2, #0]
 8002e2a:	e7df      	b.n	8002dec <read_config_from_eeprom+0x70>
		if(!factory_config_read()){
 8002e2c:	f7ff ff66 	bl	8002cfc <factory_config_read>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d129      	bne.n	8002e88 <read_config_from_eeprom+0x10c>
			dev_set_config_default();
 8002e34:	f000 fbaa 	bl	800358c <dev_set_config_default>
			d_printf("\n\r%SetDef",0);
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4819      	ldr	r0, [pc, #100]	; (8002ea0 <read_config_from_eeprom+0x124>)
 8002e3c:	f7ff fe46 	bl	8002acc <d_printf>
			nConfigBank = 0;
 8002e40:	4c16      	ldr	r4, [pc, #88]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e42:	2500      	movs	r5, #0
 8002e44:	7025      	strb	r5, [r4, #0]
			eeprom_config_write();
 8002e46:	f7ff ff2f 	bl	8002ca8 <eeprom_config_write>
			nConfigBank = 0;
 8002e4a:	7025      	strb	r5, [r4, #0]
			ArhivStoreNote(ARCHIVE_SET_CONFIG_DEFAULT, 0);
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2009      	movs	r0, #9
 8002e50:	f000 f8e6 	bl	8003020 <ArhivStoreNote>
 8002e54:	e018      	b.n	8002e88 <read_config_from_eeprom+0x10c>
 8002e56:	2300      	movs	r3, #0
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	2a3a      	cmp	r2, #58	; 0x3a
 8002e5c:	d80d      	bhi.n	8002e7a <read_config_from_eeprom+0xfe>
			((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp[nConfigBank])[i];
 8002e5e:	490f      	ldr	r1, [pc, #60]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e60:	7808      	ldrb	r0, [r1, #0]
 8002e62:	21ec      	movs	r1, #236	; 0xec
 8002e64:	4341      	muls	r1, r0
 8002e66:	a802      	add	r0, sp, #8
 8002e68:	4684      	mov	ip, r0
 8002e6a:	4461      	add	r1, ip
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	58c8      	ldr	r0, [r1, r3]
 8002e70:	490c      	ldr	r1, [pc, #48]	; (8002ea4 <read_config_from_eeprom+0x128>)
 8002e72:	50c8      	str	r0, [r1, r3]
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8002e74:	3201      	adds	r2, #1
 8002e76:	b253      	sxtb	r3, r2
 8002e78:	e7ee      	b.n	8002e58 <read_config_from_eeprom+0xdc>
		d_printf("\n\rConfigBank-%d, CNT-%d", nConfigBank, dev.Config.Counter);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <read_config_from_eeprom+0x128>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e80:	7819      	ldrb	r1, [r3, #0]
 8002e82:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <read_config_from_eeprom+0x12c>)
 8002e84:	f7ff fe22 	bl	8002acc <d_printf>
	nConfigBank ^= 1;
 8002e88:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <read_config_from_eeprom+0x120>)
 8002e8a:	7813      	ldrb	r3, [r2, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	404b      	eors	r3, r1
 8002e90:	7013      	strb	r3, [r2, #0]
}
 8002e92:	b079      	add	sp, #484	; 0x1e4
 8002e94:	bd30      	pop	{r4, r5, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	08080000 	.word	0x08080000
 8002e9c:	200000b0 	.word	0x200000b0
 8002ea0:	08005180 	.word	0x08005180
 8002ea4:	20000440 	.word	0x20000440
 8002ea8:	0800518c 	.word	0x0800518c

08002eac <FLASH_UNLOCK>:
//=============================================================================
// Снятие блокировки FLASH для стирания и записи
//
void FLASH_UNLOCK(void){

  FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <FLASH_UNLOCK+0x44>)
 8002eae:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <FLASH_UNLOCK+0x48>)
 8002eb0:	60da      	str	r2, [r3, #12]
  FLASH->PEKEYR = (uint32_t) 0x02030405U;
 8002eb2:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <FLASH_UNLOCK+0x4c>)
 8002eb4:	60da      	str	r2, [r3, #12]

  if(READ_BIT(FLASH->PECR, FLASH_PECR_PELOCK)){
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	07db      	lsls	r3, r3, #31
 8002eba:	d509      	bpl.n	8002ed0 <FLASH_UNLOCK+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec0:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <FLASH_UNLOCK+0x44>)
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <FLASH_UNLOCK+0x48>)
 8002ec6:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002ec8:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <FLASH_UNLOCK+0x4c>)
 8002eca:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

  if (READ_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK)){
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <FLASH_UNLOCK+0x44>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	079b      	lsls	r3, r3, #30
 8002ed6:	d509      	bpl.n	8002eec <FLASH_UNLOCK+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002edc:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <FLASH_UNLOCK+0x44>)
 8002ee0:	4906      	ldr	r1, [pc, #24]	; (8002efc <FLASH_UNLOCK+0x50>)
 8002ee2:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);
 8002ee4:	4906      	ldr	r1, [pc, #24]	; (8002f00 <FLASH_UNLOCK+0x54>)
 8002ee6:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

}
 8002eec:	4770      	bx	lr
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	89abcdef 	.word	0x89abcdef
 8002ef8:	02030405 	.word	0x02030405
 8002efc:	8c9daebf 	.word	0x8c9daebf
 8002f00:	13141516 	.word	0x13141516

08002f04 <FLASH_LOCK>:
//=============================================================================
// Восстановление блокировки FLASH
//
void FLASH_LOCK(void){

  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <FLASH_LOCK+0x14>)
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	3101      	adds	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]

}
 8002f16:	4770      	bx	lr
 8002f18:	40022000 	.word	0x40022000

08002f1c <FlashWaitNoBSY>:
void FlashWaitNoBSY(void){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 8002f1c:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_BSY) != 0){
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <FlashWaitNoBSY+0x20>)
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	07db      	lsls	r3, r3, #31
 8002f24:	d508      	bpl.n	8002f38 <FlashWaitNoBSY+0x1c>
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <FlashWaitNoBSY+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 8002f2a:	03db      	lsls	r3, r3, #15
 8002f2c:	d5f7      	bpl.n	8002f1e <FlashWaitNoBSY+0x2>
    {
      if(Timeout-- == 0)
 8002f2e:	1e53      	subs	r3, r2, #1
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d001      	beq.n	8002f38 <FlashWaitNoBSY+0x1c>
 8002f34:	001a      	movs	r2, r3
 8002f36:	e7f2      	b.n	8002f1e <FlashWaitNoBSY+0x2>

  }

//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 8002f38:	4770      	bx	lr
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <FlashWaitEOP>:
void FlashWaitEOP(){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 8002f44:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <FlashWaitEOP+0x24>)
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	079b      	lsls	r3, r3, #30
 8002f4c:	d408      	bmi.n	8002f60 <FlashWaitEOP+0x1c>
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <FlashWaitEOP+0x28>)
 8002f50:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 8002f52:	03db      	lsls	r3, r3, #15
 8002f54:	d5f7      	bpl.n	8002f46 <FlashWaitEOP+0x2>
    {
      if(Timeout-- == 0)
 8002f56:	1e53      	subs	r3, r2, #1
 8002f58:	2a00      	cmp	r2, #0
 8002f5a:	d004      	beq.n	8002f66 <FlashWaitEOP+0x22>
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	e7f2      	b.n	8002f46 <FlashWaitEOP+0x2>
      }
    }

  }

  FLASH->SR = FLASH_SR_EOP;
 8002f60:	4b01      	ldr	r3, [pc, #4]	; (8002f68 <FlashWaitEOP+0x24>)
 8002f62:	2202      	movs	r2, #2
 8002f64:	619a      	str	r2, [r3, #24]
//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 8002f66:	4770      	bx	lr
 8002f68:	40022000 	.word	0x40022000
 8002f6c:	e000e010 	.word	0xe000e010

08002f70 <FlashPageErase>:

//=============================================================================
// Стирание страницы FLASH
//
void FlashPageErase(uint32_t *ptr){
 8002f70:	b570      	push	{r4, r5, r6, lr}

  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002f72:	4c0d      	ldr	r4, [pc, #52]	; (8002fa8 <FlashPageErase+0x38>)
 8002f74:	6862      	ldr	r2, [r4, #4]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	6063      	str	r3, [r4, #4]

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002f7e:	6863      	ldr	r3, [r4, #4]
 8002f80:	2508      	movs	r5, #8
 8002f82:	432b      	orrs	r3, r5
 8002f84:	6063      	str	r3, [r4, #4]

  *(__IO uint32_t *)((uint32_t)ptr & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002f86:	237f      	movs	r3, #127	; 0x7f
 8002f88:	4398      	bics	r0, r3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6003      	str	r3, [r0, #0]

  FlashWaitNoBSY();
 8002f8e:	f7ff ffc5 	bl	8002f1c <FlashWaitNoBSY>
  FlashWaitEOP();
 8002f92:	f7ff ffd7 	bl	8002f44 <FlashWaitEOP>


  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002f96:	6863      	ldr	r3, [r4, #4]
 8002f98:	43ab      	bics	r3, r5
 8002f9a:	6063      	str	r3, [r4, #4]

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002f9c:	6863      	ldr	r3, [r4, #4]
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <FlashPageErase+0x3c>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	6063      	str	r3, [r4, #4]

}
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40022000 	.word	0x40022000
 8002fac:	fffffdff 	.word	0xfffffdff

08002fb0 <FlashProgram>:
// stat - вид записи
// data - данные записи
// Возвращает TRUE, если FLASH не стёрта и записанные
// данные помечены как недействительные
//
BOOL FlashProgram(uint32_t *ptr, uint8_t stat, uint32_t data){
 8002fb0:	b570      	push	{r4, r5, r6, lr}
 8002fb2:	0004      	movs	r4, r0
 8002fb4:	0015      	movs	r5, r2

  BOOL no_erase = FALSE;

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002fb6:	4a18      	ldr	r2, [pc, #96]	; (8003018 <FlashProgram+0x68>)
 8002fb8:	6853      	ldr	r3, [r2, #4]
 8002fba:	2008      	movs	r0, #8
 8002fbc:	4303      	orrs	r3, r0
 8002fbe:	6053      	str	r3, [r2, #4]

  if(*(__IO uint32_t *)((uint32_t)ptr) == 0){
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <FlashProgram+0x4a>
    *(__IO uint32_t *)((uint32_t)ptr) = ((stat & 0x7F) << 24) | (0xFFFFFF & arh.MHour);
 8002fc6:	0609      	lsls	r1, r1, #24
 8002fc8:	23fe      	movs	r3, #254	; 0xfe
 8002fca:	05db      	lsls	r3, r3, #23
 8002fcc:	4019      	ands	r1, r3
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <FlashProgram+0x6c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	0a1b      	lsrs	r3, r3, #8
 8002fd6:	4319      	orrs	r1, r3
 8002fd8:	6021      	str	r1, [r4, #0]
  BOOL no_erase = FALSE;
 8002fda:	2600      	movs	r6, #0
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8002fdc:	f7ff ffb2 	bl	8002f44 <FlashWaitEOP>

  if(*(__IO uint32_t *)((uint32_t)ptr+4) == 0){
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d110      	bne.n	8003008 <FlashProgram+0x58>
    *(__IO uint32_t *)((uint32_t)ptr+4) = data;
 8002fe6:	6065      	str	r5, [r4, #4]
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8002fe8:	f7ff ffac 	bl	8002f44 <FlashWaitEOP>

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <FlashProgram+0x68>)
 8002fee:	6853      	ldr	r3, [r2, #4]
 8002ff0:	2108      	movs	r1, #8
 8002ff2:	438b      	bics	r3, r1
 8002ff4:	6053      	str	r3, [r2, #4]

  return no_erase;
}
 8002ff6:	0030      	movs	r0, r6
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8002ffa:	6822      	ldr	r2, [r4, #0]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	061b      	lsls	r3, r3, #24
 8003000:	4313      	orrs	r3, r2
 8003002:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 8003004:	2601      	movs	r6, #1
 8003006:	e7e9      	b.n	8002fdc <FlashProgram+0x2c>
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4313      	orrs	r3, r2
 8003010:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 8003012:	2601      	movs	r6, #1
 8003014:	e7e8      	b.n	8002fe8 <FlashProgram+0x38>
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	40022000 	.word	0x40022000
 800301c:	200000f8 	.word	0x200000f8

08003020 <ArhivStoreNote>:
//=============================================================================
// Сохранение записи во FLASH
// stat - вид записи
// data - данные записи
//
void ArhivStoreNote(uint8_t stat, uint32_t data){
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	0007      	movs	r7, r0
 8003024:	000e      	movs	r6, r1

  uint32_t *ptr;
  BOOL flg_no_erase;
  uint16_t write_cnt = 0;

  FLASH_UNLOCK();
 8003026:	f7ff ff41 	bl	8002eac <FLASH_UNLOCK>
  uint16_t write_cnt = 0;
 800302a:	2500      	movs	r5, #0
 800302c:	e00d      	b.n	800304a <ArhivStoreNote+0x2a>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;

    // Если указатель на начало страницы
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
//      DBG_OUT2_HI;
      FlashPageErase(ptr);
 800302e:	0020      	movs	r0, r4
 8003030:	f7ff ff9e 	bl	8002f70 <FlashPageErase>
 8003034:	e012      	b.n	800305c <ArhivStoreNote+0x3c>
    }

    flg_no_erase = FlashProgram(ptr, stat, data);

    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 8003036:	3301      	adds	r3, #1
 8003038:	b29b      	uxth	r3, r3
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <ArhivStoreNote+0x5c>)
 800303c:	8113      	strh	r3, [r2, #8]

    write_cnt++;
 800303e:	3501      	adds	r5, #1
 8003040:	b2ad      	uxth	r5, r5
    // Продолжать если была попытка записи в нестёртую ячейку и не превышен размер страницы
  }while((flg_no_erase == TRUE) && (write_cnt < (FLASH_PAGE_SIZE / ARHIV_SIZE_ITEM / 4)));
 8003042:	2801      	cmp	r0, #1
 8003044:	d116      	bne.n	8003074 <ArhivStoreNote+0x54>
 8003046:	2d0f      	cmp	r5, #15
 8003048:	d814      	bhi.n	8003074 <ArhivStoreNote+0x54>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <ArhivStoreNote+0x5c>)
 800304c:	891c      	ldrh	r4, [r3, #8]
 800304e:	00e4      	lsls	r4, r4, #3
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <ArhivStoreNote+0x60>)
 8003052:	469c      	mov	ip, r3
 8003054:	4464      	add	r4, ip
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
 8003056:	237f      	movs	r3, #127	; 0x7f
 8003058:	421c      	tst	r4, r3
 800305a:	d0e8      	beq.n	800302e <ArhivStoreNote+0xe>
    flg_no_erase = FlashProgram(ptr, stat, data);
 800305c:	0032      	movs	r2, r6
 800305e:	0039      	movs	r1, r7
 8003060:	0020      	movs	r0, r4
 8003062:	f7ff ffa5 	bl	8002fb0 <FlashProgram>
    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <ArhivStoreNote+0x5c>)
 8003068:	891b      	ldrh	r3, [r3, #8]
 800306a:	4a06      	ldr	r2, [pc, #24]	; (8003084 <ArhivStoreNote+0x64>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d9e2      	bls.n	8003036 <ArhivStoreNote+0x16>
 8003070:	2300      	movs	r3, #0
 8003072:	e7e2      	b.n	800303a <ArhivStoreNote+0x1a>

  FLASH_LOCK();
 8003074:	f7ff ff46 	bl	8002f04 <FLASH_LOCK>

//  DBG_OUT2_LO;

  //	eeprom_config_write_sync();

}
 8003078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	200000f8 	.word	0x200000f8
 8003080:	08006000 	.word	0x08006000
 8003084:	000003fe 	.word	0x000003fe

08003088 <modbus_init>:
uint8_t mbs_pkt_tx[MBS_TX_BUF_SIZE];


BOOL f_mbs_packet_rcv = FALSE;

void modbus_init(void){
 8003088:	b510      	push	{r4, lr}

	mbs_rx_cnt = 0;
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <modbus_init+0x3c>)
 800308c:	2200      	movs	r2, #0
 800308e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003090:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	2101      	movs	r1, #1
 8003096:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <modbus_init+0x40>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2404      	movs	r4, #4
 80030a0:	4322      	orrs	r2, r4
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	341c      	adds	r4, #28
 80030b4:	4322      	orrs	r2, r4
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

	LL_LPUART_EnableDirectionRx(MBS_LPUART);
	LL_LPUART_EnableIT_RXNE(MBS_LPUART);
	LL_LPUART_Enable(MBS_LPUART);

}
 80030c2:	bd10      	pop	{r4, pc}
 80030c4:	20000314 	.word	0x20000314
 80030c8:	40004800 	.word	0x40004800

080030cc <Modbus_TO_timer>:

void Modbus_TO_timer(void){

	//memcpy(mbs_pkt_rx, mbs_buff_rx, mbs_rx_cnt);
	mbs_rx_pkt_len = mbs_rx_cnt;
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <Modbus_TO_timer+0x14>)
 80030ce:	8819      	ldrh	r1, [r3, #0]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <Modbus_TO_timer+0x18>)
 80030d2:	8011      	strh	r1, [r2, #0]

	mbs_rx_cnt = 0;
 80030d4:	2200      	movs	r2, #0
 80030d6:	801a      	strh	r2, [r3, #0]
	f_mbs_packet_rcv = TRUE;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <Modbus_TO_timer+0x1c>)
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]

}
 80030de:	4770      	bx	lr
 80030e0:	20000314 	.word	0x20000314
 80030e4:	20000318 	.word	0x20000318
 80030e8:	200000b1 	.word	0x200000b1

080030ec <Modbus_RXNEmpty_Callback>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <Modbus_RXNEmpty_Callback+0x34>)
 80030ee:	6a59      	ldr	r1, [r3, #36]	; 0x24

void Modbus_RXNEmpty_Callback(void){

	uint8_t tmp = LL_USART_ReceiveData8(MBS_LPUART);

	mbs_pkt_rx[mbs_rx_cnt] = tmp;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <Modbus_RXNEmpty_Callback+0x38>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <Modbus_RXNEmpty_Callback+0x3c>)
 80030f6:	54d1      	strb	r1, [r2, r3]

	if(mbs_rx_cnt < (MBS_RX_BUF_SIZE-1)){
 80030f8:	2bfe      	cmp	r3, #254	; 0xfe
 80030fa:	d802      	bhi.n	8003102 <Modbus_RXNEmpty_Callback+0x16>
		mbs_rx_cnt++;
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <Modbus_RXNEmpty_Callback+0x38>)
 8003100:	8013      	strh	r3, [r2, #0]
	}

	if(mbs_rx_cnt == 1){
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <Modbus_RXNEmpty_Callback+0x38>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d003      	beq.n	8003112 <Modbus_RXNEmpty_Callback+0x26>
		  LL_TIM_EnableCounter(TIM22);
	}

    TIM22->CNT = 0;
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <Modbus_RXNEmpty_Callback+0x40>)
 800310c:	2200      	movs	r2, #0
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003110:	4770      	bx	lr
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003112:	4a06      	ldr	r2, [pc, #24]	; (800312c <Modbus_RXNEmpty_Callback+0x40>)
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	430b      	orrs	r3, r1
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	e7f5      	b.n	800310a <Modbus_RXNEmpty_Callback+0x1e>
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40004800 	.word	0x40004800
 8003124:	20000314 	.word	0x20000314
 8003128:	20000214 	.word	0x20000214
 800312c:	40011400 	.word	0x40011400

08003130 <Modbus_TXEmpty_Callback>:

void Modbus_TXEmpty_Callback(void){
 8003130:	b510      	push	{r4, lr}

	if(mbs_tx_cnt < mbs_tx_len){
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <Modbus_TXEmpty_Callback+0x54>)
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <Modbus_TXEmpty_Callback+0x58>)
 8003138:	8812      	ldrh	r2, [r2, #0]
 800313a:	4293      	cmp	r3, r2
 800313c:	d209      	bcs.n	8003152 <Modbus_TXEmpty_Callback+0x22>

		LL_USART_TransmitData8(MBS_LPUART,mbs_pkt_tx[mbs_tx_cnt]);
 800313e:	4913      	ldr	r1, [pc, #76]	; (800318c <Modbus_TXEmpty_Callback+0x5c>)
 8003140:	5cc8      	ldrb	r0, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8003142:	4913      	ldr	r1, [pc, #76]	; (8003190 <Modbus_TXEmpty_Callback+0x60>)
 8003144:	6288      	str	r0, [r1, #40]	; 0x28
		mbs_tx_cnt++;
 8003146:	3301      	adds	r3, #1
 8003148:	b29b      	uxth	r3, r3
 800314a:	490e      	ldr	r1, [pc, #56]	; (8003184 <Modbus_TXEmpty_Callback+0x54>)
 800314c:	800b      	strh	r3, [r1, #0]

		if(mbs_tx_cnt == mbs_tx_len){
 800314e:	429a      	cmp	r2, r3
 8003150:	d000      	beq.n	8003154 <Modbus_TXEmpty_Callback+0x24>

		}

	}

}
 8003152:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003154:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	2101      	movs	r1, #1
 800315a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <Modbus_TXEmpty_Callback+0x60>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2480      	movs	r4, #128	; 0x80
 8003164:	43a2      	bics	r2, r4
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	313f      	adds	r1, #63	; 0x3f
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f380 8810 	msr	PRIMASK, r0
 8003180:	e7e7      	b.n	8003152 <Modbus_TXEmpty_Callback+0x22>
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	20000316 	.word	0x20000316
 8003188:	2000031a 	.word	0x2000031a
 800318c:	2000031c 	.word	0x2000031c
 8003190:	40004800 	.word	0x40004800

08003194 <Modbus_LPUART_IRQHandler>:
void Modbus_LPUART_IRQHandler(void){
 8003194:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	069b      	lsls	r3, r3, #26
 800319c:	d505      	bpl.n	80031aa <Modbus_LPUART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	069b      	lsls	r3, r3, #26
 80031a4:	d501      	bpl.n	80031aa <Modbus_LPUART_IRQHandler+0x16>
		Modbus_RXNEmpty_Callback();
 80031a6:	f7ff ffa1 	bl	80030ec <Modbus_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	d505      	bpl.n	80031be <Modbus_LPUART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	d501      	bpl.n	80031be <Modbus_LPUART_IRQHandler+0x2a>
		Modbus_TXEmpty_Callback();
 80031ba:	f7ff ffb9 	bl	8003130 <Modbus_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	065b      	lsls	r3, r3, #25
 80031c4:	d51a      	bpl.n	80031fc <Modbus_LPUART_IRQHandler+0x68>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	065b      	lsls	r3, r3, #25
 80031cc:	d516      	bpl.n	80031fc <Modbus_LPUART_IRQHandler+0x68>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031d0:	2040      	movs	r0, #64	; 0x40
 80031d2:	6218      	str	r0, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d8:	2101      	movs	r1, #1
 80031da:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4382      	bics	r2, r0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	3103      	adds	r1, #3
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f380 8810 	msr	PRIMASK, r0
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	d502      	bpl.n	800320a <Modbus_LPUART_IRQHandler+0x76>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <Modbus_LPUART_IRQHandler+0x78>)
 8003206:	2208      	movs	r2, #8
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bd10      	pop	{r4, pc}
 800320c:	40004800 	.word	0x40004800

08003210 <TimeOut_Set_I2C>:
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
}

//==============================================================================
static void TimeOut_Set_I2C(uint32_t timeOut)
{
 8003210:	b082      	sub	sp, #8
	__IO uint32_t  tmp;
	tmp = SysTick->CTRL;
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <TimeOut_Set_I2C+0x14>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	9301      	str	r3, [sp, #4]

	((void)tmp);
 8003218:	9b01      	ldr	r3, [sp, #4]

	TimeOutDelay = timeOut+1;
 800321a:	3001      	adds	r0, #1
 800321c:	4b02      	ldr	r3, [pc, #8]	; (8003228 <TimeOut_Set_I2C+0x18>)
 800321e:	6018      	str	r0, [r3, #0]
}
 8003220:	b002      	add	sp, #8
 8003222:	4770      	bx	lr
 8003224:	e000e010 	.word	0xe000e010
 8003228:	200000b8 	.word	0x200000b8

0800322c <TimeOut_Read_I2C>:

static BOOL TimeOut_Read_I2C(void)
{
	if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <TimeOut_Read_I2C+0x28>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	03db      	lsls	r3, r3, #15
 8003232:	d503      	bpl.n	800323c <TimeOut_Read_I2C+0x10>
	{
		TimeOutDelay--;
 8003234:	4a08      	ldr	r2, [pc, #32]	; (8003258 <TimeOut_Read_I2C+0x2c>)
 8003236:	6813      	ldr	r3, [r2, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	6013      	str	r3, [r2, #0]
	}

	if(TimeOutDelay > 0){
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <TimeOut_Read_I2C+0x2c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <TimeOut_Read_I2C+0x24>
		return FALSE;
	}

	TimeOutCnt++;
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <TimeOut_Read_I2C+0x30>)
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	6013      	str	r3, [r2, #0]

	return TRUE;
 800324c:	2001      	movs	r0, #1
}
 800324e:	4770      	bx	lr
		return FALSE;
 8003250:	2000      	movs	r0, #0
 8003252:	e7fc      	b.n	800324e <TimeOut_Read_I2C+0x22>
 8003254:	e000e010 	.word	0xe000e010
 8003258:	200000b8 	.word	0x200000b8
 800325c:	200000b4 	.word	0x200000b4

08003260 <I2C_ByteSend>:
{
 8003260:	b510      	push	{r4, lr}
 8003262:	0004      	movs	r4, r0
	TimeOut_Set_I2C(I2C_TO);
 8003264:	2001      	movs	r0, #1
 8003266:	f7ff ffd3 	bl	8003210 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_TXIS(ADS_PORT))
 800326a:	f7ff ffdf 	bl	800322c <TimeOut_Read_I2C>
 800326e:	2800      	cmp	r0, #0
 8003270:	d105      	bne.n	800327e <I2C_ByteSend+0x1e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <I2C_ByteSend+0x24>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	079b      	lsls	r3, r3, #30
 8003278:	d401      	bmi.n	800327e <I2C_ByteSend+0x1e>
		__NOP();
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	e7f5      	b.n	800326a <I2C_ByteSend+0xa>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800327e:	4b01      	ldr	r3, [pc, #4]	; (8003284 <I2C_ByteSend+0x24>)
 8003280:	629c      	str	r4, [r3, #40]	; 0x28
}
 8003282:	bd10      	pop	{r4, pc}
 8003284:	40005400 	.word	0x40005400

08003288 <ADS_WRITE_REG>:
{
 8003288:	b510      	push	{r4, lr}
 800328a:	000c      	movs	r4, r1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800328c:	490f      	ldr	r1, [pc, #60]	; (80032cc <ADS_WRITE_REG+0x44>)
 800328e:	684b      	ldr	r3, [r1, #4]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <ADS_WRITE_REG+0x48>)
 8003292:	401a      	ands	r2, r3
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <ADS_WRITE_REG+0x4c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
	I2C_ByteSend(reg);
 800329a:	f7ff ffe1 	bl	8003260 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data>>8));
 800329e:	0a20      	lsrs	r0, r4, #8
 80032a0:	f7ff ffde 	bl	8003260 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data));
 80032a4:	b2e0      	uxtb	r0, r4
 80032a6:	f7ff ffdb 	bl	8003260 <I2C_ByteSend>
	TimeOut_Set_I2C(I2C_TO);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7ff ffb0 	bl	8003210 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 80032b0:	f7ff ffbc 	bl	800322c <TimeOut_Read_I2C>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d103      	bne.n	80032c0 <ADS_WRITE_REG+0x38>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <ADS_WRITE_REG+0x44>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	069b      	lsls	r3, r3, #26
 80032be:	d5f7      	bpl.n	80032b0 <ADS_WRITE_REG+0x28>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80032c0:	4a02      	ldr	r2, [pc, #8]	; (80032cc <ADS_WRITE_REG+0x44>)
 80032c2:	69d3      	ldr	r3, [r2, #28]
 80032c4:	2120      	movs	r1, #32
 80032c6:	430b      	orrs	r3, r1
 80032c8:	61d3      	str	r3, [r2, #28]
}
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	40005400 	.word	0x40005400
 80032d0:	fc008000 	.word	0xfc008000
 80032d4:	82032090 	.word	0x82032090

080032d8 <ADS_READ_REG>:
{
 80032d8:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80032da:	4c22      	ldr	r4, [pc, #136]	; (8003364 <ADS_READ_REG+0x8c>)
 80032dc:	6862      	ldr	r2, [r4, #4]
 80032de:	4d22      	ldr	r5, [pc, #136]	; (8003368 <ADS_READ_REG+0x90>)
 80032e0:	402a      	ands	r2, r5
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <ADS_READ_REG+0x94>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	6063      	str	r3, [r4, #4]
	I2C_ByteSend(reg);
 80032e8:	f7ff ffba 	bl	8003260 <I2C_ByteSend>
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	401d      	ands	r5, r3
 80032f0:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <ADS_READ_REG+0x98>)
 80032f2:	432b      	orrs	r3, r5
 80032f4:	6063      	str	r3, [r4, #4]
	TimeOut_Set_I2C(I2C_TO);
 80032f6:	2001      	movs	r0, #1
 80032f8:	f7ff ff8a 	bl	8003210 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 80032fc:	f7ff ff96 	bl	800322c <TimeOut_Read_I2C>
 8003300:	2800      	cmp	r0, #0
 8003302:	d103      	bne.n	800330c <ADS_READ_REG+0x34>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <ADS_READ_REG+0x8c>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	075b      	lsls	r3, r3, #29
 800330a:	d5f7      	bpl.n	80032fc <ADS_READ_REG+0x24>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800330c:	4b15      	ldr	r3, [pc, #84]	; (8003364 <ADS_READ_REG+0x8c>)
 800330e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003310:	b2ed      	uxtb	r5, r5
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8003312:	f7ff ff8b 	bl	800322c <TimeOut_Read_I2C>
 8003316:	2800      	cmp	r0, #0
 8003318:	d103      	bne.n	8003322 <ADS_READ_REG+0x4a>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <ADS_READ_REG+0x8c>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	075b      	lsls	r3, r3, #29
 8003320:	d5f7      	bpl.n	8003312 <ADS_READ_REG+0x3a>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <ADS_READ_REG+0x8c>)
 8003324:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003326:	b2e4      	uxtb	r4, r4
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	01d2      	lsls	r2, r2, #7
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
	TimeOut_Set_I2C(I2C_TO);
 8003332:	2001      	movs	r0, #1
 8003334:	f7ff ff6c 	bl	8003210 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8003338:	f7ff ff78 	bl	800322c <TimeOut_Read_I2C>
 800333c:	2800      	cmp	r0, #0
 800333e:	d103      	bne.n	8003348 <ADS_READ_REG+0x70>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <ADS_READ_REG+0x8c>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	069b      	lsls	r3, r3, #26
 8003346:	d5f7      	bpl.n	8003338 <ADS_READ_REG+0x60>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8003348:	4a06      	ldr	r2, [pc, #24]	; (8003364 <ADS_READ_REG+0x8c>)
 800334a:	69d3      	ldr	r3, [r2, #28]
 800334c:	2120      	movs	r1, #32
 800334e:	430b      	orrs	r3, r1
 8003350:	61d3      	str	r3, [r2, #28]
	return (((byte[0]<<8) + byte[1]) + 0x8000);
 8003352:	0228      	lsls	r0, r5, #8
 8003354:	1820      	adds	r0, r4, r0
 8003356:	b280      	uxth	r0, r0
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <ADS_READ_REG+0x9c>)
 800335a:	469c      	mov	ip, r3
 800335c:	4460      	add	r0, ip
 800335e:	b280      	uxth	r0, r0
}
 8003360:	bd70      	pop	{r4, r5, r6, pc}
 8003362:	46c0      	nop			; (mov r8, r8)
 8003364:	40005400 	.word	0x40005400
 8003368:	fc008000 	.word	0xfc008000
 800336c:	81012090 	.word	0x81012090
 8003370:	80022490 	.word	0x80022490
 8003374:	ffff8000 	.word	0xffff8000

08003378 <ADS_Init>:
{
 8003378:	b510      	push	{r4, lr}
	config_ads = (gain |
 800337a:	2184      	movs	r1, #132	; 0x84
 800337c:	31ff      	adds	r1, #255	; 0xff
 800337e:	4301      	orrs	r1, r0
 8003380:	4b02      	ldr	r3, [pc, #8]	; (800338c <ADS_Init+0x14>)
 8003382:	8019      	strh	r1, [r3, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, config_ads);
 8003384:	2001      	movs	r0, #1
 8003386:	f7ff ff7f 	bl	8003288 <ADS_WRITE_REG>
}
 800338a:	bd10      	pop	{r4, pc}
 800338c:	200000bc 	.word	0x200000bc

08003390 <ADS_Read_Diff>:
{
 8003390:	b510      	push	{r4, lr}
	config_ads &=~ ADS_CONFIG_REG_PGA_MASK;
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <ADS_Read_Diff+0x4c>)
 8003394:	8813      	ldrh	r3, [r2, #0]
 8003396:	4c12      	ldr	r4, [pc, #72]	; (80033e0 <ADS_Read_Diff+0x50>)
 8003398:	4023      	ands	r3, r4
	config_ads |= gain;
 800339a:	430b      	orrs	r3, r1
	config_ads &=~ ADS_CONFIG_REG_MUX_MASK;
 800339c:	4911      	ldr	r1, [pc, #68]	; (80033e4 <ADS_Read_Diff+0x54>)
 800339e:	400b      	ands	r3, r1
	config_ads |= data;
 80033a0:	4318      	orrs	r0, r3
 80033a2:	8010      	strh	r0, [r2, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, (config_ads | ADS_CONFIG_REG_OS_SINGLE));
 80033a4:	4910      	ldr	r1, [pc, #64]	; (80033e8 <ADS_Read_Diff+0x58>)
 80033a6:	4301      	orrs	r1, r0
 80033a8:	b289      	uxth	r1, r1
 80033aa:	2001      	movs	r0, #1
 80033ac:	f7ff ff6c 	bl	8003288 <ADS_WRITE_REG>
	uint16_t time_conversion = 10;
 80033b0:	240a      	movs	r4, #10
	while(!((ADS_READ_REG(ADS_CONFIG_REG) & ADS_CONFIG_REG_OS_MASK) == 0) && time_conversion--);
 80033b2:	e000      	b.n	80033b6 <ADS_Read_Diff+0x26>
 80033b4:	0004      	movs	r4, r0
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7ff ff8e 	bl	80032d8 <ADS_READ_REG>
 80033bc:	0403      	lsls	r3, r0, #16
 80033be:	d506      	bpl.n	80033ce <ADS_Read_Diff+0x3e>
 80033c0:	1e60      	subs	r0, r4, #1
 80033c2:	b280      	uxth	r0, r0
 80033c4:	2c00      	cmp	r4, #0
 80033c6:	d1f5      	bne.n	80033b4 <ADS_Read_Diff+0x24>
	if(time_conversion == 0)
 80033c8:	2800      	cmp	r0, #0
 80033ca:	d102      	bne.n	80033d2 <ADS_Read_Diff+0x42>
}
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	0020      	movs	r0, r4
 80033d0:	e7fa      	b.n	80033c8 <ADS_Read_Diff+0x38>
	data = ADS_READ_REG(ADS_CONVERSION_REG);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7ff ff80 	bl	80032d8 <ADS_READ_REG>
	return data;
 80033d8:	e7f8      	b.n	80033cc <ADS_Read_Diff+0x3c>
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	200000bc 	.word	0x200000bc
 80033e0:	fffff1ff 	.word	0xfffff1ff
 80033e4:	ffff8fff 	.word	0xffff8fff
 80033e8:	ffff8000 	.word	0xffff8000

080033ec <ADS_Read_adc>:
{
 80033ec:	b510      	push	{r4, lr}
 80033ee:	0001      	movs	r1, r0
	return ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_0_1, gain);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7ff ffcd 	bl	8003390 <ADS_Read_Diff>
}
 80033f6:	bd10      	pop	{r4, pc}

080033f8 <ADS_Read_volt>:
{
 80033f8:	b510      	push	{r4, lr}
 80033fa:	0004      	movs	r4, r0
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <ADS_Read_volt+0x78>)
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	23e0      	movs	r3, #224	; 0xe0
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	401a      	ands	r2, r3
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	429a      	cmp	r2, r3
 800340c:	d022      	beq.n	8003454 <ADS_Read_volt+0x5c>
 800340e:	d80f      	bhi.n	8003430 <ADS_Read_volt+0x38>
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d020      	beq.n	800345a <ADS_Read_volt+0x62>
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	429a      	cmp	r2, r3
 800341e:	d102      	bne.n	8003426 <ADS_Read_volt+0x2e>
		fsRange = 2048;
 8003420:	2080      	movs	r0, #128	; 0x80
 8003422:	0100      	lsls	r0, r0, #4
 8003424:	e00e      	b.n	8003444 <ADS_Read_volt+0x4c>
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8003426:	2a00      	cmp	r2, #0
 8003428:	d11a      	bne.n	8003460 <ADS_Read_volt+0x68>
 800342a:	20c0      	movs	r0, #192	; 0xc0
 800342c:	0140      	lsls	r0, r0, #5
 800342e:	e009      	b.n	8003444 <ADS_Read_volt+0x4c>
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	429a      	cmp	r2, r3
 8003436:	d015      	beq.n	8003464 <ADS_Read_volt+0x6c>
 8003438:	23a0      	movs	r3, #160	; 0xa0
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	429a      	cmp	r2, r3
 800343e:	d114      	bne.n	800346a <ADS_Read_volt+0x72>
		fsRange = 256;
 8003440:	2080      	movs	r0, #128	; 0x80
 8003442:	0040      	lsls	r0, r0, #1
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
 8003444:	490b      	ldr	r1, [pc, #44]	; (8003474 <ADS_Read_volt+0x7c>)
 8003446:	4348      	muls	r0, r1
 8003448:	13c0      	asrs	r0, r0, #15
 800344a:	4360      	muls	r0, r4
 800344c:	f7fc fef8 	bl	8000240 <__divsi3>
 8003450:	b280      	uxth	r0, r0
}
 8003452:	bd10      	pop	{r4, pc}
		fsRange = 1024;
 8003454:	2080      	movs	r0, #128	; 0x80
 8003456:	00c0      	lsls	r0, r0, #3
 8003458:	e7f4      	b.n	8003444 <ADS_Read_volt+0x4c>
		fsRange = 4096;
 800345a:	2080      	movs	r0, #128	; 0x80
 800345c:	0140      	lsls	r0, r0, #5
 800345e:	e7f1      	b.n	8003444 <ADS_Read_volt+0x4c>
		fsRange = 0;
 8003460:	2000      	movs	r0, #0
 8003462:	e7ef      	b.n	8003444 <ADS_Read_volt+0x4c>
		fsRange = 512;
 8003464:	2080      	movs	r0, #128	; 0x80
 8003466:	0080      	lsls	r0, r0, #2
 8003468:	e7ec      	b.n	8003444 <ADS_Read_volt+0x4c>
		fsRange = 0;
 800346a:	2000      	movs	r0, #0
 800346c:	e7ea      	b.n	8003444 <ADS_Read_volt+0x4c>
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	200000bc 	.word	0x200000bc
 8003474:	00002710 	.word	0x00002710

08003478 <timer_1_128>:
BOOL f_readADC = FALSE;

void timer_1_128(void)
{

	Cnt_1_128++;
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <timer_1_128+0x80>)
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	6013      	str	r3, [r2, #0]
	///000
	if(TimerRxMipex){
 8003480:	4b1e      	ldr	r3, [pc, #120]	; (80034fc <timer_1_128+0x84>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <timer_1_128+0x16>
		TimerRxMipex--;
 8003488:	3b01      	subs	r3, #1
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <timer_1_128+0x84>)
 800348c:	8013      	strh	r3, [r2, #0]
	}
	if(CntTo250ms < (32-1)){
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <timer_1_128+0x88>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b1e      	cmp	r3, #30
 8003494:	d803      	bhi.n	800349e <timer_1_128+0x26>

		CntTo250ms++;
 8003496:	3301      	adds	r3, #1
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <timer_1_128+0x88>)
 800349a:	7013      	strb	r3, [r2, #0]
		}

		CntTo500ms ^= 1;

	}
}
 800349c:	4770      	bx	lr
		f_Time250ms = TRUE;
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <timer_1_128+0x8c>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
		CntTo250ms = 0;
 80034a4:	4b16      	ldr	r3, [pc, #88]	; (8003500 <timer_1_128+0x88>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
		if(CntTo500ms == 0){
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <timer_1_128+0x90>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <timer_1_128+0x66>
			f_Time500ms = TRUE;
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <timer_1_128+0x94>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	7011      	strb	r1, [r2, #0]
			CntToSec ^= 1;
 80034b8:	4915      	ldr	r1, [pc, #84]	; (8003510 <timer_1_128+0x98>)
 80034ba:	780a      	ldrb	r2, [r1, #0]
 80034bc:	2001      	movs	r0, #1
 80034be:	4042      	eors	r2, r0
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	700a      	strb	r2, [r1, #0]
			if(CntToSec == 0){
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	d10a      	bne.n	80034de <timer_1_128+0x66>
				CntSec++;
 80034c8:	4912      	ldr	r1, [pc, #72]	; (8003514 <timer_1_128+0x9c>)
 80034ca:	680a      	ldr	r2, [r1, #0]
 80034cc:	3201      	adds	r2, #1
 80034ce:	600a      	str	r2, [r1, #0]
				CntTo2min++;
 80034d0:	4911      	ldr	r1, [pc, #68]	; (8003518 <timer_1_128+0xa0>)
 80034d2:	780a      	ldrb	r2, [r1, #0]
 80034d4:	3201      	adds	r2, #1
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	700a      	strb	r2, [r1, #0]
				if(CntTo2min == 120){// 2 минуты
 80034da:	2a78      	cmp	r2, #120	; 0x78
 80034dc:	d004      	beq.n	80034e8 <timer_1_128+0x70>
		CntTo500ms ^= 1;
 80034de:	2201      	movs	r2, #1
 80034e0:	4053      	eors	r3, r2
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <timer_1_128+0x90>)
 80034e4:	7013      	strb	r3, [r2, #0]
}
 80034e6:	e7d9      	b.n	800349c <timer_1_128+0x24>
					CntTo2min = 0;
 80034e8:	000a      	movs	r2, r1
 80034ea:	2100      	movs	r1, #0
 80034ec:	7011      	strb	r1, [r2, #0]
					f_Time2min = TRUE;
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <timer_1_128+0xa4>)
 80034f0:	3101      	adds	r1, #1
 80034f2:	7011      	strb	r1, [r2, #0]
 80034f4:	e7f3      	b.n	80034de <timer_1_128+0x66>
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	200000c8 	.word	0x200000c8
 80034fc:	20000428 	.word	0x20000428
 8003500:	20000572 	.word	0x20000572
 8003504:	200000d5 	.word	0x200000d5
 8003508:	20000573 	.word	0x20000573
 800350c:	200000d6 	.word	0x200000d6
 8003510:	200000c5 	.word	0x200000c5
 8003514:	200000c0 	.word	0x200000c0
 8003518:	200000c4 	.word	0x200000c4
 800351c:	20000024 	.word	0x20000024

08003520 <serviceTimerStart>:

}

void serviceTimerStart(uint16_t time)
{
	serviceTimer = time;
 8003520:	4b01      	ldr	r3, [pc, #4]	; (8003528 <serviceTimerStart+0x8>)
 8003522:	8018      	strh	r0, [r3, #0]
}
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000586 	.word	0x20000586

0800352c <serviceTimerStop>:

void serviceTimerStop(void)
{
 800352c:	b510      	push	{r4, lr}

	mbServiceMode = FALSE;
 800352e:	2300      	movs	r3, #0
 8003530:	4a08      	ldr	r2, [pc, #32]	; (8003554 <serviceTimerStop+0x28>)
 8003532:	7013      	strb	r3, [r2, #0]
	dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 8003534:	4808      	ldr	r0, [pc, #32]	; (8003558 <serviceTimerStop+0x2c>)
 8003536:	2196      	movs	r1, #150	; 0x96
 8003538:	0049      	lsls	r1, r1, #1
 800353a:	5a42      	ldrh	r2, [r0, r1]
 800353c:	2404      	movs	r4, #4
 800353e:	43a2      	bics	r2, r4
 8003540:	5242      	strh	r2, [r0, r1]
	mbHoldDevStatus = dev.Status;
 8003542:	4906      	ldr	r1, [pc, #24]	; (800355c <serviceTimerStop+0x30>)
 8003544:	800a      	strh	r2, [r1, #0]

	mbUnlock = FALSE;
 8003546:	4a06      	ldr	r2, [pc, #24]	; (8003560 <serviceTimerStop+0x34>)
 8003548:	7013      	strb	r3, [r2, #0]
	AccessCode = 0;
 800354a:	4a06      	ldr	r2, [pc, #24]	; (8003564 <serviceTimerStop+0x38>)
 800354c:	8013      	strh	r3, [r2, #0]

	serviceTimer = 0;
 800354e:	4a06      	ldr	r2, [pc, #24]	; (8003568 <serviceTimerStop+0x3c>)
 8003550:	8013      	strh	r3, [r2, #0]
}
 8003552:	bd10      	pop	{r4, pc}
 8003554:	20000588 	.word	0x20000588
 8003558:	20000440 	.word	0x20000440
 800355c:	2000058a 	.word	0x2000058a
 8003560:	20000592 	.word	0x20000592
 8003564:	2000058e 	.word	0x2000058e
 8003568:	20000586 	.word	0x20000586

0800356c <serviceTimerProc>:
{
 800356c:	b510      	push	{r4, lr}
	if(serviceTimer > 1){
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <serviceTimerProc+0x1c>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d903      	bls.n	800357e <serviceTimerProc+0x12>
		serviceTimer--;
 8003576:	3b01      	subs	r3, #1
 8003578:	4a03      	ldr	r2, [pc, #12]	; (8003588 <serviceTimerProc+0x1c>)
 800357a:	8013      	strh	r3, [r2, #0]
}
 800357c:	bd10      	pop	{r4, pc}
		if(serviceTimer == 1){
 800357e:	2b01      	cmp	r3, #1
 8003580:	d1fc      	bne.n	800357c <serviceTimerProc+0x10>
			serviceTimerStop();
 8003582:	f7ff ffd3 	bl	800352c <serviceTimerStop>
}
 8003586:	e7f9      	b.n	800357c <serviceTimerProc+0x10>
 8003588:	20000586 	.word	0x20000586

0800358c <dev_set_config_default>:
	dev.Config.LMP_Source	= 0x0001;
	dev.Config.LMP_Mode		= 0x0700;
#endif

#ifdef CONFIG_PI
	dev.Config.TypeSensor = (SENSOR_TYPE_PI << 8);
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <dev_set_config_default+0x20>)
 800358e:	22c0      	movs	r2, #192	; 0xc0
 8003590:	0092      	lsls	r2, r2, #2
 8003592:	809a      	strh	r2, [r3, #4]
	dev.Config.Unit = 0x0200|(1 << CFG_UNIT_VALUE_lel);
 8003594:	3af8      	subs	r2, #248	; 0xf8
 8003596:	80da      	strh	r2, [r3, #6]

	dev.Config.ValueLow = 0;
 8003598:	2200      	movs	r2, #0
 800359a:	811a      	strh	r2, [r3, #8]
	dev.Config.ValueHigh = 10000;
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <dev_set_config_default+0x24>)
 800359e:	815a      	strh	r2, [r3, #10]

	dev.Config.ScaleKoef = 10;
 80035a0:	220a      	movs	r2, #10
 80035a2:	865a      	strh	r2, [r3, #50]	; 0x32
	dev.Config.FID = ADS_CONFIG_REG_PGA_0_256V;
 80035a4:	22a0      	movs	r2, #160	; 0xa0
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	86da      	strh	r2, [r3, #54]	; 0x36

	dev.Config.ScaleKoef = 10;
#endif


}
 80035aa:	4770      	bx	lr
 80035ac:	20000440 	.word	0x20000440
 80035b0:	00002710 	.word	0x00002710

080035b4 <dev_init>:

void dev_init(void){

//	dev_set_config_default();

	dev.RegInput.cod_8225 = 8225;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <dev_init+0x28>)
 80035b6:	22ec      	movs	r2, #236	; 0xec
 80035b8:	4909      	ldr	r1, [pc, #36]	; (80035e0 <dev_init+0x2c>)
 80035ba:	5299      	strh	r1, [r3, r2]

	dev.RegInput.VerSW = 0x0101;
 80035bc:	3202      	adds	r2, #2
 80035be:	2102      	movs	r1, #2
 80035c0:	31ff      	adds	r1, #255	; 0xff
 80035c2:	5299      	strh	r1, [r3, r2]
	dev.RegInput.VerSW_Build = 0x0001;
 80035c4:	3aed      	subs	r2, #237	; 0xed
 80035c6:	3911      	subs	r1, #17
 80035c8:	525a      	strh	r2, [r3, r1]

	dev.Status = (1 << STATUS_BIT_MAIN_INIT);
 80035ca:	313c      	adds	r1, #60	; 0x3c
 80035cc:	525a      	strh	r2, [r3, r1]

	dev.RegInput.TimeToOffHeat = INIT_MODE_TIME;
 80035ce:	3218      	adds	r2, #24
 80035d0:	32ff      	adds	r2, #255	; 0xff
 80035d2:	3928      	subs	r1, #40	; 0x28
 80035d4:	39ff      	subs	r1, #255	; 0xff
 80035d6:	5299      	strh	r1, [r3, r2]
}
 80035d8:	4770      	bx	lr
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	20000440 	.word	0x20000440
 80035e0:	00002021 	.word	0x00002021

080035e4 <delay_us>:
	static uint32_t time_warm_dec_period;// Декремент периода
	static float CounterDec = 0;

	void delay_us(uint32_t us)
	{
		TIM2->CNT = 0;
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	05db      	lsls	r3, r3, #23
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
		while (TIM2->CNT < us);
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	05db      	lsls	r3, r3, #23
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	4283      	cmp	r3, r0
 80035f4:	d3fa      	bcc.n	80035ec <delay_us+0x8>
	}
 80035f6:	4770      	bx	lr

080035f8 <heat_proc>:
	static uint16_t Counter = 0;
	static uint16_t CounterDecPeriod = 0;
	static uint8_t flagPulse;
#endif
void heat_proc(void)
{
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	46c6      	mov	lr, r8
 80035fc:	b500      	push	{lr}

#if WARM_OPTION
	if(dev.Status & (1 << STATUS_BIT_MAIN_INIT)){
 80035fe:	4a23      	ldr	r2, [pc, #140]	; (800368c <heat_proc+0x94>)
 8003600:	2396      	movs	r3, #150	; 0x96
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	5ad3      	ldrh	r3, [r2, r3]
 8003606:	07db      	lsls	r3, r3, #31
 8003608:	d53b      	bpl.n	8003682 <heat_proc+0x8a>
		time_warm_dec_period = (uint32_t)((float)time_warm_all/((CounterPulse + CounterPulseDuty)/1000.0));
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <heat_proc+0x98>)
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <heat_proc+0x9c>)
 800360e:	601a      	str	r2, [r3, #0]
		CounterDec = (float)(CounterPulseDuty - CounterPulse)/(float)time_warm_dec_period;
 8003610:	4b21      	ldr	r3, [pc, #132]	; (8003698 <heat_proc+0xa0>)
 8003612:	4a22      	ldr	r2, [pc, #136]	; (800369c <heat_proc+0xa4>)
 8003614:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 0; i < time_warm_dec_period; i++){
 8003616:	2500      	movs	r5, #0
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <heat_proc+0x98>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	42ab      	cmp	r3, r5
 800361e:	d92a      	bls.n	8003676 <heat_proc+0x7e>
			SET_HEAT_OFF;
 8003620:	4f1f      	ldr	r7, [pc, #124]	; (80036a0 <heat_proc+0xa8>)
 8003622:	2302      	movs	r3, #2
 8003624:	4698      	mov	r8, r3
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
			delay_us(CounterPulse + (uint32_t)(CounterDec*i + 0.5));
 8003628:	0028      	movs	r0, r5
 800362a:	f7fd f919 	bl	8000860 <__aeabi_ui2f>
 800362e:	1c04      	adds	r4, r0, #0
 8003630:	4e19      	ldr	r6, [pc, #100]	; (8003698 <heat_proc+0xa0>)
 8003632:	6831      	ldr	r1, [r6, #0]
 8003634:	f7fc fffa 	bl	800062c <__aeabi_fmul>
 8003638:	f7fe f880 	bl	800173c <__aeabi_f2d>
 800363c:	2200      	movs	r2, #0
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <heat_proc+0xac>)
 8003640:	f7fd f94a 	bl	80008d8 <__aeabi_dadd>
 8003644:	f7fc ff08 	bl	8000458 <__aeabi_d2uiz>
 8003648:	3001      	adds	r0, #1
 800364a:	f7ff ffcb 	bl	80035e4 <delay_us>
			SET_HEAT_ON;
 800364e:	4643      	mov	r3, r8
 8003650:	61bb      	str	r3, [r7, #24]
			delay_us(CounterPulseDuty - (uint32_t)(CounterDec*i + 0.5));
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	1c20      	adds	r0, r4, #0
 8003656:	f7fc ffe9 	bl	800062c <__aeabi_fmul>
 800365a:	f7fe f86f 	bl	800173c <__aeabi_f2d>
 800365e:	2200      	movs	r2, #0
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <heat_proc+0xac>)
 8003662:	f7fd f939 	bl	80008d8 <__aeabi_dadd>
 8003666:	f7fc fef7 	bl	8000458 <__aeabi_d2uiz>
 800366a:	2314      	movs	r3, #20
 800366c:	1a18      	subs	r0, r3, r0
 800366e:	f7ff ffb9 	bl	80035e4 <delay_us>
		for(uint32_t i = 0; i < time_warm_dec_period; i++){
 8003672:	3501      	adds	r5, #1
 8003674:	e7d0      	b.n	8003618 <heat_proc+0x20>
		}
		// Включаем питание на сенсоре
		SET_HEAT_OFF;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <heat_proc+0xa8>)
 8003678:	2202      	movs	r2, #2
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
	else{
		// Включаем питание на сенсоре
		SET_HEAT_OFF;
	}
}
 800367c:	bc80      	pop	{r7}
 800367e:	46b8      	mov	r8, r7
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SET_HEAT_OFF;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <heat_proc+0xa8>)
 8003684:	2202      	movs	r2, #2
 8003686:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003688:	e7f8      	b.n	800367c <heat_proc+0x84>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	20000440 	.word	0x20000440
 8003690:	200000d8 	.word	0x200000d8
 8003694:	0003a20f 	.word	0x0003a20f
 8003698:	200000cc 	.word	0x200000cc
 800369c:	38a75a57 	.word	0x38a75a57
 80036a0:	50000400 	.word	0x50000400
 80036a4:	3fe00000 	.word	0x3fe00000

080036a8 <dev_proc>:
#endif
//==============================================================================
void dev_proc(void)
{
 80036a8:	b510      	push	{r4, lr}
	if(dev.RegInput.TimeToOffHeat != 0)
 80036aa:	4a19      	ldr	r2, [pc, #100]	; (8003710 <dev_proc+0x68>)
 80036ac:	238c      	movs	r3, #140	; 0x8c
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	5ad3      	ldrh	r3, [r2, r3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <dev_proc+0x1e>
		dev.RegInput.TimeToOffHeat = INIT_MODE_TIME - CntSec;
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <dev_proc+0x6c>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2305      	movs	r3, #5
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	4914      	ldr	r1, [pc, #80]	; (8003710 <dev_proc+0x68>)
 80036c0:	228c      	movs	r2, #140	; 0x8c
 80036c2:	0052      	lsls	r2, r2, #1
 80036c4:	528b      	strh	r3, [r1, r2]

	// Если окончен режим инициализации
	if(((dev.Status & (1 << STATUS_BIT_MAIN_INIT)) != 0) && (CntSec >= INIT_MODE_TIME)){
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <dev_proc+0x68>)
 80036c8:	2396      	movs	r3, #150	; 0x96
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	5ad3      	ldrh	r3, [r2, r3]
 80036ce:	07da      	lsls	r2, r3, #31
 80036d0:	d514      	bpl.n	80036fc <dev_proc+0x54>
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <dev_proc+0x6c>)
 80036d4:	6812      	ldr	r2, [r2, #0]
 80036d6:	2a04      	cmp	r2, #4
 80036d8:	dd10      	ble.n	80036fc <dev_proc+0x54>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_INIT);
 80036da:	2201      	movs	r2, #1
 80036dc:	4393      	bics	r3, r2
		dev.Status |= (1 << STATUS_BIT_MAIN_RUN);
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <dev_proc+0x68>)
 80036e0:	2102      	movs	r1, #2
 80036e2:	430b      	orrs	r3, r1
 80036e4:	2196      	movs	r1, #150	; 0x96
 80036e6:	0049      	lsls	r1, r1, #1
 80036e8:	5253      	strh	r3, [r2, r1]
		dev.RegInput.TimeToOffHeat = 0;
 80036ea:	238c      	movs	r3, #140	; 0x8c
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2100      	movs	r1, #0
 80036f0:	52d1      	strh	r1, [r2, r3]
		// Выключаем системный таймер
		SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <dev_proc+0x70>)
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	3102      	adds	r1, #2
 80036f8:	438b      	bics	r3, r1
 80036fa:	6013      	str	r3, [r2, #0]
	}

	serviceTimerProc();
 80036fc:	f7ff ff36 	bl	800356c <serviceTimerProc>

	mbHoldDevStatus = dev.Status;
 8003700:	4a03      	ldr	r2, [pc, #12]	; (8003710 <dev_proc+0x68>)
 8003702:	2396      	movs	r3, #150	; 0x96
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	5ad2      	ldrh	r2, [r2, r3]
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <dev_proc+0x74>)
 800370a:	801a      	strh	r2, [r3, #0]
		d_printf("(%04X %04X) %04X %04X", ADC_in_Temper, ADC_in[0], ADC_in[1], ADC_in[2]);
		d_printf(" |  (TV:%05d) TIA:%05d V:%05d T_LMP:%02d (T_MPU:%02d)", ADC_in_mVolt_Temper, ADC_in_mVolt_TIA,  ADC_in_RefVoltage, LMP_temper, ADC_in_Celsius);
#endif
#endif

}
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000440 	.word	0x20000440
 8003714:	200000c0 	.word	0x200000c0
 8003718:	e000e010 	.word	0xe000e010
 800371c:	2000058a 	.word	0x2000058a

08003720 <Adc_Eoc_Callback>:
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <Adc_Eoc_Callback+0x38>)
 8003722:	681b      	ldr	r3, [r3, #0]

//==============================================================================
void Adc_Eoc_Callback(void)
{

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8003724:	071b      	lsls	r3, r3, #28
 8003726:	d502      	bpl.n	800372e <Adc_Eoc_Callback+0xe>
		adc_cnt = 2;
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <Adc_Eoc_Callback+0x3c>)
 800372a:	2202      	movs	r2, #2
 800372c:	701a      	strb	r2, [r3, #0]
	}

	ADC_in[adc_cnt] = LL_ADC_REG_ReadConversionData12(ADC1);
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <Adc_Eoc_Callback+0x3c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <Adc_Eoc_Callback+0x38>)
 8003734:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8003736:	005a      	lsls	r2, r3, #1
 8003738:	4909      	ldr	r1, [pc, #36]	; (8003760 <Adc_Eoc_Callback+0x40>)
 800373a:	5288      	strh	r0, [r1, r2]

	if(adc_cnt >= 2){
 800373c:	2b01      	cmp	r3, #1
 800373e:	d906      	bls.n	800374e <Adc_Eoc_Callback+0x2e>

		f_AdcCycleEnd = TRUE;
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <Adc_Eoc_Callback+0x44>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
		adc_cnt = 0;
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <Adc_Eoc_Callback+0x3c>)
 8003748:	2200      	movs	r2, #0
 800374a:	701a      	strb	r2, [r3, #0]

		adc_cnt++;

	}

}
 800374c:	4770      	bx	lr
		adc_cnt++;
 800374e:	3301      	adds	r3, #1
 8003750:	4a02      	ldr	r2, [pc, #8]	; (800375c <Adc_Eoc_Callback+0x3c>)
 8003752:	7013      	strb	r3, [r2, #0]
}
 8003754:	e7fa      	b.n	800374c <Adc_Eoc_Callback+0x2c>
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	40012400 	.word	0x40012400
 800375c:	200000d4 	.word	0x200000d4
 8003760:	20000438 	.word	0x20000438
 8003764:	20000575 	.word	0x20000575

08003768 <Adc_read_data>:
#endif

#ifdef CONFIG_PI
uint16_t ads0, ads1;
void Adc_read_data(void)
{
 8003768:	b570      	push	{r4, r5, r6, lr}
	ADC_in_RefVoltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_in[1], LL_ADC_RESOLUTION_12B);
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <Adc_read_data+0x94>)
 800376c:	8818      	ldrh	r0, [r3, #0]
 800376e:	4c24      	ldr	r4, [pc, #144]	; (8003800 <Adc_read_data+0x98>)
 8003770:	4360      	muls	r0, r4
 8003772:	4d24      	ldr	r5, [pc, #144]	; (8003804 <Adc_read_data+0x9c>)
 8003774:	8869      	ldrh	r1, [r5, #2]
 8003776:	f7fc fcd9 	bl	800012c <__udivsi3>
 800377a:	4b23      	ldr	r3, [pc, #140]	; (8003808 <Adc_read_data+0xa0>)
 800377c:	6018      	str	r0, [r3, #0]
	ADC_in_Celsius = 10 * __LL_ADC_CALC_TEMPERATURE(ADC_in_RefVoltage, ADC_in[2], LL_ADC_RESOLUTION_12B);
 800377e:	88ab      	ldrh	r3, [r5, #4]
 8003780:	4358      	muls	r0, r3
 8003782:	0021      	movs	r1, r4
 8003784:	f7fc fcd2 	bl	800012c <__udivsi3>
 8003788:	4b20      	ldr	r3, [pc, #128]	; (800380c <Adc_read_data+0xa4>)
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	1a83      	subs	r3, r0, r2
 800378e:	2064      	movs	r0, #100	; 0x64
 8003790:	4358      	muls	r0, r3
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <Adc_read_data+0xa8>)
 8003794:	8819      	ldrh	r1, [r3, #0]
 8003796:	1a89      	subs	r1, r1, r2
 8003798:	f7fc fd52 	bl	8000240 <__divsi3>
 800379c:	0083      	lsls	r3, r0, #2
 800379e:	18c0      	adds	r0, r0, r3
 80037a0:	0040      	lsls	r0, r0, #1
 80037a2:	302d      	adds	r0, #45	; 0x2d
 80037a4:	30ff      	adds	r0, #255	; 0xff
 80037a6:	4e1b      	ldr	r6, [pc, #108]	; (8003814 <Adc_read_data+0xac>)
 80037a8:	8030      	strh	r0, [r6, #0]

	dev.RegInput.ADC_0 = ADS_Read_adc(ADS_CONFIG_REG_PGA_0_256V);
 80037aa:	20a0      	movs	r0, #160	; 0xa0
 80037ac:	0100      	lsls	r0, r0, #4
 80037ae:	f7ff fe1d 	bl	80033ec <ADS_Read_adc>
 80037b2:	4c19      	ldr	r4, [pc, #100]	; (8003818 <Adc_read_data+0xb0>)
 80037b4:	2591      	movs	r5, #145	; 0x91
 80037b6:	006d      	lsls	r5, r5, #1
 80037b8:	5360      	strh	r0, [r4, r5]
	dev.RegInput.Volt_Sens = ADS_Read_volt(dev.RegInput.ADC_0);
 80037ba:	f7ff fe1d 	bl	80033f8 <ADS_Read_volt>
 80037be:	0002      	movs	r2, r0
 80037c0:	23fe      	movs	r3, #254	; 0xfe
 80037c2:	52e0      	strh	r0, [r4, r3]
	dev.RegInput.TempSensor = ADC_in_Celsius;
 80037c4:	2100      	movs	r1, #0
 80037c6:	5e73      	ldrsh	r3, [r6, r1]
 80037c8:	21fc      	movs	r1, #252	; 0xfc
 80037ca:	5263      	strh	r3, [r4, r1]
//	ads0 = ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_0_N, ADS_CONFIG_REG_PGA_0_256V);
//	ads1 = ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_1_N, ADS_CONFIG_REG_PGA_0_256V);
#define DEBUG_ADS1115
#ifdef DEBUG_ADS1115
#ifdef DEBUG_MY
		d_printf("ADC - %05d Volt - %05d Temp:%d", dev.RegInput.ADC_0, dev.RegInput.Volt_Sens,  dev.RegInput.TempSensor);
 80037cc:	5b61      	ldrh	r1, [r4, r5]
 80037ce:	4813      	ldr	r0, [pc, #76]	; (800381c <Adc_read_data+0xb4>)
 80037d0:	f7ff f97c 	bl	8002acc <d_printf>
		d_printf("\n\r");
 80037d4:	4812      	ldr	r0, [pc, #72]	; (8003820 <Adc_read_data+0xb8>)
 80037d6:	f7ff f979 	bl	8002acc <d_printf>
#endif
#endif
	SetGasValue();
 80037da:	f7ff f8c7 	bl	800296c <SetGasValue>
	//--------------------------------------------------------------------
	// Перевод в единицу измерения НКПР
	if(dev.Config.Unit & (1 << CFG_UNIT_VALUE_vol)){
 80037de:	88e3      	ldrh	r3, [r4, #6]
 80037e0:	07db      	lsls	r3, r3, #31
 80037e2:	d50a      	bpl.n	80037fa <Adc_read_data+0x92>
		dev.RegInput.dwValue_mg_m3 = (dev.RegInput.Value*dev.Config.ScaleKoef)/10;
 80037e4:	4c0c      	ldr	r4, [pc, #48]	; (8003818 <Adc_read_data+0xb0>)
 80037e6:	23f6      	movs	r3, #246	; 0xf6
 80037e8:	5ae3      	ldrh	r3, [r4, r3]
 80037ea:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80037ec:	4358      	muls	r0, r3
 80037ee:	210a      	movs	r1, #10
 80037f0:	f7fc fd26 	bl	8000240 <__divsi3>
 80037f4:	238a      	movs	r3, #138	; 0x8a
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	50e0      	str	r0, [r4, r3]
	}
}
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
 80037fc:	1ff80078 	.word	0x1ff80078
 8003800:	00000bb8 	.word	0x00000bb8
 8003804:	20000438 	.word	0x20000438
 8003808:	20000020 	.word	0x20000020
 800380c:	1ff8007a 	.word	0x1ff8007a
 8003810:	1ff8007e 	.word	0x1ff8007e
 8003814:	20000576 	.word	0x20000576
 8003818:	20000440 	.word	0x20000440
 800381c:	080051a4 	.word	0x080051a4
 8003820:	0800510c 	.word	0x0800510c

08003824 <mb_crc>:
}

//==============================================================================

uint16_t mb_crc(uint8_t *buf, int len)
{
 8003824:	b530      	push	{r4, r5, lr}
 8003826:	0005      	movs	r5, r0
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++)
 8003828:	2400      	movs	r4, #0
	uint16_t crc = 0xFFFF;
 800382a:	480a      	ldr	r0, [pc, #40]	; (8003854 <mb_crc+0x30>)
	for (int pos = 0; pos < len; pos++)
 800382c:	e00b      	b.n	8003846 <mb_crc+0x22>
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
				crc >>= 1;
 800382e:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {
 8003830:	3b01      	subs	r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <mb_crc+0x20>
			if ((crc & 0x0001) != 0) {
 8003836:	07c2      	lsls	r2, r0, #31
 8003838:	d5f9      	bpl.n	800382e <mb_crc+0xa>
				crc >>= 1;
 800383a:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <mb_crc+0x34>)
 800383e:	4050      	eors	r0, r2
 8003840:	b280      	uxth	r0, r0
 8003842:	e7f5      	b.n	8003830 <mb_crc+0xc>
	for (int pos = 0; pos < len; pos++)
 8003844:	3401      	adds	r4, #1
 8003846:	428c      	cmp	r4, r1
 8003848:	da03      	bge.n	8003852 <mb_crc+0x2e>
		crc ^= (uint16_t)buf[pos];
 800384a:	5d2b      	ldrb	r3, [r5, r4]
 800384c:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {
 800384e:	2308      	movs	r3, #8
 8003850:	e7ef      	b.n	8003832 <mb_crc+0xe>
		}
	}

	return crc;
}
 8003852:	bd30      	pop	{r4, r5, pc}
 8003854:	0000ffff 	.word	0x0000ffff
 8003858:	ffffa001 	.word	0xffffa001

0800385c <modbusSet>:

//==============================================================================

void modbusSet(void){

	if(mbUnlock){
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <modbusSet+0x4c>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d014      	beq.n	800388e <modbusSet+0x32>
		AccessCode = 1;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <modbusSet+0x50>)
 8003866:	2201      	movs	r2, #1
 8003868:	801a      	strh	r2, [r3, #0]
	else{
		AccessCode = 0;
	}


	if(mbServiceMode){
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <modbusSet+0x54>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d011      	beq.n	8003896 <modbusSet+0x3a>
		dev.Status |= (1 << STATUS_BIT_MAIN_MODE);
 8003872:	4910      	ldr	r1, [pc, #64]	; (80038b4 <modbusSet+0x58>)
 8003874:	2296      	movs	r2, #150	; 0x96
 8003876:	0052      	lsls	r2, r2, #1
 8003878:	5a8b      	ldrh	r3, [r1, r2]
 800387a:	2004      	movs	r0, #4
 800387c:	4303      	orrs	r3, r0
 800387e:	528b      	strh	r3, [r1, r2]
	}else{
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
	}

	mbHoldDevStatus = dev.Status;
 8003880:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <modbusSet+0x58>)
 8003882:	2396      	movs	r3, #150	; 0x96
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	5ad2      	ldrh	r2, [r2, r3]
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <modbusSet+0x5c>)
 800388a:	801a      	strh	r2, [r3, #0]

}
 800388c:	4770      	bx	lr
		AccessCode = 0;
 800388e:	4b07      	ldr	r3, [pc, #28]	; (80038ac <modbusSet+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	801a      	strh	r2, [r3, #0]
 8003894:	e7e9      	b.n	800386a <modbusSet+0xe>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 8003896:	4907      	ldr	r1, [pc, #28]	; (80038b4 <modbusSet+0x58>)
 8003898:	2296      	movs	r2, #150	; 0x96
 800389a:	0052      	lsls	r2, r2, #1
 800389c:	5a8b      	ldrh	r3, [r1, r2]
 800389e:	2004      	movs	r0, #4
 80038a0:	4383      	bics	r3, r0
 80038a2:	528b      	strh	r3, [r1, r2]
 80038a4:	e7ec      	b.n	8003880 <modbusSet+0x24>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000592 	.word	0x20000592
 80038ac:	2000058e 	.word	0x2000058e
 80038b0:	20000588 	.word	0x20000588
 80038b4:	20000440 	.word	0x20000440
 80038b8:	2000058a 	.word	0x2000058a

080038bc <__CMD_PUT_WORD>:

//==============================================================================

void __CMD_PUT_WORD(uint16_t DATA)
{
	Value[0] = HIBYTE(DATA);
 80038bc:	490c      	ldr	r1, [pc, #48]	; (80038f0 <__CMD_PUT_WORD+0x34>)
 80038be:	680b      	ldr	r3, [r1, #0]
 80038c0:	0a02      	lsrs	r2, r0, #8
 80038c2:	701a      	strb	r2, [r3, #0]
	Value[1] = LOBYTE(DATA);
 80038c4:	7058      	strb	r0, [r3, #1]

	(*CountByte) += 2;		Count --;	Value +=2;	AnswerLen += 2;
 80038c6:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <__CMD_PUT_WORD+0x38>)
 80038c8:	6810      	ldr	r0, [r2, #0]
 80038ca:	7802      	ldrb	r2, [r0, #0]
 80038cc:	3202      	adds	r2, #2
 80038ce:	7002      	strb	r2, [r0, #0]
 80038d0:	4809      	ldr	r0, [pc, #36]	; (80038f8 <__CMD_PUT_WORD+0x3c>)
 80038d2:	8802      	ldrh	r2, [r0, #0]
 80038d4:	3a01      	subs	r2, #1
 80038d6:	8002      	strh	r2, [r0, #0]
 80038d8:	3302      	adds	r3, #2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <__CMD_PUT_WORD+0x40>)
 80038de:	7813      	ldrb	r3, [r2, #0]
 80038e0:	3302      	adds	r3, #2
 80038e2:	7013      	strb	r3, [r2, #0]
	Address ++;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <__CMD_PUT_WORD+0x44>)
 80038e6:	8813      	ldrh	r3, [r2, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	8013      	strh	r3, [r2, #0]
}
 80038ec:	4770      	bx	lr
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	200000ec 	.word	0x200000ec
 80038f4:	200000e4 	.word	0x200000e4
 80038f8:	200000e0 	.word	0x200000e0
 80038fc:	200000de 	.word	0x200000de
 8003900:	200000dc 	.word	0x200000dc

08003904 <CmdFunc3>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Чтение группы регистров HOLD

uint32_t CmdFunc3(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8003904:	b510      	push	{r4, lr}
 8003906:	0014      	movs	r4, r2
	//	tmp = 0;
	//	wModeCalib = st_dgs_state.ModeCalib;

	out[0] = mas[0];	// Адрес устройства
 8003908:	7803      	ldrb	r3, [r0, #0]
 800390a:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 800390c:	7843      	ldrb	r3, [r0, #1]
 800390e:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);	// Адрес начального регистра
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <CmdFunc3+0xb4>)
 8003912:	7882      	ldrb	r2, [r0, #2]
 8003914:	705a      	strb	r2, [r3, #1]
 8003916:	78c2      	ldrb	r2, [r0, #3]
 8003918:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);	// Количество регистров
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <CmdFunc3+0xb8>)
 800391c:	7902      	ldrb	r2, [r0, #4]
 800391e:	705a      	strb	r2, [r3, #1]
 8003920:	7942      	ldrb	r2, [r0, #5]
 8003922:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);	// Выходной поток
 8003924:	1ce1      	adds	r1, r4, #3
 8003926:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <CmdFunc3+0xbc>)
 8003928:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);		// Счётчик
 800392a:	1ca1      	adds	r1, r4, #2
 800392c:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <CmdFunc3+0xc0>)
 800392e:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;				// Длина ответа (в байтах)
 8003930:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <CmdFunc3+0xc4>)
 8003932:	2103      	movs	r1, #3
 8003934:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 8003936:	2200      	movs	r2, #0
 8003938:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	1e53      	subs	r3, r2, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b7c      	cmp	r3, #124	; 0x7c
 8003942:	d814      	bhi.n	800396e <CmdFunc3+0x6a>
	}
	//------------------------------------------------------------------------------------------------------------------
	do
	{
#if DEF_REG_ADR_BASE_x03 > 0
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <CmdFunc3+0xb4>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	0149      	lsls	r1, r1, #5
 800394c:	428b      	cmp	r3, r1
 800394e:	d323      	bcc.n	8003998 <CmdFunc3+0x94>
#endif
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8003950:	491e      	ldr	r1, [pc, #120]	; (80039cc <CmdFunc3+0xc8>)
 8003952:	428b      	cmp	r3, r1
 8003954:	d820      	bhi.n	8003998 <CmdFunc3+0x94>
		if( Count > DEF_REG_CNT_x03 ) break;
 8003956:	2a7a      	cmp	r2, #122	; 0x7a
 8003958:	d81e      	bhi.n	8003998 <CmdFunc3+0x94>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 800395a:	189a      	adds	r2, r3, r2
 800395c:	491c      	ldr	r1, [pc, #112]	; (80039d0 <CmdFunc3+0xcc>)
 800395e:	428a      	cmp	r2, r1
 8003960:	dc1a      	bgt.n	8003998 <CmdFunc3+0x94>
#if DEF_REG_ADR_BASE_x03 > 0
		Address -= DEF_REG_ADR_BASE_x03;
 8003962:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <CmdFunc3+0xd0>)
 8003964:	4694      	mov	ip, r2
 8003966:	4463      	add	r3, ip
 8003968:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <CmdFunc3+0xb4>)
 800396a:	8013      	strh	r3, [r2, #0]
		//#define MB_READ_DBG

#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 3 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		while( Count )
 800396c:	e010      	b.n	8003990 <CmdFunc3+0x8c>
		out[1] |= 0x80;
 800396e:	7862      	ldrb	r2, [r4, #1]
 8003970:	2380      	movs	r3, #128	; 0x80
 8003972:	425b      	negs	r3, r3
 8003974:	4313      	orrs	r3, r2
 8003976:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003978:	2302      	movs	r3, #2
 800397a:	70a3      	strb	r3, [r4, #2]
		return(3);
 800397c:	2003      	movs	r0, #3
 800397e:	e011      	b.n	80039a4 <CmdFunc3+0xa0>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x03[ Address ].pVar);
#endif
			CMD_PUT_WORD( *reg_x03[ Address ].pVar );
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <CmdFunc3+0xb4>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <CmdFunc3+0xd4>)
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	8818      	ldrh	r0, [r3, #0]
 800398c:	f7ff ff96 	bl	80038bc <__CMD_PUT_WORD>
		while( Count )
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <CmdFunc3+0xb8>)
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f3      	bne.n	8003980 <CmdFunc3+0x7c>
		}

	} while(0);
	//------------------------------------------------------------------------------------------------------------------
	if( Count )
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <CmdFunc3+0xb8>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <CmdFunc3+0xa2>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return( AnswerLen );
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <CmdFunc3+0xc4>)
 80039a2:	7818      	ldrb	r0, [r3, #0]
}
 80039a4:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 80039a6:	7862      	ldrb	r2, [r4, #1]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	425b      	negs	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80039b0:	2302      	movs	r3, #2
 80039b2:	70a3      	strb	r3, [r4, #2]
		return(3);
 80039b4:	2003      	movs	r0, #3
 80039b6:	e7f5      	b.n	80039a4 <CmdFunc3+0xa0>
 80039b8:	200000dc 	.word	0x200000dc
 80039bc:	200000e0 	.word	0x200000e0
 80039c0:	200000ec 	.word	0x200000ec
 80039c4:	200000e4 	.word	0x200000e4
 80039c8:	200000de 	.word	0x200000de
 80039cc:	00001079 	.word	0x00001079
 80039d0:	0000107a 	.word	0x0000107a
 80039d4:	fffff000 	.word	0xfffff000
 80039d8:	080052ac 	.word	0x080052ac

080039dc <CmdFunc4>:

//======================================================================================================================================
// Чтение группы регистров INPUT

uint32_t CmdFunc4(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80039dc:	b510      	push	{r4, lr}
 80039de:	0014      	movs	r4, r2

	//	tmp = 0;
	out[0] = mas[0];	// Адрес устройства
 80039e0:	7803      	ldrb	r3, [r0, #0]
 80039e2:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 80039e4:	7843      	ldrb	r3, [r0, #1]
 80039e6:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);		// Адрес начального регистра
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <CmdFunc4+0xa0>)
 80039ea:	7882      	ldrb	r2, [r0, #2]
 80039ec:	705a      	strb	r2, [r3, #1]
 80039ee:	78c2      	ldrb	r2, [r0, #3]
 80039f0:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);		// Количество регистров
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <CmdFunc4+0xa4>)
 80039f4:	7902      	ldrb	r2, [r0, #4]
 80039f6:	705a      	strb	r2, [r3, #1]
 80039f8:	7942      	ldrb	r2, [r0, #5]
 80039fa:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);		// Выходной поток
 80039fc:	1ce1      	adds	r1, r4, #3
 80039fe:	4a21      	ldr	r2, [pc, #132]	; (8003a84 <CmdFunc4+0xa8>)
 8003a00:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);			// Счётчик
 8003a02:	1ca1      	adds	r1, r4, #2
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <CmdFunc4+0xac>)
 8003a06:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;					// Длина ответа (в байтах)
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <CmdFunc4+0xb0>)
 8003a0a:	2103      	movs	r1, #3
 8003a0c:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 8003a0e:	2200      	movs	r2, #0
 8003a10:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 8003a12:	881a      	ldrh	r2, [r3, #0]
 8003a14:	1e53      	subs	r3, r2, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b7c      	cmp	r3, #124	; 0x7c
 8003a1a:	d815      	bhi.n	8003a48 <CmdFunc4+0x6c>
	{
		/*if( Count > DEF_REG_CNT_x04 ) break;
		if( (Address + Count) > DEF_REG_CNT_x04 ) break;*/

		if( Address < DEF_REG_ADR_BASE_x04 ) break;
		if( Address >= (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <CmdFunc4+0xa0>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	2b31      	cmp	r3, #49	; 0x31
 8003a22:	d81a      	bhi.n	8003a5a <CmdFunc4+0x7e>
		if( Count > DEF_REG_CNT_x04 ) break;
 8003a24:	2a32      	cmp	r2, #50	; 0x32
 8003a26:	d818      	bhi.n	8003a5a <CmdFunc4+0x7e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 8003a28:	189a      	adds	r2, r3, r2
 8003a2a:	2a32      	cmp	r2, #50	; 0x32
 8003a2c:	dc15      	bgt.n	8003a5a <CmdFunc4+0x7e>
#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 4 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		Address -= DEF_REG_ADR_BASE_x04;

		while( Count )
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <CmdFunc4+0xa4>)
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <CmdFunc4+0x7e>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x04[ Address ]);
#endif
			CMD_PUT_WORD( *reg_x04[ Address ] );
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <CmdFunc4+0xa0>)
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <CmdFunc4+0xb4>)
 8003a3e:	589b      	ldr	r3, [r3, r2]
 8003a40:	8818      	ldrh	r0, [r3, #0]
 8003a42:	f7ff ff3b 	bl	80038bc <__CMD_PUT_WORD>
 8003a46:	e7f2      	b.n	8003a2e <CmdFunc4+0x52>
		out[1] |= 0x80;
 8003a48:	7862      	ldrb	r2, [r4, #1]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	425b      	negs	r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003a52:	2302      	movs	r3, #2
 8003a54:	70a3      	strb	r3, [r4, #2]
		return(3);
 8003a56:	2003      	movs	r0, #3
 8003a58:	e005      	b.n	8003a66 <CmdFunc4+0x8a>
		}
	} while(0);
	//-----------------------------------------------------------------------------------------------------------------
	if(Count)
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <CmdFunc4+0xa4>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <CmdFunc4+0x8c>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return(AnswerLen);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <CmdFunc4+0xb0>)
 8003a64:	7818      	ldrb	r0, [r3, #0]
}
 8003a66:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 8003a68:	7862      	ldrb	r2, [r4, #1]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	425b      	negs	r3, r3
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003a72:	2302      	movs	r3, #2
 8003a74:	70a3      	strb	r3, [r4, #2]
		return(3);
 8003a76:	2003      	movs	r0, #3
 8003a78:	e7f5      	b.n	8003a66 <CmdFunc4+0x8a>
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	200000dc 	.word	0x200000dc
 8003a80:	200000e0 	.word	0x200000e0
 8003a84:	200000ec 	.word	0x200000ec
 8003a88:	200000e4 	.word	0x200000e4
 8003a8c:	200000de 	.word	0x200000de
 8003a90:	0800567c 	.word	0x0800567c

08003a94 <__CMD_SAVE_WORD>:
void __CMD_SAVE_WORD(TVAR *var)
{
#define DATA	*(var->pVar)
#define SAVE	var->bSave

	HIBYTE(DATA)	= Value[0];
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <__CMD_SAVE_WORD+0x34>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	6801      	ldr	r1, [r0, #0]
 8003a9c:	704a      	strb	r2, [r1, #1]
	LOBYTE(DATA)	= Value[1];
 8003a9e:	785a      	ldrb	r2, [r3, #1]
 8003aa0:	6801      	ldr	r1, [r0, #0]
 8003aa2:	700a      	strb	r2, [r1, #0]
	if(SAVE) Save	= SAVE;
 8003aa4:	7902      	ldrb	r2, [r0, #4]
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d001      	beq.n	8003aae <__CMD_SAVE_WORD+0x1a>
 8003aaa:	4908      	ldr	r1, [pc, #32]	; (8003acc <__CMD_SAVE_WORD+0x38>)
 8003aac:	700a      	strb	r2, [r1, #0]
	Address ++;
 8003aae:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <__CMD_SAVE_WORD+0x3c>)
 8003ab0:	880a      	ldrh	r2, [r1, #0]
 8003ab2:	3201      	adds	r2, #1
 8003ab4:	800a      	strh	r2, [r1, #0]
	Count --;
 8003ab6:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__CMD_SAVE_WORD+0x40>)
 8003ab8:	880a      	ldrh	r2, [r1, #0]
 8003aba:	3a01      	subs	r2, #1
 8003abc:	800a      	strh	r2, [r1, #0]
	Value += 2;
 8003abe:	3302      	adds	r3, #2
 8003ac0:	4a01      	ldr	r2, [pc, #4]	; (8003ac8 <__CMD_SAVE_WORD+0x34>)
 8003ac2:	6013      	str	r3, [r2, #0]

#undef DATA
#undef SAVE
}
 8003ac4:	4770      	bx	lr
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	200000ec 	.word	0x200000ec
 8003acc:	200000e8 	.word	0x200000e8
 8003ad0:	200000dc 	.word	0x200000dc
 8003ad4:	200000e0 	.word	0x200000e0

08003ad8 <check_block>:
//======================================================================================================================================


// Защита от случайной порчи настроек

BOOL check_block(void){
 8003ad8:	b500      	push	{lr}
 8003ada:	b083      	sub	sp, #12

	uint16_t tmp;

	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <check_block+0xb0>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <check_block+0x1e>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <check_block+0xb4>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <check_block+0x2a>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <check_block+0xb8>)
 8003aee:	881a      	ldrh	r2, [r3, #0]
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <check_block+0xbc>)
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d005      	beq.n	8003b02 <check_block+0x2a>
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8003af6:	4b26      	ldr	r3, [pc, #152]	; (8003b90 <check_block+0xb8>)
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	015b      	lsls	r3, r3, #5
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d13e      	bne.n	8003b80 <check_block+0xa8>
		return(FALSE);
	}

	// *}

	HIBYTE(tmp)	= Value[0];
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <check_block+0xc0>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	7811      	ldrb	r1, [r2, #0]
 8003b08:	466b      	mov	r3, sp
 8003b0a:	71d9      	strb	r1, [r3, #7]
	LOBYTE(tmp)	= Value[1];
 8003b0c:	7852      	ldrb	r2, [r2, #1]
 8003b0e:	719a      	strb	r2, [r3, #6]

	if(Address == 0x1001){
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <check_block+0xb8>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <check_block+0xbc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d011      	beq.n	8003b3e <check_block+0x66>
			return(FALSE);
		}

	}

	if(Address == 0x1000){
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	0152      	lsls	r2, r2, #5
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d022      	beq.n	8003b68 <check_block+0x90>
			serviceTimerStop();
		}

	}

	if( mbServiceMode || mbUnlock)
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <check_block+0xb0>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <check_block+0x5a>
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <check_block+0xb4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d028      	beq.n	8003b84 <check_block+0xac>
	{ // Преобразователь в сервисном режиме, продлеваем время
		serviceTimerStart( SERVICE_TIME_MODBUS );
 8003b32:	20f1      	movs	r0, #241	; 0xf1
 8003b34:	f7ff fcf4 	bl	8003520 <serviceTimerStart>
	}


	return(TRUE);
 8003b38:	2001      	movs	r0, #1
}
 8003b3a:	b003      	add	sp, #12
 8003b3c:	bd00      	pop	{pc}
		if((tmp == 0xFACD)){
 8003b3e:	466a      	mov	r2, sp
 8003b40:	3206      	adds	r2, #6
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	4915      	ldr	r1, [pc, #84]	; (8003b9c <check_block+0xc4>)
 8003b46:	428a      	cmp	r2, r1
 8003b48:	d005      	beq.n	8003b56 <check_block+0x7e>
		}else if(tmp == 0){
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d107      	bne.n	8003b5e <check_block+0x86>
			mbUnlock = FALSE;
 8003b4e:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <check_block+0xb4>)
 8003b50:	2100      	movs	r1, #0
 8003b52:	7011      	strb	r1, [r2, #0]
 8003b54:	e7e1      	b.n	8003b1a <check_block+0x42>
			mbUnlock = TRUE;
 8003b56:	4a0d      	ldr	r2, [pc, #52]	; (8003b8c <check_block+0xb4>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	7011      	strb	r1, [r2, #0]
 8003b5c:	e7dd      	b.n	8003b1a <check_block+0x42>
		}else if(!mbUnlock){
 8003b5e:	4a0b      	ldr	r2, [pc, #44]	; (8003b8c <check_block+0xb4>)
 8003b60:	7810      	ldrb	r0, [r2, #0]
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d1d9      	bne.n	8003b1a <check_block+0x42>
 8003b66:	e7e8      	b.n	8003b3a <check_block+0x62>
		if( TESTBIT( tmp, STATUS_BIT_MAIN_MODE))
 8003b68:	466b      	mov	r3, sp
 8003b6a:	3306      	adds	r3, #6
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	075b      	lsls	r3, r3, #29
 8003b70:	d503      	bpl.n	8003b7a <check_block+0xa2>
			mbServiceMode = TRUE;
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <check_block+0xb0>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e7d3      	b.n	8003b22 <check_block+0x4a>
			serviceTimerStop();
 8003b7a:	f7ff fcd7 	bl	800352c <serviceTimerStop>
 8003b7e:	e7d0      	b.n	8003b22 <check_block+0x4a>
		return(FALSE);
 8003b80:	2000      	movs	r0, #0
 8003b82:	e7da      	b.n	8003b3a <check_block+0x62>
	return(TRUE);
 8003b84:	2001      	movs	r0, #1
 8003b86:	e7d8      	b.n	8003b3a <check_block+0x62>
 8003b88:	20000588 	.word	0x20000588
 8003b8c:	20000592 	.word	0x20000592
 8003b90:	200000dc 	.word	0x200000dc
 8003b94:	00001001 	.word	0x00001001
 8003b98:	200000ec 	.word	0x200000ec
 8003b9c:	0000facd 	.word	0x0000facd

08003ba0 <modbusCMD>:

//==============================================================================

void modbusCMD(void){
 8003ba0:	b500      	push	{lr}
 8003ba2:	b083      	sub	sp, #12

	uint16_t cmd;

	if(Address != 0x1001)
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <modbusCMD+0x68>)
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <modbusCMD+0x6c>)
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d127      	bne.n	8003bfe <modbusCMD+0x5e>
		return;

	HIBYTE(cmd)	= Value[0];
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <modbusCMD+0x70>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	7811      	ldrb	r1, [r2, #0]
 8003bb4:	466b      	mov	r3, sp
 8003bb6:	71d9      	strb	r1, [r3, #7]
	LOBYTE(cmd)	= Value[1];
 8003bb8:	7852      	ldrb	r2, [r2, #1]
 8003bba:	719a      	strb	r2, [r3, #6]
	HIBYTE(cmd)	= Value[0];
 8003bbc:	3306      	adds	r3, #6

	switch(cmd){
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <modbusCMD+0x74>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <modbusCMD+0x62>
 8003bc6:	d80d      	bhi.n	8003be4 <modbusCMD+0x44>
 8003bc8:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <modbusCMD+0x78>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d010      	beq.n	8003bf0 <modbusCMD+0x50>
 8003bce:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <modbusCMD+0x7c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d114      	bne.n	8003bfe <modbusCMD+0x5e>
		eeprom_config_write();
#endif
		break;

	case DEF_CODE_CALIB_GAS_CONC:
		d_printf("\n\rCalib Conc");
 8003bd4:	4812      	ldr	r0, [pc, #72]	; (8003c20 <modbusCMD+0x80>)
 8003bd6:	f7fe ff79 	bl	8002acc <d_printf>
#ifdef CONFIG_MIPEX
		Mipex_transmit_commmand(COMMAND_CALB_AAAA);
#else
		CalibGasConc();
 8003bda:	f7fe fde5 	bl	80027a8 <CalibGasConc>
		eeprom_config_write();
 8003bde:	f7ff f863 	bl	8002ca8 <eeprom_config_write>
#endif
		break;
 8003be2:	e00c      	b.n	8003bfe <modbusCMD+0x5e>
	switch(cmd){
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <modbusCMD+0x84>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d109      	bne.n	8003bfe <modbusCMD+0x5e>

		break;

	case DEF_CODE_SENS_PROFILE_RESTORE:

		factory_config_read();
 8003bea:	f7ff f887 	bl	8002cfc <factory_config_read>

		break;
 8003bee:	e006      	b.n	8003bfe <modbusCMD+0x5e>
		d_printf("\n\rCalib Zero");
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <modbusCMD+0x88>)
 8003bf2:	f7fe ff6b 	bl	8002acc <d_printf>
		CalibGasZero();
 8003bf6:	f7fe fdc3 	bl	8002780 <CalibGasZero>
		eeprom_config_write();
 8003bfa:	f7ff f855 	bl	8002ca8 <eeprom_config_write>
#endif
	default:
		break;
	}

}
 8003bfe:	b003      	add	sp, #12
 8003c00:	bd00      	pop	{pc}
		factory_config_write();
 8003c02:	f7ff f871 	bl	8002ce8 <factory_config_write>
		break;
 8003c06:	e7fa      	b.n	8003bfe <modbusCMD+0x5e>
 8003c08:	200000dc 	.word	0x200000dc
 8003c0c:	00001001 	.word	0x00001001
 8003c10:	200000ec 	.word	0x200000ec
 8003c14:	0000abce 	.word	0x0000abce
 8003c18:	0000185d 	.word	0x0000185d
 8003c1c:	000064c4 	.word	0x000064c4
 8003c20:	080051d4 	.word	0x080051d4
 8003c24:	0000ce4b 	.word	0x0000ce4b
 8003c28:	080051c4 	.word	0x080051c4

08003c2c <CmdFunc6>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Запись одного регистра
uint32_t CmdFunc6(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	0004      	movs	r4, r0
 8003c30:	0015      	movs	r5, r2
	Address 	= TO_M_WORD(mas+2);			// Адрес сохраняемого регистра
 8003c32:	7883      	ldrb	r3, [r0, #2]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	78c2      	ldrb	r2, [r0, #3]
 8003c38:	189b      	adds	r3, r3, r2
 8003c3a:	4a30      	ldr	r2, [pc, #192]	; (8003cfc <CmdFunc6+0xd0>)
 8003c3c:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[4]);			// Значение регистра
 8003c3e:	1d02      	adds	r2, r0, #4
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <CmdFunc6+0xd4>)
 8003c42:	601a      	str	r2, [r3, #0]
	Count   	= 1;						// Количество регистров
 8003c44:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <CmdFunc6+0xd8>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	801a      	strh	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8003c4a:	3205      	adds	r2, #5
 8003c4c:	0001      	movs	r1, r0
 8003c4e:	0028      	movs	r0, r5
 8003c50:	f000 fdd2 	bl	80047f8 <memcpy>
	Save = FALSE;
 8003c54:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <CmdFunc6+0xdc>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
	{
		__NOP();
	} else
	 */

	if(!check_block()){
 8003c5a:	f7ff ff3d 	bl	8003ad8 <check_block>
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d108      	bne.n	8003c74 <CmdFunc6+0x48>

		out[1] |= 0x80;
 8003c62:	786a      	ldrb	r2, [r5, #1]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	425b      	negs	r3, r3
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	70ab      	strb	r3, [r5, #2]
		return(3);
 8003c70:	3003      	adds	r0, #3
		stMain.bUpDate = TRUE;
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
	modbusCMD();
 8003c74:	f7ff ff94 	bl	8003ba0 <modbusCMD>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <CmdFunc6+0xd0>)
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	015b      	lsls	r3, r3, #5
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d30a      	bcc.n	8003c9a <CmdFunc6+0x6e>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <CmdFunc6+0xe0>)
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d807      	bhi.n	8003c9a <CmdFunc6+0x6e>
		if( Count > DEF_REG_CNT_x03 ) break;
 8003c8a:	4b1e      	ldr	r3, [pc, #120]	; (8003d04 <CmdFunc6+0xd8>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	2b7a      	cmp	r3, #122	; 0x7a
 8003c90:	d803      	bhi.n	8003c9a <CmdFunc6+0x6e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8003c92:	18d3      	adds	r3, r2, r3
 8003c94:	491e      	ldr	r1, [pc, #120]	; (8003d10 <CmdFunc6+0xe4>)
 8003c96:	428b      	cmp	r3, r1
 8003c98:	dd0c      	ble.n	8003cb4 <CmdFunc6+0x88>
	if( Count )
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <CmdFunc6+0xd8>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d020      	beq.n	8003ce4 <CmdFunc6+0xb8>
		out[1] |= 0x80;
 8003ca2:	786a      	ldrb	r2, [r5, #1]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	425b      	negs	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003cac:	2302      	movs	r3, #2
 8003cae:	70ab      	strb	r3, [r5, #2]
		return(3);
 8003cb0:	2003      	movs	r0, #3
 8003cb2:	e7de      	b.n	8003c72 <CmdFunc6+0x46>
		Address -= DEF_REG_ADR_BASE_x03;
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <CmdFunc6+0xe8>)
 8003cb6:	469c      	mov	ip, r3
 8003cb8:	4462      	add	r2, ip
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	4e0f      	ldr	r6, [pc, #60]	; (8003cfc <CmdFunc6+0xd0>)
 8003cbe:	8032      	strh	r2, [r6, #0]
		d_printf("\n\r%02x CMD Modbus 6 : write adr %03x : data ", mas[0], Address);
 8003cc0:	7821      	ldrb	r1, [r4, #0]
 8003cc2:	4815      	ldr	r0, [pc, #84]	; (8003d18 <CmdFunc6+0xec>)
 8003cc4:	f7fe ff02 	bl	8002acc <d_printf>
		d_printf(" %02x%02x", Value[0], Value[1]);
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <CmdFunc6+0xd4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	7819      	ldrb	r1, [r3, #0]
 8003cce:	785a      	ldrb	r2, [r3, #1]
 8003cd0:	4812      	ldr	r0, [pc, #72]	; (8003d1c <CmdFunc6+0xf0>)
 8003cd2:	f7fe fefb 	bl	8002acc <d_printf>
		CMD_SAVE_WORD( &reg_x03[ Address ] );
 8003cd6:	8830      	ldrh	r0, [r6, #0]
 8003cd8:	00c0      	lsls	r0, r0, #3
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <CmdFunc6+0xf4>)
 8003cdc:	18c0      	adds	r0, r0, r3
 8003cde:	f7ff fed9 	bl	8003a94 <__CMD_SAVE_WORD>
 8003ce2:	e7da      	b.n	8003c9a <CmdFunc6+0x6e>
	modbusSet();
 8003ce4:	f7ff fdba 	bl	800385c <modbusSet>
	if(Save)
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <CmdFunc6+0xdc>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <CmdFunc6+0xc8>
	return(6);
 8003cf0:	2006      	movs	r0, #6
 8003cf2:	e7be      	b.n	8003c72 <CmdFunc6+0x46>
		eeprom_config_write();
 8003cf4:	f7fe ffd8 	bl	8002ca8 <eeprom_config_write>
	return(6);
 8003cf8:	2006      	movs	r0, #6
 8003cfa:	e7ba      	b.n	8003c72 <CmdFunc6+0x46>
 8003cfc:	200000dc 	.word	0x200000dc
 8003d00:	200000ec 	.word	0x200000ec
 8003d04:	200000e0 	.word	0x200000e0
 8003d08:	200000e8 	.word	0x200000e8
 8003d0c:	00001079 	.word	0x00001079
 8003d10:	0000107a 	.word	0x0000107a
 8003d14:	fffff000 	.word	0xfffff000
 8003d18:	080051e4 	.word	0x080051e4
 8003d1c:	08005214 	.word	0x08005214
 8003d20:	080052ac 	.word	0x080052ac

08003d24 <CmdFunc8>:
//======================================================================================================================================
// Эхо
uint32_t CmdFunc8(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8003d24:	b510      	push	{r4, lr}
 8003d26:	0001      	movs	r1, r0
 8003d28:	0010      	movs	r0, r2
	memcpy((char*)out, (char*)mas, 6);
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	f000 fd64 	bl	80047f8 <memcpy>
	return(6);
}
 8003d30:	2006      	movs	r0, #6
 8003d32:	bd10      	pop	{r4, pc}

08003d34 <CmdFunc12>:
//======================================================================================================================================
// Передача памяти архива
uint32_t CmdFunc12(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8003d34:	b510      	push	{r4, lr}
 8003d36:	b082      	sub	sp, #8

	int i;
	uint16_t num_p;
	uint32_t ptr;

	CMD_LOAD_WORD(mas+2, num_p);		// Номер пакета
 8003d38:	466b      	mov	r3, sp
 8003d3a:	7881      	ldrb	r1, [r0, #2]
 8003d3c:	71d9      	strb	r1, [r3, #7]
 8003d3e:	78c1      	ldrb	r1, [r0, #3]
 8003d40:	7199      	strb	r1, [r3, #6]
 8003d42:	3306      	adds	r3, #6

	if( num_p >=  (ARHIV_NUM_ITEMS * ARHIV_SIZE_ITEM * 4) / 128)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b3f      	cmp	r3, #63	; 0x3f
 8003d48:	d80f      	bhi.n	8003d6a <CmdFunc12+0x36>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Value;
		return(3);
	}

	for(i=0; i < 32; i++){
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	291f      	cmp	r1, #31
 8003d4e:	dc15      	bgt.n	8003d7c <CmdFunc12+0x48>
		ptr = ARHIV_BASE_ADR + 128 * num_p + i * 4;
 8003d50:	466b      	mov	r3, sp
 8003d52:	3306      	adds	r3, #6
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	01db      	lsls	r3, r3, #7
 8003d58:	0088      	lsls	r0, r1, #2
 8003d5a:	181b      	adds	r3, r3, r0
 8003d5c:	4c09      	ldr	r4, [pc, #36]	; (8003d84 <CmdFunc12+0x50>)
 8003d5e:	46a4      	mov	ip, r4
 8003d60:	4463      	add	r3, ip
		((uint32_t *)out)[i] = *(__IO uint32_t *)((uint32_t)ptr);
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	5013      	str	r3, [r2, r0]
	for(i=0; i < 32; i++){
 8003d66:	3101      	adds	r1, #1
 8003d68:	e7f0      	b.n	8003d4c <CmdFunc12+0x18>
		out[1] |= 0x80;
 8003d6a:	7851      	ldrb	r1, [r2, #1]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	425b      	negs	r3, r3
 8003d70:	430b      	orrs	r3, r1
 8003d72:	7053      	strb	r3, [r2, #1]
		out[2] = ERROR_Illegal_Data_Value;
 8003d74:	2303      	movs	r3, #3
 8003d76:	7093      	strb	r3, [r2, #2]
		return(3);
 8003d78:	2003      	movs	r0, #3
 8003d7a:	e000      	b.n	8003d7e <CmdFunc12+0x4a>
	}
	return(3+128);
 8003d7c:	2083      	movs	r0, #131	; 0x83
}
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd10      	pop	{r4, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	08006000 	.word	0x08006000

08003d88 <CmdFunc16>:

//======================================================================================================================================
// Запись группы регистров
uint32_t CmdFunc16(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8003d88:	b530      	push	{r4, r5, lr}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	0004      	movs	r4, r0
 8003d8e:	0015      	movs	r5, r2
	wModeCalib = 0;

	Address 	= TO_M_WORD(mas+2);			// Адрес первого сохраняемого регистра
 8003d90:	7883      	ldrb	r3, [r0, #2]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	78c2      	ldrb	r2, [r0, #3]
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <CmdFunc16+0x108>)
 8003d9a:	8013      	strh	r3, [r2, #0]
	Count	 	= TO_M_WORD(mas+4);			// Количество регистров
 8003d9c:	7903      	ldrb	r3, [r0, #4]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	7942      	ldrb	r2, [r0, #5]
 8003da2:	189b      	adds	r3, r3, r2
 8003da4:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <CmdFunc16+0x10c>)
 8003da6:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[7]);			// Значение регистра
 8003da8:	1dc2      	adds	r2, r0, #7
 8003daa:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <CmdFunc16+0x110>)
 8003dac:	601a      	str	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8003dae:	2206      	movs	r2, #6
 8003db0:	0001      	movs	r1, r0
 8003db2:	0028      	movs	r0, r5
 8003db4:	f000 fd20 	bl	80047f8 <memcpy>
	Save = FALSE;
 8003db8:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <CmdFunc16+0x114>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
	//TSGMPoint *sgm = &SGMpoint[0];
	//------------------------------------------------------------------------------------------------------------------
#ifdef BLOCK_MODBUS

	if(!check_block()){
 8003dbe:	f7ff fe8b 	bl	8003ad8 <check_block>
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d109      	bne.n	8003dda <CmdFunc16+0x52>

		out[1] |= 0x80;
 8003dc6:	786a      	ldrb	r2, [r5, #1]
 8003dc8:	2380      	movs	r3, #128	; 0x80
 8003dca:	425b      	negs	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	70ab      	strb	r3, [r5, #2]
		return(3);
 8003dd4:	3003      	adds	r0, #3
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8003dd6:	b003      	add	sp, #12
 8003dd8:	bd30      	pop	{r4, r5, pc}
	modbusCMD();
 8003dda:	f7ff fee1 	bl	8003ba0 <modbusCMD>
	if( !Count || (Count > 125) )
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <CmdFunc16+0x10c>)
 8003de0:	881a      	ldrh	r2, [r3, #0]
 8003de2:	1e53      	subs	r3, r2, #1
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b7c      	cmp	r3, #124	; 0x7c
 8003de8:	d81b      	bhi.n	8003e22 <CmdFunc16+0x9a>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8003dea:	4b29      	ldr	r3, [pc, #164]	; (8003e90 <CmdFunc16+0x108>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	0149      	lsls	r1, r1, #5
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d308      	bcc.n	8003e08 <CmdFunc16+0x80>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8003df6:	492a      	ldr	r1, [pc, #168]	; (8003ea0 <CmdFunc16+0x118>)
 8003df8:	428b      	cmp	r3, r1
 8003dfa:	d805      	bhi.n	8003e08 <CmdFunc16+0x80>
		if( Count > DEF_REG_CNT_x03 ) break;
 8003dfc:	2a7a      	cmp	r2, #122	; 0x7a
 8003dfe:	d803      	bhi.n	8003e08 <CmdFunc16+0x80>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8003e00:	1899      	adds	r1, r3, r2
 8003e02:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <CmdFunc16+0x11c>)
 8003e04:	4281      	cmp	r1, r0
 8003e06:	dd15      	ble.n	8003e34 <CmdFunc16+0xac>
	if( Count )
 8003e08:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <CmdFunc16+0x10c>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d033      	beq.n	8003e78 <CmdFunc16+0xf0>
		out[1] |= 0x80;
 8003e10:	786a      	ldrb	r2, [r5, #1]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	425b      	negs	r3, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	70ab      	strb	r3, [r5, #2]
		return(3);
 8003e1e:	2003      	movs	r0, #3
 8003e20:	e7d9      	b.n	8003dd6 <CmdFunc16+0x4e>
		out[1] |= 0x80;
 8003e22:	786a      	ldrb	r2, [r5, #1]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	425b      	negs	r3, r3
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	70ab      	strb	r3, [r5, #2]
		return(3);
 8003e30:	2003      	movs	r0, #3
 8003e32:	e7d0      	b.n	8003dd6 <CmdFunc16+0x4e>
		Address -= DEF_REG_ADR_BASE_x03;
 8003e34:	491c      	ldr	r1, [pc, #112]	; (8003ea8 <CmdFunc16+0x120>)
 8003e36:	468c      	mov	ip, r1
 8003e38:	4463      	add	r3, ip
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	4914      	ldr	r1, [pc, #80]	; (8003e90 <CmdFunc16+0x108>)
 8003e3e:	800b      	strh	r3, [r1, #0]
		d_printf("\n\r%02x CMD Modbus 16 (%02d) : write adr %03x : data ", mas[0], Count, Address, *Value);
 8003e40:	7821      	ldrb	r1, [r4, #0]
 8003e42:	4815      	ldr	r0, [pc, #84]	; (8003e98 <CmdFunc16+0x110>)
 8003e44:	6800      	ldr	r0, [r0, #0]
 8003e46:	7800      	ldrb	r0, [r0, #0]
 8003e48:	9000      	str	r0, [sp, #0]
 8003e4a:	4818      	ldr	r0, [pc, #96]	; (8003eac <CmdFunc16+0x124>)
 8003e4c:	f7fe fe3e 	bl	8002acc <d_printf>
		while( Count )
 8003e50:	e00d      	b.n	8003e6e <CmdFunc16+0xe6>
			d_printf(" %02x%02x", Value[0], Value[1]);
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <CmdFunc16+0x110>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	7819      	ldrb	r1, [r3, #0]
 8003e58:	785a      	ldrb	r2, [r3, #1]
 8003e5a:	4815      	ldr	r0, [pc, #84]	; (8003eb0 <CmdFunc16+0x128>)
 8003e5c:	f7fe fe36 	bl	8002acc <d_printf>
			CMD_SAVE_WORD( &reg_x03[ Address ] );
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <CmdFunc16+0x108>)
 8003e62:	8818      	ldrh	r0, [r3, #0]
 8003e64:	00c0      	lsls	r0, r0, #3
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <CmdFunc16+0x12c>)
 8003e68:	18c0      	adds	r0, r0, r3
 8003e6a:	f7ff fe13 	bl	8003a94 <__CMD_SAVE_WORD>
		while( Count )
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <CmdFunc16+0x10c>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1ed      	bne.n	8003e52 <CmdFunc16+0xca>
 8003e76:	e7c7      	b.n	8003e08 <CmdFunc16+0x80>
	modbusSet();
 8003e78:	f7ff fcf0 	bl	800385c <modbusSet>
	if(Save)
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <CmdFunc16+0x114>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <CmdFunc16+0x100>
	return(6);
 8003e84:	2006      	movs	r0, #6
 8003e86:	e7a6      	b.n	8003dd6 <CmdFunc16+0x4e>
		eeprom_config_write();
 8003e88:	f7fe ff0e 	bl	8002ca8 <eeprom_config_write>
	return(6);
 8003e8c:	2006      	movs	r0, #6
 8003e8e:	e7a2      	b.n	8003dd6 <CmdFunc16+0x4e>
 8003e90:	200000dc 	.word	0x200000dc
 8003e94:	200000e0 	.word	0x200000e0
 8003e98:	200000ec 	.word	0x200000ec
 8003e9c:	200000e8 	.word	0x200000e8
 8003ea0:	00001079 	.word	0x00001079
 8003ea4:	0000107a 	.word	0x0000107a
 8003ea8:	fffff000 	.word	0xfffff000
 8003eac:	08005220 	.word	0x08005220
 8003eb0:	08005214 	.word	0x08005214
 8003eb4:	080052ac 	.word	0x080052ac

08003eb8 <cmdModbusRTU>:
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
 8003eba:	0014      	movs	r4, r2
	out[0] = mas[0];
 8003ebc:	7803      	ldrb	r3, [r0, #0]
 8003ebe:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];
 8003ec0:	7843      	ldrb	r3, [r0, #1]
 8003ec2:	7053      	strb	r3, [r2, #1]
	switch (mas[1])
 8003ec4:	3b03      	subs	r3, #3
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	2a0d      	cmp	r2, #13
 8003eca:	d82e      	bhi.n	8003f2a <cmdModbusRTU+0x72>
 8003ecc:	0093      	lsls	r3, r2, #2
 8003ece:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <cmdModbusRTU+0x8c>)
 8003ed0:	58d3      	ldr	r3, [r2, r3]
 8003ed2:	469f      	mov	pc, r3
		AnswerLen = CmdFunc3(mas, len, out);
 8003ed4:	0022      	movs	r2, r4
 8003ed6:	f7ff fd15 	bl	8003904 <CmdFunc3>
 8003eda:	0005      	movs	r5, r0
	if(AnswerLen)
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	d009      	beq.n	8003ef4 <cmdModbusRTU+0x3c>
		crc = mb_crc(out, AnswerLen);
 8003ee0:	0029      	movs	r1, r5
 8003ee2:	0020      	movs	r0, r4
 8003ee4:	f7ff fc9e 	bl	8003824 <mb_crc>
		out[AnswerLen]   = LOBYTE(crc);
 8003ee8:	5560      	strb	r0, [r4, r5]
		out[AnswerLen+1] = HIBYTE(crc);
 8003eea:	1c6b      	adds	r3, r5, #1
 8003eec:	0400      	lsls	r0, r0, #16
 8003eee:	0e00      	lsrs	r0, r0, #24
 8003ef0:	54e0      	strb	r0, [r4, r3]
		AnswerLen += 2;
 8003ef2:	3502      	adds	r5, #2
}
 8003ef4:	0028      	movs	r0, r5
 8003ef6:	bd70      	pop	{r4, r5, r6, pc}
		AnswerLen = CmdFunc4(mas, len, out);
 8003ef8:	0022      	movs	r2, r4
 8003efa:	f7ff fd6f 	bl	80039dc <CmdFunc4>
 8003efe:	0005      	movs	r5, r0
		break;
 8003f00:	e7ec      	b.n	8003edc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc6(mas, len, out);
 8003f02:	0022      	movs	r2, r4
 8003f04:	f7ff fe92 	bl	8003c2c <CmdFunc6>
 8003f08:	0005      	movs	r5, r0
		break;
 8003f0a:	e7e7      	b.n	8003edc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc8(mas, len, out);
 8003f0c:	0022      	movs	r2, r4
 8003f0e:	f7ff ff09 	bl	8003d24 <CmdFunc8>
 8003f12:	0005      	movs	r5, r0
		break;
 8003f14:	e7e2      	b.n	8003edc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc12(mas, len, out);
 8003f16:	0022      	movs	r2, r4
 8003f18:	f7ff ff0c 	bl	8003d34 <CmdFunc12>
 8003f1c:	0005      	movs	r5, r0
		break;
 8003f1e:	e7dd      	b.n	8003edc <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc16(mas, len, out);
 8003f20:	0022      	movs	r2, r4
 8003f22:	f7ff ff31 	bl	8003d88 <CmdFunc16>
 8003f26:	0005      	movs	r5, r0
		break;
 8003f28:	e7d8      	b.n	8003edc <cmdModbusRTU+0x24>
		d_printf("\n\r\n\r ERROR_Illegal_Function");
 8003f2a:	4807      	ldr	r0, [pc, #28]	; (8003f48 <cmdModbusRTU+0x90>)
 8003f2c:	f7fe fdce 	bl	8002acc <d_printf>
		out[1] |= 0x80;
 8003f30:	7862      	ldrb	r2, [r4, #1]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	425b      	negs	r3, r3
 8003f36:	4313      	orrs	r3, r2
 8003f38:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Function;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	70a3      	strb	r3, [r4, #2]
		AnswerLen = 3;
 8003f3e:	2503      	movs	r5, #3
 8003f40:	e7ce      	b.n	8003ee0 <cmdModbusRTU+0x28>
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	08005274 	.word	0x08005274
 8003f48:	08005258 	.word	0x08005258

08003f4c <mb_proc>:
void mb_proc(void){
 8003f4c:	b570      	push	{r4, r5, r6, lr}
	if(!f_mbs_packet_rcv)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <mb_proc+0x84>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00f      	beq.n	8003f76 <mb_proc+0x2a>
	f_mbs_packet_rcv = FALSE;
 8003f56:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <mb_proc+0x84>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	701a      	strb	r2, [r3, #0]
	if(mbs_rx_pkt_len < 4)
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <mb_proc+0x88>)
 8003f5e:	881c      	ldrh	r4, [r3, #0]
 8003f60:	2c03      	cmp	r4, #3
 8003f62:	d908      	bls.n	8003f76 <mb_proc+0x2a>
	uint16_t crc = mb_crc(mbs_pkt_rx,mbs_rx_pkt_len-2);
 8003f64:	1ea6      	subs	r6, r4, #2
 8003f66:	4d1c      	ldr	r5, [pc, #112]	; (8003fd8 <mb_proc+0x8c>)
 8003f68:	0031      	movs	r1, r6
 8003f6a:	0028      	movs	r0, r5
 8003f6c:	f7ff fc5a 	bl	8003824 <mb_crc>
	if((mbs_pkt_rx[0] == 0x55) && \
 8003f70:	782b      	ldrb	r3, [r5, #0]
 8003f72:	2b55      	cmp	r3, #85	; 0x55
 8003f74:	d000      	beq.n	8003f78 <mb_proc+0x2c>
}
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8003f78:	5daa      	ldrb	r2, [r5, r6]
 8003f7a:	b2c3      	uxtb	r3, r0
	if((mbs_pkt_rx[0] == 0x55) && \
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d1fa      	bne.n	8003f76 <mb_proc+0x2a>
			(mbs_pkt_rx[mbs_rx_pkt_len-1] == HIBYTE(crc))){
 8003f80:	1e63      	subs	r3, r4, #1
 8003f82:	5ceb      	ldrb	r3, [r5, r3]
 8003f84:	0400      	lsls	r0, r0, #16
 8003f86:	0e00      	lsrs	r0, r0, #24
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	d1f4      	bne.n	8003f76 <mb_proc+0x2a>
		mbs_tx_len = cmdModbusRTU(mbs_pkt_rx, mbs_rx_pkt_len, mbs_pkt_tx);
 8003f8c:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <mb_proc+0x90>)
 8003f8e:	0021      	movs	r1, r4
 8003f90:	0028      	movs	r0, r5
 8003f92:	f7ff ff91 	bl	8003eb8 <cmdModbusRTU>
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <mb_proc+0x94>)
 8003f98:	8018      	strh	r0, [r3, #0]
		mbs_tx_cnt = 0;
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <mb_proc+0x98>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <mb_proc+0x9c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	2404      	movs	r4, #4
 8003fb0:	43a2      	bics	r2, r4
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	317f      	adds	r1, #127	; 0x7f
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f380 8810 	msr	PRIMASK, r0
}
 8003fcc:	e7d3      	b.n	8003f76 <mb_proc+0x2a>
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	200000b1 	.word	0x200000b1
 8003fd4:	20000318 	.word	0x20000318
 8003fd8:	20000214 	.word	0x20000214
 8003fdc:	2000031c 	.word	0x2000031c
 8003fe0:	2000031a 	.word	0x2000031a
 8003fe4:	20000316 	.word	0x20000316
 8003fe8:	40004800 	.word	0x40004800

08003fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003fec:	480d      	ldr	r0, [pc, #52]	; (8004024 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003fee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ff0:	480d      	ldr	r0, [pc, #52]	; (8004028 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ff2:	490e      	ldr	r1, [pc, #56]	; (800402c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ff4:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <LoopForever+0xe>)
  movs r3, #0
 8003ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ff8:	e002      	b.n	8004000 <LoopCopyDataInit>

08003ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ffe:	3304      	adds	r3, #4

08004000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004004:	d3f9      	bcc.n	8003ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004006:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004008:	4c0b      	ldr	r4, [pc, #44]	; (8004038 <LoopForever+0x16>)
  movs r3, #0
 800400a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800400c:	e001      	b.n	8004012 <LoopFillZerobss>

0800400e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800400e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004010:	3204      	adds	r2, #4

08004012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004014:	d3fb      	bcc.n	800400e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004016:	f7fe f9c7 	bl	80023a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800401a:	f000 fbc9 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800401e:	f7fe f83b 	bl	8002098 <main>

08004022 <LoopForever>:

LoopForever:
    b LoopForever
 8004022:	e7fe      	b.n	8004022 <LoopForever>
   ldr   r0, =_estack
 8004024:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8004030:	08005788 	.word	0x08005788
  ldr r2, =_sbss
 8004034:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8004038:	200005a4 	.word	0x200005a4

0800403c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800403c:	e7fe      	b.n	800403c <DMA1_Channel1_IRQHandler>
	...

08004040 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004040:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8004042:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004044:	07db      	lsls	r3, r3, #31
 8004046:	d411      	bmi.n	800406c <LL_ADC_Init+0x2c>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8004048:	68c3      	ldr	r3, [r0, #12]
 800404a:	4a09      	ldr	r2, [pc, #36]	; (8004070 <LL_ADC_Init+0x30>)
 800404c:	4013      	ands	r3, r2
 800404e:	684a      	ldr	r2, [r1, #4]
 8004050:	688c      	ldr	r4, [r1, #8]
 8004052:	4322      	orrs	r2, r4
 8004054:	68cc      	ldr	r4, [r1, #12]
 8004056:	4322      	orrs	r2, r4
 8004058:	4313      	orrs	r3, r2
 800405a:	60c3      	str	r3, [r0, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 800405c:	6903      	ldr	r3, [r0, #16]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	680a      	ldr	r2, [r1, #0]
 8004064:	4313      	orrs	r3, r2
 8004066:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 8004068:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800406a:	bd10      	pop	{r4, pc}
    status = ERROR;
 800406c:	2001      	movs	r0, #1
 800406e:	e7fc      	b.n	800406a <LL_ADC_Init+0x2a>
 8004070:	ffff3fc7 	.word	0xffff3fc7

08004074 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004074:	b510      	push	{r4, lr}
 8004076:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004078:	07db      	lsls	r3, r3, #31
 800407a:	d40f      	bmi.n	800409c <LL_ADC_REG_Init+0x28>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800407c:	68c3      	ldr	r3, [r0, #12]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <LL_ADC_REG_Init+0x2c>)
 8004080:	401a      	ands	r2, r3
 8004082:	680b      	ldr	r3, [r1, #0]
 8004084:	684c      	ldr	r4, [r1, #4]
 8004086:	4323      	orrs	r3, r4
 8004088:	688c      	ldr	r4, [r1, #8]
 800408a:	4323      	orrs	r3, r4
 800408c:	68cc      	ldr	r4, [r1, #12]
 800408e:	4323      	orrs	r3, r4
 8004090:	6909      	ldr	r1, [r1, #16]
 8004092:	430b      	orrs	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8004098:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 800409a:	bd10      	pop	{r4, pc}
    status = ERROR;
 800409c:	2001      	movs	r0, #1
 800409e:	e7fc      	b.n	800409a <LL_ADC_REG_Init+0x26>
 80040a0:	fffec23c 	.word	0xfffec23c

080040a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80040a4:	b510      	push	{r4, lr}
 80040a6:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80040a8:	7900      	ldrb	r0, [r0, #4]
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d050      	beq.n	8004150 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d057      	beq.n	8004164 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 80040b4:	7958      	ldrb	r0, [r3, #5]
 80040b6:	2801      	cmp	r0, #1
 80040b8:	d018      	beq.n	80040ec <LL_EXTI_Init+0x48>
 80040ba:	2802      	cmp	r0, #2
 80040bc:	d020      	beq.n	8004100 <LL_EXTI_Init+0x5c>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d00b      	beq.n	80040da <LL_EXTI_Init+0x36>
 80040c2:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80040c4:	799a      	ldrb	r2, [r3, #6]
 80040c6:	2a00      	cmp	r2, #0
 80040c8:	d04b      	beq.n	8004162 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 80040ca:	2a02      	cmp	r2, #2
 80040cc:	d02c      	beq.n	8004128 <LL_EXTI_Init+0x84>
 80040ce:	2a03      	cmp	r2, #3
 80040d0:	d034      	beq.n	800413c <LL_EXTI_Init+0x98>
 80040d2:	2a01      	cmp	r2, #1
 80040d4:	d01e      	beq.n	8004114 <LL_EXTI_Init+0x70>
 80040d6:	2001      	movs	r0, #1
 80040d8:	e043      	b.n	8004162 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80040da:	4923      	ldr	r1, [pc, #140]	; (8004168 <LL_EXTI_Init+0xc4>)
 80040dc:	684c      	ldr	r4, [r1, #4]
 80040de:	4394      	bics	r4, r2
 80040e0:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80040e2:	680a      	ldr	r2, [r1, #0]
 80040e4:	681c      	ldr	r4, [r3, #0]
 80040e6:	4322      	orrs	r2, r4
 80040e8:	600a      	str	r2, [r1, #0]
}
 80040ea:	e7eb      	b.n	80040c4 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80040ec:	491e      	ldr	r1, [pc, #120]	; (8004168 <LL_EXTI_Init+0xc4>)
 80040ee:	6808      	ldr	r0, [r1, #0]
 80040f0:	4390      	bics	r0, r2
 80040f2:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 80040f4:	684a      	ldr	r2, [r1, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	4302      	orrs	r2, r0
 80040fa:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 80040fc:	2000      	movs	r0, #0
}
 80040fe:	e7e1      	b.n	80040c4 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 8004100:	4919      	ldr	r1, [pc, #100]	; (8004168 <LL_EXTI_Init+0xc4>)
 8004102:	6808      	ldr	r0, [r1, #0]
 8004104:	4302      	orrs	r2, r0
 8004106:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004108:	684a      	ldr	r2, [r1, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	4302      	orrs	r2, r0
 800410e:	604a      	str	r2, [r1, #4]
 8004110:	2000      	movs	r0, #0
}
 8004112:	e7d7      	b.n	80040c4 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <LL_EXTI_Init+0xc4>)
 8004116:	68d1      	ldr	r1, [r2, #12]
 8004118:	681c      	ldr	r4, [r3, #0]
 800411a:	43a1      	bics	r1, r4
 800411c:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800411e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004120:	6891      	ldr	r1, [r2, #8]
 8004122:	430b      	orrs	r3, r1
 8004124:	6093      	str	r3, [r2, #8]
}
 8004126:	e01c      	b.n	8004162 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <LL_EXTI_Init+0xc4>)
 800412a:	6891      	ldr	r1, [r2, #8]
 800412c:	681c      	ldr	r4, [r3, #0]
 800412e:	43a1      	bics	r1, r4
 8004130:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004132:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004134:	68d1      	ldr	r1, [r2, #12]
 8004136:	430b      	orrs	r3, r1
 8004138:	60d3      	str	r3, [r2, #12]
}
 800413a:	e012      	b.n	8004162 <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 800413c:	4a0a      	ldr	r2, [pc, #40]	; (8004168 <LL_EXTI_Init+0xc4>)
 800413e:	6891      	ldr	r1, [r2, #8]
 8004140:	681c      	ldr	r4, [r3, #0]
 8004142:	4321      	orrs	r1, r4
 8004144:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004146:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004148:	68d1      	ldr	r1, [r2, #12]
 800414a:	430b      	orrs	r3, r1
 800414c:	60d3      	str	r3, [r2, #12]
}
 800414e:	e008      	b.n	8004162 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004150:	4a05      	ldr	r2, [pc, #20]	; (8004168 <LL_EXTI_Init+0xc4>)
 8004152:	6811      	ldr	r1, [r2, #0]
 8004154:	681c      	ldr	r4, [r3, #0]
 8004156:	43a1      	bics	r1, r4
 8004158:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800415a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800415c:	6853      	ldr	r3, [r2, #4]
 800415e:	438b      	bics	r3, r1
 8004160:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8004162:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8004164:	2000      	movs	r0, #0
 8004166:	e7fc      	b.n	8004162 <LL_EXTI_Init+0xbe>
 8004168:	40010400 	.word	0x40010400

0800416c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800416c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 800416e:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004170:	e027      	b.n	80041c2 <LL_GPIO_Init+0x56>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8004172:	6883      	ldr	r3, [r0, #8]
 8004174:	002c      	movs	r4, r5
 8004176:	436c      	muls	r4, r5
 8004178:	0066      	lsls	r6, r4, #1
 800417a:	1936      	adds	r6, r6, r4
 800417c:	43b3      	bics	r3, r6
 800417e:	688e      	ldr	r6, [r1, #8]
 8004180:	4374      	muls	r4, r6
 8004182:	4323      	orrs	r3, r4
 8004184:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004186:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004188:	6843      	ldr	r3, [r0, #4]
 800418a:	43a3      	bics	r3, r4
 800418c:	68ce      	ldr	r6, [r1, #12]
 800418e:	4374      	muls	r4, r6
 8004190:	4323      	orrs	r3, r4
 8004192:	6043      	str	r3, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8004194:	68c6      	ldr	r6, [r0, #12]
 8004196:	002b      	movs	r3, r5
 8004198:	436b      	muls	r3, r5
 800419a:	005f      	lsls	r7, r3, #1
 800419c:	18ff      	adds	r7, r7, r3
 800419e:	43fc      	mvns	r4, r7
 80041a0:	46a4      	mov	ip, r4
 80041a2:	43be      	bics	r6, r7
 80041a4:	690f      	ldr	r7, [r1, #16]
 80041a6:	435f      	muls	r7, r3
 80041a8:	433e      	orrs	r6, r7
 80041aa:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80041ac:	684c      	ldr	r4, [r1, #4]
 80041ae:	2c02      	cmp	r4, #2
 80041b0:	d016      	beq.n	80041e0 <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80041b2:	6804      	ldr	r4, [r0, #0]
 80041b4:	4665      	mov	r5, ip
 80041b6:	402c      	ands	r4, r5
 80041b8:	684d      	ldr	r5, [r1, #4]
 80041ba:	436b      	muls	r3, r5
 80041bc:	4323      	orrs	r3, r4
 80041be:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80041c0:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80041c2:	680c      	ldr	r4, [r1, #0]
 80041c4:	0023      	movs	r3, r4
 80041c6:	40d3      	lsrs	r3, r2
 80041c8:	d026      	beq.n	8004218 <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80041ca:	2301      	movs	r3, #1
 80041cc:	4093      	lsls	r3, r2
 80041ce:	0025      	movs	r5, r4
 80041d0:	401d      	ands	r5, r3
    if (currentpin)
 80041d2:	421c      	tst	r4, r3
 80041d4:	d0f4      	beq.n	80041c0 <LL_GPIO_Init+0x54>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80041d6:	684b      	ldr	r3, [r1, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d8da      	bhi.n	8004194 <LL_GPIO_Init+0x28>
 80041de:	e7c8      	b.n	8004172 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 80041e0:	2dff      	cmp	r5, #255	; 0xff
 80041e2:	d80b      	bhi.n	80041fc <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80041e4:	6a06      	ldr	r6, [r0, #32]
 80041e6:	001c      	movs	r4, r3
 80041e8:	436c      	muls	r4, r5
 80041ea:	4365      	muls	r5, r4
 80041ec:	012c      	lsls	r4, r5, #4
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	43a6      	bics	r6, r4
 80041f2:	694c      	ldr	r4, [r1, #20]
 80041f4:	4365      	muls	r5, r4
 80041f6:	4335      	orrs	r5, r6
 80041f8:	6205      	str	r5, [r0, #32]
}
 80041fa:	e7da      	b.n	80041b2 <LL_GPIO_Init+0x46>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80041fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041fe:	0a2d      	lsrs	r5, r5, #8
 8004200:	002c      	movs	r4, r5
 8004202:	436c      	muls	r4, r5
 8004204:	436c      	muls	r4, r5
 8004206:	4365      	muls	r5, r4
 8004208:	012c      	lsls	r4, r5, #4
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	43a6      	bics	r6, r4
 800420e:	694c      	ldr	r4, [r1, #20]
 8004210:	4365      	muls	r5, r4
 8004212:	4335      	orrs	r5, r6
 8004214:	6245      	str	r5, [r0, #36]	; 0x24
}
 8004216:	e7cc      	b.n	80041b2 <LL_GPIO_Init+0x46>
  }


  return (SUCCESS);
}
 8004218:	2000      	movs	r0, #0
 800421a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800421c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800421c:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800421e:	6802      	ldr	r2, [r0, #0]
 8004220:	2401      	movs	r4, #1
 8004222:	43a2      	bics	r2, r4
 8004224:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8004226:	6803      	ldr	r3, [r0, #0]
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <LL_I2C_Init+0x6c>)
 800422a:	4013      	ands	r3, r2
 800422c:	68ca      	ldr	r2, [r1, #12]
 800422e:	0212      	lsls	r2, r2, #8
 8004230:	688d      	ldr	r5, [r1, #8]
 8004232:	432a      	orrs	r2, r5
 8004234:	4313      	orrs	r3, r2
 8004236:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8004238:	684b      	ldr	r3, [r1, #4]
 800423a:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800423c:	6803      	ldr	r3, [r0, #0]
 800423e:	4323      	orrs	r3, r4
 8004240:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004242:	6883      	ldr	r3, [r0, #8]
 8004244:	4a11      	ldr	r2, [pc, #68]	; (800428c <LL_I2C_Init+0x70>)
 8004246:	4013      	ands	r3, r2
 8004248:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800424a:	6883      	ldr	r3, [r0, #8]
 800424c:	0adb      	lsrs	r3, r3, #11
 800424e:	02db      	lsls	r3, r3, #11
 8004250:	690a      	ldr	r2, [r1, #16]
 8004252:	698c      	ldr	r4, [r1, #24]
 8004254:	4322      	orrs	r2, r4
 8004256:	4313      	orrs	r3, r2
 8004258:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8004260:	6882      	ldr	r2, [r0, #8]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	4313      	orrs	r3, r2
 8004268:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	4a08      	ldr	r2, [pc, #32]	; (8004290 <LL_I2C_Init+0x74>)
 800426e:	4013      	ands	r3, r2
 8004270:	680a      	ldr	r2, [r1, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004276:	694b      	ldr	r3, [r1, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8004278:	6842      	ldr	r2, [r0, #4]
 800427a:	4904      	ldr	r1, [pc, #16]	; (800428c <LL_I2C_Init+0x70>)
 800427c:	400a      	ands	r2, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8004282:	2000      	movs	r0, #0
 8004284:	bd30      	pop	{r4, r5, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	ffffe0ff 	.word	0xffffe0ff
 800428c:	ffff7fff 	.word	0xffff7fff
 8004290:	ffcfffff 	.word	0xffcfffff

08004294 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	0004      	movs	r4, r0
 8004298:	000d      	movs	r5, r1
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800429a:	6803      	ldr	r3, [r0, #0]
 800429c:	07db      	lsls	r3, r3, #31
 800429e:	d42c      	bmi.n	80042fa <LL_LPUART_Init+0x66>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80042a0:	6803      	ldr	r3, [r0, #0]
 80042a2:	4a19      	ldr	r2, [pc, #100]	; (8004308 <LL_LPUART_Init+0x74>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	684a      	ldr	r2, [r1, #4]
 80042a8:	68c9      	ldr	r1, [r1, #12]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	6929      	ldr	r1, [r5, #16]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	4313      	orrs	r3, r2
 80042b2:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 80042b4:	6843      	ldr	r3, [r0, #4]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <LL_LPUART_Init+0x78>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	68aa      	ldr	r2, [r5, #8]
 80042bc:	4313      	orrs	r3, r2
 80042be:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042c0:	6883      	ldr	r3, [r0, #8]
 80042c2:	4a13      	ldr	r2, [pc, #76]	; (8004310 <LL_LPUART_Init+0x7c>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	696a      	ldr	r2, [r5, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	6083      	str	r3, [r0, #8]
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80042cc:	20c0      	movs	r0, #192	; 0xc0
 80042ce:	0100      	lsls	r0, r0, #4
 80042d0:	f000 f8e0 	bl	8004494 <LL_RCC_GetLPUARTClockFreq>

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d012      	beq.n	80042fe <LL_LPUART_Init+0x6a>
        && (LPUART_InitStruct->BaudRate != 0U))
 80042d8:	682a      	ldr	r2, [r5, #0]
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d011      	beq.n	8004302 <LL_LPUART_Init+0x6e>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 80042de:	0e07      	lsrs	r7, r0, #24
 80042e0:	0206      	lsls	r6, r0, #8
 80042e2:	0850      	lsrs	r0, r2, #1
 80042e4:	2100      	movs	r1, #0
 80042e6:	1980      	adds	r0, r0, r6
 80042e8:	4179      	adcs	r1, r7
 80042ea:	2300      	movs	r3, #0
 80042ec:	f7fc f894 	bl	8000418 <__aeabi_uldivmod>
 80042f0:	0300      	lsls	r0, r0, #12
 80042f2:	0b00      	lsrs	r0, r0, #12
 80042f4:	60e0      	str	r0, [r4, #12]
    {
      status = SUCCESS;
 80042f6:	2000      	movs	r0, #0
}
 80042f8:	e000      	b.n	80042fc <LL_LPUART_Init+0x68>
  ErrorStatus status = ERROR;
 80042fa:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 80042fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ErrorStatus status = ERROR;
 80042fe:	2001      	movs	r0, #1
 8004300:	e7fc      	b.n	80042fc <LL_LPUART_Init+0x68>
 8004302:	2001      	movs	r0, #1
 8004304:	e7fa      	b.n	80042fc <LL_LPUART_Init+0x68>
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	efffe9f3 	.word	0xefffe9f3
 800430c:	ffffcfff 	.word	0xffffcfff
 8004310:	fffffcff 	.word	0xfffffcff

08004314 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <RCC_GetHCLKClockFreq+0x14>)
 8004316:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004318:	0912      	lsrs	r2, r2, #4
 800431a:	230f      	movs	r3, #15
 800431c:	4013      	ands	r3, r2
 800431e:	4a03      	ldr	r2, [pc, #12]	; (800432c <RCC_GetHCLKClockFreq+0x18>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	40d8      	lsrs	r0, r3
}
 8004324:	4770      	bx	lr
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	40021000 	.word	0x40021000
 800432c:	08005110 	.word	0x08005110

08004330 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <RCC_GetPCLK1ClockFreq+0x14>)
 8004332:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004334:	0a12      	lsrs	r2, r2, #8
 8004336:	2307      	movs	r3, #7
 8004338:	4013      	ands	r3, r2
 800433a:	4a03      	ldr	r2, [pc, #12]	; (8004348 <RCC_GetPCLK1ClockFreq+0x18>)
 800433c:	5cd3      	ldrb	r3, [r2, r3]
 800433e:	40d8      	lsrs	r0, r3
}
 8004340:	4770      	bx	lr
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	40021000 	.word	0x40021000
 8004348:	08005120 	.word	0x08005120

0800434c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800434c:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004350:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004352:	03db      	lsls	r3, r3, #15
 8004354:	d405      	bmi.n	8004362 <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	06db      	lsls	r3, r3, #27
 800435c:	d512      	bpl.n	8004384 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 800435e:	480b      	ldr	r0, [pc, #44]	; (800438c <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8004360:	e000      	b.n	8004364 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004362:	480b      	ldr	r0, [pc, #44]	; (8004390 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004364:	4908      	ldr	r1, [pc, #32]	; (8004388 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004366:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8004368:	0c92      	lsrs	r2, r2, #18
 800436a:	230f      	movs	r3, #15
 800436c:	4013      	ands	r3, r2
 800436e:	4a09      	ldr	r2, [pc, #36]	; (8004394 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8004370:	5cd3      	ldrb	r3, [r2, r3]
 8004372:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8004374:	68cb      	ldr	r3, [r1, #12]
 8004376:	0d9b      	lsrs	r3, r3, #22
 8004378:	2103      	movs	r1, #3
 800437a:	4019      	ands	r1, r3
 800437c:	3101      	adds	r1, #1
 800437e:	f7fb fed5 	bl	800012c <__udivsi3>
}
 8004382:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8004384:	4804      	ldr	r0, [pc, #16]	; (8004398 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8004386:	e7ed      	b.n	8004364 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8004388:	40021000 	.word	0x40021000
 800438c:	003d0900 	.word	0x003d0900
 8004390:	007a1200 	.word	0x007a1200
 8004394:	08005128 	.word	0x08005128
 8004398:	00f42400 	.word	0x00f42400

0800439c <RCC_GetSystemClockFreq>:
{
 800439c:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <RCC_GetSystemClockFreq+0x60>)
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	230c      	movs	r3, #12
 80043a4:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d023      	beq.n	80043f2 <RCC_GetSystemClockFreq+0x56>
 80043aa:	d809      	bhi.n	80043c0 <RCC_GetSystemClockFreq+0x24>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00c      	beq.n	80043ca <RCC_GetSystemClockFreq+0x2e>
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d114      	bne.n	80043de <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <RCC_GetSystemClockFreq+0x60>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	06db      	lsls	r3, r3, #27
 80043ba:	d51c      	bpl.n	80043f6 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 80043bc:	4810      	ldr	r0, [pc, #64]	; (8004400 <RCC_GetSystemClockFreq+0x64>)
 80043be:	e019      	b.n	80043f4 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 80043c0:	2b0c      	cmp	r3, #12
 80043c2:	d10c      	bne.n	80043de <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80043c4:	f7ff ffc2 	bl	800434c <RCC_PLL_GetFreqDomain_SYS>
      break;
 80043c8:	e014      	b.n	80043f4 <RCC_GetSystemClockFreq+0x58>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <RCC_GetSystemClockFreq+0x60>)
 80043cc:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80043ce:	0b52      	lsrs	r2, r2, #13
 80043d0:	2307      	movs	r3, #7
 80043d2:	4013      	ands	r3, r2
 80043d4:	3301      	adds	r3, #1
 80043d6:	2080      	movs	r0, #128	; 0x80
 80043d8:	0200      	lsls	r0, r0, #8
 80043da:	4098      	lsls	r0, r3
      break;
 80043dc:	e00a      	b.n	80043f4 <RCC_GetSystemClockFreq+0x58>
 80043de:	4b07      	ldr	r3, [pc, #28]	; (80043fc <RCC_GetSystemClockFreq+0x60>)
 80043e0:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80043e2:	0b52      	lsrs	r2, r2, #13
 80043e4:	2307      	movs	r3, #7
 80043e6:	4013      	ands	r3, r2
 80043e8:	3301      	adds	r3, #1
 80043ea:	2080      	movs	r0, #128	; 0x80
 80043ec:	0200      	lsls	r0, r0, #8
 80043ee:	4098      	lsls	r0, r3
      break;
 80043f0:	e000      	b.n	80043f4 <RCC_GetSystemClockFreq+0x58>
  switch (LL_RCC_GetSysClkSource())
 80043f2:	4804      	ldr	r0, [pc, #16]	; (8004404 <RCC_GetSystemClockFreq+0x68>)
}
 80043f4:	bd10      	pop	{r4, pc}
        frequency = HSI_VALUE;
 80043f6:	4804      	ldr	r0, [pc, #16]	; (8004408 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 80043f8:	e7fc      	b.n	80043f4 <RCC_GetSystemClockFreq+0x58>
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	40021000 	.word	0x40021000
 8004400:	003d0900 	.word	0x003d0900
 8004404:	007a1200 	.word	0x007a1200
 8004408:	00f42400 	.word	0x00f42400

0800440c <LL_RCC_GetUSARTClockFreq>:
{
 800440c:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800440e:	280c      	cmp	r0, #12
 8004410:	d001      	beq.n	8004416 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004412:	2000      	movs	r0, #0
}
 8004414:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004416:	4b19      	ldr	r3, [pc, #100]	; (800447c <LL_RCC_GetUSARTClockFreq+0x70>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441a:	4003      	ands	r3, r0
 800441c:	0400      	lsls	r0, r0, #16
 800441e:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <LL_RCC_GetUSARTClockFreq+0x74>)
 8004422:	4298      	cmp	r0, r3
 8004424:	d00f      	beq.n	8004446 <LL_RCC_GetUSARTClockFreq+0x3a>
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <LL_RCC_GetUSARTClockFreq+0x78>)
 8004428:	4298      	cmp	r0, r3
 800442a:	d019      	beq.n	8004460 <LL_RCC_GetUSARTClockFreq+0x54>
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <LL_RCC_GetUSARTClockFreq+0x7c>)
 800442e:	4298      	cmp	r0, r3
 8004430:	d006      	beq.n	8004440 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004432:	f7ff ffb3 	bl	800439c <RCC_GetSystemClockFreq>
 8004436:	f7ff ff6d 	bl	8004314 <RCC_GetHCLKClockFreq>
 800443a:	f7ff ff79 	bl	8004330 <RCC_GetPCLK1ClockFreq>
        break;
 800443e:	e7e9      	b.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 8004440:	f7ff ffac 	bl	800439c <RCC_GetSystemClockFreq>
        break;
 8004444:	e7e6      	b.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <LL_RCC_GetUSARTClockFreq+0x70>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2204      	movs	r2, #4
 800444c:	0010      	movs	r0, r2
 800444e:	4018      	ands	r0, r3
 8004450:	421a      	tst	r2, r3
 8004452:	d0df      	beq.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8004454:	4b09      	ldr	r3, [pc, #36]	; (800447c <LL_RCC_GetUSARTClockFreq+0x70>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	06db      	lsls	r3, r3, #27
 800445a:	d40c      	bmi.n	8004476 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 800445c:	480b      	ldr	r0, [pc, #44]	; (800448c <LL_RCC_GetUSARTClockFreq+0x80>)
 800445e:	e7d9      	b.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <LL_RCC_GetUSARTClockFreq+0x70>)
 8004462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	0010      	movs	r0, r2
 800446a:	4018      	ands	r0, r3
 800446c:	421a      	tst	r2, r3
 800446e:	d0d1      	beq.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8004470:	2080      	movs	r0, #128	; 0x80
 8004472:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8004474:	e7ce      	b.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8004476:	4806      	ldr	r0, [pc, #24]	; (8004490 <LL_RCC_GetUSARTClockFreq+0x84>)
 8004478:	e7cc      	b.n	8004414 <LL_RCC_GetUSARTClockFreq+0x8>
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	40021000 	.word	0x40021000
 8004480:	000c0008 	.word	0x000c0008
 8004484:	000c000c 	.word	0x000c000c
 8004488:	000c0004 	.word	0x000c0004
 800448c:	00f42400 	.word	0x00f42400
 8004490:	003d0900 	.word	0x003d0900

08004494 <LL_RCC_GetLPUARTClockFreq>:
{
 8004494:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004496:	4b19      	ldr	r3, [pc, #100]	; (80044fc <LL_RCC_GetLPUARTClockFreq+0x68>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4298      	cmp	r0, r3
 80044a2:	d011      	beq.n	80044c8 <LL_RCC_GetLPUARTClockFreq+0x34>
 80044a4:	23c0      	movs	r3, #192	; 0xc0
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	4298      	cmp	r0, r3
 80044aa:	d01a      	beq.n	80044e2 <LL_RCC_GetLPUARTClockFreq+0x4e>
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4298      	cmp	r0, r3
 80044b2:	d006      	beq.n	80044c2 <LL_RCC_GetLPUARTClockFreq+0x2e>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80044b4:	f7ff ff72 	bl	800439c <RCC_GetSystemClockFreq>
 80044b8:	f7ff ff2c 	bl	8004314 <RCC_GetHCLKClockFreq>
 80044bc:	f7ff ff38 	bl	8004330 <RCC_GetPCLK1ClockFreq>
      break;
 80044c0:	e001      	b.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
      lpuart_frequency = RCC_GetSystemClockFreq();
 80044c2:	f7ff ff6b 	bl	800439c <RCC_GetSystemClockFreq>
}
 80044c6:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80044c8:	4b0c      	ldr	r3, [pc, #48]	; (80044fc <LL_RCC_GetLPUARTClockFreq+0x68>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2204      	movs	r2, #4
 80044ce:	0010      	movs	r0, r2
 80044d0:	4018      	ands	r0, r3
 80044d2:	421a      	tst	r2, r3
 80044d4:	d0f7      	beq.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <LL_RCC_GetLPUARTClockFreq+0x68>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	06db      	lsls	r3, r3, #27
 80044dc:	d40c      	bmi.n	80044f8 <LL_RCC_GetLPUARTClockFreq+0x64>
          lpuart_frequency = HSI_VALUE;
 80044de:	4808      	ldr	r0, [pc, #32]	; (8004500 <LL_RCC_GetLPUARTClockFreq+0x6c>)
 80044e0:	e7f1      	b.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <LL_RCC_GetLPUARTClockFreq+0x68>)
 80044e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	0010      	movs	r0, r2
 80044ec:	4018      	ands	r0, r3
 80044ee:	421a      	tst	r2, r3
 80044f0:	d0e9      	beq.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
        lpuart_frequency = LSE_VALUE;
 80044f2:	2080      	movs	r0, #128	; 0x80
 80044f4:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 80044f6:	e7e6      	b.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
          lpuart_frequency = (HSI_VALUE >> 2U);
 80044f8:	4802      	ldr	r0, [pc, #8]	; (8004504 <LL_RCC_GetLPUARTClockFreq+0x70>)
 80044fa:	e7e4      	b.n	80044c6 <LL_RCC_GetLPUARTClockFreq+0x32>
 80044fc:	40021000 	.word	0x40021000
 8004500:	00f42400 	.word	0x00f42400
 8004504:	003d0900 	.word	0x003d0900

08004508 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004508:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800450a:	6a03      	ldr	r3, [r0, #32]
 800450c:	2401      	movs	r4, #1
 800450e:	43a3      	bics	r3, r4
 8004510:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004512:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004514:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004516:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004518:	2673      	movs	r6, #115	; 0x73
 800451a:	43b2      	bics	r2, r6
 800451c:	680e      	ldr	r6, [r1, #0]
 800451e:	4332      	orrs	r2, r6

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004520:	2602      	movs	r6, #2
 8004522:	43b3      	bics	r3, r6
 8004524:	68ce      	ldr	r6, [r1, #12]
 8004526:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004528:	43a3      	bics	r3, r4
 800452a:	684c      	ldr	r4, [r1, #4]
 800452c:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800452e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004530:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004532:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004534:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004536:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8004538:	2000      	movs	r0, #0
 800453a:	bd70      	pop	{r4, r5, r6, pc}

0800453c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800453c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800453e:	6a03      	ldr	r3, [r0, #32]
 8004540:	2610      	movs	r6, #16
 8004542:	43b3      	bics	r3, r6
 8004544:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004546:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004548:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800454a:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800454c:	4c0a      	ldr	r4, [pc, #40]	; (8004578 <OC2Config+0x3c>)
 800454e:	4022      	ands	r2, r4
 8004550:	680c      	ldr	r4, [r1, #0]
 8004552:	0224      	lsls	r4, r4, #8
 8004554:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004556:	2420      	movs	r4, #32
 8004558:	43a3      	bics	r3, r4
 800455a:	68cc      	ldr	r4, [r1, #12]
 800455c:	0124      	lsls	r4, r4, #4
 800455e:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004560:	43b3      	bics	r3, r6
 8004562:	684c      	ldr	r4, [r1, #4]
 8004564:	0124      	lsls	r4, r4, #4
 8004566:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004568:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800456a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800456c:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800456e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004570:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8004572:	2000      	movs	r0, #0
 8004574:	bd70      	pop	{r4, r5, r6, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	ffff8cff 	.word	0xffff8cff

0800457c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800457c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800457e:	6a02      	ldr	r2, [r0, #32]
 8004580:	4e0c      	ldr	r6, [pc, #48]	; (80045b4 <OC3Config+0x38>)
 8004582:	4032      	ands	r2, r6
 8004584:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004586:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004588:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800458a:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800458c:	2473      	movs	r4, #115	; 0x73
 800458e:	43a2      	bics	r2, r4
 8004590:	680c      	ldr	r4, [r1, #0]
 8004592:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004594:	4c08      	ldr	r4, [pc, #32]	; (80045b8 <OC3Config+0x3c>)
 8004596:	4023      	ands	r3, r4
 8004598:	68cc      	ldr	r4, [r1, #12]
 800459a:	0224      	lsls	r4, r4, #8
 800459c:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800459e:	4033      	ands	r3, r6
 80045a0:	684c      	ldr	r4, [r1, #4]
 80045a2:	0224      	lsls	r4, r4, #8
 80045a4:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045a6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045a8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80045aa:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80045ac:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045ae:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80045b0:	2000      	movs	r0, #0
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	fffffeff 	.word	0xfffffeff
 80045b8:	fffffdff 	.word	0xfffffdff

080045bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80045be:	6a02      	ldr	r2, [r0, #32]
 80045c0:	4e0d      	ldr	r6, [pc, #52]	; (80045f8 <OC4Config+0x3c>)
 80045c2:	4032      	ands	r2, r6
 80045c4:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045c6:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80045c8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80045ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80045cc:	4c0b      	ldr	r4, [pc, #44]	; (80045fc <OC4Config+0x40>)
 80045ce:	4022      	ands	r2, r4
 80045d0:	680c      	ldr	r4, [r1, #0]
 80045d2:	0224      	lsls	r4, r4, #8
 80045d4:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80045d6:	4c0a      	ldr	r4, [pc, #40]	; (8004600 <OC4Config+0x44>)
 80045d8:	4023      	ands	r3, r4
 80045da:	68cc      	ldr	r4, [r1, #12]
 80045dc:	0324      	lsls	r4, r4, #12
 80045de:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80045e0:	4033      	ands	r3, r6
 80045e2:	684c      	ldr	r4, [r1, #4]
 80045e4:	0324      	lsls	r4, r4, #12
 80045e6:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045e8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80045ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80045ec:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80045ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045f0:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80045f2:	2000      	movs	r0, #0
 80045f4:	bd70      	pop	{r4, r5, r6, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	ffffefff 	.word	0xffffefff
 80045fc:	ffff8cff 	.word	0xffff8cff
 8004600:	ffffdfff 	.word	0xffffdfff

08004604 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004604:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	05d2      	lsls	r2, r2, #23
 800460a:	4290      	cmp	r0, r2
 800460c:	d005      	beq.n	800461a <LL_TIM_Init+0x16>
 800460e:	4a11      	ldr	r2, [pc, #68]	; (8004654 <LL_TIM_Init+0x50>)
 8004610:	4290      	cmp	r0, r2
 8004612:	d002      	beq.n	800461a <LL_TIM_Init+0x16>
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <LL_TIM_Init+0x54>)
 8004616:	4290      	cmp	r0, r2
 8004618:	d103      	bne.n	8004622 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800461a:	2270      	movs	r2, #112	; 0x70
 800461c:	4393      	bics	r3, r2
 800461e:	684a      	ldr	r2, [r1, #4]
 8004620:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	05d2      	lsls	r2, r2, #23
 8004626:	4290      	cmp	r0, r2
 8004628:	d005      	beq.n	8004636 <LL_TIM_Init+0x32>
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <LL_TIM_Init+0x50>)
 800462c:	4290      	cmp	r0, r2
 800462e:	d002      	beq.n	8004636 <LL_TIM_Init+0x32>
 8004630:	4a09      	ldr	r2, [pc, #36]	; (8004658 <LL_TIM_Init+0x54>)
 8004632:	4290      	cmp	r0, r2
 8004634:	d103      	bne.n	800463e <LL_TIM_Init+0x3a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <LL_TIM_Init+0x58>)
 8004638:	4013      	ands	r3, r2
 800463a:	68ca      	ldr	r2, [r1, #12]
 800463c:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800463e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004640:	688b      	ldr	r3, [r1, #8]
 8004642:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004644:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004646:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004648:	6943      	ldr	r3, [r0, #20]
 800464a:	2201      	movs	r2, #1
 800464c:	4313      	orrs	r3, r2
 800464e:	6143      	str	r3, [r0, #20]
}
 8004650:	2000      	movs	r0, #0
 8004652:	4770      	bx	lr
 8004654:	40010800 	.word	0x40010800
 8004658:	40011400 	.word	0x40011400
 800465c:	fffffcff 	.word	0xfffffcff

08004660 <LL_TIM_OC_Init>:
{
 8004660:	b510      	push	{r4, lr}
 8004662:	000b      	movs	r3, r1
 8004664:	0011      	movs	r1, r2
  switch (Channel)
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	0052      	lsls	r2, r2, #1
 800466a:	4293      	cmp	r3, r2
 800466c:	d015      	beq.n	800469a <LL_TIM_OC_Init+0x3a>
 800466e:	d808      	bhi.n	8004682 <LL_TIM_OC_Init+0x22>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d00f      	beq.n	8004694 <LL_TIM_OC_Init+0x34>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d102      	bne.n	800467e <LL_TIM_OC_Init+0x1e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004678:	f7ff ff60 	bl	800453c <OC2Config>
      break;
 800467c:	e009      	b.n	8004692 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 800467e:	2001      	movs	r0, #1
 8004680:	e007      	b.n	8004692 <LL_TIM_OC_Init+0x32>
 8004682:	2280      	movs	r2, #128	; 0x80
 8004684:	0152      	lsls	r2, r2, #5
 8004686:	4293      	cmp	r3, r2
 8004688:	d102      	bne.n	8004690 <LL_TIM_OC_Init+0x30>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800468a:	f7ff ff97 	bl	80045bc <OC4Config>
      break;
 800468e:	e000      	b.n	8004692 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8004690:	2001      	movs	r0, #1
}
 8004692:	bd10      	pop	{r4, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004694:	f7ff ff38 	bl	8004508 <OC1Config>
      break;
 8004698:	e7fb      	b.n	8004692 <LL_TIM_OC_Init+0x32>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800469a:	f7ff ff6f 	bl	800457c <OC3Config>
      break;
 800469e:	e7f8      	b.n	8004692 <LL_TIM_OC_Init+0x32>

080046a0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	0004      	movs	r4, r0
 80046a4:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80046a6:	6803      	ldr	r3, [r0, #0]
 80046a8:	07db      	lsls	r3, r3, #31
 80046aa:	d440      	bmi.n	800472e <LL_USART_Init+0x8e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80046ac:	6803      	ldr	r3, [r0, #0]
 80046ae:	4a23      	ldr	r2, [pc, #140]	; (800473c <LL_USART_Init+0x9c>)
 80046b0:	401a      	ands	r2, r3
 80046b2:	684b      	ldr	r3, [r1, #4]
 80046b4:	68c9      	ldr	r1, [r1, #12]
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6929      	ldr	r1, [r5, #16]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	69a9      	ldr	r1, [r5, #24]
 80046be:	430b      	orrs	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80046c4:	6843      	ldr	r3, [r0, #4]
 80046c6:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <LL_USART_Init+0xa0>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	68aa      	ldr	r2, [r5, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046d0:	6883      	ldr	r3, [r0, #8]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <LL_USART_Init+0xa4>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	696a      	ldr	r2, [r5, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <LL_USART_Init+0xa8>)
 80046de:	4298      	cmp	r0, r3
 80046e0:	d001      	beq.n	80046e6 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 80046e2:	2001      	movs	r0, #1
 80046e4:	e024      	b.n	8004730 <LL_USART_Init+0x90>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80046e6:	200c      	movs	r0, #12
 80046e8:	f7ff fe90 	bl	800440c <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d020      	beq.n	8004732 <LL_USART_Init+0x92>
        && (USART_InitStruct->BaudRate != 0U))
 80046f0:	6829      	ldr	r1, [r5, #0]
 80046f2:	2900      	cmp	r1, #0
 80046f4:	d01f      	beq.n	8004736 <LL_USART_Init+0x96>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 80046f6:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d008      	beq.n	8004712 <LL_USART_Init+0x72>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004700:	084b      	lsrs	r3, r1, #1
 8004702:	18c0      	adds	r0, r0, r3
 8004704:	f7fb fd12 	bl	800012c <__udivsi3>
 8004708:	0400      	lsls	r0, r0, #16
 800470a:	0c00      	lsrs	r0, r0, #16
 800470c:	60e0      	str	r0, [r4, #12]
      status = SUCCESS;
 800470e:	2000      	movs	r0, #0
 8004710:	e00e      	b.n	8004730 <LL_USART_Init+0x90>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004712:	0040      	lsls	r0, r0, #1
 8004714:	084b      	lsrs	r3, r1, #1
 8004716:	18c0      	adds	r0, r0, r3
 8004718:	f7fb fd08 	bl	800012c <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <LL_USART_Init+0xac>)
 800471e:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004720:	0840      	lsrs	r0, r0, #1
 8004722:	2207      	movs	r2, #7
 8004724:	4010      	ands	r0, r2
 8004726:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 8004728:	60e0      	str	r0, [r4, #12]
 800472a:	2000      	movs	r0, #0
 800472c:	e000      	b.n	8004730 <LL_USART_Init+0x90>
  ErrorStatus status = ERROR;
 800472e:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8004730:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8004732:	2001      	movs	r0, #1
 8004734:	e7fc      	b.n	8004730 <LL_USART_Init+0x90>
 8004736:	2001      	movs	r0, #1
 8004738:	e7fa      	b.n	8004730 <LL_USART_Init+0x90>
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	efff69f3 	.word	0xefff69f3
 8004740:	ffffcfff 	.word	0xffffcfff
 8004744:	fffffcff 	.word	0xfffffcff
 8004748:	40004400 	.word	0x40004400
 800474c:	0000fff0 	.word	0x0000fff0

08004750 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004750:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004752:	21fa      	movs	r1, #250	; 0xfa
 8004754:	0089      	lsls	r1, r1, #2
 8004756:	f7fb fce9 	bl	800012c <__udivsi3>
 800475a:	3801      	subs	r0, #1
 800475c:	4b03      	ldr	r3, [pc, #12]	; (800476c <LL_Init1msTick+0x1c>)
 800475e:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004760:	2200      	movs	r2, #0
 8004762:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004764:	3205      	adds	r2, #5
 8004766:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8004768:	bd10      	pop	{r4, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	e000e010 	.word	0xe000e010

08004770 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004770:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <LL_mDelay+0x24>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004778:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	d000      	beq.n	8004780 <LL_mDelay+0x10>
  {
    Delay++;
 800477e:	3001      	adds	r0, #1
  }

  while (Delay)
 8004780:	2800      	cmp	r0, #0
 8004782:	d005      	beq.n	8004790 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <LL_mDelay+0x24>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	03db      	lsls	r3, r3, #15
 800478a:	d5f9      	bpl.n	8004780 <LL_mDelay+0x10>
    {
      Delay--;
 800478c:	3801      	subs	r0, #1
 800478e:	e7f7      	b.n	8004780 <LL_mDelay+0x10>
    }
  }
}
 8004790:	b002      	add	sp, #8
 8004792:	4770      	bx	lr
 8004794:	e000e010 	.word	0xe000e010

08004798 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004798:	4b01      	ldr	r3, [pc, #4]	; (80047a0 <LL_SetSystemCoreClock+0x8>)
 800479a:	6018      	str	r0, [r3, #0]
}
 800479c:	4770      	bx	lr
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	2000001c 	.word	0x2000001c

080047a4 <__errno>:
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <__errno+0x8>)
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	4770      	bx	lr
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	20000028 	.word	0x20000028

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2600      	movs	r6, #0
 80047b4:	4d0c      	ldr	r5, [pc, #48]	; (80047e8 <__libc_init_array+0x38>)
 80047b6:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	2600      	movs	r6, #0
 80047c2:	f000 fc5d 	bl	8005080 <_init>
 80047c6:	4d0a      	ldr	r5, [pc, #40]	; (80047f0 <__libc_init_array+0x40>)
 80047c8:	4c0a      	ldr	r4, [pc, #40]	; (80047f4 <__libc_init_array+0x44>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	00b3      	lsls	r3, r6, #2
 80047d6:	58eb      	ldr	r3, [r5, r3]
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	00b3      	lsls	r3, r6, #2
 80047e0:	58eb      	ldr	r3, [r5, r3]
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08005780 	.word	0x08005780
 80047ec:	08005780 	.word	0x08005780
 80047f0:	08005780 	.word	0x08005780
 80047f4:	08005784 	.word	0x08005784

080047f8 <memcpy>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b510      	push	{r4, lr}
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d100      	bne.n	8004802 <memcpy+0xa>
 8004800:	bd10      	pop	{r4, pc}
 8004802:	5ccc      	ldrb	r4, [r1, r3]
 8004804:	54c4      	strb	r4, [r0, r3]
 8004806:	3301      	adds	r3, #1
 8004808:	e7f8      	b.n	80047fc <memcpy+0x4>

0800480a <memset>:
 800480a:	0003      	movs	r3, r0
 800480c:	1882      	adds	r2, r0, r2
 800480e:	4293      	cmp	r3, r2
 8004810:	d100      	bne.n	8004814 <memset+0xa>
 8004812:	4770      	bx	lr
 8004814:	7019      	strb	r1, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	e7f9      	b.n	800480e <memset+0x4>

0800481a <_vsniprintf_r>:
 800481a:	b530      	push	{r4, r5, lr}
 800481c:	0014      	movs	r4, r2
 800481e:	0005      	movs	r5, r0
 8004820:	001a      	movs	r2, r3
 8004822:	b09b      	sub	sp, #108	; 0x6c
 8004824:	2c00      	cmp	r4, #0
 8004826:	da05      	bge.n	8004834 <_vsniprintf_r+0x1a>
 8004828:	238b      	movs	r3, #139	; 0x8b
 800482a:	6003      	str	r3, [r0, #0]
 800482c:	2001      	movs	r0, #1
 800482e:	4240      	negs	r0, r0
 8004830:	b01b      	add	sp, #108	; 0x6c
 8004832:	bd30      	pop	{r4, r5, pc}
 8004834:	2382      	movs	r3, #130	; 0x82
 8004836:	4668      	mov	r0, sp
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	8183      	strh	r3, [r0, #12]
 800483c:	2300      	movs	r3, #0
 800483e:	9100      	str	r1, [sp, #0]
 8004840:	9104      	str	r1, [sp, #16]
 8004842:	429c      	cmp	r4, r3
 8004844:	d000      	beq.n	8004848 <_vsniprintf_r+0x2e>
 8004846:	1e63      	subs	r3, r4, #1
 8004848:	9302      	str	r3, [sp, #8]
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	2301      	movs	r3, #1
 800484e:	4669      	mov	r1, sp
 8004850:	425b      	negs	r3, r3
 8004852:	81cb      	strh	r3, [r1, #14]
 8004854:	0028      	movs	r0, r5
 8004856:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004858:	f000 f878 	bl	800494c <_svfiprintf_r>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	da01      	bge.n	8004864 <_vsniprintf_r+0x4a>
 8004860:	238b      	movs	r3, #139	; 0x8b
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	2c00      	cmp	r4, #0
 8004866:	d0e3      	beq.n	8004830 <_vsniprintf_r+0x16>
 8004868:	2300      	movs	r3, #0
 800486a:	9a00      	ldr	r2, [sp, #0]
 800486c:	7013      	strb	r3, [r2, #0]
 800486e:	e7df      	b.n	8004830 <_vsniprintf_r+0x16>

08004870 <vsniprintf>:
 8004870:	b507      	push	{r0, r1, r2, lr}
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	0013      	movs	r3, r2
 8004876:	000a      	movs	r2, r1
 8004878:	0001      	movs	r1, r0
 800487a:	4802      	ldr	r0, [pc, #8]	; (8004884 <vsniprintf+0x14>)
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f7ff ffcc 	bl	800481a <_vsniprintf_r>
 8004882:	bd0e      	pop	{r1, r2, r3, pc}
 8004884:	20000028 	.word	0x20000028

08004888 <__ssputs_r>:
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	688e      	ldr	r6, [r1, #8]
 800488c:	b085      	sub	sp, #20
 800488e:	0007      	movs	r7, r0
 8004890:	000c      	movs	r4, r1
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	9301      	str	r3, [sp, #4]
 8004896:	429e      	cmp	r6, r3
 8004898:	d83c      	bhi.n	8004914 <__ssputs_r+0x8c>
 800489a:	2390      	movs	r3, #144	; 0x90
 800489c:	898a      	ldrh	r2, [r1, #12]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	421a      	tst	r2, r3
 80048a2:	d034      	beq.n	800490e <__ssputs_r+0x86>
 80048a4:	2503      	movs	r5, #3
 80048a6:	6909      	ldr	r1, [r1, #16]
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	1a5b      	subs	r3, r3, r1
 80048ac:	9302      	str	r3, [sp, #8]
 80048ae:	6963      	ldr	r3, [r4, #20]
 80048b0:	9802      	ldr	r0, [sp, #8]
 80048b2:	435d      	muls	r5, r3
 80048b4:	0feb      	lsrs	r3, r5, #31
 80048b6:	195d      	adds	r5, r3, r5
 80048b8:	9b01      	ldr	r3, [sp, #4]
 80048ba:	106d      	asrs	r5, r5, #1
 80048bc:	3301      	adds	r3, #1
 80048be:	181b      	adds	r3, r3, r0
 80048c0:	42ab      	cmp	r3, r5
 80048c2:	d900      	bls.n	80048c6 <__ssputs_r+0x3e>
 80048c4:	001d      	movs	r5, r3
 80048c6:	0553      	lsls	r3, r2, #21
 80048c8:	d532      	bpl.n	8004930 <__ssputs_r+0xa8>
 80048ca:	0029      	movs	r1, r5
 80048cc:	0038      	movs	r0, r7
 80048ce:	f000 fb27 	bl	8004f20 <_malloc_r>
 80048d2:	1e06      	subs	r6, r0, #0
 80048d4:	d109      	bne.n	80048ea <__ssputs_r+0x62>
 80048d6:	230c      	movs	r3, #12
 80048d8:	603b      	str	r3, [r7, #0]
 80048da:	2340      	movs	r3, #64	; 0x40
 80048dc:	2001      	movs	r0, #1
 80048de:	89a2      	ldrh	r2, [r4, #12]
 80048e0:	4240      	negs	r0, r0
 80048e2:	4313      	orrs	r3, r2
 80048e4:	81a3      	strh	r3, [r4, #12]
 80048e6:	b005      	add	sp, #20
 80048e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ea:	9a02      	ldr	r2, [sp, #8]
 80048ec:	6921      	ldr	r1, [r4, #16]
 80048ee:	f7ff ff83 	bl	80047f8 <memcpy>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	4a14      	ldr	r2, [pc, #80]	; (8004948 <__ssputs_r+0xc0>)
 80048f6:	401a      	ands	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	4313      	orrs	r3, r2
 80048fc:	81a3      	strh	r3, [r4, #12]
 80048fe:	9b02      	ldr	r3, [sp, #8]
 8004900:	6126      	str	r6, [r4, #16]
 8004902:	18f6      	adds	r6, r6, r3
 8004904:	6026      	str	r6, [r4, #0]
 8004906:	6165      	str	r5, [r4, #20]
 8004908:	9e01      	ldr	r6, [sp, #4]
 800490a:	1aed      	subs	r5, r5, r3
 800490c:	60a5      	str	r5, [r4, #8]
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	429e      	cmp	r6, r3
 8004912:	d900      	bls.n	8004916 <__ssputs_r+0x8e>
 8004914:	9e01      	ldr	r6, [sp, #4]
 8004916:	0032      	movs	r2, r6
 8004918:	9903      	ldr	r1, [sp, #12]
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	f000 faa3 	bl	8004e66 <memmove>
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	2000      	movs	r0, #0
 8004924:	1b9b      	subs	r3, r3, r6
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	199e      	adds	r6, r3, r6
 800492c:	6026      	str	r6, [r4, #0]
 800492e:	e7da      	b.n	80048e6 <__ssputs_r+0x5e>
 8004930:	002a      	movs	r2, r5
 8004932:	0038      	movs	r0, r7
 8004934:	f000 fb52 	bl	8004fdc <_realloc_r>
 8004938:	1e06      	subs	r6, r0, #0
 800493a:	d1e0      	bne.n	80048fe <__ssputs_r+0x76>
 800493c:	0038      	movs	r0, r7
 800493e:	6921      	ldr	r1, [r4, #16]
 8004940:	f000 faa4 	bl	8004e8c <_free_r>
 8004944:	e7c7      	b.n	80048d6 <__ssputs_r+0x4e>
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	fffffb7f 	.word	0xfffffb7f

0800494c <_svfiprintf_r>:
 800494c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494e:	b0a1      	sub	sp, #132	; 0x84
 8004950:	9003      	str	r0, [sp, #12]
 8004952:	001d      	movs	r5, r3
 8004954:	898b      	ldrh	r3, [r1, #12]
 8004956:	000f      	movs	r7, r1
 8004958:	0016      	movs	r6, r2
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	d511      	bpl.n	8004982 <_svfiprintf_r+0x36>
 800495e:	690b      	ldr	r3, [r1, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10e      	bne.n	8004982 <_svfiprintf_r+0x36>
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	f000 fadb 	bl	8004f20 <_malloc_r>
 800496a:	6038      	str	r0, [r7, #0]
 800496c:	6138      	str	r0, [r7, #16]
 800496e:	2800      	cmp	r0, #0
 8004970:	d105      	bne.n	800497e <_svfiprintf_r+0x32>
 8004972:	230c      	movs	r3, #12
 8004974:	9a03      	ldr	r2, [sp, #12]
 8004976:	3801      	subs	r0, #1
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	b021      	add	sp, #132	; 0x84
 800497c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	2300      	movs	r3, #0
 8004984:	ac08      	add	r4, sp, #32
 8004986:	6163      	str	r3, [r4, #20]
 8004988:	3320      	adds	r3, #32
 800498a:	7663      	strb	r3, [r4, #25]
 800498c:	3310      	adds	r3, #16
 800498e:	76a3      	strb	r3, [r4, #26]
 8004990:	9507      	str	r5, [sp, #28]
 8004992:	0035      	movs	r5, r6
 8004994:	782b      	ldrb	r3, [r5, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <_svfiprintf_r+0x52>
 800499a:	2b25      	cmp	r3, #37	; 0x25
 800499c:	d147      	bne.n	8004a2e <_svfiprintf_r+0xe2>
 800499e:	1bab      	subs	r3, r5, r6
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	42b5      	cmp	r5, r6
 80049a4:	d00c      	beq.n	80049c0 <_svfiprintf_r+0x74>
 80049a6:	0032      	movs	r2, r6
 80049a8:	0039      	movs	r1, r7
 80049aa:	9803      	ldr	r0, [sp, #12]
 80049ac:	f7ff ff6c 	bl	8004888 <__ssputs_r>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d100      	bne.n	80049b6 <_svfiprintf_r+0x6a>
 80049b4:	e0ae      	b.n	8004b14 <_svfiprintf_r+0x1c8>
 80049b6:	6962      	ldr	r2, [r4, #20]
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	4694      	mov	ip, r2
 80049bc:	4463      	add	r3, ip
 80049be:	6163      	str	r3, [r4, #20]
 80049c0:	782b      	ldrb	r3, [r5, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d100      	bne.n	80049c8 <_svfiprintf_r+0x7c>
 80049c6:	e0a5      	b.n	8004b14 <_svfiprintf_r+0x1c8>
 80049c8:	2201      	movs	r2, #1
 80049ca:	2300      	movs	r3, #0
 80049cc:	4252      	negs	r2, r2
 80049ce:	6062      	str	r2, [r4, #4]
 80049d0:	a904      	add	r1, sp, #16
 80049d2:	3254      	adds	r2, #84	; 0x54
 80049d4:	1852      	adds	r2, r2, r1
 80049d6:	1c6e      	adds	r6, r5, #1
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	60e3      	str	r3, [r4, #12]
 80049dc:	60a3      	str	r3, [r4, #8]
 80049de:	7013      	strb	r3, [r2, #0]
 80049e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80049e2:	2205      	movs	r2, #5
 80049e4:	7831      	ldrb	r1, [r6, #0]
 80049e6:	4854      	ldr	r0, [pc, #336]	; (8004b38 <_svfiprintf_r+0x1ec>)
 80049e8:	f000 fa32 	bl	8004e50 <memchr>
 80049ec:	1c75      	adds	r5, r6, #1
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d11f      	bne.n	8004a32 <_svfiprintf_r+0xe6>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	06d3      	lsls	r3, r2, #27
 80049f6:	d504      	bpl.n	8004a02 <_svfiprintf_r+0xb6>
 80049f8:	2353      	movs	r3, #83	; 0x53
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	185b      	adds	r3, r3, r1
 80049fe:	2120      	movs	r1, #32
 8004a00:	7019      	strb	r1, [r3, #0]
 8004a02:	0713      	lsls	r3, r2, #28
 8004a04:	d504      	bpl.n	8004a10 <_svfiprintf_r+0xc4>
 8004a06:	2353      	movs	r3, #83	; 0x53
 8004a08:	a904      	add	r1, sp, #16
 8004a0a:	185b      	adds	r3, r3, r1
 8004a0c:	212b      	movs	r1, #43	; 0x2b
 8004a0e:	7019      	strb	r1, [r3, #0]
 8004a10:	7833      	ldrb	r3, [r6, #0]
 8004a12:	2b2a      	cmp	r3, #42	; 0x2a
 8004a14:	d016      	beq.n	8004a44 <_svfiprintf_r+0xf8>
 8004a16:	0035      	movs	r5, r6
 8004a18:	2100      	movs	r1, #0
 8004a1a:	200a      	movs	r0, #10
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	782a      	ldrb	r2, [r5, #0]
 8004a20:	1c6e      	adds	r6, r5, #1
 8004a22:	3a30      	subs	r2, #48	; 0x30
 8004a24:	2a09      	cmp	r2, #9
 8004a26:	d94e      	bls.n	8004ac6 <_svfiprintf_r+0x17a>
 8004a28:	2900      	cmp	r1, #0
 8004a2a:	d111      	bne.n	8004a50 <_svfiprintf_r+0x104>
 8004a2c:	e017      	b.n	8004a5e <_svfiprintf_r+0x112>
 8004a2e:	3501      	adds	r5, #1
 8004a30:	e7b0      	b.n	8004994 <_svfiprintf_r+0x48>
 8004a32:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <_svfiprintf_r+0x1ec>)
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	1ac0      	subs	r0, r0, r3
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4083      	lsls	r3, r0
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	002e      	movs	r6, r5
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	e7ce      	b.n	80049e2 <_svfiprintf_r+0x96>
 8004a44:	9b07      	ldr	r3, [sp, #28]
 8004a46:	1d19      	adds	r1, r3, #4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	9107      	str	r1, [sp, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	db01      	blt.n	8004a54 <_svfiprintf_r+0x108>
 8004a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a52:	e004      	b.n	8004a5e <_svfiprintf_r+0x112>
 8004a54:	425b      	negs	r3, r3
 8004a56:	60e3      	str	r3, [r4, #12]
 8004a58:	2302      	movs	r3, #2
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	782b      	ldrb	r3, [r5, #0]
 8004a60:	2b2e      	cmp	r3, #46	; 0x2e
 8004a62:	d10a      	bne.n	8004a7a <_svfiprintf_r+0x12e>
 8004a64:	786b      	ldrb	r3, [r5, #1]
 8004a66:	2b2a      	cmp	r3, #42	; 0x2a
 8004a68:	d135      	bne.n	8004ad6 <_svfiprintf_r+0x18a>
 8004a6a:	9b07      	ldr	r3, [sp, #28]
 8004a6c:	3502      	adds	r5, #2
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	9207      	str	r2, [sp, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db2b      	blt.n	8004ad0 <_svfiprintf_r+0x184>
 8004a78:	9309      	str	r3, [sp, #36]	; 0x24
 8004a7a:	4e30      	ldr	r6, [pc, #192]	; (8004b3c <_svfiprintf_r+0x1f0>)
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	0030      	movs	r0, r6
 8004a80:	7829      	ldrb	r1, [r5, #0]
 8004a82:	f000 f9e5 	bl	8004e50 <memchr>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d006      	beq.n	8004a98 <_svfiprintf_r+0x14c>
 8004a8a:	2340      	movs	r3, #64	; 0x40
 8004a8c:	1b80      	subs	r0, r0, r6
 8004a8e:	4083      	lsls	r3, r0
 8004a90:	6822      	ldr	r2, [r4, #0]
 8004a92:	3501      	adds	r5, #1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	7829      	ldrb	r1, [r5, #0]
 8004a9a:	2206      	movs	r2, #6
 8004a9c:	4828      	ldr	r0, [pc, #160]	; (8004b40 <_svfiprintf_r+0x1f4>)
 8004a9e:	1c6e      	adds	r6, r5, #1
 8004aa0:	7621      	strb	r1, [r4, #24]
 8004aa2:	f000 f9d5 	bl	8004e50 <memchr>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d03c      	beq.n	8004b24 <_svfiprintf_r+0x1d8>
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <_svfiprintf_r+0x1f8>)
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d125      	bne.n	8004afc <_svfiprintf_r+0x1b0>
 8004ab0:	2207      	movs	r2, #7
 8004ab2:	9b07      	ldr	r3, [sp, #28]
 8004ab4:	3307      	adds	r3, #7
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	3308      	adds	r3, #8
 8004aba:	9307      	str	r3, [sp, #28]
 8004abc:	6963      	ldr	r3, [r4, #20]
 8004abe:	9a04      	ldr	r2, [sp, #16]
 8004ac0:	189b      	adds	r3, r3, r2
 8004ac2:	6163      	str	r3, [r4, #20]
 8004ac4:	e765      	b.n	8004992 <_svfiprintf_r+0x46>
 8004ac6:	4343      	muls	r3, r0
 8004ac8:	0035      	movs	r5, r6
 8004aca:	2101      	movs	r1, #1
 8004acc:	189b      	adds	r3, r3, r2
 8004ace:	e7a6      	b.n	8004a1e <_svfiprintf_r+0xd2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	425b      	negs	r3, r3
 8004ad4:	e7d0      	b.n	8004a78 <_svfiprintf_r+0x12c>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	200a      	movs	r0, #10
 8004ada:	001a      	movs	r2, r3
 8004adc:	3501      	adds	r5, #1
 8004ade:	6063      	str	r3, [r4, #4]
 8004ae0:	7829      	ldrb	r1, [r5, #0]
 8004ae2:	1c6e      	adds	r6, r5, #1
 8004ae4:	3930      	subs	r1, #48	; 0x30
 8004ae6:	2909      	cmp	r1, #9
 8004ae8:	d903      	bls.n	8004af2 <_svfiprintf_r+0x1a6>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0c5      	beq.n	8004a7a <_svfiprintf_r+0x12e>
 8004aee:	9209      	str	r2, [sp, #36]	; 0x24
 8004af0:	e7c3      	b.n	8004a7a <_svfiprintf_r+0x12e>
 8004af2:	4342      	muls	r2, r0
 8004af4:	0035      	movs	r5, r6
 8004af6:	2301      	movs	r3, #1
 8004af8:	1852      	adds	r2, r2, r1
 8004afa:	e7f1      	b.n	8004ae0 <_svfiprintf_r+0x194>
 8004afc:	ab07      	add	r3, sp, #28
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	003a      	movs	r2, r7
 8004b02:	0021      	movs	r1, r4
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <_svfiprintf_r+0x1fc>)
 8004b06:	9803      	ldr	r0, [sp, #12]
 8004b08:	e000      	b.n	8004b0c <_svfiprintf_r+0x1c0>
 8004b0a:	bf00      	nop
 8004b0c:	9004      	str	r0, [sp, #16]
 8004b0e:	9b04      	ldr	r3, [sp, #16]
 8004b10:	3301      	adds	r3, #1
 8004b12:	d1d3      	bne.n	8004abc <_svfiprintf_r+0x170>
 8004b14:	89bb      	ldrh	r3, [r7, #12]
 8004b16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b18:	065b      	lsls	r3, r3, #25
 8004b1a:	d400      	bmi.n	8004b1e <_svfiprintf_r+0x1d2>
 8004b1c:	e72d      	b.n	800497a <_svfiprintf_r+0x2e>
 8004b1e:	2001      	movs	r0, #1
 8004b20:	4240      	negs	r0, r0
 8004b22:	e72a      	b.n	800497a <_svfiprintf_r+0x2e>
 8004b24:	ab07      	add	r3, sp, #28
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	003a      	movs	r2, r7
 8004b2a:	0021      	movs	r1, r4
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <_svfiprintf_r+0x1fc>)
 8004b2e:	9803      	ldr	r0, [sp, #12]
 8004b30:	f000 f87c 	bl	8004c2c <_printf_i>
 8004b34:	e7ea      	b.n	8004b0c <_svfiprintf_r+0x1c0>
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	08005744 	.word	0x08005744
 8004b3c:	0800574a 	.word	0x0800574a
 8004b40:	0800574e 	.word	0x0800574e
 8004b44:	00000000 	.word	0x00000000
 8004b48:	08004889 	.word	0x08004889

08004b4c <_printf_common>:
 8004b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4e:	0015      	movs	r5, r2
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	688a      	ldr	r2, [r1, #8]
 8004b54:	690b      	ldr	r3, [r1, #16]
 8004b56:	000c      	movs	r4, r1
 8004b58:	9000      	str	r0, [sp, #0]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	da00      	bge.n	8004b60 <_printf_common+0x14>
 8004b5e:	0013      	movs	r3, r2
 8004b60:	0022      	movs	r2, r4
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	3243      	adds	r2, #67	; 0x43
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	2a00      	cmp	r2, #0
 8004b6a:	d001      	beq.n	8004b70 <_printf_common+0x24>
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	069b      	lsls	r3, r3, #26
 8004b74:	d502      	bpl.n	8004b7c <_printf_common+0x30>
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	3302      	adds	r3, #2
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	2306      	movs	r3, #6
 8004b80:	0017      	movs	r7, r2
 8004b82:	401f      	ands	r7, r3
 8004b84:	421a      	tst	r2, r3
 8004b86:	d027      	beq.n	8004bd8 <_printf_common+0x8c>
 8004b88:	0023      	movs	r3, r4
 8004b8a:	3343      	adds	r3, #67	; 0x43
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	1e5a      	subs	r2, r3, #1
 8004b90:	4193      	sbcs	r3, r2
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	0692      	lsls	r2, r2, #26
 8004b96:	d430      	bmi.n	8004bfa <_printf_common+0xae>
 8004b98:	0022      	movs	r2, r4
 8004b9a:	9901      	ldr	r1, [sp, #4]
 8004b9c:	9800      	ldr	r0, [sp, #0]
 8004b9e:	9e08      	ldr	r6, [sp, #32]
 8004ba0:	3243      	adds	r2, #67	; 0x43
 8004ba2:	47b0      	blx	r6
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d025      	beq.n	8004bf4 <_printf_common+0xa8>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	682a      	ldr	r2, [r5, #0]
 8004bae:	68e1      	ldr	r1, [r4, #12]
 8004bb0:	2500      	movs	r5, #0
 8004bb2:	4003      	ands	r3, r0
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d103      	bne.n	8004bc0 <_printf_common+0x74>
 8004bb8:	1a8d      	subs	r5, r1, r2
 8004bba:	43eb      	mvns	r3, r5
 8004bbc:	17db      	asrs	r3, r3, #31
 8004bbe:	401d      	ands	r5, r3
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	6922      	ldr	r2, [r4, #16]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	dd01      	ble.n	8004bcc <_printf_common+0x80>
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	18ed      	adds	r5, r5, r3
 8004bcc:	2700      	movs	r7, #0
 8004bce:	42bd      	cmp	r5, r7
 8004bd0:	d120      	bne.n	8004c14 <_printf_common+0xc8>
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e010      	b.n	8004bf8 <_printf_common+0xac>
 8004bd6:	3701      	adds	r7, #1
 8004bd8:	68e3      	ldr	r3, [r4, #12]
 8004bda:	682a      	ldr	r2, [r5, #0]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	42bb      	cmp	r3, r7
 8004be0:	ddd2      	ble.n	8004b88 <_printf_common+0x3c>
 8004be2:	0022      	movs	r2, r4
 8004be4:	2301      	movs	r3, #1
 8004be6:	9901      	ldr	r1, [sp, #4]
 8004be8:	9800      	ldr	r0, [sp, #0]
 8004bea:	9e08      	ldr	r6, [sp, #32]
 8004bec:	3219      	adds	r2, #25
 8004bee:	47b0      	blx	r6
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d1f0      	bne.n	8004bd6 <_printf_common+0x8a>
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	4240      	negs	r0, r0
 8004bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bfa:	2030      	movs	r0, #48	; 0x30
 8004bfc:	18e1      	adds	r1, r4, r3
 8004bfe:	3143      	adds	r1, #67	; 0x43
 8004c00:	7008      	strb	r0, [r1, #0]
 8004c02:	0021      	movs	r1, r4
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	3145      	adds	r1, #69	; 0x45
 8004c08:	7809      	ldrb	r1, [r1, #0]
 8004c0a:	18a2      	adds	r2, r4, r2
 8004c0c:	3243      	adds	r2, #67	; 0x43
 8004c0e:	3302      	adds	r3, #2
 8004c10:	7011      	strb	r1, [r2, #0]
 8004c12:	e7c1      	b.n	8004b98 <_printf_common+0x4c>
 8004c14:	0022      	movs	r2, r4
 8004c16:	2301      	movs	r3, #1
 8004c18:	9901      	ldr	r1, [sp, #4]
 8004c1a:	9800      	ldr	r0, [sp, #0]
 8004c1c:	9e08      	ldr	r6, [sp, #32]
 8004c1e:	321a      	adds	r2, #26
 8004c20:	47b0      	blx	r6
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	d0e6      	beq.n	8004bf4 <_printf_common+0xa8>
 8004c26:	3701      	adds	r7, #1
 8004c28:	e7d1      	b.n	8004bce <_printf_common+0x82>
	...

08004c2c <_printf_i>:
 8004c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2e:	b08b      	sub	sp, #44	; 0x2c
 8004c30:	9206      	str	r2, [sp, #24]
 8004c32:	000a      	movs	r2, r1
 8004c34:	3243      	adds	r2, #67	; 0x43
 8004c36:	9307      	str	r3, [sp, #28]
 8004c38:	9005      	str	r0, [sp, #20]
 8004c3a:	9204      	str	r2, [sp, #16]
 8004c3c:	7e0a      	ldrb	r2, [r1, #24]
 8004c3e:	000c      	movs	r4, r1
 8004c40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c42:	2a78      	cmp	r2, #120	; 0x78
 8004c44:	d806      	bhi.n	8004c54 <_printf_i+0x28>
 8004c46:	2a62      	cmp	r2, #98	; 0x62
 8004c48:	d808      	bhi.n	8004c5c <_printf_i+0x30>
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d100      	bne.n	8004c50 <_printf_i+0x24>
 8004c4e:	e0c0      	b.n	8004dd2 <_printf_i+0x1a6>
 8004c50:	2a58      	cmp	r2, #88	; 0x58
 8004c52:	d052      	beq.n	8004cfa <_printf_i+0xce>
 8004c54:	0026      	movs	r6, r4
 8004c56:	3642      	adds	r6, #66	; 0x42
 8004c58:	7032      	strb	r2, [r6, #0]
 8004c5a:	e022      	b.n	8004ca2 <_printf_i+0x76>
 8004c5c:	0010      	movs	r0, r2
 8004c5e:	3863      	subs	r0, #99	; 0x63
 8004c60:	2815      	cmp	r0, #21
 8004c62:	d8f7      	bhi.n	8004c54 <_printf_i+0x28>
 8004c64:	f7fb fa58 	bl	8000118 <__gnu_thumb1_case_shi>
 8004c68:	001f0016 	.word	0x001f0016
 8004c6c:	fff6fff6 	.word	0xfff6fff6
 8004c70:	fff6fff6 	.word	0xfff6fff6
 8004c74:	fff6001f 	.word	0xfff6001f
 8004c78:	fff6fff6 	.word	0xfff6fff6
 8004c7c:	00a8fff6 	.word	0x00a8fff6
 8004c80:	009a0036 	.word	0x009a0036
 8004c84:	fff6fff6 	.word	0xfff6fff6
 8004c88:	fff600b9 	.word	0xfff600b9
 8004c8c:	fff60036 	.word	0xfff60036
 8004c90:	009efff6 	.word	0x009efff6
 8004c94:	0026      	movs	r6, r4
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	3642      	adds	r6, #66	; 0x42
 8004c9a:	1d11      	adds	r1, r2, #4
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	6813      	ldr	r3, [r2, #0]
 8004ca0:	7033      	strb	r3, [r6, #0]
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0a7      	b.n	8004df6 <_printf_i+0x1ca>
 8004ca6:	6808      	ldr	r0, [r1, #0]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	1d0a      	adds	r2, r1, #4
 8004cac:	0605      	lsls	r5, r0, #24
 8004cae:	d50b      	bpl.n	8004cc8 <_printf_i+0x9c>
 8004cb0:	680d      	ldr	r5, [r1, #0]
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	da03      	bge.n	8004cc0 <_printf_i+0x94>
 8004cb8:	232d      	movs	r3, #45	; 0x2d
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	426d      	negs	r5, r5
 8004cbe:	7013      	strb	r3, [r2, #0]
 8004cc0:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <_printf_i+0x21c>)
 8004cc2:	270a      	movs	r7, #10
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	e032      	b.n	8004d2e <_printf_i+0x102>
 8004cc8:	680d      	ldr	r5, [r1, #0]
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	0641      	lsls	r1, r0, #25
 8004cce:	d5f1      	bpl.n	8004cb4 <_printf_i+0x88>
 8004cd0:	b22d      	sxth	r5, r5
 8004cd2:	e7ef      	b.n	8004cb4 <_printf_i+0x88>
 8004cd4:	680d      	ldr	r5, [r1, #0]
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	1d08      	adds	r0, r1, #4
 8004cda:	6018      	str	r0, [r3, #0]
 8004cdc:	062e      	lsls	r6, r5, #24
 8004cde:	d501      	bpl.n	8004ce4 <_printf_i+0xb8>
 8004ce0:	680d      	ldr	r5, [r1, #0]
 8004ce2:	e003      	b.n	8004cec <_printf_i+0xc0>
 8004ce4:	066d      	lsls	r5, r5, #25
 8004ce6:	d5fb      	bpl.n	8004ce0 <_printf_i+0xb4>
 8004ce8:	680d      	ldr	r5, [r1, #0]
 8004cea:	b2ad      	uxth	r5, r5
 8004cec:	4b56      	ldr	r3, [pc, #344]	; (8004e48 <_printf_i+0x21c>)
 8004cee:	270a      	movs	r7, #10
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	2a6f      	cmp	r2, #111	; 0x6f
 8004cf4:	d117      	bne.n	8004d26 <_printf_i+0xfa>
 8004cf6:	2708      	movs	r7, #8
 8004cf8:	e015      	b.n	8004d26 <_printf_i+0xfa>
 8004cfa:	3145      	adds	r1, #69	; 0x45
 8004cfc:	700a      	strb	r2, [r1, #0]
 8004cfe:	4a52      	ldr	r2, [pc, #328]	; (8004e48 <_printf_i+0x21c>)
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	6821      	ldr	r1, [r4, #0]
 8004d06:	ca20      	ldmia	r2!, {r5}
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	0608      	lsls	r0, r1, #24
 8004d0c:	d550      	bpl.n	8004db0 <_printf_i+0x184>
 8004d0e:	07cb      	lsls	r3, r1, #31
 8004d10:	d502      	bpl.n	8004d18 <_printf_i+0xec>
 8004d12:	2320      	movs	r3, #32
 8004d14:	4319      	orrs	r1, r3
 8004d16:	6021      	str	r1, [r4, #0]
 8004d18:	2710      	movs	r7, #16
 8004d1a:	2d00      	cmp	r5, #0
 8004d1c:	d103      	bne.n	8004d26 <_printf_i+0xfa>
 8004d1e:	2320      	movs	r3, #32
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	439a      	bics	r2, r3
 8004d24:	6022      	str	r2, [r4, #0]
 8004d26:	0023      	movs	r3, r4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	3343      	adds	r3, #67	; 0x43
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	60a3      	str	r3, [r4, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db03      	blt.n	8004d3e <_printf_i+0x112>
 8004d36:	2204      	movs	r2, #4
 8004d38:	6821      	ldr	r1, [r4, #0]
 8004d3a:	4391      	bics	r1, r2
 8004d3c:	6021      	str	r1, [r4, #0]
 8004d3e:	2d00      	cmp	r5, #0
 8004d40:	d102      	bne.n	8004d48 <_printf_i+0x11c>
 8004d42:	9e04      	ldr	r6, [sp, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <_printf_i+0x136>
 8004d48:	9e04      	ldr	r6, [sp, #16]
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	0039      	movs	r1, r7
 8004d4e:	f7fb fa73 	bl	8000238 <__aeabi_uidivmod>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	3e01      	subs	r6, #1
 8004d56:	5c5b      	ldrb	r3, [r3, r1]
 8004d58:	7033      	strb	r3, [r6, #0]
 8004d5a:	002b      	movs	r3, r5
 8004d5c:	0005      	movs	r5, r0
 8004d5e:	429f      	cmp	r7, r3
 8004d60:	d9f3      	bls.n	8004d4a <_printf_i+0x11e>
 8004d62:	2f08      	cmp	r7, #8
 8004d64:	d109      	bne.n	8004d7a <_printf_i+0x14e>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	07db      	lsls	r3, r3, #31
 8004d6a:	d506      	bpl.n	8004d7a <_printf_i+0x14e>
 8004d6c:	6863      	ldr	r3, [r4, #4]
 8004d6e:	6922      	ldr	r2, [r4, #16]
 8004d70:	4293      	cmp	r3, r2
 8004d72:	dc02      	bgt.n	8004d7a <_printf_i+0x14e>
 8004d74:	2330      	movs	r3, #48	; 0x30
 8004d76:	3e01      	subs	r6, #1
 8004d78:	7033      	strb	r3, [r6, #0]
 8004d7a:	9b04      	ldr	r3, [sp, #16]
 8004d7c:	1b9b      	subs	r3, r3, r6
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	9b07      	ldr	r3, [sp, #28]
 8004d82:	0021      	movs	r1, r4
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	9b06      	ldr	r3, [sp, #24]
 8004d8a:	aa09      	add	r2, sp, #36	; 0x24
 8004d8c:	f7ff fede 	bl	8004b4c <_printf_common>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d135      	bne.n	8004e00 <_printf_i+0x1d4>
 8004d94:	2001      	movs	r0, #1
 8004d96:	4240      	negs	r0, r0
 8004d98:	b00b      	add	sp, #44	; 0x2c
 8004d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	6809      	ldr	r1, [r1, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	0022      	movs	r2, r4
 8004da6:	2178      	movs	r1, #120	; 0x78
 8004da8:	3245      	adds	r2, #69	; 0x45
 8004daa:	7011      	strb	r1, [r2, #0]
 8004dac:	4a27      	ldr	r2, [pc, #156]	; (8004e4c <_printf_i+0x220>)
 8004dae:	e7a7      	b.n	8004d00 <_printf_i+0xd4>
 8004db0:	0648      	lsls	r0, r1, #25
 8004db2:	d5ac      	bpl.n	8004d0e <_printf_i+0xe2>
 8004db4:	b2ad      	uxth	r5, r5
 8004db6:	e7aa      	b.n	8004d0e <_printf_i+0xe2>
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	680d      	ldr	r5, [r1, #0]
 8004dbc:	1d10      	adds	r0, r2, #4
 8004dbe:	6949      	ldr	r1, [r1, #20]
 8004dc0:	6018      	str	r0, [r3, #0]
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	062e      	lsls	r6, r5, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0x1a0>
 8004dc8:	6019      	str	r1, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0x1a6>
 8004dcc:	066d      	lsls	r5, r5, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0x19c>
 8004dd0:	8019      	strh	r1, [r3, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9e04      	ldr	r6, [sp, #16]
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	e7d2      	b.n	8004d80 <_printf_i+0x154>
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	1d11      	adds	r1, r2, #4
 8004dde:	6019      	str	r1, [r3, #0]
 8004de0:	6816      	ldr	r6, [r2, #0]
 8004de2:	2100      	movs	r1, #0
 8004de4:	0030      	movs	r0, r6
 8004de6:	6862      	ldr	r2, [r4, #4]
 8004de8:	f000 f832 	bl	8004e50 <memchr>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d001      	beq.n	8004df4 <_printf_i+0x1c8>
 8004df0:	1b80      	subs	r0, r0, r6
 8004df2:	6060      	str	r0, [r4, #4]
 8004df4:	6863      	ldr	r3, [r4, #4]
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9a04      	ldr	r2, [sp, #16]
 8004dfc:	7013      	strb	r3, [r2, #0]
 8004dfe:	e7bf      	b.n	8004d80 <_printf_i+0x154>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	0032      	movs	r2, r6
 8004e04:	9906      	ldr	r1, [sp, #24]
 8004e06:	9805      	ldr	r0, [sp, #20]
 8004e08:	9d07      	ldr	r5, [sp, #28]
 8004e0a:	47a8      	blx	r5
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d0c1      	beq.n	8004d94 <_printf_i+0x168>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	d415      	bmi.n	8004e42 <_printf_i+0x216>
 8004e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e18:	68e0      	ldr	r0, [r4, #12]
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	dabc      	bge.n	8004d98 <_printf_i+0x16c>
 8004e1e:	0018      	movs	r0, r3
 8004e20:	e7ba      	b.n	8004d98 <_printf_i+0x16c>
 8004e22:	0022      	movs	r2, r4
 8004e24:	2301      	movs	r3, #1
 8004e26:	9906      	ldr	r1, [sp, #24]
 8004e28:	9805      	ldr	r0, [sp, #20]
 8004e2a:	9e07      	ldr	r6, [sp, #28]
 8004e2c:	3219      	adds	r2, #25
 8004e2e:	47b0      	blx	r6
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d0af      	beq.n	8004d94 <_printf_i+0x168>
 8004e34:	3501      	adds	r5, #1
 8004e36:	68e3      	ldr	r3, [r4, #12]
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	dcf0      	bgt.n	8004e22 <_printf_i+0x1f6>
 8004e40:	e7e9      	b.n	8004e16 <_printf_i+0x1ea>
 8004e42:	2500      	movs	r5, #0
 8004e44:	e7f7      	b.n	8004e36 <_printf_i+0x20a>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	08005755 	.word	0x08005755
 8004e4c:	08005766 	.word	0x08005766

08004e50 <memchr>:
 8004e50:	b2c9      	uxtb	r1, r1
 8004e52:	1882      	adds	r2, r0, r2
 8004e54:	4290      	cmp	r0, r2
 8004e56:	d101      	bne.n	8004e5c <memchr+0xc>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	4770      	bx	lr
 8004e5c:	7803      	ldrb	r3, [r0, #0]
 8004e5e:	428b      	cmp	r3, r1
 8004e60:	d0fb      	beq.n	8004e5a <memchr+0xa>
 8004e62:	3001      	adds	r0, #1
 8004e64:	e7f6      	b.n	8004e54 <memchr+0x4>

08004e66 <memmove>:
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4288      	cmp	r0, r1
 8004e6a:	d902      	bls.n	8004e72 <memmove+0xc>
 8004e6c:	188b      	adds	r3, r1, r2
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	d303      	bcc.n	8004e7a <memmove+0x14>
 8004e72:	2300      	movs	r3, #0
 8004e74:	e007      	b.n	8004e86 <memmove+0x20>
 8004e76:	5c8b      	ldrb	r3, [r1, r2]
 8004e78:	5483      	strb	r3, [r0, r2]
 8004e7a:	3a01      	subs	r2, #1
 8004e7c:	d2fb      	bcs.n	8004e76 <memmove+0x10>
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	5ccc      	ldrb	r4, [r1, r3]
 8004e82:	54c4      	strb	r4, [r0, r3]
 8004e84:	3301      	adds	r3, #1
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d1fa      	bne.n	8004e80 <memmove+0x1a>
 8004e8a:	e7f8      	b.n	8004e7e <memmove+0x18>

08004e8c <_free_r>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	0005      	movs	r5, r0
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d010      	beq.n	8004eb6 <_free_r+0x2a>
 8004e94:	1f0c      	subs	r4, r1, #4
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da00      	bge.n	8004e9e <_free_r+0x12>
 8004e9c:	18e4      	adds	r4, r4, r3
 8004e9e:	0028      	movs	r0, r5
 8004ea0:	f000 f8d4 	bl	800504c <__malloc_lock>
 8004ea4:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <_free_r+0x90>)
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <_free_r+0x2c>
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6014      	str	r4, [r2, #0]
 8004eb0:	0028      	movs	r0, r5
 8004eb2:	f000 f8d3 	bl	800505c <__malloc_unlock>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	d908      	bls.n	8004ece <_free_r+0x42>
 8004ebc:	6821      	ldr	r1, [r4, #0]
 8004ebe:	1860      	adds	r0, r4, r1
 8004ec0:	4283      	cmp	r3, r0
 8004ec2:	d1f3      	bne.n	8004eac <_free_r+0x20>
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	1841      	adds	r1, r0, r1
 8004eca:	6021      	str	r1, [r4, #0]
 8004ecc:	e7ee      	b.n	8004eac <_free_r+0x20>
 8004ece:	001a      	movs	r2, r3
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <_free_r+0x4e>
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	d9f9      	bls.n	8004ece <_free_r+0x42>
 8004eda:	6811      	ldr	r1, [r2, #0]
 8004edc:	1850      	adds	r0, r2, r1
 8004ede:	42a0      	cmp	r0, r4
 8004ee0:	d10b      	bne.n	8004efa <_free_r+0x6e>
 8004ee2:	6820      	ldr	r0, [r4, #0]
 8004ee4:	1809      	adds	r1, r1, r0
 8004ee6:	1850      	adds	r0, r2, r1
 8004ee8:	6011      	str	r1, [r2, #0]
 8004eea:	4283      	cmp	r3, r0
 8004eec:	d1e0      	bne.n	8004eb0 <_free_r+0x24>
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	1841      	adds	r1, r0, r1
 8004ef4:	6011      	str	r1, [r2, #0]
 8004ef6:	6053      	str	r3, [r2, #4]
 8004ef8:	e7da      	b.n	8004eb0 <_free_r+0x24>
 8004efa:	42a0      	cmp	r0, r4
 8004efc:	d902      	bls.n	8004f04 <_free_r+0x78>
 8004efe:	230c      	movs	r3, #12
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	e7d5      	b.n	8004eb0 <_free_r+0x24>
 8004f04:	6821      	ldr	r1, [r4, #0]
 8004f06:	1860      	adds	r0, r4, r1
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	d103      	bne.n	8004f14 <_free_r+0x88>
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	1841      	adds	r1, r0, r1
 8004f12:	6021      	str	r1, [r4, #0]
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6054      	str	r4, [r2, #4]
 8004f18:	e7ca      	b.n	8004eb0 <_free_r+0x24>
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	200000f0 	.word	0x200000f0

08004f20 <_malloc_r>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	2303      	movs	r3, #3
 8004f24:	1ccd      	adds	r5, r1, #3
 8004f26:	439d      	bics	r5, r3
 8004f28:	3508      	adds	r5, #8
 8004f2a:	0006      	movs	r6, r0
 8004f2c:	2d0c      	cmp	r5, #12
 8004f2e:	d21f      	bcs.n	8004f70 <_malloc_r+0x50>
 8004f30:	250c      	movs	r5, #12
 8004f32:	42a9      	cmp	r1, r5
 8004f34:	d81e      	bhi.n	8004f74 <_malloc_r+0x54>
 8004f36:	0030      	movs	r0, r6
 8004f38:	f000 f888 	bl	800504c <__malloc_lock>
 8004f3c:	4925      	ldr	r1, [pc, #148]	; (8004fd4 <_malloc_r+0xb4>)
 8004f3e:	680a      	ldr	r2, [r1, #0]
 8004f40:	0014      	movs	r4, r2
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d11a      	bne.n	8004f7c <_malloc_r+0x5c>
 8004f46:	4f24      	ldr	r7, [pc, #144]	; (8004fd8 <_malloc_r+0xb8>)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <_malloc_r+0x38>
 8004f4e:	0021      	movs	r1, r4
 8004f50:	0030      	movs	r0, r6
 8004f52:	f000 f869 	bl	8005028 <_sbrk_r>
 8004f56:	6038      	str	r0, [r7, #0]
 8004f58:	0029      	movs	r1, r5
 8004f5a:	0030      	movs	r0, r6
 8004f5c:	f000 f864 	bl	8005028 <_sbrk_r>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d12b      	bne.n	8004fbc <_malloc_r+0x9c>
 8004f64:	230c      	movs	r3, #12
 8004f66:	0030      	movs	r0, r6
 8004f68:	6033      	str	r3, [r6, #0]
 8004f6a:	f000 f877 	bl	800505c <__malloc_unlock>
 8004f6e:	e003      	b.n	8004f78 <_malloc_r+0x58>
 8004f70:	2d00      	cmp	r5, #0
 8004f72:	dade      	bge.n	8004f32 <_malloc_r+0x12>
 8004f74:	230c      	movs	r3, #12
 8004f76:	6033      	str	r3, [r6, #0]
 8004f78:	2000      	movs	r0, #0
 8004f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	1b5b      	subs	r3, r3, r5
 8004f80:	d419      	bmi.n	8004fb6 <_malloc_r+0x96>
 8004f82:	2b0b      	cmp	r3, #11
 8004f84:	d903      	bls.n	8004f8e <_malloc_r+0x6e>
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	18e4      	adds	r4, r4, r3
 8004f8a:	6025      	str	r5, [r4, #0]
 8004f8c:	e003      	b.n	8004f96 <_malloc_r+0x76>
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	42a2      	cmp	r2, r4
 8004f92:	d10e      	bne.n	8004fb2 <_malloc_r+0x92>
 8004f94:	600b      	str	r3, [r1, #0]
 8004f96:	0030      	movs	r0, r6
 8004f98:	f000 f860 	bl	800505c <__malloc_unlock>
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	2207      	movs	r2, #7
 8004fa0:	300b      	adds	r0, #11
 8004fa2:	1d23      	adds	r3, r4, #4
 8004fa4:	4390      	bics	r0, r2
 8004fa6:	1ac2      	subs	r2, r0, r3
 8004fa8:	4298      	cmp	r0, r3
 8004faa:	d0e6      	beq.n	8004f7a <_malloc_r+0x5a>
 8004fac:	1a1b      	subs	r3, r3, r0
 8004fae:	50a3      	str	r3, [r4, r2]
 8004fb0:	e7e3      	b.n	8004f7a <_malloc_r+0x5a>
 8004fb2:	6053      	str	r3, [r2, #4]
 8004fb4:	e7ef      	b.n	8004f96 <_malloc_r+0x76>
 8004fb6:	0022      	movs	r2, r4
 8004fb8:	6864      	ldr	r4, [r4, #4]
 8004fba:	e7c2      	b.n	8004f42 <_malloc_r+0x22>
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	1cc4      	adds	r4, r0, #3
 8004fc0:	439c      	bics	r4, r3
 8004fc2:	42a0      	cmp	r0, r4
 8004fc4:	d0e1      	beq.n	8004f8a <_malloc_r+0x6a>
 8004fc6:	1a21      	subs	r1, r4, r0
 8004fc8:	0030      	movs	r0, r6
 8004fca:	f000 f82d 	bl	8005028 <_sbrk_r>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d1db      	bne.n	8004f8a <_malloc_r+0x6a>
 8004fd2:	e7c7      	b.n	8004f64 <_malloc_r+0x44>
 8004fd4:	200000f0 	.word	0x200000f0
 8004fd8:	200000f4 	.word	0x200000f4

08004fdc <_realloc_r>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	0007      	movs	r7, r0
 8004fe0:	000d      	movs	r5, r1
 8004fe2:	0016      	movs	r6, r2
 8004fe4:	2900      	cmp	r1, #0
 8004fe6:	d105      	bne.n	8004ff4 <_realloc_r+0x18>
 8004fe8:	0011      	movs	r1, r2
 8004fea:	f7ff ff99 	bl	8004f20 <_malloc_r>
 8004fee:	0004      	movs	r4, r0
 8004ff0:	0020      	movs	r0, r4
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d103      	bne.n	8005000 <_realloc_r+0x24>
 8004ff8:	f7ff ff48 	bl	8004e8c <_free_r>
 8004ffc:	0034      	movs	r4, r6
 8004ffe:	e7f7      	b.n	8004ff0 <_realloc_r+0x14>
 8005000:	f000 f834 	bl	800506c <_malloc_usable_size_r>
 8005004:	002c      	movs	r4, r5
 8005006:	42b0      	cmp	r0, r6
 8005008:	d2f2      	bcs.n	8004ff0 <_realloc_r+0x14>
 800500a:	0031      	movs	r1, r6
 800500c:	0038      	movs	r0, r7
 800500e:	f7ff ff87 	bl	8004f20 <_malloc_r>
 8005012:	1e04      	subs	r4, r0, #0
 8005014:	d0ec      	beq.n	8004ff0 <_realloc_r+0x14>
 8005016:	0029      	movs	r1, r5
 8005018:	0032      	movs	r2, r6
 800501a:	f7ff fbed 	bl	80047f8 <memcpy>
 800501e:	0029      	movs	r1, r5
 8005020:	0038      	movs	r0, r7
 8005022:	f7ff ff33 	bl	8004e8c <_free_r>
 8005026:	e7e3      	b.n	8004ff0 <_realloc_r+0x14>

08005028 <_sbrk_r>:
 8005028:	2300      	movs	r3, #0
 800502a:	b570      	push	{r4, r5, r6, lr}
 800502c:	4d06      	ldr	r5, [pc, #24]	; (8005048 <_sbrk_r+0x20>)
 800502e:	0004      	movs	r4, r0
 8005030:	0008      	movs	r0, r1
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	f7fd f994 	bl	8002360 <_sbrk>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d103      	bne.n	8005044 <_sbrk_r+0x1c>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d000      	beq.n	8005044 <_sbrk_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd70      	pop	{r4, r5, r6, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	20000594 	.word	0x20000594

0800504c <__malloc_lock>:
 800504c:	b510      	push	{r4, lr}
 800504e:	4802      	ldr	r0, [pc, #8]	; (8005058 <__malloc_lock+0xc>)
 8005050:	f000 f814 	bl	800507c <__retarget_lock_acquire_recursive>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	2000059c 	.word	0x2000059c

0800505c <__malloc_unlock>:
 800505c:	b510      	push	{r4, lr}
 800505e:	4802      	ldr	r0, [pc, #8]	; (8005068 <__malloc_unlock+0xc>)
 8005060:	f000 f80d 	bl	800507e <__retarget_lock_release_recursive>
 8005064:	bd10      	pop	{r4, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	2000059c 	.word	0x2000059c

0800506c <_malloc_usable_size_r>:
 800506c:	1f0b      	subs	r3, r1, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1f18      	subs	r0, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	da01      	bge.n	800507a <_malloc_usable_size_r+0xe>
 8005076:	580b      	ldr	r3, [r1, r0]
 8005078:	18c0      	adds	r0, r0, r3
 800507a:	4770      	bx	lr

0800507c <__retarget_lock_acquire_recursive>:
 800507c:	4770      	bx	lr

0800507e <__retarget_lock_release_recursive>:
 800507e:	4770      	bx	lr

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
