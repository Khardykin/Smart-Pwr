
Smart-Pwr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004554  08004554  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800455c  0800455c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000088  080045ec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  080045ec  00020594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d34  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b10  00000000  00000000  00035de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007de7  00000000  00000000  0003a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  000426e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf8  00000000  00000000  00042f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100ee  00000000  00000000  00043b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144d8  00000000  00000000  00053c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004e2b4  00000000  00000000  0006814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b6402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001704  00000000  00000000  000b6454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ebc 	.word	0x08003ebc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	08003ebc 	.word	0x08003ebc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	469b      	mov	fp, r3
 800048e:	d433      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 8000490:	465a      	mov	r2, fp
 8000492:	4653      	mov	r3, sl
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83a      	bhi.n	800051a <__udivmoddi4+0xc2>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e078      	b.n	800059c <__udivmoddi4+0x144>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e075      	b.n	80005a2 <__udivmoddi4+0x14a>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e028      	b.n	8000522 <__udivmoddi4+0xca>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	4652      	mov	r2, sl
 8000500:	40da      	lsrs	r2, r3
 8000502:	4641      	mov	r1, r8
 8000504:	0013      	movs	r3, r2
 8000506:	464a      	mov	r2, r9
 8000508:	408a      	lsls	r2, r1
 800050a:	0017      	movs	r7, r2
 800050c:	4642      	mov	r2, r8
 800050e:	431f      	orrs	r7, r3
 8000510:	4653      	mov	r3, sl
 8000512:	4093      	lsls	r3, r2
 8000514:	001e      	movs	r6, r3
 8000516:	42af      	cmp	r7, r5
 8000518:	d9c4      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0d9      	beq.n	80004dc <__udivmoddi4+0x84>
 8000528:	07fb      	lsls	r3, r7, #31
 800052a:	0872      	lsrs	r2, r6, #1
 800052c:	431a      	orrs	r2, r3
 800052e:	4646      	mov	r6, r8
 8000530:	087b      	lsrs	r3, r7, #1
 8000532:	e00e      	b.n	8000552 <__udivmoddi4+0xfa>
 8000534:	42ab      	cmp	r3, r5
 8000536:	d101      	bne.n	800053c <__udivmoddi4+0xe4>
 8000538:	42a2      	cmp	r2, r4
 800053a:	d80c      	bhi.n	8000556 <__udivmoddi4+0xfe>
 800053c:	1aa4      	subs	r4, r4, r2
 800053e:	419d      	sbcs	r5, r3
 8000540:	2001      	movs	r0, #1
 8000542:	1924      	adds	r4, r4, r4
 8000544:	416d      	adcs	r5, r5
 8000546:	2100      	movs	r1, #0
 8000548:	3e01      	subs	r6, #1
 800054a:	1824      	adds	r4, r4, r0
 800054c:	414d      	adcs	r5, r1
 800054e:	2e00      	cmp	r6, #0
 8000550:	d006      	beq.n	8000560 <__udivmoddi4+0x108>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d9ee      	bls.n	8000534 <__udivmoddi4+0xdc>
 8000556:	3e01      	subs	r6, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2e00      	cmp	r6, #0
 800055e:	d1f8      	bne.n	8000552 <__udivmoddi4+0xfa>
 8000560:	9800      	ldr	r0, [sp, #0]
 8000562:	9901      	ldr	r1, [sp, #4]
 8000564:	465b      	mov	r3, fp
 8000566:	1900      	adds	r0, r0, r4
 8000568:	4169      	adcs	r1, r5
 800056a:	2b00      	cmp	r3, #0
 800056c:	db24      	blt.n	80005b8 <__udivmoddi4+0x160>
 800056e:	002b      	movs	r3, r5
 8000570:	465a      	mov	r2, fp
 8000572:	4644      	mov	r4, r8
 8000574:	40d3      	lsrs	r3, r2
 8000576:	002a      	movs	r2, r5
 8000578:	40e2      	lsrs	r2, r4
 800057a:	001c      	movs	r4, r3
 800057c:	465b      	mov	r3, fp
 800057e:	0015      	movs	r5, r2
 8000580:	2b00      	cmp	r3, #0
 8000582:	db2a      	blt.n	80005da <__udivmoddi4+0x182>
 8000584:	0026      	movs	r6, r4
 8000586:	409e      	lsls	r6, r3
 8000588:	0033      	movs	r3, r6
 800058a:	0026      	movs	r6, r4
 800058c:	4647      	mov	r7, r8
 800058e:	40be      	lsls	r6, r7
 8000590:	0032      	movs	r2, r6
 8000592:	1a80      	subs	r0, r0, r2
 8000594:	4199      	sbcs	r1, r3
 8000596:	9000      	str	r0, [sp, #0]
 8000598:	9101      	str	r1, [sp, #4]
 800059a:	e79f      	b.n	80004dc <__udivmoddi4+0x84>
 800059c:	42a3      	cmp	r3, r4
 800059e:	d8bc      	bhi.n	800051a <__udivmoddi4+0xc2>
 80005a0:	e783      	b.n	80004aa <__udivmoddi4+0x52>
 80005a2:	4642      	mov	r2, r8
 80005a4:	2320      	movs	r3, #32
 80005a6:	2100      	movs	r1, #0
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	2200      	movs	r2, #0
 80005ac:	9100      	str	r1, [sp, #0]
 80005ae:	9201      	str	r2, [sp, #4]
 80005b0:	2201      	movs	r2, #1
 80005b2:	40da      	lsrs	r2, r3
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	e786      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	002a      	movs	r2, r5
 80005c0:	4646      	mov	r6, r8
 80005c2:	409a      	lsls	r2, r3
 80005c4:	0023      	movs	r3, r4
 80005c6:	40f3      	lsrs	r3, r6
 80005c8:	4644      	mov	r4, r8
 80005ca:	4313      	orrs	r3, r2
 80005cc:	002a      	movs	r2, r5
 80005ce:	40e2      	lsrs	r2, r4
 80005d0:	001c      	movs	r4, r3
 80005d2:	465b      	mov	r3, fp
 80005d4:	0015      	movs	r5, r2
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	dad4      	bge.n	8000584 <__udivmoddi4+0x12c>
 80005da:	4642      	mov	r2, r8
 80005dc:	002f      	movs	r7, r5
 80005de:	2320      	movs	r3, #32
 80005e0:	0026      	movs	r6, r4
 80005e2:	4097      	lsls	r7, r2
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	40de      	lsrs	r6, r3
 80005e8:	003b      	movs	r3, r7
 80005ea:	4333      	orrs	r3, r6
 80005ec:	e7cd      	b.n	800058a <__udivmoddi4+0x132>
 80005ee:	46c0      	nop			; (mov r8, r8)

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			; (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	; (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000646:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000648:	2214      	movs	r2, #20
 800064a:	2100      	movs	r1, #0
 800064c:	a80d      	add	r0, sp, #52	; 0x34
 800064e:	f002 ffb6 	bl	80035be <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000652:	2210      	movs	r2, #16
 8000654:	2100      	movs	r1, #0
 8000656:	a809      	add	r0, sp, #36	; 0x24
 8000658:	f002 ffb1 	bl	80035be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2218      	movs	r2, #24
 800065e:	2100      	movs	r1, #0
 8000660:	a803      	add	r0, sp, #12
 8000662:	f002 ffac 	bl	80035be <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000666:	4b4b      	ldr	r3, [pc, #300]	; (8000794 <MX_ADC_Init+0x150>)
 8000668:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800066a:	2080      	movs	r0, #128	; 0x80
 800066c:	0080      	lsls	r0, r0, #2
 800066e:	4301      	orrs	r1, r0
 8000670:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000674:	4002      	ands	r2, r0
 8000676:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000678:	9a02      	ldr	r2, [sp, #8]
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800067a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067c:	2701      	movs	r7, #1
 800067e:	433a      	orrs	r2, r7
 8000680:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000684:	403b      	ands	r3, r7
 8000686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000688:	9b01      	ldr	r3, [sp, #4]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**ADC GPIO Configuration
  PA0-CK_IN   ------> ADC_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800068a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800068c:	2303      	movs	r3, #3
 800068e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	3861      	subs	r0, #97	; 0x61
 8000692:	38ff      	subs	r0, #255	; 0xff
 8000694:	a903      	add	r1, sp, #12
 8000696:	05c0      	lsls	r0, r0, #23
 8000698:	f002 fc42 	bl	8002f20 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800069c:	4b3e      	ldr	r3, [pc, #248]	; (8000798 <MX_ADC_Init+0x154>)
 800069e:	21c3      	movs	r1, #195	; 0xc3
 80006a0:	0089      	lsls	r1, r1, #2
 80006a2:	585a      	ldr	r2, [r3, r1]
 80006a4:	20ff      	movs	r0, #255	; 0xff
 80006a6:	4382      	bics	r2, r0
 80006a8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0152      	lsls	r2, r2, #5
 80006ae:	601a      	str	r2, [r3, #0]
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006b0:	4c3a      	ldr	r4, [pc, #232]	; (800079c <MX_ADC_Init+0x158>)
 80006b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006b4:	433b      	orrs	r3, r7
 80006b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80006b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	02db      	lsls	r3, r3, #11
 80006be:	4313      	orrs	r3, r2
 80006c0:	62a3      	str	r3, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006c2:	4e37      	ldr	r6, [pc, #220]	; (80007a0 <MX_ADC_Init+0x15c>)
 80006c4:	6830      	ldr	r0, [r6, #0]
 80006c6:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <MX_ADC_Init+0x160>)
 80006c8:	4010      	ands	r0, r2
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	0409      	lsls	r1, r1, #16
 80006ce:	4301      	orrs	r1, r0
 80006d0:	6031      	str	r1, [r6, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80006d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	0289      	lsls	r1, r1, #10
 80006d8:	4319      	orrs	r1, r3
 80006da:	62a1      	str	r1, [r4, #40]	; 0x28
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 80006dc:	6833      	ldr	r3, [r6, #0]
 80006de:	401a      	ands	r2, r3
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	03db      	lsls	r3, r3, #15
 80006e4:	4313      	orrs	r3, r2
 80006e6:	6033      	str	r3, [r6, #0]
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_VREFINT);
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT);

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80006e8:	2500      	movs	r5, #0
 80006ea:	950d      	str	r5, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_1RANK;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	025b      	lsls	r3, r3, #9
 80006f0:	930e      	str	r3, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80006f2:	950f      	str	r5, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80006f4:	9510      	str	r5, [sp, #64]	; 0x40
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80006f6:	9511      	str	r5, [sp, #68]	; 0x44
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80006f8:	a90d      	add	r1, sp, #52	; 0x34
 80006fa:	0020      	movs	r0, r4
 80006fc:	f002 fb94 	bl	8002e28 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000700:	6963      	ldr	r3, [r4, #20]
 8000702:	2207      	movs	r2, #7
 8000704:	4393      	bics	r3, r2
 8000706:	3a02      	subs	r2, #2
 8000708:	4313      	orrs	r3, r2
 800070a:	6163      	str	r3, [r4, #20]
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 800070c:	6923      	ldr	r3, [r4, #16]
 800070e:	43bb      	bics	r3, r7
 8000710:	431f      	orrs	r7, r3
 8000712:	6127      	str	r7, [r4, #16]
  *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
 8000714:	6923      	ldr	r3, [r4, #16]
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <MX_ADC_Init+0x164>)
 8000718:	401a      	ands	r2, r3
 800071a:	238e      	movs	r3, #142	; 0x8e
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4313      	orrs	r3, r2
 8000720:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
 8000722:	6923      	ldr	r3, [r4, #16]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC_Init+0x168>)
 8000726:	4013      	ands	r3, r2
 8000728:	6123      	str	r3, [r4, #16]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 800072a:	68e3      	ldr	r3, [r4, #12]
 800072c:	2104      	movs	r1, #4
 800072e:	438b      	bics	r3, r1
 8000730:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 8000732:	6833      	ldr	r3, [r6, #0]
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <MX_ADC_Init+0x16c>)
 8000736:	401a      	ands	r2, r3
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	049b      	lsls	r3, r3, #18
 800073c:	4313      	orrs	r3, r2
 800073e:	6033      	str	r3, [r6, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000740:	6863      	ldr	r3, [r4, #4]
 8000742:	438b      	bics	r3, r1
 8000744:	6063      	str	r3, [r4, #4]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000746:	6863      	ldr	r3, [r4, #4]
 8000748:	2208      	movs	r2, #8
 800074a:	4393      	bics	r3, r2
 800074c:	6063      	str	r3, [r4, #4]
  LL_ADC_SetOverSamplingDiscont(ADC1, LL_ADC_OVS_REG_CONT);
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_LOW);
  LL_ADC_DisableIT_EOC(ADC1);
  LL_ADC_DisableIT_EOS(ADC1);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 800074e:	23c0      	movs	r3, #192	; 0xc0
 8000750:	061b      	lsls	r3, r3, #24
 8000752:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000754:	950a      	str	r5, [sp, #40]	; 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000756:	950b      	str	r5, [sp, #44]	; 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000758:	950c      	str	r5, [sp, #48]	; 0x30
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 800075a:	a909      	add	r1, sp, #36	; 0x24
 800075c:	0020      	movs	r0, r4
 800075e:	f002 fb49 	bl	8002df4 <LL_ADC_Init>
  MODIFY_REG(ADCx->CR,
 8000762:	68a3      	ldr	r3, [r4, #8]
 8000764:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <MX_ADC_Init+0x170>)
 8000766:	401a      	ands	r2, r3
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	055b      	lsls	r3, r3, #21
 800076c:	4313      	orrs	r3, r2
 800076e:	60a3      	str	r3, [r4, #8]
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ADC_Init+0x174>)
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4911      	ldr	r1, [pc, #68]	; (80007bc <MX_ADC_Init+0x178>)
 8000776:	f7ff fcd9 	bl	800012c <__udivsi3>
 800077a:	0003      	movs	r3, r0
 800077c:	0080      	lsls	r0, r0, #2
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	210a      	movs	r1, #10
 8000784:	f7ff fcd2 	bl	800012c <__udivsi3>
  while(wait_loop_index != 0)
 8000788:	e000      	b.n	800078c <MX_ADC_Init+0x148>
  {
    wait_loop_index--;
 800078a:	3801      	subs	r0, #1
  while(wait_loop_index != 0)
 800078c:	2800      	cmp	r0, #0
 800078e:	d1fc      	bne.n	800078a <MX_ADC_Init+0x146>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000790:	b013      	add	sp, #76	; 0x4c
 8000792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	e000e100 	.word	0xe000e100
 800079c:	40012400 	.word	0x40012400
 80007a0:	40012708 	.word	0x40012708
 80007a4:	ff3fffff 	.word	0xff3fffff
 80007a8:	fffffe03 	.word	0xfffffe03
 80007ac:	fffffdff 	.word	0xfffffdff
 80007b0:	fdffffff 	.word	0xfdffffff
 80007b4:	6fffffe8 	.word	0x6fffffe8
 80007b8:	2000001c 	.word	0x2000001c
 80007bc:	00030d40 	.word	0x00030d40

080007c0 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80007c0:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_CRC_Init+0x40>)
 80007c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80007c6:	2080      	movs	r0, #128	; 0x80
 80007c8:	0140      	lsls	r0, r0, #5
 80007ca:	4301      	orrs	r1, r0
 80007cc:	6311      	str	r1, [r2, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80007d0:	4003      	ands	r3, r0
 80007d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007d4:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_CRC_Init+0x44>)
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	2160      	movs	r1, #96	; 0x60
 80007dc:	438a      	bics	r2, r1
 80007de:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	3120      	adds	r1, #32
 80007e4:	438a      	bics	r2, r1
 80007e6:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <MX_CRC_Init+0x48>)
 80007ea:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	3968      	subs	r1, #104	; 0x68
 80007f0:	438a      	bics	r2, r1
 80007f2:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80007f4:	2201      	movs	r2, #1
 80007f6:	4252      	negs	r2, r2
 80007f8:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fa:	b002      	add	sp, #8
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000
 8000804:	40023000 	.word	0x40023000
 8000808:	04c11db7 	.word	0x04c11db7

0800080c <CalcCRC>:

/* USER CODE BEGIN 1 */

uint32_t CalcCRC(uint32_t* buff, uint8_t len){
 800080c:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <CalcCRC+0x28>)
 8000810:	6893      	ldr	r3, [r2, #8]
 8000812:	2401      	movs	r4, #1
 8000814:	4323      	orrs	r3, r4
 8000816:	6093      	str	r3, [r2, #8]
  uint8_t i;
  uint32_t tmp;

  LL_CRC_ResetCRCCalculationUnit(CRC);

  for(i = 0; i < len; i++){
 8000818:	2300      	movs	r3, #0
 800081a:	e005      	b.n	8000828 <CalcCRC+0x1c>
    LL_CRC_FeedData32(CRC,buff[i]);
 800081c:	009a      	lsls	r2, r3, #2
 800081e:	5884      	ldr	r4, [r0, r2]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <CalcCRC+0x28>)
 8000822:	6014      	str	r4, [r2, #0]
  for(i = 0; i < len; i++){
 8000824:	3301      	adds	r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	428b      	cmp	r3, r1
 800082a:	d3f7      	bcc.n	800081c <CalcCRC+0x10>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (32 bits).
  */
__STATIC_INLINE uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(READ_REG(CRCx->DR));
 800082c:	4b01      	ldr	r3, [pc, #4]	; (8000834 <CalcCRC+0x28>)
 800082e:	6818      	ldr	r0, [r3, #0]
  }

  tmp = LL_CRC_ReadData32(CRC);
  return(tmp);

}
 8000830:	bd10      	pop	{r4, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40023000 	.word	0x40023000

08000838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	46ce      	mov	lr, r9
 800083c:	4647      	mov	r7, r8
 800083e:	b580      	push	{r7, lr}
 8000840:	b08d      	sub	sp, #52	; 0x34

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000842:	ae0a      	add	r6, sp, #40	; 0x28
 8000844:	2308      	movs	r3, #8
 8000846:	4698      	mov	r8, r3
 8000848:	2208      	movs	r2, #8
 800084a:	2100      	movs	r1, #0
 800084c:	0030      	movs	r0, r6
 800084e:	f002 feb6 	bl	80035be <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2218      	movs	r2, #24
 8000854:	2100      	movs	r1, #0
 8000856:	a804      	add	r0, sp, #16
 8000858:	f002 feb1 	bl	80035be <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <MX_GPIO_Init+0xcc>)
 800085e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000860:	2204      	movs	r2, #4
 8000862:	4311      	orrs	r1, r2
 8000864:	62d9      	str	r1, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000866:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000868:	400a      	ands	r2, r1
 800086a:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800086c:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 800086e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000870:	2401      	movs	r4, #1
 8000872:	4322      	orrs	r2, r4
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000878:	4022      	ands	r2, r4
 800087a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	2702      	movs	r7, #2
 8000882:	433a      	orrs	r2, r7
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	403b      	ands	r3, r7
 800088a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800088e:	25a0      	movs	r5, #160	; 0xa0
 8000890:	05ed      	lsls	r5, r5, #23
 8000892:	4643      	mov	r3, r8
 8000894:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xd0>)
 8000898:	4699      	mov	r9, r3
 800089a:	619f      	str	r7, [r3, #24]

  /**/
  LL_GPIO_SetOutputPin(HEAT_GPIO_Port, HEAT_Pin);

  /**/
  GPIO_InitStruct.Pin = TURN_ON_IR_Pin;
 800089c:	4643      	mov	r3, r8
 800089e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(TURN_ON_IR_GPIO_Port, &GPIO_InitStruct);
 80008a2:	a904      	add	r1, sp, #16
 80008a4:	0028      	movs	r0, r5
 80008a6:	f002 fb3b 	bl	8002f20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HEAT_Pin;
 80008aa:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008ae:	2700      	movs	r7, #0
 80008b0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008b2:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b4:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(HEAT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	a904      	add	r1, sp, #16
 80008b8:	4648      	mov	r0, r9
 80008ba:	f002 fb31 	bl	8002f20 <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_GPIO_Init+0xd4>)
 80008c0:	68d3      	ldr	r3, [r2, #12]
 80008c2:	210f      	movs	r1, #15
 80008c4:	438b      	bics	r3, r1
 80008c6:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80008c8:	68ea      	ldr	r2, [r5, #12]
 80008ca:	4911      	ldr	r1, [pc, #68]	; (8000910 <MX_GPIO_Init+0xd8>)
 80008cc:	400a      	ands	r2, r1
 80008ce:	60ea      	str	r2, [r5, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	400b      	ands	r3, r1
 80008d4:	602b      	str	r3, [r5, #0]

  /**/
  LL_GPIO_SetPinMode(RDY_ADS1115_GPIO_Port, RDY_ADS1115_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80008d6:	2310      	movs	r3, #16
 80008d8:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.LineCommand = ENABLE;
 80008da:	7134      	strb	r4, [r6, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008dc:	7177      	strb	r7, [r6, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80008de:	71b4      	strb	r4, [r6, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80008e0:	0030      	movs	r0, r6
 80008e2:	f002 fab9 	bl	8002e58 <LL_EXTI_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <MX_GPIO_Init+0xdc>)
 80008e8:	21c1      	movs	r1, #193	; 0xc1
 80008ea:	0089      	lsls	r1, r1, #2
 80008ec:	5853      	ldr	r3, [r2, r1]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_15_IRQn, 0);
  NVIC_EnableIRQ(EXTI4_15_IRQn);

}
 80008f8:	b00d      	add	sp, #52	; 0x34
 80008fa:	bcc0      	pop	{r6, r7}
 80008fc:	46b9      	mov	r9, r7
 80008fe:	46b0      	mov	r8, r6
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40021000 	.word	0x40021000
 8000908:	50000400 	.word	0x50000400
 800090c:	40010000 	.word	0x40010000
 8000910:	fffffcff 	.word	0xfffffcff
 8000914:	e000e100 	.word	0xe000e100

08000918 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091a:	46c6      	mov	lr, r8
 800091c:	b500      	push	{lr}
 800091e:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000920:	221c      	movs	r2, #28
 8000922:	2100      	movs	r1, #0
 8000924:	a809      	add	r0, sp, #36	; 0x24
 8000926:	f002 fe4a 	bl	80035be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	2218      	movs	r2, #24
 800092c:	2100      	movs	r1, #0
 800092e:	a803      	add	r0, sp, #12
 8000930:	f002 fe45 	bl	80035be <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8000934:	4c29      	ldr	r4, [pc, #164]	; (80009dc <MX_I2C1_Init+0xc4>)
 8000936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000938:	2602      	movs	r6, #2
 800093a:	4333      	orrs	r3, r6
 800093c:	62e3      	str	r3, [r4, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800093e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000940:	4033      	ands	r3, r6
 8000942:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000944:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800094a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	3b3d      	subs	r3, #61	; 0x3d
 800094e:	4698      	mov	r8, r3
 8000950:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000952:	2501      	movs	r5, #1
 8000954:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000956:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000958:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	4f21      	ldr	r7, [pc, #132]	; (80009e0 <MX_I2C1_Init+0xc8>)
 800095c:	a903      	add	r1, sp, #12
 800095e:	0038      	movs	r0, r7
 8000960:	f002 fade 	bl	8002f20 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000968:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	4643      	mov	r3, r8
 800096c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800096e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000970:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000972:	9508      	str	r5, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	a903      	add	r1, sp, #12
 8000976:	0038      	movs	r0, r7
 8000978:	f002 fad2 	bl	8002f20 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800097c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	0389      	lsls	r1, r1, #14
 8000982:	430a      	orrs	r2, r1
 8000984:	63a2      	str	r2, [r4, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000988:	400b      	ands	r3, r1
 800098a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800098c:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800098e:	4c15      	ldr	r4, [pc, #84]	; (80009e4 <MX_I2C1_Init+0xcc>)
 8000990:	6862      	ldr	r2, [r4, #4]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	049b      	lsls	r3, r3, #18
 8000996:	4313      	orrs	r3, r2
 8000998:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800099a:	68e3      	ldr	r3, [r4, #12]
 800099c:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_I2C1_Init+0xd0>)
 800099e:	4013      	ands	r3, r2
 80009a0:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <MX_I2C1_Init+0xd4>)
 80009a6:	4013      	ands	r3, r2
 80009a8:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <MX_I2C1_Init+0xd8>)
 80009ae:	4013      	ands	r3, r2
 80009b0:	6023      	str	r3, [r4, #0]
  */
  LL_I2C_EnableAutoEndMode(I2C1);
  LL_I2C_DisableOwnAddress2(I2C1);
  LL_I2C_DisableGeneralCall(I2C1);
  LL_I2C_EnableClockStretching(I2C1);
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009b2:	2300      	movs	r3, #0
 80009b4:	9309      	str	r3, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x0000061E;
 80009b6:	4a0f      	ldr	r2, [pc, #60]	; (80009f4 <MX_I2C1_Init+0xdc>)
 80009b8:	920a      	str	r2, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009ba:	930b      	str	r3, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80009bc:	930c      	str	r3, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 80009be:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009c0:	930e      	str	r3, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009c2:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009c4:	a909      	add	r1, sp, #36	; 0x24
 80009c6:	0020      	movs	r0, r4
 80009c8:	f002 fb02 	bl	8002fd0 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80009cc:	68e3      	ldr	r3, [r4, #12]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <MX_I2C1_Init+0xe0>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	60e3      	str	r3, [r4, #12]
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d4:	b010      	add	sp, #64	; 0x40
 80009d6:	bc80      	pop	{r7}
 80009d8:	46b8      	mov	r8, r7
 80009da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	50000400 	.word	0x50000400
 80009e4:	40005400 	.word	0x40005400
 80009e8:	ffff7fff 	.word	0xffff7fff
 80009ec:	fff7ffff 	.word	0xfff7ffff
 80009f0:	fffdffff 	.word	0xfffdffff
 80009f4:	0000061e 	.word	0x0000061e
 80009f8:	fffff801 	.word	0xfffff801

080009fc <MX_LPTIM1_Init>:

/* USER CODE END 0 */

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80009fc:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR, Periphs);
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_LPTIM1_Init+0x70>)
 8000a00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0612      	lsls	r2, r2, #24
 8000a06:	430a      	orrs	r2, r1
 8000a08:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0c:	0fdb      	lsrs	r3, r3, #31
 8000a0e:	07db      	lsls	r3, r3, #31
 8000a10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a12:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_LPTIM1_Init+0x74>)
 8000a16:	21c3      	movs	r1, #195	; 0xc3
 8000a18:	0089      	lsls	r1, r1, #2
 8000a1a:	585a      	ldr	r2, [r3, r1]
 8000a1c:	4815      	ldr	r0, [pc, #84]	; (8000a74 <MX_LPTIM1_Init+0x78>)
 8000a1e:	4002      	ands	r2, r0
 8000a20:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_LPTIM_CLK_SOURCE_EXTERNAL
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_CKSEL, ClockSource);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_LPTIM1_Init+0x7c>)
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	438a      	bics	r2, r1
 8000a30:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRESC, Prescaler);
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	4911      	ldr	r1, [pc, #68]	; (8000a7c <MX_LPTIM1_Init+0x80>)
 8000a36:	4011      	ands	r1, r2
 8000a38:	22e0      	movs	r2, #224	; 0xe0
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_WAVPOL, Polarity);
 8000a40:	68da      	ldr	r2, [r3, #12]
 8000a42:	490f      	ldr	r1, [pc, #60]	; (8000a80 <MX_LPTIM1_Init+0x84>)
 8000a44:	400a      	ands	r2, r1
 8000a46:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_PRELOAD, UpdateMode);
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	490e      	ldr	r1, [pc, #56]	; (8000a84 <MX_LPTIM1_Init+0x88>)
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	03d2      	lsls	r2, r2, #15
 8000a52:	430a      	orrs	r2, r1
 8000a54:	60da      	str	r2, [r3, #12]
  MODIFY_REG(LPTIMx->CFGR, LPTIM_CFGR_COUNTMODE, CounterMode);
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	490b      	ldr	r1, [pc, #44]	; (8000a88 <MX_LPTIM1_Init+0x8c>)
 8000a5a:	400a      	ands	r2, r1
 8000a5c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(LPTIMx->CFGR, LPTIM_CFGR_TRIGEN);
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	490a      	ldr	r1, [pc, #40]	; (8000a8c <MX_LPTIM1_Init+0x90>)
 8000a62:	400a      	ands	r2, r1
 8000a64:	60da      	str	r2, [r3, #12]
  LL_LPTIM_TrigSw(LPTIM1);
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a66:	b002      	add	sp, #8
 8000a68:	4770      	bx	lr
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	ffff00ff 	.word	0xffff00ff
 8000a78:	40007c00 	.word	0x40007c00
 8000a7c:	fffff1ff 	.word	0xfffff1ff
 8000a80:	ffdfffff 	.word	0xffdfffff
 8000a84:	ffbfffff 	.word	0xffbfffff
 8000a88:	ff7fffff 	.word	0xff7fffff
 8000a8c:	fff9ffff 	.word	0xfff9ffff

08000a90 <printUID>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void printUID(void){
 8000a90:	b500      	push	{lr}
 8000a92:	b087      	sub	sp, #28
#ifdef DEBUG_MY
	uint32_t *idBase = (uint32_t*)(UID_BASE);
	uint8_t s[4];
	int i;
	//memcpy(s0,(uint8_t*)idBase0,3);
	for(i = 0; i < 3; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	e008      	b.n	8000aaa <printUID+0x1a>
		s[2-i] = (*idBase >> (8 * i)) & 0xff;
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <printUID+0x5c>)
 8000a9a:	6811      	ldr	r1, [r2, #0]
 8000a9c:	00da      	lsls	r2, r3, #3
 8000a9e:	40d1      	lsrs	r1, r2
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	1ad2      	subs	r2, r2, r3
 8000aa4:	a805      	add	r0, sp, #20
 8000aa6:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 3; i++)
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	ddf4      	ble.n	8000a98 <printUID+0x8>
	s[3]= 0;
 8000aae:	ab05      	add	r3, sp, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	70da      	strb	r2, [r3, #3]

	uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
	uint8_t s2[5];

	for(i = 0; i < 4; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	e008      	b.n	8000aca <printUID+0x3a>
		s2[3-i] = (*idBase2 >> (8 * i)) & 0xff;
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <printUID+0x60>)
 8000aba:	6811      	ldr	r1, [r2, #0]
 8000abc:	00da      	lsls	r2, r3, #3
 8000abe:	40d1      	lsrs	r1, r2
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	a803      	add	r0, sp, #12
 8000ac6:	5481      	strb	r1, [r0, r2]
	for(i = 0; i < 4; i++)
 8000ac8:	3301      	adds	r3, #1
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	ddf4      	ble.n	8000ab8 <printUID+0x28>
	s2[4]= 0;
 8000ace:	ab03      	add	r3, sp, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	711a      	strb	r2, [r3, #4]

	idBase = (uint32_t*)(UID_BASE + 0x14);

	d_printf("\n\rUID %02X-\"%s\"-\"%s\"-%08lx", (*idBase >> 24) & 0xff, s, s2, *idBase2);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <printUID+0x64>)
 8000ad6:	78d1      	ldrb	r1, [r2, #3]
 8000ad8:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <printUID+0x60>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	aa05      	add	r2, sp, #20
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <printUID+0x68>)
 8000ae2:	f000 fdcb 	bl	800167c <d_printf>
#endif
}
 8000ae6:	b007      	add	sp, #28
 8000ae8:	bd00      	pop	{pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	1ff80050 	.word	0x1ff80050
 8000af0:	1ff80054 	.word	0x1ff80054
 8000af4:	1ff80064 	.word	0x1ff80064
 8000af8:	08003ed4 	.word	0x08003ed4

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <SystemClock_Config+0xdc>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	2101      	movs	r1, #1
 8000b04:	438b      	bics	r3, r1
 8000b06:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <SystemClock_Config+0xdc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000b0c:	07db      	lsls	r3, r3, #31
 8000b0e:	d4fb      	bmi.n	8000b08 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000b10:	4932      	ldr	r1, [pc, #200]	; (8000bdc <SystemClock_Config+0xe0>)
 8000b12:	680b      	ldr	r3, [r1, #0]
 8000b14:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <SystemClock_Config+0xe4>)
 8000b16:	401a      	ands	r2, r3
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	600b      	str	r3, [r1, #0]
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000b20:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b22:	6811      	ldr	r1, [r2, #0]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	430b      	orrs	r3, r1
 8000b2a:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	059b      	lsls	r3, r3, #22
 8000b32:	d5fb      	bpl.n	8000b2c <SystemClock_Config+0x30>
  *         @arg @ref LL_RCC_MSIRANGE_6
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSIRANGE, Range);
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	492b      	ldr	r1, [pc, #172]	; (8000be8 <SystemClock_Config+0xec>)
 8000b3a:	4011      	ands	r1, r2
 8000b3c:	22a0      	movs	r2, #160	; 0xa0
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	430a      	orrs	r2, r1
 8000b42:	605a      	str	r2, [r3, #4]
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	0a12      	lsrs	r2, r2, #8
 8000b4a:	605a      	str	r2, [r3, #4]
  * @rmtoll CR    DBP       LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4c:	4823      	ldr	r0, [pc, #140]	; (8000bdc <SystemClock_Config+0xe0>)
 8000b4e:	6801      	ldr	r1, [r0, #0]
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	0052      	lsls	r2, r2, #1
 8000b54:	4311      	orrs	r1, r2
 8000b56:	6001      	str	r1, [r0, #0]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSEDRV, LSEDrive);
 8000b58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000b5a:	4821      	ldr	r0, [pc, #132]	; (8000be0 <SystemClock_Config+0xe4>)
 8000b5c:	4001      	ands	r1, r0
 8000b5e:	6519      	str	r1, [r3, #80]	; 0x50
  SET_BIT(RCC->CSR, RCC_CSR_LSEON);
 8000b60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000b62:	430a      	orrs	r2, r1
 8000b64:	651a      	str	r2, [r3, #80]	; 0x50
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b6a:	059b      	lsls	r3, r3, #22
 8000b6c:	d5fb      	bpl.n	8000b66 <SystemClock_Config+0x6a>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	21f0      	movs	r1, #240	; 0xf0
 8000b74:	438a      	bics	r2, r1
 8000b76:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	491c      	ldr	r1, [pc, #112]	; (8000bec <SystemClock_Config+0xf0>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b80:	68da      	ldr	r2, [r3, #12]
 8000b82:	491b      	ldr	r1, [pc, #108]	; (8000bf0 <SystemClock_Config+0xf4>)
 8000b84:	400a      	ands	r2, r1
 8000b86:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <SystemClock_Config+0xe8>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	220c      	movs	r2, #12
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000b96:	421a      	tst	r2, r3
 8000b98:	d1fa      	bne.n	8000b90 <SystemClock_Config+0x94>
  {

  }

  LL_Init1msTick(2097000);
 8000b9a:	4c16      	ldr	r4, [pc, #88]	; (8000bf4 <SystemClock_Config+0xf8>)
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	f002 fcb1 	bl	8003504 <LL_Init1msTick>

  LL_SetSystemCoreClock(2097000);
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f002 fcd2 	bl	800354c <LL_SetSystemCoreClock>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <SystemClock_Config+0xe8>)
 8000baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bac:	210c      	movs	r1, #12
 8000bae:	438a      	bics	r2, r1
 8000bb0:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8000bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb4:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <SystemClock_Config+0xfc>)
 8000bb6:	4011      	ands	r1, r2
 8000bb8:	22c0      	movs	r2, #192	; 0xc0
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000bc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <SystemClock_Config+0x100>)
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	64da      	str	r2, [r3, #76]	; 0x4c
  *         @arg @ref LL_RCC_LPTIM1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, LPTIMxSource);
 8000bc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <SystemClock_Config+0x104>)
 8000bcc:	4011      	ands	r1, r2
 8000bce:	22c0      	movs	r2, #192	; 0xc0
 8000bd0:	0312      	lsls	r2, r2, #12
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_LSE);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
  LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_LSE);
}
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	40022000 	.word	0x40022000
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	ffffe7ff 	.word	0xffffe7ff
 8000be4:	40021000 	.word	0x40021000
 8000be8:	ffff1fff 	.word	0xffff1fff
 8000bec:	fffff8ff 	.word	0xfffff8ff
 8000bf0:	ffffc7ff 	.word	0xffffc7ff
 8000bf4:	001fff68 	.word	0x001fff68
 8000bf8:	fffff3ff 	.word	0xfffff3ff
 8000bfc:	ffffcfff 	.word	0xffffcfff
 8000c00:	fff3ffff 	.word	0xfff3ffff

08000c04 <main>:
{
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c08:	4b61      	ldr	r3, [pc, #388]	; (8000d90 <main+0x18c>)
 8000c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4311      	orrs	r1, r2
 8000c10:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c14:	400a      	ands	r2, r1
 8000c16:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000c18:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0549      	lsls	r1, r1, #21
 8000c20:	430a      	orrs	r2, r1
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c26:	400b      	ands	r3, r1
 8000c28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c2a:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 8000c2c:	f7ff ff66 	bl	8000afc <SystemClock_Config>
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000c30:	4a58      	ldr	r2, [pc, #352]	; (8000d94 <main+0x190>)
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	2102      	movs	r1, #2
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6013      	str	r3, [r2, #0]
  MX_GPIO_Init();
 8000c3a:	f7ff fdfd 	bl	8000838 <MX_GPIO_Init>
  MX_ADC_Init();
 8000c3e:	f7ff fd01 	bl	8000644 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c42:	f7ff fe69 	bl	8000918 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000c46:	f000 fa43 	bl	80010d0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000c4a:	f000 fabb 	bl	80011c4 <MX_USART2_UART_Init>
  MX_TIM22_Init();
 8000c4e:	f000 f9db 	bl	8001008 <MX_TIM22_Init>
  MX_CRC_Init();
 8000c52:	f7ff fdb5 	bl	80007c0 <MX_CRC_Init>
  MX_TIM21_Init();
 8000c56:	f000 f97b 	bl	8000f50 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8000c5a:	f7ff fecf 	bl	80009fc <MX_LPTIM1_Init>
  MX_TIM2_Init();
 8000c5e:	f000 f947 	bl	8000ef0 <MX_TIM2_Init>
  	debug_init();
 8000c62:	f000 fcd7 	bl	8001614 <debug_init>
	d_printf("\n\r\n\r%s %s", date, time);
 8000c66:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <main+0x194>)
 8000c68:	494c      	ldr	r1, [pc, #304]	; (8000d9c <main+0x198>)
 8000c6a:	484d      	ldr	r0, [pc, #308]	; (8000da0 <main+0x19c>)
 8000c6c:	f000 fd06 	bl	800167c <d_printf>
	printUID();
 8000c70:	f7ff ff0e 	bl	8000a90 <printUID>
	ADC1_COMMON->CCR |= LL_ADC_PATH_INTERNAL_TEMPSENSOR;
 8000c74:	4a4b      	ldr	r2, [pc, #300]	; (8000da4 <main+0x1a0>)
 8000c76:	6811      	ldr	r1, [r2, #0]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000c80:	4949      	ldr	r1, [pc, #292]	; (8000da8 <main+0x1a4>)
 8000c82:	688b      	ldr	r3, [r1, #8]
 8000c84:	4a49      	ldr	r2, [pc, #292]	; (8000dac <main+0x1a8>)
 8000c86:	401a      	ands	r2, r3
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	061b      	lsls	r3, r3, #24
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000c90:	4b45      	ldr	r3, [pc, #276]	; (8000da8 <main+0x1a4>)
 8000c92:	689b      	ldr	r3, [r3, #8]
	while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0);
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	dbfb      	blt.n	8000c90 <main+0x8c>
	LL_mDelay(2);
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f002 fc43 	bl	8003524 <LL_mDelay>
	read_config_from_eeprom();
 8000c9e:	f000 fe45 	bl	800192c <read_config_from_eeprom>
	dev_init();
 8000ca2:	f001 fb29 	bl	80022f8 <dev_init>
	d_printf("\n\rSN %09lu", dev.Config.Serial);
 8000ca6:	4c42      	ldr	r4, [pc, #264]	; (8000db0 <main+0x1ac>)
 8000ca8:	23e4      	movs	r3, #228	; 0xe4
 8000caa:	58e1      	ldr	r1, [r4, r3]
 8000cac:	4841      	ldr	r0, [pc, #260]	; (8000db4 <main+0x1b0>)
 8000cae:	f000 fce5 	bl	800167c <d_printf>
	d_printf("\n\r");
 8000cb2:	4841      	ldr	r0, [pc, #260]	; (8000db8 <main+0x1b4>)
 8000cb4:	f000 fce2 	bl	800167c <d_printf>
	modbus_init();
 8000cb8:	f000 ffbe 	bl	8001c38 <modbus_init>
	ADS_Init(dev.Config.FID);
 8000cbc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8000cbe:	f001 f93b 	bl	8001f38 <ADS_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	05d2      	lsls	r2, r2, #23
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8000cce:	4836      	ldr	r0, [pc, #216]	; (8000da8 <main+0x1a4>)
 8000cd0:	6883      	ldr	r3, [r0, #8]
 8000cd2:	4a36      	ldr	r2, [pc, #216]	; (8000dac <main+0x1a8>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6083      	str	r3, [r0, #8]
  SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000cda:	6843      	ldr	r3, [r0, #4]
 8000cdc:	2504      	movs	r5, #4
 8000cde:	432b      	orrs	r3, r5
 8000ce0:	6043      	str	r3, [r0, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000ce2:	4a36      	ldr	r2, [pc, #216]	; (8000dbc <main+0x1b8>)
 8000ce4:	68d3      	ldr	r3, [r2, #12]
 8000ce6:	2402      	movs	r4, #2
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	60d3      	str	r3, [r2, #12]
  SET_BIT(LPTIMx->CR, LPTIM_CR_ENABLE);
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <main+0x1bc>)
 8000cee:	6918      	ldr	r0, [r3, #16]
 8000cf0:	4308      	orrs	r0, r1
 8000cf2:	6118      	str	r0, [r3, #16]
  MODIFY_REG(LPTIMx->ARR, LPTIM_ARR_ARR, AutoReload);
 8000cf4:	699a      	ldr	r2, [r3, #24]
 8000cf6:	0c12      	lsrs	r2, r2, #16
 8000cf8:	0412      	lsls	r2, r2, #16
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	619a      	str	r2, [r3, #24]
  * @param  LPTIMx Low-Power Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  SET_BIT(LPTIMx->IER, LPTIM_IER_ARRMIE);
 8000cfe:	6899      	ldr	r1, [r3, #8]
 8000d00:	4321      	orrs	r1, r4
 8000d02:	6099      	str	r1, [r3, #8]
  MODIFY_REG(LPTIMx->CR, LPTIM_CR_CNTSTRT | LPTIM_CR_SNGSTRT, OperatingMode);
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	2106      	movs	r1, #6
 8000d08:	438a      	bics	r2, r1
 8000d0a:	432a      	orrs	r2, r5
 8000d0c:	611a      	str	r2, [r3, #16]
	HourTimer = CntSec;
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <main+0x1c0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <main+0x1c4>)
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e01c      	b.n	8000d52 <main+0x14e>
			f_Time500ms = FALSE;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <main+0x1c8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			dev_proc();
 8000d1e:	f001 fb09 	bl	8002334 <dev_proc>
 8000d22:	e01c      	b.n	8000d5e <main+0x15a>
			f_Time250ms = FALSE;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <main+0x1cc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000d2a:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <main+0x1a4>)
 8000d2c:	6893      	ldr	r3, [r2, #8]
 8000d2e:	491f      	ldr	r1, [pc, #124]	; (8000dac <main+0x1a8>)
 8000d30:	400b      	ands	r3, r1
 8000d32:	2104      	movs	r1, #4
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]
		if(f_AdcCycleEnd){
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <main+0x1d0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d113      	bne.n	8000d68 <main+0x164>
		if((uint32_t)(CntSec - HourTimer) >= SEC_PER_MHOUR){
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <main+0x1c0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <main+0x1c4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	21e1      	movs	r1, #225	; 0xe1
 8000d4c:	0109      	lsls	r1, r1, #4
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d210      	bcs.n	8000d74 <main+0x170>
		mb_proc();
 8000d52:	f001 ffd5 	bl	8002d00 <mb_proc>
		if(f_Time500ms){
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <main+0x1c8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1dc      	bne.n	8000d18 <main+0x114>
		if(f_Time250ms){
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <main+0x1cc>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0e8      	beq.n	8000d38 <main+0x134>
 8000d66:	e7dd      	b.n	8000d24 <main+0x120>
			f_AdcCycleEnd = FALSE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <main+0x1d0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
			Adc_read_data();
 8000d6e:	f001 fb41 	bl	80023f4 <Adc_read_data>
 8000d72:	e7e5      	b.n	8000d40 <main+0x13c>
			HourTimer = CntSec;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <main+0x1c4>)
 8000d76:	601a      	str	r2, [r3, #0]
			arh.MHour++;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <main+0x1d4>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	1c50      	adds	r0, r2, #1
 8000d7e:	6018      	str	r0, [r3, #0]
			if((arh.MHour % 24) == 0){
 8000d80:	2118      	movs	r1, #24
 8000d82:	f7ff fa59 	bl	8000238 <__aeabi_uidivmod>
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d1e3      	bne.n	8000d52 <main+0x14e>
				DayArhivStore();
 8000d8a:	f000 fa8d 	bl	80012a8 <DayArhivStore>
 8000d8e:	e7e0      	b.n	8000d52 <main+0x14e>
 8000d90:	40021000 	.word	0x40021000
 8000d94:	e000e010 	.word	0xe000e010
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	08003ef0 	.word	0x08003ef0
 8000da4:	40012708 	.word	0x40012708
 8000da8:	40012400 	.word	0x40012400
 8000dac:	7fffffe8 	.word	0x7fffffe8
 8000db0:	2000042c 	.word	0x2000042c
 8000db4:	08003efc 	.word	0x08003efc
 8000db8:	08003f08 	.word	0x08003f08
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40007c00 	.word	0x40007c00
 8000dc4:	20000414 	.word	0x20000414
 8000dc8:	20000420 	.word	0x20000420
 8000dcc:	20000561 	.word	0x20000561
 8000dd0:	20000560 	.word	0x20000560
 8000dd4:	2000055c 	.word	0x2000055c
 8000dd8:	200000a8 	.word	0x200000a8

08000ddc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler>

08000dde <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler>

08000de0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	4770      	bx	lr
	...

08000de8 <EXTI4_15_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <EXTI4_15_IRQHandler+0x10>)
 8000dea:	695b      	ldr	r3, [r3, #20]
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8000dec:	06db      	lsls	r3, r3, #27
 8000dee:	d502      	bpl.n	8000df6 <EXTI4_15_IRQHandler+0xe>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <EXTI4_15_IRQHandler+0x10>)
 8000df2:	2210      	movs	r2, #16
 8000df4:	615a      	str	r2, [r3, #20]
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000df6:	4770      	bx	lr
 8000df8:	40010400 	.word	0x40010400

08000dfc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000dfc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */
	__NOP();
 8000dfe:	46c0      	nop			; (mov r8, r8)

	Adc_Eoc_Callback();
 8000e00:	f001 fad4 	bl	80023ac <Adc_Eoc_Callback>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP));
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <ADC1_COMP_IRQHandler+0x40>)
 8000e06:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR));
 8000e08:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8000e0a:	681b      	ldr	r3, [r3, #0]

	if(LL_ADC_IsActiveFlag_OVR(ADC1)){
		//		LL_ADC_ClearFlag_OVR(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOC(ADC1)){
 8000e0c:	075b      	lsls	r3, r3, #29
 8000e0e:	d502      	bpl.n	8000e16 <ADC1_COMP_IRQHandler+0x1a>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <ADC1_COMP_IRQHandler+0x40>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	601a      	str	r2, [r3, #0]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <ADC1_COMP_IRQHandler+0x40>)
 8000e18:	681b      	ldr	r3, [r3, #0]
		LL_ADC_ClearFlag_EOC(ADC1);
	}

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 8000e1a:	071b      	lsls	r3, r3, #28
 8000e1c:	d506      	bpl.n	8000e2c <ADC1_COMP_IRQHandler+0x30>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <ADC1_COMP_IRQHandler+0x40>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	601a      	str	r2, [r3, #0]
		LL_ADC_ClearFlag_EOS(ADC1);
		adc_cnt = 0;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <ADC1_COMP_IRQHandler+0x44>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_COMP_IRQn 0 */

  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000e2a:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->CR,
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <ADC1_COMP_IRQHandler+0x40>)
 8000e2e:	6893      	ldr	r3, [r2, #8]
 8000e30:	4904      	ldr	r1, [pc, #16]	; (8000e44 <ADC1_COMP_IRQHandler+0x48>)
 8000e32:	400b      	ands	r3, r1
 8000e34:	2104      	movs	r1, #4
 8000e36:	430b      	orrs	r3, r1
 8000e38:	6093      	str	r3, [r2, #8]
 8000e3a:	e7f6      	b.n	8000e2a <ADC1_COMP_IRQHandler+0x2e>
 8000e3c:	40012400 	.word	0x40012400
 8000e40:	20000424 	.word	0x20000424
 8000e44:	7fffffe8 	.word	0x7fffffe8

08000e48 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8000e48:	b510      	push	{r4, lr}
  return (((READ_BIT(LPTIMx->ISR, LPTIM_ISR_ARRM) == LPTIM_ISR_ARRM) ? 1UL : 0UL));
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <LPTIM1_IRQHandler+0x1c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	079b      	lsls	r3, r3, #30
 8000e50:	d504      	bpl.n	8000e5c <LPTIM1_IRQHandler+0x14>
  SET_BIT(LPTIMx->ICR, LPTIM_ICR_ARRMCF);
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <LPTIM1_IRQHandler+0x1c>)
 8000e54:	6853      	ldr	r3, [r2, #4]
 8000e56:	2102      	movs	r1, #2
 8000e58:	430b      	orrs	r3, r1
 8000e5a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
	if(LL_LPTIM_IsActiveFlag_ARRM(LPTIM1)){
		LL_LPTIM_ClearFLAG_ARRM(LPTIM1);
	}

	timer_1_128();
 8000e5c:	f001 f976 	bl	800214c <timer_1_128>
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40007c00 	.word	0x40007c00

08000e68 <TIM21_IRQHandler>:
  /* USER CODE BEGIN TIM21_IRQn 1 */
#ifdef CONFIG_MIPEX
	MSI_Callback_Capture_Timer();
#endif
  /* USER CODE END TIM21_IRQn 1 */
}
 8000e68:	4770      	bx	lr
	...

08000e6c <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8000e6c:	b510      	push	{r4, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <TIM22_IRQHandler+0x24>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	079b      	lsls	r3, r3, #30
 8000e74:	d503      	bpl.n	8000e7e <TIM22_IRQHandler+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <TIM22_IRQHandler+0x24>)
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	611a      	str	r2, [r3, #16]
	{
		LL_TIM_ClearFlag_CC1(TIM22);
	}


	Modbus_TO_timer();
 8000e7e:	f000 fefd 	bl	8001c7c <Modbus_TO_timer>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e82:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <TIM22_IRQHandler+0x24>)
 8000e84:	6813      	ldr	r3, [r2, #0]
 8000e86:	2101      	movs	r1, #1
 8000e88:	438b      	bics	r3, r1
 8000e8a:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM22_IRQn 0 */
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40011400 	.word	0x40011400

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	Debug_UART_IRQHandler();
 8000e96:	f000 fc63 	bl	8001760 <Debug_UART_IRQHandler>
#endif
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 8000e9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	Modbus_LPUART_IRQHandler();
 8000e9e:	f000 ff51 	bl	8001d44 <Modbus_LPUART_IRQHandler>

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <_sbrk+0x38>)
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <_sbrk+0x3c>)
 8000eac:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <_sbrk+0x40>)
 8000eb0:	6809      	ldr	r1, [r1, #0]
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d007      	beq.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <_sbrk+0x40>)
 8000eb8:	6808      	ldr	r0, [r1, #0]
 8000eba:	18c3      	adds	r3, r0, r3
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d806      	bhi.n	8000ece <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ec0:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <_sbrk+0x40>)
 8000ec2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ec4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000ec6:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <_sbrk+0x40>)
 8000ec8:	4807      	ldr	r0, [pc, #28]	; (8000ee8 <_sbrk+0x44>)
 8000eca:	6008      	str	r0, [r1, #0]
 8000ecc:	e7f3      	b.n	8000eb6 <_sbrk+0x12>
    errno = ENOMEM;
 8000ece:	f002 fb43 	bl	8003558 <__errno>
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4240      	negs	r0, r0
 8000eda:	e7f3      	b.n	8000ec4 <_sbrk+0x20>
 8000edc:	20002000 	.word	0x20002000
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	200000a4 	.word	0x200000a4
 8000ee8:	20000598 	.word	0x20000598

08000eec <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	4770      	bx	lr
	...

08000ef0 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ef4:	2210      	movs	r2, #16
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	a802      	add	r0, sp, #8
 8000efa:	f002 fb60 	bl	80035be <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <MX_TIM2_Init+0x54>)
 8000f00:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000f02:	2301      	movs	r3, #1
 8000f04:	4319      	orrs	r1, r3
 8000f06:	6391      	str	r1, [r2, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f0e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = LL_TIM_IC_FILTER_FDIV1_N4-LL_TIM_IC_FILTER_FDIV1_N2;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 65535;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_TIM2_Init+0x58>)
 8000f12:	9304      	str	r3, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f14:	2480      	movs	r4, #128	; 0x80
 8000f16:	05e4      	lsls	r4, r4, #23
 8000f18:	a902      	add	r1, sp, #8
 8000f1a:	0020      	movs	r0, r4
 8000f1c:	f002 fa4c 	bl	80033b8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	4393      	bics	r3, r2
 8000f26:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f28:	68a3      	ldr	r3, [r4, #8]
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <MX_TIM2_Init+0x5c>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f30:	6863      	ldr	r3, [r4, #4]
 8000f32:	2170      	movs	r1, #112	; 0x70
 8000f34:	438b      	bics	r3, r1
 8000f36:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f38:	68a3      	ldr	r3, [r4, #8]
 8000f3a:	4393      	bics	r3, r2
 8000f3c:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM2);
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f3e:	b006      	add	sp, #24
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40021000 	.word	0x40021000
 8000f48:	0000ffff 	.word	0x0000ffff
 8000f4c:	ffffbff8 	.word	0xffffbff8

08000f50 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f54:	ad02      	add	r5, sp, #8
 8000f56:	2210      	movs	r2, #16
 8000f58:	2100      	movs	r1, #0
 8000f5a:	0028      	movs	r0, r5
 8000f5c:	f002 fb2f 	bl	80035be <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <MX_TIM21_Init+0xa4>)
 8000f62:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000f64:	2304      	movs	r3, #4
 8000f66:	4319      	orrs	r1, r3
 8000f68:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f70:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f72:	4e21      	ldr	r6, [pc, #132]	; (8000ff8 <MX_TIM21_Init+0xa8>)
 8000f74:	22c5      	movs	r2, #197	; 0xc5
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	58b3      	ldr	r3, [r6, r2]
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	438b      	bics	r3, r1
 8000f7e:	50b3      	str	r3, [r6, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f80:	2780      	movs	r7, #128	; 0x80
 8000f82:	037f      	lsls	r7, r7, #13
 8000f84:	6037      	str	r7, [r6, #0]
  NVIC_EnableIRQ(TIM21_IRQn);

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f8a:	9303      	str	r3, [sp, #12]
  TIM_InitStruct.Autoreload = 65535;
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_TIM21_Init+0xac>)
 8000f8e:	9204      	str	r2, [sp, #16]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f90:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM21, &TIM_InitStruct);
 8000f92:	4c1b      	ldr	r4, [pc, #108]	; (8001000 <MX_TIM21_Init+0xb0>)
 8000f94:	0029      	movs	r1, r5
 8000f96:	0020      	movs	r0, r4
 8000f98:	f002 fa0e 	bl	80033b8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	438b      	bics	r3, r1
 8000fa2:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	2270      	movs	r2, #112	; 0x70
 8000fa8:	4393      	bics	r3, r2
 8000faa:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	438b      	bics	r3, r1
 8000fb0:	60a3      	str	r3, [r4, #8]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_TIM21_Init+0xb4>)
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	4382      	bics	r2, r0
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4302      	orrs	r2, r0
 8000fbe:	601a      	str	r2, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	300b      	adds	r0, #11
 8000fc4:	4382      	bics	r2, r0
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	30e4      	adds	r0, #228	; 0xe4
 8000fce:	4382      	bics	r2, r0
 8000fd0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 8000fd2:	6a23      	ldr	r3, [r4, #32]
 8000fd4:	220a      	movs	r2, #10
 8000fd6:	4393      	bics	r3, r2
 8000fd8:	6223      	str	r3, [r4, #32]
  MODIFY_REG(TIMx->OR, (Remap >> TIMx_OR_RMP_SHIFT), (Remap & TIMx_OR_RMP_MASK));
 8000fda:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fdc:	3235      	adds	r2, #53	; 0x35
 8000fde:	4393      	bics	r3, r2
 8000fe0:	3a2f      	subs	r2, #47	; 0x2f
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	6523      	str	r3, [r4, #80]	; 0x50
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	5077      	str	r7, [r6, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fec:	f3bf 8f6f 	isb	sy
  LL_TIM_SetRemap(TIM21, LL_TIM_TIM21_TI1_RMP_LSE);
  /* USER CODE BEGIN TIM21_Init 2 */
  NVIC_DisableIRQ(TIM21_IRQn);
  /* USER CODE END TIM21_Init 2 */

}
 8000ff0:	b007      	add	sp, #28
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	0000ffff 	.word	0x0000ffff
 8001000:	40010800 	.word	0x40010800
 8001004:	40010818 	.word	0x40010818

08001008 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8001008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100a:	46c6      	mov	lr, r8
 800100c:	b500      	push	{lr}
 800100e:	b08a      	sub	sp, #40	; 0x28

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001010:	ad06      	add	r5, sp, #24
 8001012:	2210      	movs	r2, #16
 8001014:	2100      	movs	r1, #0
 8001016:	0028      	movs	r0, r5
 8001018:	f002 fad1 	bl	80035be <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800101c:	2210      	movs	r2, #16
 800101e:	2100      	movs	r1, #0
 8001020:	a802      	add	r0, sp, #8
 8001022:	f002 facc 	bl	80035be <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <MX_TIM22_Init+0xac>)
 8001028:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800102a:	2320      	movs	r3, #32
 800102c:	4319      	orrs	r1, r3
 800102e:	6351      	str	r1, [r2, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001030:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001032:	4013      	ands	r3, r2
 8001034:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001036:	9b01      	ldr	r3, [sp, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_TIM22_Init+0xb0>)
 800103a:	21c5      	movs	r1, #197	; 0xc5
 800103c:	0089      	lsls	r1, r1, #2
 800103e:	585a      	ldr	r2, [r3, r1]
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <MX_TIM22_Init+0xb4>)
 8001042:	4002      	ands	r2, r0
 8001044:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	03d2      	lsls	r2, r2, #15
 800104a:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM22_IRQn);

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  TIM_InitStruct.Prescaler = 4;
 800104c:	2704      	movs	r7, #4
 800104e:	802f      	strh	r7, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001050:	2600      	movs	r6, #0
 8001052:	9607      	str	r6, [sp, #28]
  TIM_InitStruct.Autoreload = 1911;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_TIM22_Init+0xb8>)
 8001056:	4698      	mov	r8, r3
 8001058:	9308      	str	r3, [sp, #32]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800105a:	9609      	str	r6, [sp, #36]	; 0x24
  LL_TIM_Init(TIM22, &TIM_InitStruct);
 800105c:	4c19      	ldr	r4, [pc, #100]	; (80010c4 <MX_TIM22_Init+0xbc>)
 800105e:	0029      	movs	r1, r5
 8001060:	0020      	movs	r0, r4
 8001062:	f002 f9a9 	bl	80033b8 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	2580      	movs	r5, #128	; 0x80
 800106a:	43ab      	bics	r3, r5
 800106c:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800106e:	68a3      	ldr	r3, [r4, #8]
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MX_TIM22_Init+0xc0>)
 8001072:	4013      	ands	r3, r2
 8001074:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableARRPreload(TIM22);
  LL_TIM_SetClockSource(TIM22, LL_TIM_CLOCKSOURCE_INTERNAL);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001076:	9602      	str	r6, [sp, #8]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001078:	9603      	str	r6, [sp, #12]
  TIM_OC_InitStruct.CompareValue = 1911;
 800107a:	4643      	mov	r3, r8
 800107c:	9304      	str	r3, [sp, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800107e:	9605      	str	r6, [sp, #20]
  LL_TIM_OC_Init(TIM22, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001080:	aa02      	add	r2, sp, #8
 8001082:	2101      	movs	r1, #1
 8001084:	0020      	movs	r0, r4
 8001086:	f002 f9c5 	bl	8003414 <LL_TIM_OC_Init>
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800108a:	4a10      	ldr	r2, [pc, #64]	; (80010cc <MX_TIM22_Init+0xc4>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800108c:	6813      	ldr	r3, [r2, #0]
 800108e:	43bb      	bics	r3, r7
 8001090:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	2208      	movs	r2, #8
 8001096:	4393      	bics	r3, r2
 8001098:	4313      	orrs	r3, r2
 800109a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800109c:	6863      	ldr	r3, [r4, #4]
 800109e:	3268      	adds	r2, #104	; 0x68
 80010a0:	4393      	bics	r3, r2
 80010a2:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80010a4:	68a3      	ldr	r3, [r4, #8]
 80010a6:	43ab      	bics	r3, r5
 80010a8:	60a3      	str	r3, [r4, #8]
  LL_TIM_DisableMasterSlaveMode(TIM22);
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 80010aa:	b00a      	add	sp, #40	; 0x28
 80010ac:	bc80      	pop	{r7}
 80010ae:	46b8      	mov	r8, r7
 80010b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	ff00ffff 	.word	0xff00ffff
 80010c0:	00000777 	.word	0x00000777
 80010c4:	40011400 	.word	0x40011400
 80010c8:	ffffbff8 	.word	0xffffbff8
 80010cc:	40011418 	.word	0x40011418

080010d0 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 80010d4:	2218      	movs	r2, #24
 80010d6:	2100      	movs	r1, #0
 80010d8:	a808      	add	r0, sp, #32
 80010da:	f002 fa70 	bl	80035be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	2218      	movs	r2, #24
 80010e0:	2100      	movs	r1, #0
 80010e2:	a802      	add	r0, sp, #8
 80010e4:	f002 fa6b 	bl	80035be <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_LPUART1_UART_Init+0xd8>)
 80010ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010ec:	2080      	movs	r0, #128	; 0x80
 80010ee:	02c0      	lsls	r0, r0, #11
 80010f0:	4301      	orrs	r1, r0
 80010f2:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010f6:	4002      	ands	r2, r0
 80010f8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80010fa:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fe:	2501      	movs	r5, #1
 8001100:	432a      	orrs	r2, r5
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	402b      	ands	r3, r5
 8001108:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800110a:	9b00      	ldr	r3, [sp, #0]

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800110c:	2304      	movs	r3, #4
 800110e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001110:	3b02      	subs	r3, #2
 8001112:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	3301      	adds	r3, #1
 8001116:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001118:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800111a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800111c:	3303      	adds	r3, #3
 800111e:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	20a0      	movs	r0, #160	; 0xa0
 8001122:	a902      	add	r1, sp, #8
 8001124:	05c0      	lsls	r0, r0, #23
 8001126:	f001 fefb 	bl	8002f20 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_LPUART1_UART_Init+0xdc>)
 800112c:	21c7      	movs	r1, #199	; 0xc7
 800112e:	0089      	lsls	r1, r1, #2
 8001130:	585a      	ldr	r2, [r3, r1]
 8001132:	481f      	ldr	r0, [pc, #124]	; (80011b0 <MX_LPUART1_UART_Init+0xe0>)
 8001134:	4002      	ands	r2, r0
 8001136:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	0592      	lsls	r2, r2, #22
 800113c:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(LPUART1_IRQn);

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 800113e:	2396      	movs	r3, #150	; 0x96
 8001140:	019b      	lsls	r3, r3, #6
 8001142:	9308      	str	r3, [sp, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8001144:	2300      	movs	r3, #0
 8001146:	9309      	str	r3, [sp, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001148:	930a      	str	r3, [sp, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800114a:	930b      	str	r3, [sp, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 800114c:	330c      	adds	r3, #12
 800114e:	930c      	str	r3, [sp, #48]	; 0x30
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001150:	4c18      	ldr	r4, [pc, #96]	; (80011b4 <MX_LPUART1_UART_Init+0xe4>)
 8001152:	a908      	add	r1, sp, #32
 8001154:	0020      	movs	r0, r4
 8001156:	f001 ff77 	bl	8003048 <LL_LPUART_Init>
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  SET_BIT(LPUARTx->CR3, USART_CR3_HDSEL);
 800115a:	68a3      	ldr	r3, [r4, #8]
 800115c:	2208      	movs	r2, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	60a3      	str	r3, [r4, #8]
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_RTSE);
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <MX_LPUART1_UART_Init+0xe8>)
 8001166:	4013      	ands	r3, r2
 8001168:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800116a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800116e:	f385 8810 	msr	PRIMASK, r5
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSIE);
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	4911      	ldr	r1, [pc, #68]	; (80011bc <MX_LPUART1_UART_Init+0xec>)
 8001176:	400b      	ands	r3, r1
 8001178:	60a3      	str	r3, [r4, #8]
 800117a:	f382 8810 	msr	PRIMASK, r2
  SET_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 800117e:	68a2      	ldr	r2, [r4, #8]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4313      	orrs	r3, r2
 8001186:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001188:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800118c:	f385 8810 	msr	PRIMASK, r5
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8001190:	68a3      	ldr	r3, [r4, #8]
 8001192:	43ab      	bics	r3, r5
 8001194:	60a3      	str	r3, [r4, #8]
 8001196:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(LPUARTx->CR3, USART_CR3_CTSE);
 800119a:	68a3      	ldr	r3, [r4, #8]
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <MX_LPUART1_UART_Init+0xf0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	60a3      	str	r3, [r4, #8]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_CTS) == (USART_ISR_CTS)) ? 1UL : 0UL);
 80011a2:	69e3      	ldr	r3, [r4, #28]
  LL_LPUART_IsActiveFlag_CTS(LPUART1);
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011a4:	b00f      	add	sp, #60	; 0x3c
 80011a6:	bd30      	pop	{r4, r5, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	ffff00ff 	.word	0xffff00ff
 80011b4:	40004800 	.word	0x40004800
 80011b8:	fffffeff 	.word	0xfffffeff
 80011bc:	fffffbff 	.word	0xfffffbff
 80011c0:	fffffdff 	.word	0xfffffdff

080011c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	46c6      	mov	lr, r8
 80011c8:	b500      	push	{lr}
 80011ca:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80011cc:	221c      	movs	r2, #28
 80011ce:	2100      	movs	r1, #0
 80011d0:	a809      	add	r0, sp, #36	; 0x24
 80011d2:	f002 f9f4 	bl	80035be <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	2218      	movs	r2, #24
 80011d8:	2100      	movs	r1, #0
 80011da:	a803      	add	r0, sp, #12
 80011dc:	f002 f9ef 	bl	80035be <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <MX_USART2_UART_Init+0xd4>)
 80011e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011e4:	2080      	movs	r0, #128	; 0x80
 80011e6:	0280      	lsls	r0, r0, #10
 80011e8:	4301      	orrs	r1, r0
 80011ea:	6399      	str	r1, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ee:	4002      	ands	r2, r0
 80011f0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80011f2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 80011f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f6:	2501      	movs	r5, #1
 80011f8:	432a      	orrs	r2, r5
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	402b      	ands	r3, r5
 8001200:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001202:	9b01      	ldr	r3, [sp, #4]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**USART2 GPIO Configuration
  PA9   ------> USART2_TX
  PA10   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = DEBUG_USART2_TX_Pin;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800120a:	3bff      	subs	r3, #255	; 0xff
 800120c:	3bff      	subs	r3, #255	; 0xff
 800120e:	4698      	mov	r8, r3
 8001210:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2403      	movs	r4, #3
 8001214:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001216:	2704      	movs	r7, #4
 8001218:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800121a:	26a0      	movs	r6, #160	; 0xa0
 800121c:	05f6      	lsls	r6, r6, #23
 800121e:	a903      	add	r1, sp, #12
 8001220:	0030      	movs	r0, r6
 8001222:	f001 fe7d 	bl	8002f20 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = DEBUG_USART2_RX_Pin;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800122c:	4643      	mov	r3, r8
 800122e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001232:	2400      	movs	r4, #0
 8001234:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001236:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001238:	9708      	str	r7, [sp, #32]
  LL_GPIO_Init(DEBUG_USART2_RX_GPIO_Port, &GPIO_InitStruct);
 800123a:	a903      	add	r1, sp, #12
 800123c:	0030      	movs	r0, r6
 800123e:	f001 fe6f 	bl	8002f20 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001242:	4a16      	ldr	r2, [pc, #88]	; (800129c <MX_USART2_UART_Init+0xd8>)
 8001244:	21c7      	movs	r1, #199	; 0xc7
 8001246:	0089      	lsls	r1, r1, #2
 8001248:	5853      	ldr	r3, [r2, r1]
 800124a:	20ff      	movs	r0, #255	; 0xff
 800124c:	4383      	bics	r3, r0
 800124e:	387f      	subs	r0, #127	; 0x7f
 8001250:	4303      	orrs	r3, r0
 8001252:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART2_IRQn);

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800125a:	2396      	movs	r3, #150	; 0x96
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001260:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001262:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001264:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001266:	230c      	movs	r3, #12
 8001268:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800126a:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800126c:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 800126e:	4c0c      	ldr	r4, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0xdc>)
 8001270:	a909      	add	r1, sp, #36	; 0x24
 8001272:	0020      	movs	r0, r4
 8001274:	f002 f8ee 	bl	8003454 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001278:	6863      	ldr	r3, [r4, #4]
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <MX_USART2_UART_Init+0xe0>)
 800127c:	4013      	ands	r3, r2
 800127e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001280:	68a3      	ldr	r3, [r4, #8]
 8001282:	222a      	movs	r2, #42	; 0x2a
 8001284:	4393      	bics	r3, r2
 8001286:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	432b      	orrs	r3, r5
 800128c:	6023      	str	r3, [r4, #0]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	b010      	add	sp, #64	; 0x40
 8001290:	bc80      	pop	{r7}
 8001292:	46b8      	mov	r8, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	40021000 	.word	0x40021000
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	40004400 	.word	0x40004400
 80012a4:	ffffb7ff 	.word	0xffffb7ff

080012a8 <DayArhivStore>:
#include "arhiv.h"
#include "string.h"

ARCHIVE_TYPEDEF arh;

void DayArhivStore(void){
 80012a8:	b510      	push	{r4, lr}
  uint32_t tmp;

  //ArhivStoreNote(ARCHIVE_CURRENT_VALUE,*(uint32_t*)&dgs.RegState.CurrentValue);

  //memcpy(&tmp,&arh.ValueMax,4);
  tmp = arh.ValueMax << 16;
 80012aa:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <DayArhivStore+0x30>)
 80012ac:	88a3      	ldrh	r3, [r4, #4]
 80012ae:	041b      	lsls	r3, r3, #16

  tmp |= arh.ValueMin;
 80012b0:	88e1      	ldrh	r1, [r4, #6]
 80012b2:	4319      	orrs	r1, r3

  ArhivStoreNote(ARCHIVE_MAX_MIN_VALUE,tmp);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fc8b 	bl	8001bd0 <ArhivStoreNote>

  arh.ValueMax = dev.RegInput.Value;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <DayArhivStore+0x34>)
 80012bc:	22f6      	movs	r2, #246	; 0xf6
 80012be:	5a9a      	ldrh	r2, [r3, r2]
 80012c0:	80a2      	strh	r2, [r4, #4]
  arh.ValueMin = dev.RegInput.Value;
 80012c2:	80e2      	strh	r2, [r4, #6]
/*
  tmp = dev.RegInput.TempSensor/10 + (arh.Temper_Max << 24) + (arh.Temper_Min << 16);

  ArhivStoreNote(ARCHIVE_TEMPERATURA, tmp);
*/
  arh.Temper_Max = dev.RegInput.TempSensor/10;
 80012c4:	22fc      	movs	r2, #252	; 0xfc
 80012c6:	5e98      	ldrsh	r0, [r3, r2]
 80012c8:	210a      	movs	r1, #10
 80012ca:	f7fe ffb9 	bl	8000240 <__divsi3>
 80012ce:	b240      	sxtb	r0, r0
 80012d0:	72a0      	strb	r0, [r4, #10]
  arh.Temper_Min = dev.RegInput.TempSensor/10;
 80012d2:	72e0      	strb	r0, [r4, #11]

}
 80012d4:	bd10      	pop	{r4, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	200000a8 	.word	0x200000a8
 80012dc:	2000042c 	.word	0x2000042c

080012e0 <CalibGasZero>:
#include "arhiv.h"
#include "flash.h"

//==============================================================================

void CalibGasZero(void){
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	46c6      	mov	lr, r8
 80012e4:	b500      	push	{lr}

	uint32_t tmp;

	dev.Config.CalibConcTemper += (int16_t)(dev.Config.CalibZeroTemper - dev.RegInput.TempSensor);
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <CalibGasZero+0x4c>)
 80012e8:	24da      	movs	r4, #218	; 0xda
 80012ea:	5b1a      	ldrh	r2, [r3, r4]
 80012ec:	21fc      	movs	r1, #252	; 0xfc
 80012ee:	5e58      	ldrsh	r0, [r3, r1]
 80012f0:	5a5d      	ldrh	r5, [r3, r1]
 80012f2:	1b52      	subs	r2, r2, r5
 80012f4:	b292      	uxth	r2, r2
 80012f6:	391e      	subs	r1, #30
 80012f8:	5a5e      	ldrh	r6, [r3, r1]
 80012fa:	1992      	adds	r2, r2, r6
 80012fc:	525a      	strh	r2, [r3, r1]
	dev.Config.CalibConcADC += (int16_t)(dev.Config.CalibZeroADC - dev.RegInput.ADC_0);
 80012fe:	26dc      	movs	r6, #220	; 0xdc
 8001300:	5b9a      	ldrh	r2, [r3, r6]
 8001302:	3144      	adds	r1, #68	; 0x44
 8001304:	5a59      	ldrh	r1, [r3, r1]
 8001306:	1a52      	subs	r2, r2, r1
 8001308:	b292      	uxth	r2, r2
 800130a:	4690      	mov	r8, r2
 800130c:	27e0      	movs	r7, #224	; 0xe0
 800130e:	5bda      	ldrh	r2, [r3, r7]
 8001310:	4694      	mov	ip, r2
 8001312:	4642      	mov	r2, r8
 8001314:	4462      	add	r2, ip
 8001316:	53da      	strh	r2, [r3, r7]

	dev.Config.CalibZeroTemper = dev.RegInput.TempSensor;
 8001318:	531d      	strh	r5, [r3, r4]
	dev.Config.CalibZeroADC = dev.RegInput.ADC_0;
 800131a:	5399      	strh	r1, [r3, r6]

	tmp = dev.RegInput.TempSensor << 16;
 800131c:	0400      	lsls	r0, r0, #16
	tmp |= dev.RegInput.ADC_0;
 800131e:	4301      	orrs	r1, r0

	ArhivStoreNote(ARCHIVE_SET_CALIB_ZERO,tmp);
 8001320:	2004      	movs	r0, #4
 8001322:	f000 fc55 	bl	8001bd0 <ArhivStoreNote>

}
 8001326:	bc80      	pop	{r7}
 8001328:	46b8      	mov	r8, r7
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132c:	2000042c 	.word	0x2000042c

08001330 <CalibGasConc>:

void CalibGasConc(void){
 8001330:	b510      	push	{r4, lr}

	uint32_t tmp;

	dev.Config.CalibConcTemper = dev.RegInput.TempSensor;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <CalibGasConc+0x28>)
 8001334:	22fc      	movs	r2, #252	; 0xfc
 8001336:	5a99      	ldrh	r1, [r3, r2]
 8001338:	3a1e      	subs	r2, #30
 800133a:	5299      	strh	r1, [r3, r2]
	dev.Config.CalibConcADC = dev.RegInput.ADC_0;
 800133c:	3244      	adds	r2, #68	; 0x44
 800133e:	5a99      	ldrh	r1, [r3, r2]
 8001340:	3a42      	subs	r2, #66	; 0x42
 8001342:	5299      	strh	r1, [r3, r2]

	tmp = dev.Config.ValueCalib << 16;
 8001344:	899a      	ldrh	r2, [r3, #12]
 8001346:	0412      	lsls	r2, r2, #16
	tmp |= dev.RegInput.ADC_TK;
 8001348:	2192      	movs	r1, #146	; 0x92
 800134a:	0049      	lsls	r1, r1, #1
 800134c:	5a59      	ldrh	r1, [r3, r1]
 800134e:	4311      	orrs	r1, r2

	ArhivStoreNote(ARCHIVE_SET_CALIB_CONC,tmp);
 8001350:	2005      	movs	r0, #5
 8001352:	f000 fc3d 	bl	8001bd0 <ArhivStoreNote>
//		k = dev.Config.ValueCalib  * 10000/ (dev.Config.CalibConcADC - dev.Config.CalibZeroADC);
//	}
//	else{
//		k = 10000;
//	}
}
 8001356:	bd10      	pop	{r4, pc}
 8001358:	2000042c 	.word	0x2000042c

0800135c <get_koef_temper_conc>:

//==============================================================================

#define K_MUL 1

uint32_t get_koef_temper_conc(int16_t temperat){
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	46ce      	mov	lr, r9
 8001360:	4647      	mov	r7, r8
 8001362:	b580      	push	{r7, lr}
 8001364:	b083      	sub	sp, #12

	if(temperat < -600)
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <get_koef_temper_conc+0xe4>)
 8001368:	4298      	cmp	r0, r3
 800136a:	db06      	blt.n	800137a <get_koef_temper_conc+0x1e>
		temperat = -600;

	if(temperat > 500)
 800136c:	23fa      	movs	r3, #250	; 0xfa
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4298      	cmp	r0, r3
 8001372:	dd03      	ble.n	800137c <get_koef_temper_conc+0x20>
		temperat = 500;
 8001374:	20fa      	movs	r0, #250	; 0xfa
 8001376:	0040      	lsls	r0, r0, #1
 8001378:	e000      	b.n	800137c <get_koef_temper_conc+0x20>
		temperat = -600;
 800137a:	4831      	ldr	r0, [pc, #196]	; (8001440 <get_koef_temper_conc+0xe4>)

	int32_t dk;

	uint32_t koef_1, koef_2;

	temper_1 = dev.Config.temp_corr_conc[0].Temp;
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <get_koef_temper_conc+0xe8>)
 800137e:	2266      	movs	r2, #102	; 0x66
 8001380:	5e9e      	ldrsh	r6, [r3, r2]
	koef_1 = dev.Config.temp_corr_conc[0].Koef;
 8001382:	2268      	movs	r2, #104	; 0x68
 8001384:	5a9d      	ldrh	r5, [r3, r2]

	temper_2 = dev.Config.temp_corr_conc[1].Temp;
 8001386:	3202      	adds	r2, #2
 8001388:	5e99      	ldrsh	r1, [r3, r2]
 800138a:	468c      	mov	ip, r1
	koef_2 = dev.Config.temp_corr_conc[1].Koef;
 800138c:	226c      	movs	r2, #108	; 0x6c
 800138e:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 8001390:	2d00      	cmp	r5, #0
 8001392:	d04b      	beq.n	800142c <get_koef_temper_conc+0xd0>

		return temper_koef;

	}

	if(koef_2 == 0){
 8001394:	2a00      	cmp	r2, #0
 8001396:	d04b      	beq.n	8001430 <get_koef_temper_conc+0xd4>

		return temper_koef;

	}

	if(temperat < temper_1){
 8001398:	42b0      	cmp	r0, r6
 800139a:	db49      	blt.n	8001430 <get_koef_temper_conc+0xd4>
		temper_koef = koef_1 * K_MUL;

		return temper_koef;
	}

	if((temperat >= temper_1) && (temperat <= temper_2))
 800139c:	4288      	cmp	r0, r1
 800139e:	dd07      	ble.n	80013b0 <get_koef_temper_conc+0x54>
	BOOL find_temper = FALSE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	4699      	mov	r9, r3
			temper_koef = koef_1 * K_MUL;
			find_null = TRUE;
		}

		if((temperat >= temper_1) && (temperat <= temper_2))
			find_temper = TRUE;
 80013a4:	2700      	movs	r7, #0
 80013a6:	2301      	movs	r3, #1
 80013a8:	21fa      	movs	r1, #250	; 0xfa
 80013aa:	0089      	lsls	r1, r1, #2
 80013ac:	9101      	str	r1, [sp, #4]
 80013ae:	e004      	b.n	80013ba <get_koef_temper_conc+0x5e>
		find_temper = TRUE;
 80013b0:	2301      	movs	r3, #1
 80013b2:	4699      	mov	r9, r3
 80013b4:	e7f6      	b.n	80013a4 <get_koef_temper_conc+0x48>
	for(i = 1; (i < 7) && (!find_temper) && (!find_null); i++){
 80013b6:	3301      	adds	r3, #1
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d81d      	bhi.n	80013fa <get_koef_temper_conc+0x9e>
 80013be:	4649      	mov	r1, r9
 80013c0:	4339      	orrs	r1, r7
 80013c2:	d11a      	bne.n	80013fa <get_koef_temper_conc+0x9e>
		temper_1 = dev.Config.temp_corr_conc[i].Temp;
 80013c4:	491f      	ldr	r1, [pc, #124]	; (8001444 <get_koef_temper_conc+0xe8>)
 80013c6:	001a      	movs	r2, r3
 80013c8:	3218      	adds	r2, #24
 80013ca:	0092      	lsls	r2, r2, #2
 80013cc:	188a      	adds	r2, r1, r2
 80013ce:	2506      	movs	r5, #6
 80013d0:	5f56      	ldrsh	r6, [r2, r5]
		koef_1 = dev.Config.temp_corr_conc[i].Koef;
 80013d2:	8915      	ldrh	r5, [r2, #8]
		temper_2 = dev.Config.temp_corr_conc[i+1].Temp;
 80013d4:	001a      	movs	r2, r3
 80013d6:	3219      	adds	r2, #25
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	188a      	adds	r2, r1, r2
 80013dc:	2106      	movs	r1, #6
 80013de:	5e54      	ldrsh	r4, [r2, r1]
 80013e0:	46a4      	mov	ip, r4
		koef_2 = dev.Config.temp_corr_conc[i+1].Koef;
 80013e2:	8912      	ldrh	r2, [r2, #8]
		if(koef_2 == 0){
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	d101      	bne.n	80013ec <get_koef_temper_conc+0x90>
			temper_koef = koef_1 * K_MUL;
 80013e8:	9501      	str	r5, [sp, #4]
			find_null = TRUE;
 80013ea:	2701      	movs	r7, #1
		if((temperat >= temper_1) && (temperat <= temper_2))
 80013ec:	42b0      	cmp	r0, r6
 80013ee:	dbe2      	blt.n	80013b6 <get_koef_temper_conc+0x5a>
 80013f0:	4560      	cmp	r0, ip
 80013f2:	dce0      	bgt.n	80013b6 <get_koef_temper_conc+0x5a>
			find_temper = TRUE;
 80013f4:	2101      	movs	r1, #1
 80013f6:	4689      	mov	r9, r1
 80013f8:	e7dd      	b.n	80013b6 <get_koef_temper_conc+0x5a>

	}

	if(find_temper){
 80013fa:	464b      	mov	r3, r9
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00f      	beq.n	8001420 <get_koef_temper_conc+0xc4>

		dt = temperat - temper_1;
 8001400:	b2b6      	uxth	r6, r6
 8001402:	1b80      	subs	r0, r0, r6
 8001404:	b200      	sxth	r0, r0

		dt2 = temper_2 - temper_1;
 8001406:	4663      	mov	r3, ip
 8001408:	1b99      	subs	r1, r3, r6
 800140a:	b209      	sxth	r1, r1

		if(dt2 != 0){
 800140c:	2900      	cmp	r1, #0
 800140e:	d005      	beq.n	800141c <get_koef_temper_conc+0xc0>
			dk = (koef_2 - koef_1) * dt * K_MUL / dt2;
 8001410:	1b52      	subs	r2, r2, r5
 8001412:	4350      	muls	r0, r2
 8001414:	f7fe fe8a 	bl	800012c <__udivsi3>
		}else{
			dk = 0;
		}

		temper_koef =  (koef_1 * K_MUL) + dk;
 8001418:	182d      	adds	r5, r5, r0
 800141a:	e009      	b.n	8001430 <get_koef_temper_conc+0xd4>
			dk = 0;
 800141c:	2000      	movs	r0, #0
 800141e:	e7fb      	b.n	8001418 <get_koef_temper_conc+0xbc>

	}else if(find_null){
 8001420:	2f00      	cmp	r7, #0
 8001422:	d105      	bne.n	8001430 <get_koef_temper_conc+0xd4>

		temper_koef = koef_1 * K_MUL;
	}else if(temperat > temper_2){
 8001424:	4560      	cmp	r0, ip
 8001426:	dc09      	bgt.n	800143c <get_koef_temper_conc+0xe0>
 8001428:	9d01      	ldr	r5, [sp, #4]
 800142a:	e001      	b.n	8001430 <get_koef_temper_conc+0xd4>
		return temper_koef;
 800142c:	25fa      	movs	r5, #250	; 0xfa
 800142e:	00ad      	lsls	r5, r5, #2
		temper_koef = koef_2 * K_MUL;

	}

	return temper_koef;
}
 8001430:	0028      	movs	r0, r5
 8001432:	b003      	add	sp, #12
 8001434:	bcc0      	pop	{r6, r7}
 8001436:	46b9      	mov	r9, r7
 8001438:	46b0      	mov	r8, r6
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temper_koef = koef_2 * K_MUL;
 800143c:	0015      	movs	r5, r2
 800143e:	e7f7      	b.n	8001430 <get_koef_temper_conc+0xd4>
 8001440:	fffffda8 	.word	0xfffffda8
 8001444:	2000042c 	.word	0x2000042c

08001448 <LinearizKoef>:
	memset(dev.Config.linear,0,sizeof(dev.Config.linear));
#endif

}

uint16_t LinearizKoef(uint32_t value){
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	46ce      	mov	lr, r9
 800144c:	4647      	mov	r7, r8
 800144e:	b580      	push	{r7, lr}
 8001450:	b083      	sub	sp, #12
 8001452:	0004      	movs	r4, r0

	int16_t dt, dt2, val_1, val_2;
	int32_t dk;
	uint32_t koef_1, koef_2;

	val_1 = dev.Config.linear[0].Conc;
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <LinearizKoef+0xd4>)
 8001456:	2286      	movs	r2, #134	; 0x86
 8001458:	5e9d      	ldrsh	r5, [r3, r2]
	koef_1 = dev.Config.linear[0].Koef;
 800145a:	2288      	movs	r2, #136	; 0x88
 800145c:	5a98      	ldrh	r0, [r3, r2]
 800145e:	0006      	movs	r6, r0

	val_2 = dev.Config.linear[1].Conc;;
 8001460:	3202      	adds	r2, #2
 8001462:	5e99      	ldrsh	r1, [r3, r2]
 8001464:	468c      	mov	ip, r1
	koef_2 = dev.Config.linear[1].Koef;
 8001466:	228c      	movs	r2, #140	; 0x8c
 8001468:	5a9a      	ldrh	r2, [r3, r2]

	if(koef_1 == 0){
 800146a:	2800      	cmp	r0, #0
 800146c:	d052      	beq.n	8001514 <LinearizKoef+0xcc>

		return linear_koef;

	}

	if(koef_2 == 0){
 800146e:	2a00      	cmp	r2, #0
 8001470:	d041      	beq.n	80014f6 <LinearizKoef+0xae>

		return linear_koef;

	}

	if(value < val_1){
 8001472:	42a5      	cmp	r5, r4
 8001474:	d83f      	bhi.n	80014f6 <LinearizKoef+0xae>
		linear_koef = koef_1 * K_MUL;

		return linear_koef;
	}

	if((value >= val_1) && (value <= val_2))
 8001476:	42a1      	cmp	r1, r4
 8001478:	d207      	bcs.n	800148a <LinearizKoef+0x42>
	BOOL find_val = FALSE;
 800147a:	2300      	movs	r3, #0
 800147c:	4699      	mov	r9, r3
			linear_koef = koef_1 * K_MUL;
			find_null = TRUE;
		}

		if((value >= val_1) && (value <= val_2))
			find_val = TRUE;
 800147e:	2700      	movs	r7, #0
 8001480:	2301      	movs	r3, #1
 8001482:	21fa      	movs	r1, #250	; 0xfa
 8001484:	0089      	lsls	r1, r1, #2
 8001486:	9101      	str	r1, [sp, #4]
 8001488:	e004      	b.n	8001494 <LinearizKoef+0x4c>
		find_val = TRUE;
 800148a:	2301      	movs	r3, #1
 800148c:	4699      	mov	r9, r3
 800148e:	e7f6      	b.n	800147e <LinearizKoef+0x36>
	for(i = 1; (i < 7) && (!find_val) && (!find_null); i++){
 8001490:	3301      	adds	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	2b06      	cmp	r3, #6
 8001496:	d81d      	bhi.n	80014d4 <LinearizKoef+0x8c>
 8001498:	4649      	mov	r1, r9
 800149a:	4339      	orrs	r1, r7
 800149c:	d11a      	bne.n	80014d4 <LinearizKoef+0x8c>
		val_1 = dev.Config.linear[i].Conc;
 800149e:	491f      	ldr	r1, [pc, #124]	; (800151c <LinearizKoef+0xd4>)
 80014a0:	001a      	movs	r2, r3
 80014a2:	3220      	adds	r2, #32
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	188a      	adds	r2, r1, r2
 80014a8:	2606      	movs	r6, #6
 80014aa:	5f95      	ldrsh	r5, [r2, r6]
		koef_1 = dev.Config.linear[i].Koef;
 80014ac:	8916      	ldrh	r6, [r2, #8]
		val_2 = dev.Config.linear[i+1].Conc;
 80014ae:	001a      	movs	r2, r3
 80014b0:	3221      	adds	r2, #33	; 0x21
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	188a      	adds	r2, r1, r2
 80014b6:	2106      	movs	r1, #6
 80014b8:	5e50      	ldrsh	r0, [r2, r1]
 80014ba:	4684      	mov	ip, r0
		koef_2 = dev.Config.linear[i+1].Koef;
 80014bc:	8912      	ldrh	r2, [r2, #8]
		if(koef_2 == 0){
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d101      	bne.n	80014c6 <LinearizKoef+0x7e>
			linear_koef = koef_1 * K_MUL;
 80014c2:	9601      	str	r6, [sp, #4]
			find_null = TRUE;
 80014c4:	2701      	movs	r7, #1
		if((value >= val_1) && (value <= val_2))
 80014c6:	42a5      	cmp	r5, r4
 80014c8:	d8e2      	bhi.n	8001490 <LinearizKoef+0x48>
 80014ca:	45a4      	cmp	ip, r4
 80014cc:	d3e0      	bcc.n	8001490 <LinearizKoef+0x48>
			find_val = TRUE;
 80014ce:	2101      	movs	r1, #1
 80014d0:	4689      	mov	r9, r1
 80014d2:	e7dd      	b.n	8001490 <LinearizKoef+0x48>

	}

	if(find_val){
 80014d4:	464b      	mov	r3, r9
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d014      	beq.n	8001504 <LinearizKoef+0xbc>

		dt = value - val_1;
 80014da:	b2ad      	uxth	r5, r5
 80014dc:	1b60      	subs	r0, r4, r5
 80014de:	b200      	sxth	r0, r0

//		dk = (koef_2 - koef_1) * dt * K_MUL / (val_2 - val_1);

		dk = (koef_2 - koef_1) * dt * K_MUL;
 80014e0:	1b92      	subs	r2, r2, r6
 80014e2:	4350      	muls	r0, r2

		dt2 = val_2 - val_1;
 80014e4:	4663      	mov	r3, ip
 80014e6:	1b59      	subs	r1, r3, r5
 80014e8:	b209      	sxth	r1, r1

		if(dt2 != 0){
 80014ea:	2900      	cmp	r1, #0
 80014ec:	d008      	beq.n	8001500 <LinearizKoef+0xb8>
			dk /= dt2;
 80014ee:	f7fe fea7 	bl	8000240 <__divsi3>
		}else{
			dk = 0;
		}

		linear_koef =  (koef_1 * K_MUL) + dk;
 80014f2:	1836      	adds	r6, r6, r0
//	value_tmp += 500;
//	value_tmp /= 1000;



	return (uint16_t) linear_koef;
 80014f4:	b2b0      	uxth	r0, r6

}
 80014f6:	b003      	add	sp, #12
 80014f8:	bcc0      	pop	{r6, r7}
 80014fa:	46b9      	mov	r9, r7
 80014fc:	46b0      	mov	r8, r6
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dk = 0;
 8001500:	2000      	movs	r0, #0
 8001502:	e7f6      	b.n	80014f2 <LinearizKoef+0xaa>
	}else if(find_null){
 8001504:	2f00      	cmp	r7, #0
 8001506:	d1f5      	bne.n	80014f4 <LinearizKoef+0xac>
	}else if(value > val_2){
 8001508:	45a4      	cmp	ip, r4
 800150a:	d301      	bcc.n	8001510 <LinearizKoef+0xc8>
 800150c:	9e01      	ldr	r6, [sp, #4]
 800150e:	e7f1      	b.n	80014f4 <LinearizKoef+0xac>
		linear_koef = koef_2 * K_MUL;
 8001510:	0016      	movs	r6, r2
 8001512:	e7ef      	b.n	80014f4 <LinearizKoef+0xac>
		return linear_koef;
 8001514:	20fa      	movs	r0, #250	; 0xfa
 8001516:	0080      	lsls	r0, r0, #2
 8001518:	e7ed      	b.n	80014f6 <LinearizKoef+0xae>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	2000042c 	.word	0x2000042c

08001520 <SetGasValue>:

}

//==============================================================================

void SetGasValue(void){
 8001520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001522:	46c6      	mov	lr, r8
 8001524:	b500      	push	{lr}
	uint32_t koef_tc;

//	dev.RegInput.ADC_0 = dev.Config.CalibConcADC;
//	dev.RegInput.TempSensor = dev.Config.CalibConcTemper;

	if(dev.RegInput.ADC_0 > dev.Config.CalibZeroADC)
 8001526:	4a37      	ldr	r2, [pc, #220]	; (8001604 <SetGasValue+0xe4>)
 8001528:	2391      	movs	r3, #145	; 0x91
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	5ad3      	ldrh	r3, [r2, r3]
 800152e:	21dc      	movs	r1, #220	; 0xdc
 8001530:	5a52      	ldrh	r2, [r2, r1]
 8001532:	4293      	cmp	r3, r2
 8001534:	d95e      	bls.n	80015f4 <SetGasValue+0xd4>
		adc = dev.RegInput.ADC_0 - dev.Config.CalibZeroADC;
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	4698      	mov	r8, r3
	else
		adc = 0;
	  

	if((dev.Config.CalibConcADC - dev.Config.CalibZeroADC) > 0){
 800153a:	4932      	ldr	r1, [pc, #200]	; (8001604 <SetGasValue+0xe4>)
 800153c:	23e0      	movs	r3, #224	; 0xe0
 800153e:	5ac9      	ldrh	r1, [r1, r3]
 8001540:	1a89      	subs	r1, r1, r2
 8001542:	2900      	cmp	r1, #0
 8001544:	dd59      	ble.n	80015fa <SetGasValue+0xda>
		k = dev.Config.ValueCalib  * 10000/ (dev.Config.CalibConcADC - dev.Config.CalibZeroADC);
 8001546:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <SetGasValue+0xe4>)
 8001548:	899b      	ldrh	r3, [r3, #12]
 800154a:	482f      	ldr	r0, [pc, #188]	; (8001608 <SetGasValue+0xe8>)
 800154c:	4358      	muls	r0, r3
 800154e:	f7fe fe77 	bl	8000240 <__divsi3>
	}
	else{
		k = 10000;
	}

	val = adc*k;
 8001552:	4643      	mov	r3, r8
 8001554:	4358      	muls	r0, r3
	val += 5000;
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <SetGasValue+0xec>)
 8001558:	469c      	mov	ip, r3
 800155a:	4460      	add	r0, ip
	val /= 10000;
 800155c:	492a      	ldr	r1, [pc, #168]	; (8001608 <SetGasValue+0xe8>)
 800155e:	f7fe fe6f 	bl	8000240 <__divsi3>
 8001562:	0006      	movs	r6, r0

//	dev.RegInput.Value_0 = val;

	kc = get_koef_temper_conc(dev.Config.CalibConcTemper);
 8001564:	4d27      	ldr	r5, [pc, #156]	; (8001604 <SetGasValue+0xe4>)
 8001566:	23de      	movs	r3, #222	; 0xde
 8001568:	5ee8      	ldrsh	r0, [r5, r3]
 800156a:	f7ff fef7 	bl	800135c <get_koef_temper_conc>
 800156e:	0004      	movs	r4, r0
	koef_tc = get_koef_temper_conc(dev.RegInput.TempSensor);
 8001570:	23fc      	movs	r3, #252	; 0xfc
 8001572:	5ee8      	ldrsh	r0, [r5, r3]
 8001574:	f7ff fef2 	bl	800135c <get_koef_temper_conc>
 8001578:	0005      	movs	r5, r0

	//t_shift_c = get_temp_zero_shift(dev.Config.CalibZeroTemper);
	//t_shift   = get_temp_zero_shift(dev.RegInput.TempSensor);

	val *= kc;
 800157a:	4374      	muls	r4, r6

	val0 = val;
	val0 += 500;
 800157c:	0020      	movs	r0, r4
 800157e:	30f5      	adds	r0, #245	; 0xf5
 8001580:	30ff      	adds	r0, #255	; 0xff
	val0 /= 1000;
 8001582:	21fa      	movs	r1, #250	; 0xfa
 8001584:	0089      	lsls	r1, r1, #2
 8001586:	f7fe fe5b 	bl	8000240 <__divsi3>

	//val0 += t_shift_c;

	dev.RegInput.Value_0 = (val0 >= 0)? val0: 0;
 800158a:	2800      	cmp	r0, #0
 800158c:	db37      	blt.n	80015fe <SetGasValue+0xde>
 800158e:	4f1d      	ldr	r7, [pc, #116]	; (8001604 <SetGasValue+0xe4>)
 8001590:	2390      	movs	r3, #144	; 0x90
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	52f8      	strh	r0, [r7, r3]

	val += (koef_tc >> 1);
 8001596:	086e      	lsrs	r6, r5, #1
 8001598:	19a0      	adds	r0, r4, r6
	val /= koef_tc;
 800159a:	0029      	movs	r1, r5
 800159c:	f7fe fdc6 	bl	800012c <__udivsi3>
 80015a0:	0004      	movs	r4, r0
	//val = (val > 0)? val: 0;

	uint32_t lin_val;
	uint16_t koef_lin;

	koef_lin = LinearizKoef(val);
 80015a2:	f7ff ff51 	bl	8001448 <LinearizKoef>

	//koef_lin = 1000; // Линеаризация отключена

	lin_val = val * koef_lin;
 80015a6:	4360      	muls	r0, r4
	lin_val = (lin_val + 500) / 1000;
 80015a8:	30f5      	adds	r0, #245	; 0xf5
 80015aa:	30ff      	adds	r0, #255	; 0xff
 80015ac:	21fa      	movs	r1, #250	; 0xfa
 80015ae:	0089      	lsls	r1, r1, #2
 80015b0:	f7fe fdbc 	bl	800012c <__udivsi3>

	dev.RegInput.Value = lin_val;
 80015b4:	b284      	uxth	r4, r0
 80015b6:	23f6      	movs	r3, #246	; 0xf6
 80015b8:	52fc      	strh	r4, [r7, r3]

	val = 1000 * adc;
 80015ba:	4643      	mov	r3, r8
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	4642      	mov	r2, r8
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4443      	add	r3, r8
 80015c6:	00d8      	lsls	r0, r3, #3
	val += (koef_tc >> 1);
 80015c8:	1830      	adds	r0, r6, r0
	val /= koef_tc;
 80015ca:	0029      	movs	r1, r5
 80015cc:	f7fe fdae 	bl	800012c <__udivsi3>

	dev.RegInput.ADC_TK = val;
 80015d0:	2392      	movs	r3, #146	; 0x92
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	52f8      	strh	r0, [r7, r3]
	d_printf("ADC: %04d, ADC_TK %04d", adc, dev.RegInput.ADC_TK);
//	d_printf("\n\r");
//	d_printf("Val: %04d, Val_0 %04d", dev.RegInput.Value,dev.RegInput.Value_0);
#endif

	if(arh.ValueMax < dev.RegInput.Value)
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <SetGasValue+0xf0>)
 80015d8:	889b      	ldrh	r3, [r3, #4]
 80015da:	429c      	cmp	r4, r3
 80015dc:	d901      	bls.n	80015e2 <SetGasValue+0xc2>
		arh.ValueMax = dev.RegInput.Value;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <SetGasValue+0xf0>)
 80015e0:	809c      	strh	r4, [r3, #4]

	if(arh.ValueMin > dev.RegInput.Value)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <SetGasValue+0xf0>)
 80015e4:	88db      	ldrh	r3, [r3, #6]
 80015e6:	429c      	cmp	r4, r3
 80015e8:	d201      	bcs.n	80015ee <SetGasValue+0xce>
		arh.ValueMin = dev.RegInput.Value;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <SetGasValue+0xf0>)
 80015ec:	80dc      	strh	r4, [r3, #6]

}
 80015ee:	bc80      	pop	{r7}
 80015f0:	46b8      	mov	r8, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adc = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	4698      	mov	r8, r3
 80015f8:	e79f      	b.n	800153a <SetGasValue+0x1a>
		k = 10000;
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <SetGasValue+0xe8>)
 80015fc:	e7a9      	b.n	8001552 <SetGasValue+0x32>
	dev.RegInput.Value_0 = (val0 >= 0)? val0: 0;
 80015fe:	2000      	movs	r0, #0
 8001600:	e7c5      	b.n	800158e <SetGasValue+0x6e>
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	2000042c 	.word	0x2000042c
 8001608:	00002710 	.word	0x00002710
 800160c:	00001388 	.word	0x00001388
 8001610:	200000a8 	.word	0x200000a8

08001614 <debug_init>:
#define TX_BUF_SIZE 256

uint8_t tx_buffer[TX_BUF_SIZE];
ring_buffer dbg_ring_buff_tx;

void debug_init(void){
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	b086      	sub	sp, #24

  DBGMCU->CR |= DBGMCU_CR_DBG_SLEEP;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <debug_init+0x58>)
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	2101      	movs	r1, #1
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STOP;
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2002      	movs	r0, #2
 8001626:	4302      	orrs	r2, r0
 8001628:	605a      	str	r2, [r3, #4]
  DBGMCU->CR |= DBGMCU_CR_DBG_STANDBY;
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	3002      	adds	r0, #2
 800162e:	4302      	orrs	r2, r0
 8001630:	605a      	str	r2, [r3, #4]
}

static inline ring_buffer ring_buffer_init(uint8_t *buffer, uint16_t size)
{
  ring_buffer ring;
  ring.write_offset = 0;
 8001632:	466a      	mov	r2, sp
 8001634:	2300      	movs	r3, #0
 8001636:	8013      	strh	r3, [r2, #0]
  ring.read_offset = 0;
 8001638:	8053      	strh	r3, [r2, #2]
  ring.size = size;
 800163a:	3301      	adds	r3, #1
 800163c:	33ff      	adds	r3, #255	; 0xff
 800163e:	8093      	strh	r3, [r2, #4]
  ring.buffer = buffer;
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <debug_init+0x5c>)
 8001642:	6093      	str	r3, [r2, #8]
  return ring;
 8001644:	ab03      	add	r3, sp, #12
 8001646:	0018      	movs	r0, r3
 8001648:	ca70      	ldmia	r2!, {r4, r5, r6}
 800164a:	c070      	stmia	r0!, {r4, r5, r6}

  dbg_ring_buff_tx = ring_buffer_init(tx_buffer, TX_BUF_SIZE);
 800164c:	4a09      	ldr	r2, [pc, #36]	; (8001674 <debug_init+0x60>)
 800164e:	cb31      	ldmia	r3!, {r0, r4, r5}
 8001650:	c231      	stmia	r2!, {r0, r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001652:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001656:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <debug_init+0x64>)
 800165c:	6813      	ldr	r3, [r2, #0]
 800165e:	311f      	adds	r1, #31
 8001660:	430b      	orrs	r3, r1
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	f380 8810 	msr	PRIMASK, r0

  LL_LPUART_EnableIT_RXNE(DBG_UART);

}
 8001668:	b006      	add	sp, #24
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	40015800 	.word	0x40015800
 8001670:	200000c4 	.word	0x200000c4
 8001674:	200000b8 	.word	0x200000b8
 8001678:	40004400 	.word	0x40004400

0800167c <d_printf>:

void d_printf(const char *format, ...){
 800167c:	b40f      	push	{r0, r1, r2, r3}
 800167e:	b530      	push	{r4, r5, lr}
 8001680:	b0af      	sub	sp, #188	; 0xbc
 8001682:	ab32      	add	r3, sp, #200	; 0xc8
 8001684:	cb04      	ldmia	r3!, {r2}

  //return;

  va_list args;

  va_start(args, format);
 8001686:	9300      	str	r3, [sp, #0]
  vsnprintf((char*)aString,180,format,args);
 8001688:	21b4      	movs	r1, #180	; 0xb4
 800168a:	a801      	add	r0, sp, #4
 800168c:	f001 ffca 	bl	8003624 <vsniprintf>
  va_end(args);

  len = strlen((char*)aString);
 8001690:	a801      	add	r0, sp, #4
 8001692:	f7fe fd39 	bl	8000108 <strlen>
 8001696:	b2c0      	uxtb	r0, r0

  for(uint16_t i=0;i<len;i++)
 8001698:	2200      	movs	r2, #0
 800169a:	e004      	b.n	80016a6 <d_printf+0x2a>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800169c:	2300      	movs	r3, #0
}

static inline void ring_buffer_put(ring_buffer *ring, uint8_t data)
{
  ring->buffer[ring->write_offset] = data;
  ring->write_offset = ring_buffer_get_next_write(ring);
 800169e:	4913      	ldr	r1, [pc, #76]	; (80016ec <d_printf+0x70>)
 80016a0:	800b      	strh	r3, [r1, #0]
 80016a2:	3201      	adds	r2, #1
 80016a4:	b292      	uxth	r2, r2
 80016a6:	b283      	uxth	r3, r0
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d90e      	bls.n	80016ca <d_printf+0x4e>
    ring_buffer_put(&dbg_ring_buff_tx,aString[i]);
 80016ac:	ab01      	add	r3, sp, #4
 80016ae:	5c9c      	ldrb	r4, [r3, r2]
  ring->buffer[ring->write_offset] = data;
 80016b0:	490e      	ldr	r1, [pc, #56]	; (80016ec <d_printf+0x70>)
 80016b2:	880b      	ldrh	r3, [r1, #0]
 80016b4:	688d      	ldr	r5, [r1, #8]
 80016b6:	54ec      	strb	r4, [r5, r3]
  return get_next(ring->write_offset, ring->size);
 80016b8:	880b      	ldrh	r3, [r1, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	8889      	ldrh	r1, [r1, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 80016be:	3901      	subs	r1, #1
 80016c0:	428b      	cmp	r3, r1
 80016c2:	d0eb      	beq.n	800169c <d_printf+0x20>
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	e7e9      	b.n	800169e <d_printf+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ce:	2301      	movs	r3, #1
 80016d0:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 80016d4:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <d_printf+0x74>)
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	2080      	movs	r0, #128	; 0x80
 80016da:	4303      	orrs	r3, r0
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	f381 8810 	msr	PRIMASK, r1

  LL_LPUART_EnableIT_TXE(DBG_UART);


}
 80016e2:	b02f      	add	sp, #188	; 0xbc
 80016e4:	bc30      	pop	{r4, r5}
 80016e6:	bc08      	pop	{r3}
 80016e8:	b004      	add	sp, #16
 80016ea:	4718      	bx	r3
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	40004400 	.word	0x40004400

080016f4 <Debug_TXEmpty_Callback>:
  return (ring->read_offset == ring->write_offset);
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <Debug_TXEmpty_Callback+0x50>)
 80016f6:	885a      	ldrh	r2, [r3, #2]
 80016f8:	b292      	uxth	r2, r2
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
	}
}

void Debug_TXEmpty_Callback(void){

  if(ring_buffer_is_empty(&dbg_ring_buff_tx))
 80016fe:	429a      	cmp	r2, r3
 8001700:	d010      	beq.n	8001724 <Debug_TXEmpty_Callback+0x30>
  uint8_t data = ring->buffer[ring->read_offset];
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <Debug_TXEmpty_Callback+0x50>)
 8001704:	8853      	ldrh	r3, [r2, #2]
 8001706:	6891      	ldr	r1, [r2, #8]
 8001708:	5cc9      	ldrb	r1, [r1, r3]
  return get_next(ring->read_offset, ring->size);
 800170a:	8853      	ldrh	r3, [r2, #2]
 800170c:	b29b      	uxth	r3, r3
 800170e:	8892      	ldrh	r2, [r2, #4]
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 8001710:	3a01      	subs	r2, #1
 8001712:	4293      	cmp	r3, r2
 8001714:	d013      	beq.n	800173e <Debug_TXEmpty_Callback+0x4a>
 8001716:	3301      	adds	r3, #1
 8001718:	b29b      	uxth	r3, r3
  ring->read_offset = ring_buffer_get_next_read(ring);
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <Debug_TXEmpty_Callback+0x50>)
 800171c:	8053      	strh	r3, [r2, #2]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <Debug_TXEmpty_Callback+0x54>)
 8001720:	6299      	str	r1, [r3, #40]	; 0x28

  }else{
    LL_LPUART_TransmitData8(DBG_UART,ring_buffer_get(&dbg_ring_buff_tx));
  }

}
 8001722:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001724:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001728:	2301      	movs	r3, #1
 800172a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TXEIE);
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <Debug_TXEmpty_Callback+0x54>)
 8001730:	6813      	ldr	r3, [r2, #0]
 8001732:	2080      	movs	r0, #128	; 0x80
 8001734:	4383      	bics	r3, r0
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	f381 8810 	msr	PRIMASK, r1
}
 800173c:	e7f1      	b.n	8001722 <Debug_TXEmpty_Callback+0x2e>
  return (cur_offset == max_offset-1 ? 0 : cur_offset + 1);
 800173e:	2300      	movs	r3, #0
 8001740:	e7eb      	b.n	800171a <Debug_TXEmpty_Callback+0x26>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	200000b8 	.word	0x200000b8
 8001748:	40004400 	.word	0x40004400

0800174c <Debug_RXNEmpty_Callback>:
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <Debug_RXNEmpty_Callback+0xc>)
 800174e:	6a5a      	ldr	r2, [r3, #36]	; 0x24

uint8_t dbg_cmd;

void Debug_RXNEmpty_Callback(void){

	dbg_cmd = LL_LPUART_ReceiveData8(DBG_UART);
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <Debug_RXNEmpty_Callback+0x10>)
 8001752:	701a      	strb	r2, [r3, #0]

//	debugMenu(dbg_cmd);
}
 8001754:	4770      	bx	lr
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40004400 	.word	0x40004400
 800175c:	200000b4 	.word	0x200000b4

08001760 <Debug_UART_IRQHandler>:
void Debug_UART_IRQHandler(void){
 8001760:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	d505      	bpl.n	8001776 <Debug_UART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	d501      	bpl.n	8001776 <Debug_UART_IRQHandler+0x16>
		Debug_TXEmpty_Callback();
 8001772:	f7ff ffbf 	bl	80016f4 <Debug_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	069b      	lsls	r3, r3, #26
 800177c:	d505      	bpl.n	800178a <Debug_UART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	069b      	lsls	r3, r3, #26
 8001784:	d501      	bpl.n	800178a <Debug_UART_IRQHandler+0x2a>
		Debug_RXNEmpty_Callback();
 8001786:	f7ff ffe1 	bl	800174c <Debug_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	071b      	lsls	r3, r3, #28
 8001790:	d502      	bpl.n	8001798 <Debug_UART_IRQHandler+0x38>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001792:	4b02      	ldr	r3, [pc, #8]	; (800179c <Debug_UART_IRQHandler+0x3c>)
 8001794:	2208      	movs	r2, #8
 8001796:	621a      	str	r2, [r3, #32]
}
 8001798:	bd10      	pop	{r4, pc}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	40004400 	.word	0x40004400

080017a0 <EEPROM_WaitEOP>:
// Ожидание завершения операции (стирание или записи) EEPROM с таймаутом
//
void EEPROM_WaitEOP(){

	// Таймаут 10 мсек
	uint32_t Timeout = 10;
 80017a0:	220a      	movs	r2, #10

	while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <EEPROM_WaitEOP+0x24>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	079b      	lsls	r3, r3, #30
 80017a8:	d408      	bmi.n	80017bc <EEPROM_WaitEOP+0x1c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <EEPROM_WaitEOP+0x28>)
 80017ac:	681b      	ldr	r3, [r3, #0]

		if (LL_SYSTICK_IsActiveCounterFlag())
 80017ae:	03db      	lsls	r3, r3, #15
 80017b0:	d5f7      	bpl.n	80017a2 <EEPROM_WaitEOP+0x2>
		{
			if(Timeout-- == 0)
 80017b2:	1e53      	subs	r3, r2, #1
 80017b4:	2a00      	cmp	r2, #0
 80017b6:	d004      	beq.n	80017c2 <EEPROM_WaitEOP+0x22>
 80017b8:	001a      	movs	r2, r3
 80017ba:	e7f2      	b.n	80017a2 <EEPROM_WaitEOP+0x2>
			}
		}

	}

	FLASH->SR = FLASH_SR_EOP;
 80017bc:	4b01      	ldr	r3, [pc, #4]	; (80017c4 <EEPROM_WaitEOP+0x24>)
 80017be:	2202      	movs	r2, #2
 80017c0:	619a      	str	r2, [r3, #24]

}
 80017c2:	4770      	bx	lr
 80017c4:	40022000 	.word	0x40022000
 80017c8:	e000e010 	.word	0xe000e010

080017cc <writeWordToEEPROM>:

void writeWordToEEPROM(uint16_t address, uint32_t data) {
 80017cc:	b510      	push	{r4, lr}

	if(*(__IO uint32_t *) (EEPROM_BASE_ADR + address) != data){
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <writeWordToEEPROM+0x18>)
 80017d0:	469c      	mov	ip, r3
 80017d2:	4460      	add	r0, ip
 80017d4:	6803      	ldr	r3, [r0, #0]
 80017d6:	428b      	cmp	r3, r1
 80017d8:	d100      	bne.n	80017dc <writeWordToEEPROM+0x10>

		EEPROM_WaitEOP();

	}

}
 80017da:	bd10      	pop	{r4, pc}
		*(__IO uint32_t *) (EEPROM_BASE_ADR + address) = data;
 80017dc:	6001      	str	r1, [r0, #0]
		EEPROM_WaitEOP();
 80017de:	f7ff ffdf 	bl	80017a0 <EEPROM_WaitEOP>
}
 80017e2:	e7fa      	b.n	80017da <writeWordToEEPROM+0xe>
 80017e4:	08080000 	.word	0x08080000

080017e8 <write_mem_to_eeprom>:

void write_mem_to_eeprom(uint16_t address, uint32_t *ptr, uint8_t len){
 80017e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ea:	0007      	movs	r7, r0
 80017ec:	000e      	movs	r6, r1
 80017ee:	0015      	movs	r5, r2

	int i;

	for(i=0;i<len;i++){
 80017f0:	2400      	movs	r4, #0
 80017f2:	e006      	b.n	8001802 <write_mem_to_eeprom+0x1a>

		writeWordToEEPROM(address + i*4, ptr[i]);
 80017f4:	00a3      	lsls	r3, r4, #2
 80017f6:	58f1      	ldr	r1, [r6, r3]
 80017f8:	18f8      	adds	r0, r7, r3
 80017fa:	b280      	uxth	r0, r0
 80017fc:	f7ff ffe6 	bl	80017cc <writeWordToEEPROM>
	for(i=0;i<len;i++){
 8001800:	3401      	adds	r4, #1
 8001802:	42a5      	cmp	r5, r4
 8001804:	dcf6      	bgt.n	80017f4 <write_mem_to_eeprom+0xc>

	}

}
 8001806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001808 <eeprom_config_write_bank>:

void eeprom_config_write_bank(uint8_t bank){
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	0004      	movs	r4, r0

	dev.Config.crc = CalcCRC((uint32_t*)&dev.Config,(sizeof(Config_td)/4)-1);
 800180c:	4e0e      	ldr	r6, [pc, #56]	; (8001848 <eeprom_config_write_bank+0x40>)
 800180e:	213a      	movs	r1, #58	; 0x3a
 8001810:	0030      	movs	r0, r6
 8001812:	f7fe fffb 	bl	800080c <CalcCRC>
 8001816:	23e8      	movs	r3, #232	; 0xe8
 8001818:	50f0      	str	r0, [r6, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800181a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800181e:	b672      	cpsid	i

	__enter_critical();

	FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8001820:	4d0a      	ldr	r5, [pc, #40]	; (800184c <eeprom_config_write_bank+0x44>)
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <eeprom_config_write_bank+0x48>)
 8001824:	60ea      	str	r2, [r5, #12]
	FLASH->PEKEYR = (uint32_t) 0x02030405U;
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <eeprom_config_write_bank+0x4c>)
 8001828:	60ea      	str	r2, [r5, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182a:	f383 8810 	msr	PRIMASK, r3

	__exit_critical();

	write_mem_to_eeprom(EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * bank,
 800182e:	20ec      	movs	r0, #236	; 0xec
 8001830:	4360      	muls	r0, r4
 8001832:	b280      	uxth	r0, r0
 8001834:	223b      	movs	r2, #59	; 0x3b
 8001836:	0031      	movs	r1, r6
 8001838:	f7ff ffd6 	bl	80017e8 <write_mem_to_eeprom>
			(uint32_t*)&dev.Config,sizeof(Config_td)/4);


	SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800183c:	686b      	ldr	r3, [r5, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	4313      	orrs	r3, r2
 8001842:	606b      	str	r3, [r5, #4]

}
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	2000042c 	.word	0x2000042c
 800184c:	40022000 	.word	0x40022000
 8001850:	89abcdef 	.word	0x89abcdef
 8001854:	02030405 	.word	0x02030405

08001858 <eeprom_config_write>:

void eeprom_config_write(void) {
 8001858:	b510      	push	{r4, lr}

	dev.Config.Counter++;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <eeprom_config_write+0x2c>)
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	6013      	str	r3, [r2, #0]

	d_printf("\n\r");
 8001862:	4809      	ldr	r0, [pc, #36]	; (8001888 <eeprom_config_write+0x30>)
 8001864:	f7ff ff0a 	bl	800167c <d_printf>
	eeprom_config_write_bank(nConfigBank);
 8001868:	4c08      	ldr	r4, [pc, #32]	; (800188c <eeprom_config_write+0x34>)
 800186a:	7820      	ldrb	r0, [r4, #0]
 800186c:	f7ff ffcc 	bl	8001808 <eeprom_config_write_bank>
	d_printf("Config write");
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <eeprom_config_write+0x38>)
 8001872:	f7ff ff03 	bl	800167c <d_printf>

	f_AdcDataBad = TRUE;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <eeprom_config_write+0x3c>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]

	nConfigBank ^= 1;
 800187c:	7823      	ldrb	r3, [r4, #0]
 800187e:	4053      	eors	r3, r2
 8001880:	7023      	strb	r3, [r4, #0]


}
 8001882:	bd10      	pop	{r4, pc}
 8001884:	2000042c 	.word	0x2000042c
 8001888:	08003f08 	.word	0x08003f08
 800188c:	200001c4 	.word	0x200001c4
 8001890:	08003f30 	.word	0x08003f30
 8001894:	2000055d 	.word	0x2000055d

08001898 <factory_config_write>:
}

//==============================================================================
// Запись заводских настроек во FLASH
//
void factory_config_write(void){
 8001898:	b510      	push	{r4, lr}

	eeprom_config_write_bank(2);
 800189a:	2002      	movs	r0, #2
 800189c:	f7ff ffb4 	bl	8001808 <eeprom_config_write_bank>

	d_printf("\n\rFactory config write");
 80018a0:	4801      	ldr	r0, [pc, #4]	; (80018a8 <factory_config_write+0x10>)
 80018a2:	f7ff feeb 	bl	800167c <d_printf>

}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	08003f40 	.word	0x08003f40

080018ac <factory_config_read>:

//==============================================================================
// Чтение заводских настроек из FLASH
//
BOOL factory_config_read(void){
 80018ac:	b510      	push	{r4, lr}
 80018ae:	b0bc      	sub	sp, #240	; 0xf0

	uint32_t tmp;

	// Чтение заводских настроек во временную структуру

	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 80018b0:	2300      	movs	r3, #0
 80018b2:	e007      	b.n	80018c4 <factory_config_read+0x18>

		((uint32_t*) &ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + EEPROM_CONFIG_LEN * 2 + (i * 4)));
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4919      	ldr	r1, [pc, #100]	; (800191c <factory_config_read+0x70>)
 80018b8:	1859      	adds	r1, r3, r1
 80018ba:	6808      	ldr	r0, [r1, #0]
 80018bc:	a901      	add	r1, sp, #4
 80018be:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < EEPROM_CONFIG_LEN / 4; i ++){
 80018c0:	3201      	adds	r2, #1
 80018c2:	b253      	sxtb	r3, r2
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	2a3a      	cmp	r2, #58	; 0x3a
 80018c8:	d9f4      	bls.n	80018b4 <factory_config_read+0x8>
	}

	// Проверка CRC

	crc = CalcCRC((uint32_t*)&ConfigTmp, (EEPROM_CONFIG_LEN/4)-1);
 80018ca:	213a      	movs	r1, #58	; 0x3a
 80018cc:	a801      	add	r0, sp, #4
 80018ce:	f7fe ff9d 	bl	800080c <CalcCRC>

	if( ConfigTmp.crc != crc){
 80018d2:	23e8      	movs	r3, #232	; 0xe8
 80018d4:	466a      	mov	r2, sp
 80018d6:	3204      	adds	r2, #4
 80018d8:	58d3      	ldr	r3, [r2, r3]
 80018da:	4283      	cmp	r3, r0
 80018dc:	d006      	beq.n	80018ec <factory_config_read+0x40>

		d_printf("\n\rNo Data Factory",0);
 80018de:	2100      	movs	r1, #0
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <factory_config_read+0x74>)
 80018e2:	f7ff fecb 	bl	800167c <d_printf>

		return FALSE;
 80018e6:	2000      	movs	r0, #0

	eeprom_config_write();

	return TRUE;

}
 80018e8:	b03c      	add	sp, #240	; 0xf0
 80018ea:	bd10      	pop	{r4, pc}
	d_printf("\n\rLoad Factory");
 80018ec:	480d      	ldr	r0, [pc, #52]	; (8001924 <factory_config_read+0x78>)
 80018ee:	f7ff fec5 	bl	800167c <d_printf>
	tmp = dev.Config.Counter;
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <factory_config_read+0x7c>)
 80018f4:	681c      	ldr	r4, [r3, #0]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 80018f6:	2300      	movs	r3, #0
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	2a3a      	cmp	r2, #58	; 0x3a
 80018fc:	d807      	bhi.n	800190e <factory_config_read+0x62>
		((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp)[i];
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	a901      	add	r1, sp, #4
 8001902:	58c8      	ldr	r0, [r1, r3]
 8001904:	4908      	ldr	r1, [pc, #32]	; (8001928 <factory_config_read+0x7c>)
 8001906:	50c8      	str	r0, [r1, r3]
	for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8001908:	3201      	adds	r2, #1
 800190a:	b253      	sxtb	r3, r2
 800190c:	e7f4      	b.n	80018f8 <factory_config_read+0x4c>
	dev.Config.Counter = tmp;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <factory_config_read+0x7c>)
 8001910:	601c      	str	r4, [r3, #0]
	eeprom_config_write();
 8001912:	f7ff ffa1 	bl	8001858 <eeprom_config_write>
	return TRUE;
 8001916:	2001      	movs	r0, #1
 8001918:	e7e6      	b.n	80018e8 <factory_config_read+0x3c>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	080801d8 	.word	0x080801d8
 8001920:	08003f58 	.word	0x08003f58
 8001924:	08003f6c 	.word	0x08003f6c
 8001928:	2000042c 	.word	0x2000042c

0800192c <read_config_from_eeprom>:
void read_config_from_eeprom(void){
 800192c:	b530      	push	{r4, r5, lr}
 800192e:	b0f9      	sub	sp, #484	; 0x1e4
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 8001930:	2300      	movs	r3, #0
 8001932:	e007      	b.n	8001944 <read_config_from_eeprom+0x18>
		((uint32_t*) ConfigTmp)[i] = (*(__IO uint32_t *) (EEPROM_BASE_ADR + EEPROM_CONFIG_ADDRESS + (i * 4)));
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4944      	ldr	r1, [pc, #272]	; (8001a48 <read_config_from_eeprom+0x11c>)
 8001938:	1859      	adds	r1, r3, r1
 800193a:	6808      	ldr	r0, [r1, #0]
 800193c:	a902      	add	r1, sp, #8
 800193e:	50c8      	str	r0, [r1, r3]
	for(int8_t i = 0; i < 2 * EEPROM_CONFIG_LEN / 4; i ++){
 8001940:	3201      	adds	r2, #1
 8001942:	b253      	sxtb	r3, r2
 8001944:	b2da      	uxtb	r2, r3
 8001946:	2a75      	cmp	r2, #117	; 0x75
 8001948:	d9f4      	bls.n	8001934 <read_config_from_eeprom+0x8>
	for(int8_t i = 0; i < 2; i++){
 800194a:	2400      	movs	r4, #0
 800194c:	e004      	b.n	8001958 <read_config_from_eeprom+0x2c>
			fValid[i] = TRUE;
 800194e:	ab01      	add	r3, sp, #4
 8001950:	2201      	movs	r2, #1
 8001952:	551a      	strb	r2, [r3, r4]
	for(int8_t i = 0; i < 2; i++){
 8001954:	3401      	adds	r4, #1
 8001956:	b264      	sxtb	r4, r4
 8001958:	2c01      	cmp	r4, #1
 800195a:	dc12      	bgt.n	8001982 <read_config_from_eeprom+0x56>
		crc = CalcCRC((uint32_t*)&ConfigTmp[i], (EEPROM_CONFIG_LEN/4)-1);
 800195c:	25ec      	movs	r5, #236	; 0xec
 800195e:	4365      	muls	r5, r4
 8001960:	ab02      	add	r3, sp, #8
 8001962:	1958      	adds	r0, r3, r5
 8001964:	213a      	movs	r1, #58	; 0x3a
 8001966:	f7fe ff51 	bl	800080c <CalcCRC>
		if( ConfigTmp[i].crc == crc){
 800196a:	ab02      	add	r3, sp, #8
 800196c:	469c      	mov	ip, r3
 800196e:	4465      	add	r5, ip
 8001970:	002b      	movs	r3, r5
 8001972:	33e8      	adds	r3, #232	; 0xe8
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4283      	cmp	r3, r0
 8001978:	d0e9      	beq.n	800194e <read_config_from_eeprom+0x22>
			fValid[i] = FALSE;
 800197a:	ab01      	add	r3, sp, #4
 800197c:	2200      	movs	r2, #0
 800197e:	551a      	strb	r2, [r3, r4]
 8001980:	e7e8      	b.n	8001954 <read_config_from_eeprom+0x28>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 8001982:	ab01      	add	r3, sp, #4
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d010      	beq.n	80019ac <read_config_from_eeprom+0x80>
	}else if((fValid[0] == FALSE) && (fValid[1] == TRUE)){
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <read_config_from_eeprom+0x6a>
 800198e:	aa01      	add	r2, sp, #4
 8001990:	7852      	ldrb	r2, [r2, #1]
 8001992:	2a01      	cmp	r2, #1
 8001994:	d01e      	beq.n	80019d4 <read_config_from_eeprom+0xa8>
		nConfigBank = 0;
 8001996:	4a2d      	ldr	r2, [pc, #180]	; (8001a4c <read_config_from_eeprom+0x120>)
 8001998:	2100      	movs	r1, #0
 800199a:	7011      	strb	r1, [r2, #0]
	if((fValid[0] == FALSE) && (fValid[1] == FALSE)){
 800199c:	2b00      	cmp	r3, #0
 800199e:	d132      	bne.n	8001a06 <read_config_from_eeprom+0xda>
 80019a0:	ab01      	add	r3, sp, #4
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d019      	beq.n	80019dc <read_config_from_eeprom+0xb0>
 80019a8:	2300      	movs	r3, #0
 80019aa:	e02d      	b.n	8001a08 <read_config_from_eeprom+0xdc>
	if((fValid[0] == TRUE) && (fValid[1] == TRUE)){
 80019ac:	aa01      	add	r2, sp, #4
 80019ae:	7852      	ldrb	r2, [r2, #1]
 80019b0:	2a01      	cmp	r2, #1
 80019b2:	d1ea      	bne.n	800198a <read_config_from_eeprom+0x5e>
		if(ConfigTmp[0].Counter < ConfigTmp[1].Counter){
 80019b4:	32eb      	adds	r2, #235	; 0xeb
 80019b6:	4669      	mov	r1, sp
 80019b8:	2008      	movs	r0, #8
 80019ba:	1809      	adds	r1, r1, r0
 80019bc:	588a      	ldr	r2, [r1, r2]
 80019be:	9902      	ldr	r1, [sp, #8]
 80019c0:	4291      	cmp	r1, r2
 80019c2:	d203      	bcs.n	80019cc <read_config_from_eeprom+0xa0>
			nConfigBank = 1;
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <read_config_from_eeprom+0x120>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	7011      	strb	r1, [r2, #0]
 80019ca:	e7e7      	b.n	800199c <read_config_from_eeprom+0x70>
			nConfigBank = 0;
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <read_config_from_eeprom+0x120>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	7011      	strb	r1, [r2, #0]
 80019d2:	e7e3      	b.n	800199c <read_config_from_eeprom+0x70>
		nConfigBank = 1;
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <read_config_from_eeprom+0x120>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	7011      	strb	r1, [r2, #0]
 80019da:	e7df      	b.n	800199c <read_config_from_eeprom+0x70>
		if(!factory_config_read()){
 80019dc:	f7ff ff66 	bl	80018ac <factory_config_read>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d129      	bne.n	8001a38 <read_config_from_eeprom+0x10c>
			dev_set_config_default();
 80019e4:	f000 fc6e 	bl	80022c4 <dev_set_config_default>
			d_printf("\n\r%SetDef",0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	4819      	ldr	r0, [pc, #100]	; (8001a50 <read_config_from_eeprom+0x124>)
 80019ec:	f7ff fe46 	bl	800167c <d_printf>
			nConfigBank = 0;
 80019f0:	4c16      	ldr	r4, [pc, #88]	; (8001a4c <read_config_from_eeprom+0x120>)
 80019f2:	2500      	movs	r5, #0
 80019f4:	7025      	strb	r5, [r4, #0]
			eeprom_config_write();
 80019f6:	f7ff ff2f 	bl	8001858 <eeprom_config_write>
			nConfigBank = 0;
 80019fa:	7025      	strb	r5, [r4, #0]
			ArhivStoreNote(ARCHIVE_SET_CONFIG_DEFAULT, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2009      	movs	r0, #9
 8001a00:	f000 f8e6 	bl	8001bd0 <ArhivStoreNote>
 8001a04:	e018      	b.n	8001a38 <read_config_from_eeprom+0x10c>
 8001a06:	2300      	movs	r3, #0
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	2a3a      	cmp	r2, #58	; 0x3a
 8001a0c:	d80d      	bhi.n	8001a2a <read_config_from_eeprom+0xfe>
			((uint32_t*) &dev.Config)[i] = ((uint32_t*)&ConfigTmp[nConfigBank])[i];
 8001a0e:	490f      	ldr	r1, [pc, #60]	; (8001a4c <read_config_from_eeprom+0x120>)
 8001a10:	7808      	ldrb	r0, [r1, #0]
 8001a12:	21ec      	movs	r1, #236	; 0xec
 8001a14:	4341      	muls	r1, r0
 8001a16:	a802      	add	r0, sp, #8
 8001a18:	4684      	mov	ip, r0
 8001a1a:	4461      	add	r1, ip
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	58c8      	ldr	r0, [r1, r3]
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <read_config_from_eeprom+0x128>)
 8001a22:	50c8      	str	r0, [r1, r3]
		for (int8_t i = 0; i < EEPROM_CONFIG_LEN/4; i ++) {
 8001a24:	3201      	adds	r2, #1
 8001a26:	b253      	sxtb	r3, r2
 8001a28:	e7ee      	b.n	8001a08 <read_config_from_eeprom+0xdc>
		d_printf("\n\rConfigBank-%d, CNT-%d", nConfigBank, dev.Config.Counter);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <read_config_from_eeprom+0x128>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <read_config_from_eeprom+0x120>)
 8001a30:	7819      	ldrb	r1, [r3, #0]
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <read_config_from_eeprom+0x12c>)
 8001a34:	f7ff fe22 	bl	800167c <d_printf>
	nConfigBank ^= 1;
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <read_config_from_eeprom+0x120>)
 8001a3a:	7813      	ldrb	r3, [r2, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	404b      	eors	r3, r1
 8001a40:	7013      	strb	r3, [r2, #0]
}
 8001a42:	b079      	add	sp, #484	; 0x1e4
 8001a44:	bd30      	pop	{r4, r5, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	08080000 	.word	0x08080000
 8001a4c:	200001c4 	.word	0x200001c4
 8001a50:	08003f7c 	.word	0x08003f7c
 8001a54:	2000042c 	.word	0x2000042c
 8001a58:	08003f88 	.word	0x08003f88

08001a5c <FLASH_UNLOCK>:
//=============================================================================
// Снятие блокировки FLASH для стирания и записи
//
void FLASH_UNLOCK(void){

  FLASH->PEKEYR = (uint32_t) 0x89ABCDEFU;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <FLASH_UNLOCK+0x44>)
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <FLASH_UNLOCK+0x48>)
 8001a60:	60da      	str	r2, [r3, #12]
  FLASH->PEKEYR = (uint32_t) 0x02030405U;
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <FLASH_UNLOCK+0x4c>)
 8001a64:	60da      	str	r2, [r3, #12]

  if(READ_BIT(FLASH->PECR, FLASH_PECR_PELOCK)){
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	07db      	lsls	r3, r3, #31
 8001a6a:	d509      	bpl.n	8001a80 <FLASH_UNLOCK+0x24>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a6c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <FLASH_UNLOCK+0x44>)
 8001a74:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <FLASH_UNLOCK+0x48>)
 8001a76:	60d9      	str	r1, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8001a78:	490b      	ldr	r1, [pc, #44]	; (8001aa8 <FLASH_UNLOCK+0x4c>)
 8001a7a:	60d9      	str	r1, [r3, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a7c:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

  if (READ_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK)){
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <FLASH_UNLOCK+0x44>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	079b      	lsls	r3, r3, #30
 8001a86:	d509      	bpl.n	8001a9c <FLASH_UNLOCK+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a88:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i

    __enter_critical();

    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <FLASH_UNLOCK+0x44>)
 8001a90:	4906      	ldr	r1, [pc, #24]	; (8001aac <FLASH_UNLOCK+0x50>)
 8001a92:	6119      	str	r1, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);
 8001a94:	4906      	ldr	r1, [pc, #24]	; (8001ab0 <FLASH_UNLOCK+0x54>)
 8001a96:	6119      	str	r1, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a98:	f382 8810 	msr	PRIMASK, r2

    __exit_critical();

  }

}
 8001a9c:	4770      	bx	lr
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	89abcdef 	.word	0x89abcdef
 8001aa8:	02030405 	.word	0x02030405
 8001aac:	8c9daebf 	.word	0x8c9daebf
 8001ab0:	13141516 	.word	0x13141516

08001ab4 <FLASH_LOCK>:
//=============================================================================
// Восстановление блокировки FLASH
//
void FLASH_LOCK(void){

  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <FLASH_LOCK+0x14>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	3101      	adds	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]

}
 8001ac6:	4770      	bx	lr
 8001ac8:	40022000 	.word	0x40022000

08001acc <FlashWaitNoBSY>:
void FlashWaitNoBSY(void){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 8001acc:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_BSY) != 0){
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <FlashWaitNoBSY+0x20>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	07db      	lsls	r3, r3, #31
 8001ad4:	d508      	bpl.n	8001ae8 <FlashWaitNoBSY+0x1c>
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <FlashWaitNoBSY+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 8001ada:	03db      	lsls	r3, r3, #15
 8001adc:	d5f7      	bpl.n	8001ace <FlashWaitNoBSY+0x2>
    {
      if(Timeout-- == 0)
 8001ade:	1e53      	subs	r3, r2, #1
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	d001      	beq.n	8001ae8 <FlashWaitNoBSY+0x1c>
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	e7f2      	b.n	8001ace <FlashWaitNoBSY+0x2>

  }

//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 8001ae8:	4770      	bx	lr
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40022000 	.word	0x40022000
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <FlashWaitEOP>:
void FlashWaitEOP(){

//  LL_GPIO_SetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

  // Таймаут 10 мсек
  uint32_t Timeout = 10;
 8001af4:	220a      	movs	r2, #10

  while(READ_BIT(FLASH->SR,FLASH_SR_EOP) == 0){
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <FlashWaitEOP+0x24>)
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	079b      	lsls	r3, r3, #30
 8001afc:	d408      	bmi.n	8001b10 <FlashWaitEOP+0x1c>
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <FlashWaitEOP+0x28>)
 8001b00:	681b      	ldr	r3, [r3, #0]

    if (LL_SYSTICK_IsActiveCounterFlag())
 8001b02:	03db      	lsls	r3, r3, #15
 8001b04:	d5f7      	bpl.n	8001af6 <FlashWaitEOP+0x2>
    {
      if(Timeout-- == 0)
 8001b06:	1e53      	subs	r3, r2, #1
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d004      	beq.n	8001b16 <FlashWaitEOP+0x22>
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	e7f2      	b.n	8001af6 <FlashWaitEOP+0x2>
      }
    }

  }

  FLASH->SR = FLASH_SR_EOP;
 8001b10:	4b01      	ldr	r3, [pc, #4]	; (8001b18 <FlashWaitEOP+0x24>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	619a      	str	r2, [r3, #24]
//  LL_GPIO_ResetOutputPin(DBG_2_GPIO_Port, DBG_2_Pin);

}
 8001b16:	4770      	bx	lr
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <FlashPageErase>:

//=============================================================================
// Стирание страницы FLASH
//
void FlashPageErase(uint32_t *ptr){
 8001b20:	b570      	push	{r4, r5, r6, lr}

  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001b22:	4c0d      	ldr	r4, [pc, #52]	; (8001b58 <FlashPageErase+0x38>)
 8001b24:	6862      	ldr	r2, [r4, #4]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	6063      	str	r3, [r4, #4]

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001b2e:	6863      	ldr	r3, [r4, #4]
 8001b30:	2508      	movs	r5, #8
 8001b32:	432b      	orrs	r3, r5
 8001b34:	6063      	str	r3, [r4, #4]

  *(__IO uint32_t *)((uint32_t)ptr & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8001b36:	237f      	movs	r3, #127	; 0x7f
 8001b38:	4398      	bics	r0, r3
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6003      	str	r3, [r0, #0]

  FlashWaitNoBSY();
 8001b3e:	f7ff ffc5 	bl	8001acc <FlashWaitNoBSY>
  FlashWaitEOP();
 8001b42:	f7ff ffd7 	bl	8001af4 <FlashWaitEOP>


  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001b46:	6863      	ldr	r3, [r4, #4]
 8001b48:	43ab      	bics	r3, r5
 8001b4a:	6063      	str	r3, [r4, #4]

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8001b4c:	6863      	ldr	r3, [r4, #4]
 8001b4e:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <FlashPageErase+0x3c>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	6063      	str	r3, [r4, #4]

}
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40022000 	.word	0x40022000
 8001b5c:	fffffdff 	.word	0xfffffdff

08001b60 <FlashProgram>:
// stat - вид записи
// data - данные записи
// Возвращает TRUE, если FLASH не стёрта и записанные
// данные помечены как недействительные
//
BOOL FlashProgram(uint32_t *ptr, uint8_t stat, uint32_t data){
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	0004      	movs	r4, r0
 8001b64:	0015      	movs	r5, r2

  BOOL no_erase = FALSE;

  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <FlashProgram+0x68>)
 8001b68:	6853      	ldr	r3, [r2, #4]
 8001b6a:	2008      	movs	r0, #8
 8001b6c:	4303      	orrs	r3, r0
 8001b6e:	6053      	str	r3, [r2, #4]

  if(*(__IO uint32_t *)((uint32_t)ptr) == 0){
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d119      	bne.n	8001baa <FlashProgram+0x4a>
    *(__IO uint32_t *)((uint32_t)ptr) = ((stat & 0x7F) << 24) | (0xFFFFFF & arh.MHour);
 8001b76:	0609      	lsls	r1, r1, #24
 8001b78:	23fe      	movs	r3, #254	; 0xfe
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	4019      	ands	r1, r3
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <FlashProgram+0x6c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	4319      	orrs	r1, r3
 8001b88:	6021      	str	r1, [r4, #0]
  BOOL no_erase = FALSE;
 8001b8a:	2600      	movs	r6, #0
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001b8c:	f7ff ffb2 	bl	8001af4 <FlashWaitEOP>

  if(*(__IO uint32_t *)((uint32_t)ptr+4) == 0){
 8001b90:	6863      	ldr	r3, [r4, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d110      	bne.n	8001bb8 <FlashProgram+0x58>
    *(__IO uint32_t *)((uint32_t)ptr+4) = data;
 8001b96:	6065      	str	r5, [r4, #4]
    // Если FLASH не стерта пометить запись как недействительную
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
    no_erase = TRUE;
  }

  FlashWaitEOP();
 8001b98:	f7ff ffac 	bl	8001af4 <FlashWaitEOP>

  CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <FlashProgram+0x68>)
 8001b9e:	6853      	ldr	r3, [r2, #4]
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	438b      	bics	r3, r1
 8001ba4:	6053      	str	r3, [r2, #4]

  return no_erase;
}
 8001ba6:	0030      	movs	r0, r6
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8001baa:	6822      	ldr	r2, [r4, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 8001bb4:	2601      	movs	r6, #1
 8001bb6:	e7e9      	b.n	8001b8c <FlashProgram+0x2c>
    *(__IO uint32_t *)((uint32_t)ptr) |= (1<<31);
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	6023      	str	r3, [r4, #0]
    no_erase = TRUE;
 8001bc2:	2601      	movs	r6, #1
 8001bc4:	e7e8      	b.n	8001b98 <FlashProgram+0x38>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	200000a8 	.word	0x200000a8

08001bd0 <ArhivStoreNote>:
//=============================================================================
// Сохранение записи во FLASH
// stat - вид записи
// data - данные записи
//
void ArhivStoreNote(uint8_t stat, uint32_t data){
 8001bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd2:	0007      	movs	r7, r0
 8001bd4:	000e      	movs	r6, r1

  uint32_t *ptr;
  BOOL flg_no_erase;
  uint16_t write_cnt = 0;

  FLASH_UNLOCK();
 8001bd6:	f7ff ff41 	bl	8001a5c <FLASH_UNLOCK>
  uint16_t write_cnt = 0;
 8001bda:	2500      	movs	r5, #0
 8001bdc:	e00d      	b.n	8001bfa <ArhivStoreNote+0x2a>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;

    // Если указатель на начало страницы
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
//      DBG_OUT2_HI;
      FlashPageErase(ptr);
 8001bde:	0020      	movs	r0, r4
 8001be0:	f7ff ff9e 	bl	8001b20 <FlashPageErase>
 8001be4:	e012      	b.n	8001c0c <ArhivStoreNote+0x3c>
    }

    flg_no_erase = FlashProgram(ptr, stat, data);

    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 8001be6:	3301      	adds	r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <ArhivStoreNote+0x5c>)
 8001bec:	8113      	strh	r3, [r2, #8]

    write_cnt++;
 8001bee:	3501      	adds	r5, #1
 8001bf0:	b2ad      	uxth	r5, r5
    // Продолжать если была попытка записи в нестёртую ячейку и не превышен размер страницы
  }while((flg_no_erase == TRUE) && (write_cnt < (FLASH_PAGE_SIZE / ARHIV_SIZE_ITEM / 4)));
 8001bf2:	2801      	cmp	r0, #1
 8001bf4:	d116      	bne.n	8001c24 <ArhivStoreNote+0x54>
 8001bf6:	2d0f      	cmp	r5, #15
 8001bf8:	d814      	bhi.n	8001c24 <ArhivStoreNote+0x54>
    ptr = (uint32_t *) ARHIV_BASE_ADR + arh.ArhivPtr * ARHIV_SIZE_ITEM;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <ArhivStoreNote+0x5c>)
 8001bfc:	891c      	ldrh	r4, [r3, #8]
 8001bfe:	00e4      	lsls	r4, r4, #3
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <ArhivStoreNote+0x60>)
 8001c02:	469c      	mov	ip, r3
 8001c04:	4464      	add	r4, ip
    if(((uint32_t)ptr & (FLASH_PAGE_SIZE - 1)) == 0){
 8001c06:	237f      	movs	r3, #127	; 0x7f
 8001c08:	421c      	tst	r4, r3
 8001c0a:	d0e8      	beq.n	8001bde <ArhivStoreNote+0xe>
    flg_no_erase = FlashProgram(ptr, stat, data);
 8001c0c:	0032      	movs	r2, r6
 8001c0e:	0039      	movs	r1, r7
 8001c10:	0020      	movs	r0, r4
 8001c12:	f7ff ffa5 	bl	8001b60 <FlashProgram>
    arh.ArhivPtr = (arh.ArhivPtr < ARHIV_NUM_ITEMS - 1)? arh.ArhivPtr + 1: 0;
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <ArhivStoreNote+0x5c>)
 8001c18:	891b      	ldrh	r3, [r3, #8]
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <ArhivStoreNote+0x64>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d9e2      	bls.n	8001be6 <ArhivStoreNote+0x16>
 8001c20:	2300      	movs	r3, #0
 8001c22:	e7e2      	b.n	8001bea <ArhivStoreNote+0x1a>

  FLASH_LOCK();
 8001c24:	f7ff ff46 	bl	8001ab4 <FLASH_LOCK>

//  DBG_OUT2_LO;

  //	eeprom_config_write_sync();

}
 8001c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	200000a8 	.word	0x200000a8
 8001c30:	08006000 	.word	0x08006000
 8001c34:	000003fe 	.word	0x000003fe

08001c38 <modbus_init>:
uint8_t mbs_pkt_tx[MBS_TX_BUF_SIZE];


BOOL f_mbs_packet_rcv = FALSE;

void modbus_init(void){
 8001c38:	b510      	push	{r4, lr}

	mbs_rx_cnt = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <modbus_init+0x3c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c40:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c44:	2101      	movs	r1, #1
 8001c46:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <modbus_init+0x40>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2404      	movs	r4, #4
 8001c50:	4322      	orrs	r2, r4
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c58:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	341c      	adds	r4, #28
 8001c64:	4322      	orrs	r2, r4
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f380 8810 	msr	PRIMASK, r0
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

	LL_LPUART_EnableDirectionRx(MBS_LPUART);
	LL_LPUART_EnableIT_RXNE(MBS_LPUART);
	LL_LPUART_Enable(MBS_LPUART);

}
 8001c72:	bd10      	pop	{r4, pc}
 8001c74:	200003c8 	.word	0x200003c8
 8001c78:	40004800 	.word	0x40004800

08001c7c <Modbus_TO_timer>:

void Modbus_TO_timer(void){

	//memcpy(mbs_pkt_rx, mbs_buff_rx, mbs_rx_cnt);
	mbs_rx_pkt_len = mbs_rx_cnt;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <Modbus_TO_timer+0x14>)
 8001c7e:	8819      	ldrh	r1, [r3, #0]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <Modbus_TO_timer+0x18>)
 8001c82:	8011      	strh	r1, [r2, #0]

	mbs_rx_cnt = 0;
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
	f_mbs_packet_rcv = TRUE;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <Modbus_TO_timer+0x1c>)
 8001c8a:	3201      	adds	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]

}
 8001c8e:	4770      	bx	lr
 8001c90:	200003c8 	.word	0x200003c8
 8001c94:	200003ca 	.word	0x200003ca
 8001c98:	200001c5 	.word	0x200001c5

08001c9c <Modbus_RXNEmpty_Callback>:
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <Modbus_RXNEmpty_Callback+0x34>)
 8001c9e:	6a59      	ldr	r1, [r3, #36]	; 0x24

void Modbus_RXNEmpty_Callback(void){

	uint8_t tmp = LL_USART_ReceiveData8(MBS_LPUART);

	mbs_pkt_rx[mbs_rx_cnt] = tmp;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <Modbus_RXNEmpty_Callback+0x38>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <Modbus_RXNEmpty_Callback+0x3c>)
 8001ca6:	54d1      	strb	r1, [r2, r3]

	if(mbs_rx_cnt < (MBS_RX_BUF_SIZE-1)){
 8001ca8:	2bfe      	cmp	r3, #254	; 0xfe
 8001caa:	d802      	bhi.n	8001cb2 <Modbus_RXNEmpty_Callback+0x16>
		mbs_rx_cnt++;
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <Modbus_RXNEmpty_Callback+0x38>)
 8001cb0:	8013      	strh	r3, [r2, #0]
	}

	if(mbs_rx_cnt == 1){
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <Modbus_RXNEmpty_Callback+0x38>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d003      	beq.n	8001cc2 <Modbus_RXNEmpty_Callback+0x26>
		  LL_TIM_EnableCounter(TIM22);
	}

    TIM22->CNT = 0;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <Modbus_RXNEmpty_Callback+0x40>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001cc0:	4770      	bx	lr
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001cc2:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <Modbus_RXNEmpty_Callback+0x40>)
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	e7f5      	b.n	8001cba <Modbus_RXNEmpty_Callback+0x1e>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	40004800 	.word	0x40004800
 8001cd4:	200003c8 	.word	0x200003c8
 8001cd8:	200001c8 	.word	0x200001c8
 8001cdc:	40011400 	.word	0x40011400

08001ce0 <Modbus_TXEmpty_Callback>:

void Modbus_TXEmpty_Callback(void){
 8001ce0:	b510      	push	{r4, lr}

	if(mbs_tx_cnt < mbs_tx_len){
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <Modbus_TXEmpty_Callback+0x54>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <Modbus_TXEmpty_Callback+0x58>)
 8001ce8:	8812      	ldrh	r2, [r2, #0]
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d209      	bcs.n	8001d02 <Modbus_TXEmpty_Callback+0x22>

		LL_USART_TransmitData8(MBS_LPUART,mbs_pkt_tx[mbs_tx_cnt]);
 8001cee:	4913      	ldr	r1, [pc, #76]	; (8001d3c <Modbus_TXEmpty_Callback+0x5c>)
 8001cf0:	5cc8      	ldrb	r0, [r1, r3]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8001cf2:	4913      	ldr	r1, [pc, #76]	; (8001d40 <Modbus_TXEmpty_Callback+0x60>)
 8001cf4:	6288      	str	r0, [r1, #40]	; 0x28
		mbs_tx_cnt++;
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	490e      	ldr	r1, [pc, #56]	; (8001d34 <Modbus_TXEmpty_Callback+0x54>)
 8001cfc:	800b      	strh	r3, [r1, #0]

		if(mbs_tx_cnt == mbs_tx_len){
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d000      	beq.n	8001d04 <Modbus_TXEmpty_Callback+0x24>

		}

	}

}
 8001d02:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d08:	2101      	movs	r1, #1
 8001d0a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <Modbus_TXEmpty_Callback+0x60>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	2480      	movs	r4, #128	; 0x80
 8001d14:	43a2      	bics	r2, r4
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d1c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d20:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	313f      	adds	r1, #63	; 0x3f
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f380 8810 	msr	PRIMASK, r0
 8001d30:	e7e7      	b.n	8001d02 <Modbus_TXEmpty_Callback+0x22>
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	200003cc 	.word	0x200003cc
 8001d38:	200003ce 	.word	0x200003ce
 8001d3c:	200002c8 	.word	0x200002c8
 8001d40:	40004800 	.word	0x40004800

08001d44 <Modbus_LPUART_IRQHandler>:
void Modbus_LPUART_IRQHandler(void){
 8001d44:	b510      	push	{r4, lr}
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1UL : 0UL);
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	069b      	lsls	r3, r3, #26
 8001d4c:	d505      	bpl.n	8001d5a <Modbus_LPUART_IRQHandler+0x16>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	d501      	bpl.n	8001d5a <Modbus_LPUART_IRQHandler+0x16>
		Modbus_RXNEmpty_Callback();
 8001d56:	f7ff ffa1 	bl	8001c9c <Modbus_RXNEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1UL : 0UL);
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	061b      	lsls	r3, r3, #24
 8001d60:	d505      	bpl.n	8001d6e <Modbus_LPUART_IRQHandler+0x2a>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	061b      	lsls	r3, r3, #24
 8001d68:	d501      	bpl.n	8001d6e <Modbus_LPUART_IRQHandler+0x2a>
		Modbus_TXEmpty_Callback();
 8001d6a:	f7ff ffb9 	bl	8001ce0 <Modbus_TXEmpty_Callback>
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	065b      	lsls	r3, r3, #25
 8001d74:	d51a      	bpl.n	8001dac <Modbus_LPUART_IRQHandler+0x68>
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	065b      	lsls	r3, r3, #25
 8001d7c:	d516      	bpl.n	8001dac <Modbus_LPUART_IRQHandler+0x68>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001d80:	2040      	movs	r0, #64	; 0x40
 8001d82:	6218      	str	r0, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d84:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d88:	2101      	movs	r1, #1
 8001d8a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4382      	bics	r2, r0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d9c:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	3103      	adds	r1, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	f380 8810 	msr	PRIMASK, r0
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	071b      	lsls	r3, r3, #28
 8001db2:	d502      	bpl.n	8001dba <Modbus_LPUART_IRQHandler+0x76>
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <Modbus_LPUART_IRQHandler+0x78>)
 8001db6:	2208      	movs	r2, #8
 8001db8:	621a      	str	r2, [r3, #32]
}
 8001dba:	bd10      	pop	{r4, pc}
 8001dbc:	40004800 	.word	0x40004800

08001dc0 <TimeOut_Set_I2C>:
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
}

//==============================================================================
static void TimeOut_Set_I2C(uint32_t timeOut)
{
 8001dc0:	b082      	sub	sp, #8
	__IO uint32_t  tmp;
	tmp = SysTick->CTRL;
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <TimeOut_Set_I2C+0x14>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	9301      	str	r3, [sp, #4]

	((void)tmp);
 8001dc8:	9b01      	ldr	r3, [sp, #4]

	TimeOutDelay = timeOut+1;
 8001dca:	3001      	adds	r0, #1
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <TimeOut_Set_I2C+0x18>)
 8001dce:	6018      	str	r0, [r3, #0]
}
 8001dd0:	b002      	add	sp, #8
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e010 	.word	0xe000e010
 8001dd8:	200003d8 	.word	0x200003d8

08001ddc <TimeOut_Read_I2C>:

static BOOL TimeOut_Read_I2C(void)
{
	if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <TimeOut_Read_I2C+0x28>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	03db      	lsls	r3, r3, #15
 8001de2:	d503      	bpl.n	8001dec <TimeOut_Read_I2C+0x10>
	{
		TimeOutDelay--;
 8001de4:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <TimeOut_Read_I2C+0x2c>)
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	6013      	str	r3, [r2, #0]
	}

	if(TimeOutDelay > 0){
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <TimeOut_Read_I2C+0x2c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <TimeOut_Read_I2C+0x24>
		return FALSE;
	}

	TimeOutCnt++;
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <TimeOut_Read_I2C+0x30>)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

	return TRUE;
 8001dfc:	2001      	movs	r0, #1
}
 8001dfe:	4770      	bx	lr
		return FALSE;
 8001e00:	2000      	movs	r0, #0
 8001e02:	e7fc      	b.n	8001dfe <TimeOut_Read_I2C+0x22>
 8001e04:	e000e010 	.word	0xe000e010
 8001e08:	200003d8 	.word	0x200003d8
 8001e0c:	200003d4 	.word	0x200003d4

08001e10 <I2C_ByteSend>:
{
 8001e10:	b510      	push	{r4, lr}
 8001e12:	0004      	movs	r4, r0
	TimeOut_Set_I2C(I2C_TO);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff ffd3 	bl	8001dc0 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_TXIS(ADS_PORT))
 8001e1a:	f7ff ffdf 	bl	8001ddc <TimeOut_Read_I2C>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d105      	bne.n	8001e2e <I2C_ByteSend+0x1e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <I2C_ByteSend+0x24>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	079b      	lsls	r3, r3, #30
 8001e28:	d401      	bmi.n	8001e2e <I2C_ByteSend+0x1e>
		__NOP();
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	e7f5      	b.n	8001e1a <I2C_ByteSend+0xa>
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8001e2e:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <I2C_ByteSend+0x24>)
 8001e30:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001e32:	bd10      	pop	{r4, pc}
 8001e34:	40005400 	.word	0x40005400

08001e38 <ADS_WRITE_REG>:
{
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	000c      	movs	r4, r1
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e3c:	490f      	ldr	r1, [pc, #60]	; (8001e7c <ADS_WRITE_REG+0x44>)
 8001e3e:	684b      	ldr	r3, [r1, #4]
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <ADS_WRITE_REG+0x48>)
 8001e42:	401a      	ands	r2, r3
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <ADS_WRITE_REG+0x4c>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
	I2C_ByteSend(reg);
 8001e4a:	f7ff ffe1 	bl	8001e10 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data>>8));
 8001e4e:	0a20      	lsrs	r0, r4, #8
 8001e50:	f7ff ffde 	bl	8001e10 <I2C_ByteSend>
	I2C_ByteSend((uint8_t)(data));
 8001e54:	b2e0      	uxtb	r0, r4
 8001e56:	f7ff ffdb 	bl	8001e10 <I2C_ByteSend>
	TimeOut_Set_I2C(I2C_TO);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff ffb0 	bl	8001dc0 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001e60:	f7ff ffbc 	bl	8001ddc <TimeOut_Read_I2C>
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d103      	bne.n	8001e70 <ADS_WRITE_REG+0x38>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <ADS_WRITE_REG+0x44>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	069b      	lsls	r3, r3, #26
 8001e6e:	d5f7      	bpl.n	8001e60 <ADS_WRITE_REG+0x28>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001e70:	4a02      	ldr	r2, [pc, #8]	; (8001e7c <ADS_WRITE_REG+0x44>)
 8001e72:	69d3      	ldr	r3, [r2, #28]
 8001e74:	2120      	movs	r1, #32
 8001e76:	430b      	orrs	r3, r1
 8001e78:	61d3      	str	r3, [r2, #28]
}
 8001e7a:	bd10      	pop	{r4, pc}
 8001e7c:	40005400 	.word	0x40005400
 8001e80:	fc008000 	.word	0xfc008000
 8001e84:	82032090 	.word	0x82032090

08001e88 <ADS_READ_REG>:
{
 8001e88:	b530      	push	{r4, r5, lr}
 8001e8a:	b083      	sub	sp, #12
	uint8_t byte[2] = {0,0};
 8001e8c:	ab01      	add	r3, sp, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001e92:	4c24      	ldr	r4, [pc, #144]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001e94:	6862      	ldr	r2, [r4, #4]
 8001e96:	4d24      	ldr	r5, [pc, #144]	; (8001f28 <ADS_READ_REG+0xa0>)
 8001e98:	402a      	ands	r2, r5
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <ADS_READ_REG+0xa4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	6063      	str	r3, [r4, #4]
	I2C_ByteSend(reg);
 8001ea0:	f7ff ffb6 	bl	8001e10 <I2C_ByteSend>
 8001ea4:	6863      	ldr	r3, [r4, #4]
 8001ea6:	401d      	ands	r5, r3
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <ADS_READ_REG+0xa8>)
 8001eaa:	432b      	orrs	r3, r5
 8001eac:	6063      	str	r3, [r4, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff ff86 	bl	8001dc0 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001eb4:	f7ff ff92 	bl	8001ddc <TimeOut_Read_I2C>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d103      	bne.n	8001ec4 <ADS_READ_REG+0x3c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	075b      	lsls	r3, r3, #29
 8001ec2:	d5f7      	bpl.n	8001eb4 <ADS_READ_REG+0x2c>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001ec6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001ec8:	b2ed      	uxtb	r5, r5
	byte[0] = LL_I2C_ReceiveData8(ADS_PORT);
 8001eca:	ab01      	add	r3, sp, #4
 8001ecc:	701d      	strb	r5, [r3, #0]
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_RXNE(ADS_PORT));
 8001ece:	f7ff ff85 	bl	8001ddc <TimeOut_Read_I2C>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d103      	bne.n	8001ede <ADS_READ_REG+0x56>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	075b      	lsls	r3, r3, #29
 8001edc:	d5f7      	bpl.n	8001ece <ADS_READ_REG+0x46>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001ee0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001ee2:	b2e4      	uxtb	r4, r4
	byte[1] = LL_I2C_ReceiveData8(ADS_PORT);
 8001ee4:	aa01      	add	r2, sp, #4
 8001ee6:	7054      	strb	r4, [r2, #1]
  SET_BIT(I2Cx->CR2, I2C_CR2_STOP);
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	01d2      	lsls	r2, r2, #7
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
	TimeOut_Set_I2C(I2C_TO);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff ff64 	bl	8001dc0 <TimeOut_Set_I2C>
	while(!TimeOut_Read_I2C() && !LL_I2C_IsActiveFlag_STOP(ADS_PORT));
 8001ef8:	f7ff ff70 	bl	8001ddc <TimeOut_Read_I2C>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d103      	bne.n	8001f08 <ADS_READ_REG+0x80>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	069b      	lsls	r3, r3, #26
 8001f06:	d5f7      	bpl.n	8001ef8 <ADS_READ_REG+0x70>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <ADS_READ_REG+0x9c>)
 8001f0a:	69d3      	ldr	r3, [r2, #28]
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	430b      	orrs	r3, r1
 8001f10:	61d3      	str	r3, [r2, #28]
	return ((((byte[0]<<8) + byte[1]) + 0x8000));
 8001f12:	0228      	lsls	r0, r5, #8
 8001f14:	1820      	adds	r0, r4, r0
 8001f16:	b280      	uxth	r0, r0
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <ADS_READ_REG+0xac>)
 8001f1a:	469c      	mov	ip, r3
 8001f1c:	4460      	add	r0, ip
 8001f1e:	b280      	uxth	r0, r0
}
 8001f20:	b003      	add	sp, #12
 8001f22:	bd30      	pop	{r4, r5, pc}
 8001f24:	40005400 	.word	0x40005400
 8001f28:	fc008000 	.word	0xfc008000
 8001f2c:	81012090 	.word	0x81012090
 8001f30:	80022490 	.word	0x80022490
 8001f34:	ffff8000 	.word	0xffff8000

08001f38 <ADS_Init>:
{
 8001f38:	b510      	push	{r4, lr}
	config_ads = (gain |
 8001f3a:	2184      	movs	r1, #132	; 0x84
 8001f3c:	31ff      	adds	r1, #255	; 0xff
 8001f3e:	4301      	orrs	r1, r0
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <ADS_Init+0x14>)
 8001f42:	8019      	strh	r1, [r3, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, config_ads);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f7ff ff77 	bl	8001e38 <ADS_WRITE_REG>
}
 8001f4a:	bd10      	pop	{r4, pc}
 8001f4c:	200003dc 	.word	0x200003dc

08001f50 <ADS_Read_Diff>:
{
 8001f50:	b510      	push	{r4, lr}
	config_ads &=~ ADS_CONFIG_REG_PGA_MASK;
 8001f52:	4c13      	ldr	r4, [pc, #76]	; (8001fa0 <ADS_Read_Diff+0x50>)
 8001f54:	8822      	ldrh	r2, [r4, #0]
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <ADS_Read_Diff+0x54>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	8023      	strh	r3, [r4, #0]
	config_ads |= gain;
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	8023      	strh	r3, [r4, #0]
	config_ads &=~ ADS_CONFIG_REG_MUX_MASK;
 8001f60:	4911      	ldr	r1, [pc, #68]	; (8001fa8 <ADS_Read_Diff+0x58>)
 8001f62:	400b      	ands	r3, r1
 8001f64:	8023      	strh	r3, [r4, #0]
	config_ads |= data;
 8001f66:	4303      	orrs	r3, r0
 8001f68:	8023      	strh	r3, [r4, #0]
	ADS_WRITE_REG(ADS_CONFIG_REG, (config_ads | ADS_CONFIG_REG_OS_SINGLE));
 8001f6a:	4910      	ldr	r1, [pc, #64]	; (8001fac <ADS_Read_Diff+0x5c>)
 8001f6c:	4319      	orrs	r1, r3
 8001f6e:	b289      	uxth	r1, r1
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff ff61 	bl	8001e38 <ADS_WRITE_REG>
	uint16_t time_conversion = 10;
 8001f76:	240a      	movs	r4, #10
	while(!((ADS_READ_REG(ADS_CONFIG_REG) & ADS_CONFIG_REG_OS_MASK) == 0) && time_conversion--);
 8001f78:	e000      	b.n	8001f7c <ADS_Read_Diff+0x2c>
 8001f7a:	0004      	movs	r4, r0
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff ff83 	bl	8001e88 <ADS_READ_REG>
 8001f82:	0403      	lsls	r3, r0, #16
 8001f84:	d506      	bpl.n	8001f94 <ADS_Read_Diff+0x44>
 8001f86:	1e60      	subs	r0, r4, #1
 8001f88:	b280      	uxth	r0, r0
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	d1f5      	bne.n	8001f7a <ADS_Read_Diff+0x2a>
	if(time_conversion == 0)
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d102      	bne.n	8001f98 <ADS_Read_Diff+0x48>
}
 8001f92:	bd10      	pop	{r4, pc}
 8001f94:	0020      	movs	r0, r4
 8001f96:	e7fa      	b.n	8001f8e <ADS_Read_Diff+0x3e>
	data = ADS_READ_REG(ADS_CONVERSION_REG);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff ff75 	bl	8001e88 <ADS_READ_REG>
	return data;
 8001f9e:	e7f8      	b.n	8001f92 <ADS_Read_Diff+0x42>
 8001fa0:	200003dc 	.word	0x200003dc
 8001fa4:	fffff1ff 	.word	0xfffff1ff
 8001fa8:	ffff8fff 	.word	0xffff8fff
 8001fac:	ffff8000 	.word	0xffff8000

08001fb0 <ADS_Read_adc>:
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	0005      	movs	r5, r0
	ADS_Result = 0;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <ADS_Read_adc+0x38>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < ADS_POINTS_DEFAULT; i++){
 8001fba:	2400      	movs	r4, #0
 8001fbc:	e00a      	b.n	8001fd4 <ADS_Read_adc+0x24>
		ADS_Result += ADS_Read_Diff(ADS_CONFIG_REG_MUX_DIF_0_1, gain);
 8001fbe:	0029      	movs	r1, r5
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff ffc5 	bl	8001f50 <ADS_Read_Diff>
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <ADS_Read_adc+0x38>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4694      	mov	ip, r2
 8001fcc:	4460      	add	r0, ip
 8001fce:	6018      	str	r0, [r3, #0]
	for(uint16_t i = 0; i < ADS_POINTS_DEFAULT; i++){
 8001fd0:	3401      	adds	r4, #1
 8001fd2:	b2a4      	uxth	r4, r4
 8001fd4:	2c07      	cmp	r4, #7
 8001fd6:	d9f2      	bls.n	8001fbe <ADS_Read_adc+0xe>
	avg = ((ADS_Result<<1)/ADS_POINTS_DEFAULT + 1)>>1;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <ADS_Read_adc+0x38>)
 8001fda:	6818      	ldr	r0, [r3, #0]
 8001fdc:	0040      	lsls	r0, r0, #1
 8001fde:	08c0      	lsrs	r0, r0, #3
 8001fe0:	3001      	adds	r0, #1
 8001fe2:	0840      	lsrs	r0, r0, #1
	return avg;
 8001fe4:	b280      	uxth	r0, r0
}
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	200003d0 	.word	0x200003d0

08001fec <ADS_Read_volt>:
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	0004      	movs	r4, r0
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <ADS_Read_volt+0x78>)
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	23e0      	movs	r3, #224	; 0xe0
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	23c0      	movs	r3, #192	; 0xc0
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d022      	beq.n	8002048 <ADS_Read_volt+0x5c>
 8002002:	d80f      	bhi.n	8002024 <ADS_Read_volt+0x38>
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d020      	beq.n	800204e <ADS_Read_volt+0x62>
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	429a      	cmp	r2, r3
 8002012:	d102      	bne.n	800201a <ADS_Read_volt+0x2e>
		fsRange = 2048;
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	e00e      	b.n	8002038 <ADS_Read_volt+0x4c>
	switch(config_ads&ADS_CONFIG_REG_PGA_MASK){
 800201a:	2a00      	cmp	r2, #0
 800201c:	d11a      	bne.n	8002054 <ADS_Read_volt+0x68>
 800201e:	23c0      	movs	r3, #192	; 0xc0
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	e009      	b.n	8002038 <ADS_Read_volt+0x4c>
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	011b      	lsls	r3, r3, #4
 8002028:	429a      	cmp	r2, r3
 800202a:	d015      	beq.n	8002058 <ADS_Read_volt+0x6c>
 800202c:	23a0      	movs	r3, #160	; 0xa0
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	429a      	cmp	r2, r3
 8002032:	d114      	bne.n	800205e <ADS_Read_volt+0x72>
		fsRange = 256;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	005b      	lsls	r3, r3, #1
	return ((adc_data * (fsRange*10000 / 32768)))/10000;
 8002038:	490b      	ldr	r1, [pc, #44]	; (8002068 <ADS_Read_volt+0x7c>)
 800203a:	434b      	muls	r3, r1
 800203c:	13d8      	asrs	r0, r3, #15
 800203e:	4360      	muls	r0, r4
 8002040:	f7fe f8fe 	bl	8000240 <__divsi3>
 8002044:	b280      	uxth	r0, r0
}
 8002046:	bd10      	pop	{r4, pc}
		fsRange = 1024;
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	e7f4      	b.n	8002038 <ADS_Read_volt+0x4c>
		fsRange = 4096;
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	015b      	lsls	r3, r3, #5
 8002052:	e7f1      	b.n	8002038 <ADS_Read_volt+0x4c>
		fsRange = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	e7ef      	b.n	8002038 <ADS_Read_volt+0x4c>
		fsRange = 512;
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	e7ec      	b.n	8002038 <ADS_Read_volt+0x4c>
		fsRange = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	e7ea      	b.n	8002038 <ADS_Read_volt+0x4c>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200003dc 	.word	0x200003dc
 8002068:	00002710 	.word	0x00002710

0800206c <__round>:
 *    Разница нулевае:
 * 	  - выбираем iOldVal.
 */
//======================================================================================================================================
static int32_t __round(int32_t iVal)
{
 800206c:	b510      	push	{r4, lr}
 800206e:	0004      	movs	r4, r0
	if( iVal % 10 > 5 )	return( iVal / 10 + 1 );
 8002070:	210a      	movs	r1, #10
 8002072:	f7fe f9cb 	bl	800040c <__aeabi_idivmod>
 8002076:	2905      	cmp	r1, #5
 8002078:	dc04      	bgt.n	8002084 <__round+0x18>
	return( iVal / 10 );
 800207a:	210a      	movs	r1, #10
 800207c:	0020      	movs	r0, r4
 800207e:	f7fe f8df 	bl	8000240 <__divsi3>
}
 8002082:	bd10      	pop	{r4, pc}
	if( iVal % 10 > 5 )	return( iVal / 10 + 1 );
 8002084:	210a      	movs	r1, #10
 8002086:	0020      	movs	r0, r4
 8002088:	f7fe f8da 	bl	8000240 <__divsi3>
 800208c:	3001      	adds	r0, #1
 800208e:	e7f8      	b.n	8002082 <__round+0x16>

08002090 <adcFilterMiddleInit>:
//======================================================================================================================================
// Инициализация фильтра
void adcFilterMiddleInit(type_filter_middle *pFilter)
{
	for(uint16_t i = 0; i < sizeof(type_filter_middle); i++){
 8002090:	2200      	movs	r2, #0
 8002092:	e007      	b.n	80020a4 <adcFilterMiddleInit+0x14>
		*(uint8_t*)&pFilter[i] = 0;
 8002094:	00d3      	lsls	r3, r2, #3
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	18c3      	adds	r3, r0, r3
 800209c:	2100      	movs	r1, #0
 800209e:	7019      	strb	r1, [r3, #0]
	for(uint16_t i = 0; i < sizeof(type_filter_middle); i++){
 80020a0:	3201      	adds	r2, #1
 80020a2:	b292      	uxth	r2, r2
 80020a4:	2a1b      	cmp	r2, #27
 80020a6:	d9f5      	bls.n	8002094 <adcFilterMiddleInit+0x4>
	}
//	memset( (uint8_t*)pFilter, 0, sizeof(type_filter_middle) );
}
 80020a8:	4770      	bx	lr

080020aa <adcFilterMiddleRun>:
//======================================================================================================================================
// Вычисление фильтра
int32_t adcFilterMiddleRun(type_filter_middle *pFilter, int32_t iNewVal)
{
 80020aa:	b570      	push	{r4, r5, r6, lr}
 80020ac:	0004      	movs	r4, r0
	int32_t rezult = pFilter->iOldVal;
 80020ae:	6986      	ldr	r6, [r0, #24]
	int32_t prez;
	int i;
	uint8_t b;
	
	// Сдвигаем массив и вычисляем среднее значение
	for( i=1; i < FIL_MIDDLE_COUNT_STAGE; i++ )
 80020b0:	2301      	movs	r3, #1
	int32_t middle = 0;
 80020b2:	2500      	movs	r5, #0
	for( i=1; i < FIL_MIDDLE_COUNT_STAGE; i++ )
 80020b4:	e006      	b.n	80020c4 <adcFilterMiddleRun+0x1a>
	{
		pFilter->iMiddle[i-1] = pFilter->iMiddle[i];
 80020b6:	1e5a      	subs	r2, r3, #1
 80020b8:	0098      	lsls	r0, r3, #2
 80020ba:	5900      	ldr	r0, [r0, r4]
 80020bc:	0092      	lsls	r2, r2, #2
 80020be:	5110      	str	r0, [r2, r4]
		middle += pFilter->iMiddle[i];
 80020c0:	182d      	adds	r5, r5, r0
	for( i=1; i < FIL_MIDDLE_COUNT_STAGE; i++ )
 80020c2:	3301      	adds	r3, #1
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	ddf6      	ble.n	80020b6 <adcFilterMiddleRun+0xc>
	}
	pFilter->iMiddle[FIL_MIDDLE_COUNT_STAGE-1] = iNewVal;
 80020c8:	6161      	str	r1, [r4, #20]
	middle += iNewVal;
 80020ca:	186d      	adds	r5, r5, r1
	middle = middle * 10 / FIL_MIDDLE_COUNT_STAGE;
 80020cc:	00a8      	lsls	r0, r5, #2
 80020ce:	1940      	adds	r0, r0, r5
 80020d0:	0040      	lsls	r0, r0, #1
 80020d2:	2106      	movs	r1, #6
 80020d4:	f7fe f8b4 	bl	8000240 <__divsi3>
	middle = __round( middle );
 80020d8:	f7ff ffc8 	bl	800206c <__round>
	prez = middle;

	// Вычисляем разницу
	middle -= pFilter->iOldVal;
 80020dc:	1b83      	subs	r3, r0, r6

	// Делаем выборку
	if( middle > 0 )
 80020de:	2b00      	cmp	r3, #0
 80020e0:	dd17      	ble.n	8002112 <adcFilterMiddleRun+0x68>
	{
		b = DISABLE;
 80020e2:	2100      	movs	r1, #0
		for( i=1; i < FIL_MIDDLE_COUNT_STAGE; i++ )
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <adcFilterMiddleRun+0x40>
 80020e8:	3301      	adds	r3, #1
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	dc08      	bgt.n	8002100 <adcFilterMiddleRun+0x56>
		{
			if( ( pFilter->iMiddle[i] > pFilter->iOldVal ) && ( pFilter->iMiddle[i] < prez ) )
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	5912      	ldr	r2, [r2, r4]
 80020f2:	42b2      	cmp	r2, r6
 80020f4:	ddf8      	ble.n	80020e8 <adcFilterMiddleRun+0x3e>
 80020f6:	4282      	cmp	r2, r0
 80020f8:	daf6      	bge.n	80020e8 <adcFilterMiddleRun+0x3e>
			{
				prez = pFilter->iMiddle[i];
 80020fa:	0010      	movs	r0, r2
				b = ENABLE;
 80020fc:	2101      	movs	r1, #1
 80020fe:	e7f3      	b.n	80020e8 <adcFilterMiddleRun+0x3e>
			}
		}
		//rezult = (b == TRUE) ? prez : pFilter->iOldVal;
		rezult = (b == ENABLE) ? prez : ((pFilter->iOldVal + prez)/2);
 8002100:	2901      	cmp	r1, #1
 8002102:	d01e      	beq.n	8002142 <adcFilterMiddleRun+0x98>
 8002104:	1980      	adds	r0, r0, r6
 8002106:	0fc6      	lsrs	r6, r0, #31
 8002108:	1836      	adds	r6, r6, r0
 800210a:	1076      	asrs	r6, r6, #1
		}
		//rezult = (b == TRUE) ? prez : pFilter->iOldVal;
		rezult = (b == ENABLE) ? prez : ((pFilter->iOldVal + prez)/2);
	}

	pFilter->iOldVal = rezult;
 800210c:	61a6      	str	r6, [r4, #24]
	return( rezult );
}
 800210e:	0030      	movs	r0, r6
 8002110:	bd70      	pop	{r4, r5, r6, pc}
	if( middle < 0 )
 8002112:	2b00      	cmp	r3, #0
 8002114:	dafa      	bge.n	800210c <adcFilterMiddleRun+0x62>
		b = DISABLE;
 8002116:	2100      	movs	r1, #0
		for( i=1; i < FIL_MIDDLE_COUNT_STAGE; i++ )
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <adcFilterMiddleRun+0x74>
 800211c:	3301      	adds	r3, #1
 800211e:	2b05      	cmp	r3, #5
 8002120:	dc08      	bgt.n	8002134 <adcFilterMiddleRun+0x8a>
			if( ( pFilter->iMiddle[i] < pFilter->iOldVal ) && ( pFilter->iMiddle[i] > prez ) )
 8002122:	009a      	lsls	r2, r3, #2
 8002124:	5912      	ldr	r2, [r2, r4]
 8002126:	42b2      	cmp	r2, r6
 8002128:	daf8      	bge.n	800211c <adcFilterMiddleRun+0x72>
 800212a:	4282      	cmp	r2, r0
 800212c:	ddf6      	ble.n	800211c <adcFilterMiddleRun+0x72>
				prez = pFilter->iMiddle[i];
 800212e:	0010      	movs	r0, r2
				b = ENABLE;
 8002130:	2101      	movs	r1, #1
 8002132:	e7f3      	b.n	800211c <adcFilterMiddleRun+0x72>
		rezult = (b == ENABLE) ? prez : ((pFilter->iOldVal + prez)/2);
 8002134:	2901      	cmp	r1, #1
 8002136:	d006      	beq.n	8002146 <adcFilterMiddleRun+0x9c>
 8002138:	1980      	adds	r0, r0, r6
 800213a:	0fc6      	lsrs	r6, r0, #31
 800213c:	1836      	adds	r6, r6, r0
 800213e:	1076      	asrs	r6, r6, #1
 8002140:	e7e4      	b.n	800210c <adcFilterMiddleRun+0x62>
		rezult = (b == ENABLE) ? prez : ((pFilter->iOldVal + prez)/2);
 8002142:	0006      	movs	r6, r0
 8002144:	e7e2      	b.n	800210c <adcFilterMiddleRun+0x62>
		rezult = (b == ENABLE) ? prez : ((pFilter->iOldVal + prez)/2);
 8002146:	0006      	movs	r6, r0
 8002148:	e7e0      	b.n	800210c <adcFilterMiddleRun+0x62>
	...

0800214c <timer_1_128>:
static uint32_t Cnt_1_128 = 0;

BOOL f_readADC = FALSE;

void timer_1_128(void)
{
 800214c:	b510      	push	{r4, lr}

	Cnt_1_128++;
 800214e:	4a33      	ldr	r2, [pc, #204]	; (800221c <timer_1_128+0xd0>)
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	6013      	str	r3, [r2, #0]
	///000
	if(TimerRxMipex){
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <timer_1_128+0xd4>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <timer_1_128+0x18>
		TimerRxMipex--;
 800215e:	3b01      	subs	r3, #1
 8002160:	4a2f      	ldr	r2, [pc, #188]	; (8002220 <timer_1_128+0xd4>)
 8002162:	8013      	strh	r3, [r2, #0]
	}
	if(CntTo250ms < (32-1)){
 8002164:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <timer_1_128+0xd8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b1e      	cmp	r3, #30
 800216a:	d803      	bhi.n	8002174 <timer_1_128+0x28>

		CntTo250ms++;
 800216c:	3301      	adds	r3, #1
 800216e:	4a2d      	ldr	r2, [pc, #180]	; (8002224 <timer_1_128+0xd8>)
 8002170:	7013      	strb	r3, [r2, #0]
		}

		CntTo500ms ^= 1;

	}
}
 8002172:	bd10      	pop	{r4, pc}
		f_Time250ms = TRUE;
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <timer_1_128+0xdc>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
		CntTo250ms = 0;
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <timer_1_128+0xd8>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
		if(CntTo500ms == 0){
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <timer_1_128+0xe0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d140      	bne.n	800220a <timer_1_128+0xbe>
			f_Time500ms = TRUE;
 8002188:	4a29      	ldr	r2, [pc, #164]	; (8002230 <timer_1_128+0xe4>)
 800218a:	2101      	movs	r1, #1
 800218c:	7011      	strb	r1, [r2, #0]
			CntToSec ^= 1;
 800218e:	4929      	ldr	r1, [pc, #164]	; (8002234 <timer_1_128+0xe8>)
 8002190:	780a      	ldrb	r2, [r1, #0]
 8002192:	2001      	movs	r0, #1
 8002194:	4042      	eors	r2, r0
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	700a      	strb	r2, [r1, #0]
			if(CntToSec == 0){
 800219a:	2a00      	cmp	r2, #0
 800219c:	d135      	bne.n	800220a <timer_1_128+0xbe>
				CntSec++;
 800219e:	4926      	ldr	r1, [pc, #152]	; (8002238 <timer_1_128+0xec>)
 80021a0:	680a      	ldr	r2, [r1, #0]
 80021a2:	3201      	adds	r2, #1
 80021a4:	600a      	str	r2, [r1, #0]
				CntPeriodFid++;
 80021a6:	4925      	ldr	r1, [pc, #148]	; (800223c <timer_1_128+0xf0>)
 80021a8:	880a      	ldrh	r2, [r1, #0]
 80021aa:	3201      	adds	r2, #1
 80021ac:	b292      	uxth	r2, r2
 80021ae:	800a      	strh	r2, [r1, #0]
				if(CntPeriodFid >= ((dev.Config.FID>>8)&0xFF)){// 2 минуты
 80021b0:	4923      	ldr	r1, [pc, #140]	; (8002240 <timer_1_128+0xf4>)
 80021b2:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80021b4:	0a08      	lsrs	r0, r1, #8
 80021b6:	4282      	cmp	r2, r0
 80021b8:	d305      	bcc.n	80021c6 <timer_1_128+0x7a>
					CntPeriodFid = 0;
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <timer_1_128+0xf0>)
 80021bc:	2000      	movs	r0, #0
 80021be:	8010      	strh	r0, [r2, #0]
					f_PeriodFid = TRUE;
 80021c0:	4a20      	ldr	r2, [pc, #128]	; (8002244 <timer_1_128+0xf8>)
 80021c2:	3001      	adds	r0, #1
 80021c4:	7010      	strb	r0, [r2, #0]
				if(f_PeriodFid){
 80021c6:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <timer_1_128+0xf8>)
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	2a00      	cmp	r2, #0
 80021cc:	d010      	beq.n	80021f0 <timer_1_128+0xa4>
					CntReadFid++;
 80021ce:	481e      	ldr	r0, [pc, #120]	; (8002248 <timer_1_128+0xfc>)
 80021d0:	8802      	ldrh	r2, [r0, #0]
 80021d2:	3201      	adds	r2, #1
 80021d4:	b292      	uxth	r2, r2
 80021d6:	8002      	strh	r2, [r0, #0]
					if(CntReadFid == ((dev.Config.FID&0xFF) - TIMER_CALIB_FID)){
 80021d8:	20ff      	movs	r0, #255	; 0xff
 80021da:	4001      	ands	r1, r0
 80021dc:	1f48      	subs	r0, r1, #5
 80021de:	4282      	cmp	r2, r0
 80021e0:	d018      	beq.n	8002214 <timer_1_128+0xc8>
					if(CntReadFid >= (dev.Config.FID&0xFF)){
 80021e2:	4291      	cmp	r1, r2
 80021e4:	d804      	bhi.n	80021f0 <timer_1_128+0xa4>
						CntReadFid = 0;
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <timer_1_128+0xfc>)
 80021e8:	2100      	movs	r1, #0
 80021ea:	8011      	strh	r1, [r2, #0]
						f_PeriodFid = FALSE;
 80021ec:	4a15      	ldr	r2, [pc, #84]	; (8002244 <timer_1_128+0xf8>)
 80021ee:	7011      	strb	r1, [r2, #0]
				if(CntCalibFid){
 80021f0:	4a16      	ldr	r2, [pc, #88]	; (800224c <timer_1_128+0x100>)
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	2a00      	cmp	r2, #0
 80021f6:	d008      	beq.n	800220a <timer_1_128+0xbe>
					CntCalibFid --;
 80021f8:	3a01      	subs	r2, #1
 80021fa:	b292      	uxth	r2, r2
 80021fc:	4913      	ldr	r1, [pc, #76]	; (800224c <timer_1_128+0x100>)
 80021fe:	800a      	strh	r2, [r1, #0]
					if(CntCalibFid == 0){
 8002200:	2a00      	cmp	r2, #0
 8002202:	d102      	bne.n	800220a <timer_1_128+0xbe>
						f_TimeCalibFidStart = TRUE;
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <timer_1_128+0x104>)
 8002206:	2101      	movs	r1, #1
 8002208:	7011      	strb	r1, [r2, #0]
		CntTo500ms ^= 1;
 800220a:	2201      	movs	r2, #1
 800220c:	4053      	eors	r3, r2
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <timer_1_128+0xe0>)
 8002210:	7013      	strb	r3, [r2, #0]
}
 8002212:	e7ae      	b.n	8002172 <timer_1_128+0x26>
						f_ReadFid = TRUE;
 8002214:	480f      	ldr	r0, [pc, #60]	; (8002254 <timer_1_128+0x108>)
 8002216:	2401      	movs	r4, #1
 8002218:	7004      	strb	r4, [r0, #0]
 800221a:	e7e2      	b.n	80021e2 <timer_1_128+0x96>
 800221c:	2000041c 	.word	0x2000041c
 8002220:	200003fc 	.word	0x200003fc
 8002224:	20000418 	.word	0x20000418
 8002228:	20000560 	.word	0x20000560
 800222c:	20000419 	.word	0x20000419
 8002230:	20000561 	.word	0x20000561
 8002234:	2000041a 	.word	0x2000041a
 8002238:	20000414 	.word	0x20000414
 800223c:	2000040e 	.word	0x2000040e
 8002240:	2000042c 	.word	0x2000042c
 8002244:	2000055e 	.word	0x2000055e
 8002248:	20000410 	.word	0x20000410
 800224c:	2000040c 	.word	0x2000040c
 8002250:	20000563 	.word	0x20000563
 8002254:	2000055f 	.word	0x2000055f

08002258 <serviceTimerStart>:

}

void serviceTimerStart(uint16_t time)
{
	serviceTimer = time;
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <serviceTimerStart+0x8>)
 800225a:	8018      	strh	r0, [r3, #0]
}
 800225c:	4770      	bx	lr
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	20000564 	.word	0x20000564

08002264 <serviceTimerStop>:

void serviceTimerStop(void)
{
 8002264:	b510      	push	{r4, lr}

	mbServiceMode = FALSE;
 8002266:	2300      	movs	r3, #0
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <serviceTimerStop+0x28>)
 800226a:	7013      	strb	r3, [r2, #0]
	dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 800226c:	4808      	ldr	r0, [pc, #32]	; (8002290 <serviceTimerStop+0x2c>)
 800226e:	2196      	movs	r1, #150	; 0x96
 8002270:	0049      	lsls	r1, r1, #1
 8002272:	5a42      	ldrh	r2, [r0, r1]
 8002274:	2404      	movs	r4, #4
 8002276:	43a2      	bics	r2, r4
 8002278:	5242      	strh	r2, [r0, r1]
	mbHoldDevStatus = dev.Status;
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <serviceTimerStop+0x30>)
 800227c:	800a      	strh	r2, [r1, #0]

	mbUnlock = FALSE;
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <serviceTimerStop+0x34>)
 8002280:	7013      	strb	r3, [r2, #0]
	AccessCode = 0;
 8002282:	4a06      	ldr	r2, [pc, #24]	; (800229c <serviceTimerStop+0x38>)
 8002284:	8013      	strh	r3, [r2, #0]

	serviceTimer = 0;
 8002286:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <serviceTimerStop+0x3c>)
 8002288:	8013      	strh	r3, [r2, #0]
}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	2000057e 	.word	0x2000057e
 8002290:	2000042c 	.word	0x2000042c
 8002294:	2000057c 	.word	0x2000057c
 8002298:	2000057f 	.word	0x2000057f
 800229c:	20000566 	.word	0x20000566
 80022a0:	20000564 	.word	0x20000564

080022a4 <serviceTimerProc>:
{
 80022a4:	b510      	push	{r4, lr}
	if(serviceTimer > 1){
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <serviceTimerProc+0x1c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d903      	bls.n	80022b6 <serviceTimerProc+0x12>
		serviceTimer--;
 80022ae:	3b01      	subs	r3, #1
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <serviceTimerProc+0x1c>)
 80022b2:	8013      	strh	r3, [r2, #0]
}
 80022b4:	bd10      	pop	{r4, pc}
		if(serviceTimer == 1){
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d1fc      	bne.n	80022b4 <serviceTimerProc+0x10>
			serviceTimerStop();
 80022ba:	f7ff ffd3 	bl	8002264 <serviceTimerStop>
}
 80022be:	e7f9      	b.n	80022b4 <serviceTimerProc+0x10>
 80022c0:	20000564 	.word	0x20000564

080022c4 <dev_set_config_default>:

	dev.Config.ScaleKoef = 10;
	dev.Config.FID = ADS_CONFIG_REG_PGA_0_256V;
#endif
#ifdef CONFIG_FID
	dev.Config.TypeSensor = (SENSOR_TYPE_FID << 8);
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <dev_set_config_default+0x28>)
 80022c6:	22a0      	movs	r2, #160	; 0xa0
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	809a      	strh	r2, [r3, #4]
	dev.Config.Unit = 0x0200|(1 << CFG_UNIT_VALUE_lel);
 80022cc:	2282      	movs	r2, #130	; 0x82
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	80da      	strh	r2, [r3, #6]

	dev.Config.ValueLow = 0;
 80022d2:	2200      	movs	r2, #0
 80022d4:	811a      	strh	r2, [r3, #8]
	dev.Config.ValueHigh = 10000;
 80022d6:	4a06      	ldr	r2, [pc, #24]	; (80022f0 <dev_set_config_default+0x2c>)
 80022d8:	815a      	strh	r2, [r3, #10]

	dev.Config.ScaleKoef = 10;
 80022da:	220a      	movs	r2, #10
 80022dc:	865a      	strh	r2, [r3, #50]	; 0x32
	dev.Config.ScaleADC = ADS_CONFIG_REG_PGA_0_256V;
 80022de:	22a0      	movs	r2, #160	; 0xa0
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	869a      	strh	r2, [r3, #52]	; 0x34
	dev.Config.FID = 0x780A;
 80022e4:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <dev_set_config_default+0x30>)
 80022e6:	86da      	strh	r2, [r3, #54]	; 0x36

	dev.Config.ScaleKoef = 10;
#endif


}
 80022e8:	4770      	bx	lr
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	2000042c 	.word	0x2000042c
 80022f0:	00002710 	.word	0x00002710
 80022f4:	0000780a 	.word	0x0000780a

080022f8 <dev_init>:
	#define INIT_MODE_TIME 5
#elif defined(CONFIG_FID)
	#define INIT_MODE_TIME 30
#endif

void dev_init(void){
 80022f8:	b510      	push	{r4, lr}

	adcFilterMiddleInit(&stFilterSensor);
 80022fa:	480b      	ldr	r0, [pc, #44]	; (8002328 <dev_init+0x30>)
 80022fc:	f7ff fec8 	bl	8002090 <adcFilterMiddleInit>
//	dev_set_config_default();

	dev.RegInput.cod_8225 = 8225;
 8002300:	4b0a      	ldr	r3, [pc, #40]	; (800232c <dev_init+0x34>)
 8002302:	22ec      	movs	r2, #236	; 0xec
 8002304:	490a      	ldr	r1, [pc, #40]	; (8002330 <dev_init+0x38>)
 8002306:	5299      	strh	r1, [r3, r2]

	dev.RegInput.VerSW = 0x0101;
 8002308:	3202      	adds	r2, #2
 800230a:	2102      	movs	r1, #2
 800230c:	31ff      	adds	r1, #255	; 0xff
 800230e:	5299      	strh	r1, [r3, r2]
	dev.RegInput.VerSW_Build = 0x0001;
 8002310:	3aed      	subs	r2, #237	; 0xed
 8002312:	3911      	subs	r1, #17
 8002314:	525a      	strh	r2, [r3, r1]

	dev.Status = (1 << STATUS_BIT_MAIN_INIT);
 8002316:	313c      	adds	r1, #60	; 0x3c
 8002318:	525a      	strh	r2, [r3, r1]

	dev.RegInput.TimeToOffHeat = INIT_MODE_TIME;
 800231a:	3218      	adds	r2, #24
 800231c:	32ff      	adds	r2, #255	; 0xff
 800231e:	390f      	subs	r1, #15
 8002320:	39ff      	subs	r1, #255	; 0xff
 8002322:	5299      	strh	r1, [r3, r2]

//	dev.Config.FID = 0x1E0A;
}
 8002324:	bd10      	pop	{r4, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	200003e0 	.word	0x200003e0
 800232c:	2000042c 	.word	0x2000042c
 8002330:	00002021 	.word	0x00002021

08002334 <dev_proc>:
	}
}
#endif
//==============================================================================
void dev_proc(void)
{
 8002334:	b510      	push	{r4, lr}
	if(dev.RegInput.TimeToOffHeat != 0)
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <dev_proc+0x68>)
 8002338:	238c      	movs	r3, #140	; 0x8c
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	5ad3      	ldrh	r3, [r2, r3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <dev_proc+0x1e>
		dev.RegInput.TimeToOffHeat = INIT_MODE_TIME - CntSec;
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <dev_proc+0x6c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	231e      	movs	r3, #30
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	4914      	ldr	r1, [pc, #80]	; (800239c <dev_proc+0x68>)
 800234c:	228c      	movs	r2, #140	; 0x8c
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	528b      	strh	r3, [r1, r2]

	// Если окончен режим инициализации
	if(((dev.Status & (1 << STATUS_BIT_MAIN_INIT)) != 0) && (CntSec >= INIT_MODE_TIME)){
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <dev_proc+0x68>)
 8002354:	2396      	movs	r3, #150	; 0x96
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	5ad3      	ldrh	r3, [r2, r3]
 800235a:	07da      	lsls	r2, r3, #31
 800235c:	d515      	bpl.n	800238a <dev_proc+0x56>
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <dev_proc+0x6c>)
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	2a1d      	cmp	r2, #29
 8002364:	dd11      	ble.n	800238a <dev_proc+0x56>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_INIT);
 8002366:	2201      	movs	r2, #1
 8002368:	4393      	bics	r3, r2
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <dev_proc+0x68>)
 800236c:	2196      	movs	r1, #150	; 0x96
 800236e:	0049      	lsls	r1, r1, #1
 8002370:	5253      	strh	r3, [r2, r1]
		dev.Status |= (1 << STATUS_BIT_MAIN_RUN);
 8002372:	2002      	movs	r0, #2
 8002374:	4303      	orrs	r3, r0
 8002376:	5253      	strh	r3, [r2, r1]
		dev.RegInput.TimeToOffHeat = 0;
 8002378:	238c      	movs	r3, #140	; 0x8c
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2100      	movs	r1, #0
 800237e:	52d1      	strh	r1, [r2, r3]
		// Выключаем системный таймер
		SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <dev_proc+0x70>)
 8002382:	6813      	ldr	r3, [r2, #0]
 8002384:	3102      	adds	r1, #2
 8002386:	438b      	bics	r3, r1
 8002388:	6013      	str	r3, [r2, #0]
	}

	serviceTimerProc();
 800238a:	f7ff ff8b 	bl	80022a4 <serviceTimerProc>

	mbHoldDevStatus = dev.Status;
 800238e:	4a03      	ldr	r2, [pc, #12]	; (800239c <dev_proc+0x68>)
 8002390:	2396      	movs	r3, #150	; 0x96
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	5ad2      	ldrh	r2, [r2, r3]
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <dev_proc+0x74>)
 8002398:	801a      	strh	r2, [r3, #0]
		d_printf("(%04X %04X) %04X %04X", ADC_in_Temper, ADC_in[0], ADC_in[1], ADC_in[2]);
		d_printf(" |  (TV:%05d) TIA:%05d V:%05d T_LMP:%02d (T_MPU:%02d)", ADC_in_mVolt_Temper, ADC_in_mVolt_TIA,  ADC_in_RefVoltage, LMP_temper, ADC_in_Celsius);
#endif
#endif

}
 800239a:	bd10      	pop	{r4, pc}
 800239c:	2000042c 	.word	0x2000042c
 80023a0:	20000414 	.word	0x20000414
 80023a4:	e000e010 	.word	0xe000e010
 80023a8:	2000057c 	.word	0x2000057c

080023ac <Adc_Eoc_Callback>:
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 80023ac:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <Adc_Eoc_Callback+0x38>)
 80023ae:	681b      	ldr	r3, [r3, #0]

//==============================================================================
void Adc_Eoc_Callback(void)
{

	if(LL_ADC_IsActiveFlag_EOS(ADC1)){
 80023b0:	071b      	lsls	r3, r3, #28
 80023b2:	d502      	bpl.n	80023ba <Adc_Eoc_Callback+0xe>
		adc_cnt = 2;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <Adc_Eoc_Callback+0x3c>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
	}

	ADC_in[adc_cnt] = LL_ADC_REG_ReadConversionData12(ADC1);
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <Adc_Eoc_Callback+0x3c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <Adc_Eoc_Callback+0x38>)
 80023c0:	6c10      	ldr	r0, [r2, #64]	; 0x40
 80023c2:	005a      	lsls	r2, r3, #1
 80023c4:	4909      	ldr	r1, [pc, #36]	; (80023ec <Adc_Eoc_Callback+0x40>)
 80023c6:	5288      	strh	r0, [r1, r2]

	if(adc_cnt >= 2){
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d906      	bls.n	80023da <Adc_Eoc_Callback+0x2e>

		f_AdcCycleEnd = TRUE;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <Adc_Eoc_Callback+0x44>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
		adc_cnt = 0;
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <Adc_Eoc_Callback+0x3c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]

		adc_cnt++;

	}

}
 80023d8:	4770      	bx	lr
		adc_cnt++;
 80023da:	3301      	adds	r3, #1
 80023dc:	4a02      	ldr	r2, [pc, #8]	; (80023e8 <Adc_Eoc_Callback+0x3c>)
 80023de:	7013      	strb	r3, [r2, #0]
}
 80023e0:	e7fa      	b.n	80023d8 <Adc_Eoc_Callback+0x2c>
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	40012400 	.word	0x40012400
 80023e8:	20000424 	.word	0x20000424
 80023ec:	20000400 	.word	0x20000400
 80023f0:	2000055c 	.word	0x2000055c

080023f4 <Adc_read_data>:
#ifdef CONFIG_FID
#define ADС_POINTS_DEFAULT	(14)
static uint32_t ADC_result = 0;
static uint32_t count_ADC_result = 0;
void Adc_read_data(void)
{
 80023f4:	b570      	push	{r4, r5, r6, lr}
	ADC_in_RefVoltage = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_in[1], LL_ADC_RESOLUTION_12B);
 80023f6:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <Adc_read_data+0x13c>)
 80023f8:	8818      	ldrh	r0, [r3, #0]
 80023fa:	4c4e      	ldr	r4, [pc, #312]	; (8002534 <Adc_read_data+0x140>)
 80023fc:	4360      	muls	r0, r4
 80023fe:	4d4e      	ldr	r5, [pc, #312]	; (8002538 <Adc_read_data+0x144>)
 8002400:	8869      	ldrh	r1, [r5, #2]
 8002402:	f7fd fe93 	bl	800012c <__udivsi3>
 8002406:	4b4d      	ldr	r3, [pc, #308]	; (800253c <Adc_read_data+0x148>)
 8002408:	6018      	str	r0, [r3, #0]
	ADC_in_Celsius = 10 * __LL_ADC_CALC_TEMPERATURE(ADC_in_RefVoltage, ADC_in[2], LL_ADC_RESOLUTION_12B);
 800240a:	88ab      	ldrh	r3, [r5, #4]
 800240c:	4358      	muls	r0, r3
 800240e:	0021      	movs	r1, r4
 8002410:	f7fd fe8c 	bl	800012c <__udivsi3>
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <Adc_read_data+0x14c>)
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	1a83      	subs	r3, r0, r2
 800241a:	2064      	movs	r0, #100	; 0x64
 800241c:	4358      	muls	r0, r3
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <Adc_read_data+0x150>)
 8002420:	8819      	ldrh	r1, [r3, #0]
 8002422:	1a89      	subs	r1, r1, r2
 8002424:	f7fd ff0c 	bl	8000240 <__divsi3>
 8002428:	0083      	lsls	r3, r0, #2
 800242a:	18c0      	adds	r0, r0, r3
 800242c:	0040      	lsls	r0, r0, #1
 800242e:	302d      	adds	r0, #45	; 0x2d
 8002430:	30ff      	adds	r0, #255	; 0xff
 8002432:	4b45      	ldr	r3, [pc, #276]	; (8002548 <Adc_read_data+0x154>)
 8002434:	8018      	strh	r0, [r3, #0]
	//--------------------------------------------------------------------
	if(!TESTBIT(dev.Status, STATUS_BIT_MAIN_MODE))
 8002436:	4a45      	ldr	r2, [pc, #276]	; (800254c <Adc_read_data+0x158>)
 8002438:	2396      	movs	r3, #150	; 0x96
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	5ad3      	ldrh	r3, [r2, r3]
 800243e:	075b      	lsls	r3, r3, #29
 8002440:	d404      	bmi.n	800244c <Adc_read_data+0x58>
	{ // Сервисный режим
		f_TimeCalibFid = FALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <Adc_read_data+0x15c>)
 8002446:	7013      	strb	r3, [r2, #0]
		f_TimeCalibFidStart = FALSE;
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <Adc_read_data+0x160>)
 800244a:	7013      	strb	r3, [r2, #0]
	}
	//--------------------------------------------------------------------
	if(f_PeriodFid == TRUE || (f_TimeCalibFid == TRUE)){
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <Adc_read_data+0x164>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d003      	beq.n	800245c <Adc_read_data+0x68>
 8002454:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <Adc_read_data+0x15c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10a      	bne.n	8002472 <Adc_read_data+0x7e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800245c:	23a0      	movs	r3, #160	; 0xa0
 800245e:	05db      	lsls	r3, r3, #23
 8002460:	2208      	movs	r2, #8
 8002462:	619a      	str	r2, [r3, #24]
		// Включаем питание на сенсоре
		LL_GPIO_SetOutputPin(TURN_ON_IR_GPIO_Port, TURN_ON_IR_Pin);
		dev.Status |= (1 << STATUS_BIT_FID_PWR);
 8002464:	4939      	ldr	r1, [pc, #228]	; (800254c <Adc_read_data+0x158>)
 8002466:	3225      	adds	r2, #37	; 0x25
 8002468:	32ff      	adds	r2, #255	; 0xff
 800246a:	5a88      	ldrh	r0, [r1, r2]
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <Adc_read_data+0x168>)
 800246e:	4303      	orrs	r3, r0
 8002470:	528b      	strh	r3, [r1, r2]
	}
	//--------------------------------------------------------------------
	// Режим чтения концентрации
	if((f_ReadFid == TRUE) || (f_TimeCalibFidStart == TRUE)){
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <Adc_read_data+0x16c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d02f      	beq.n	80024da <Adc_read_data+0xe6>
 800247a:	4b36      	ldr	r3, [pc, #216]	; (8002554 <Adc_read_data+0x160>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d02b      	beq.n	80024da <Adc_read_data+0xe6>
		d_printf("\n\r");
#endif
#endif
	}
	//--------------------------------------------------------------------
	SetGasValue();
 8002482:	f7ff f84d 	bl	8001520 <SetGasValue>
	//--------------------------------------------------------------------
	// Перевод в единицу измерения НКПР
	if(dev.Config.Unit & (1 << CFG_UNIT_VALUE_vol)){
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <Adc_read_data+0x158>)
 8002488:	88db      	ldrh	r3, [r3, #6]
 800248a:	07db      	lsls	r3, r3, #31
 800248c:	d50a      	bpl.n	80024a4 <Adc_read_data+0xb0>
		dev.RegInput.dwValue_mg_m3 = (dev.RegInput.Value*dev.Config.ScaleKoef)/10;
 800248e:	4c2f      	ldr	r4, [pc, #188]	; (800254c <Adc_read_data+0x158>)
 8002490:	23f6      	movs	r3, #246	; 0xf6
 8002492:	5ae3      	ldrh	r3, [r4, r3]
 8002494:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8002496:	4358      	muls	r0, r3
 8002498:	210a      	movs	r1, #10
 800249a:	f7fd fed1 	bl	8000240 <__divsi3>
 800249e:	238a      	movs	r3, #138	; 0x8a
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	50e0      	str	r0, [r4, r3]
	}
	//--------------------------------------------------------------------
	if(f_PeriodFid == FALSE){
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <Adc_read_data+0x164>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <Adc_read_data+0xe4>
		f_ReadFid = FALSE;
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <Adc_read_data+0x16c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
		if(f_TimeCalibFid == FALSE){
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <Adc_read_data+0x15c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <Adc_read_data+0xe4>
			f_TimeCalibFidStart = FALSE;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <Adc_read_data+0x160>)
 80024bc:	701a      	strb	r2, [r3, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80024be:	23a0      	movs	r3, #160	; 0xa0
 80024c0:	05db      	lsls	r3, r3, #23
 80024c2:	2108      	movs	r1, #8
 80024c4:	6299      	str	r1, [r3, #40]	; 0x28
			// Выключаем питание на сенсоре
			LL_GPIO_ResetOutputPin(TURN_ON_IR_GPIO_Port, TURN_ON_IR_Pin);
			dev.Status &=~ (1 << STATUS_BIT_FID_PWR);
 80024c6:	4821      	ldr	r0, [pc, #132]	; (800254c <Adc_read_data+0x158>)
 80024c8:	3125      	adds	r1, #37	; 0x25
 80024ca:	31ff      	adds	r1, #255	; 0xff
 80024cc:	5a43      	ldrh	r3, [r0, r1]
 80024ce:	045b      	lsls	r3, r3, #17
 80024d0:	0c5b      	lsrs	r3, r3, #17
 80024d2:	5243      	strh	r3, [r0, r1]
			//--------------------------------------------------------------------
			count_ADC_result = 0;
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <Adc_read_data+0x170>)
 80024d6:	601a      	str	r2, [r3, #0]
			//--------------------------------------------------------------------
		}
	}
	//--------------------------------------------------------------------

}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
		ADC_result = ADS_Read_adc(dev.Config.ScaleADC);
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <Adc_read_data+0x158>)
 80024dc:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80024de:	f7ff fd67 	bl	8001fb0 <ADS_Read_adc>
 80024e2:	0001      	movs	r1, r0
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <Adc_read_data+0x174>)
 80024e6:	6018      	str	r0, [r3, #0]
		if(count_ADC_result < ADС_POINTS_DEFAULT){
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <Adc_read_data+0x170>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b0d      	cmp	r3, #13
 80024ee:	d802      	bhi.n	80024f6 <Adc_read_data+0x102>
			count_ADC_result ++;
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <Adc_read_data+0x170>)
 80024f4:	6013      	str	r3, [r2, #0]
		ADC_result = adcFilterMiddleRun(&stFilterSensor, ADC_result);
 80024f6:	481d      	ldr	r0, [pc, #116]	; (800256c <Adc_read_data+0x178>)
 80024f8:	f7ff fdd7 	bl	80020aa <adcFilterMiddleRun>
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <Adc_read_data+0x174>)
 80024fe:	6018      	str	r0, [r3, #0]
		dev.RegInput.Volt_Sens = ADS_Read_volt(dev.RegInput.ADC_0);
 8002500:	4c12      	ldr	r4, [pc, #72]	; (800254c <Adc_read_data+0x158>)
 8002502:	2391      	movs	r3, #145	; 0x91
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	5ae0      	ldrh	r0, [r4, r3]
 8002508:	f7ff fd70 	bl	8001fec <ADS_Read_volt>
 800250c:	23fe      	movs	r3, #254	; 0xfe
 800250e:	52e0      	strh	r0, [r4, r3]
		dev.RegInput.TempSensor = ADC_in_Celsius;
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <Adc_read_data+0x154>)
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	23fc      	movs	r3, #252	; 0xfc
 8002516:	52e2      	strh	r2, [r4, r3]
		if(count_ADC_result >= ADС_POINTS_DEFAULT){
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <Adc_read_data+0x170>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b0d      	cmp	r3, #13
 800251e:	d9b0      	bls.n	8002482 <Adc_read_data+0x8e>
			dev.RegInput.ADC_0 = ADC_result;
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <Adc_read_data+0x174>)
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <Adc_read_data+0x158>)
 8002526:	2391      	movs	r3, #145	; 0x91
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	52d1      	strh	r1, [r2, r3]
 800252c:	e7a9      	b.n	8002482 <Adc_read_data+0x8e>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	1ff80078 	.word	0x1ff80078
 8002534:	00000bb8 	.word	0x00000bb8
 8002538:	20000400 	.word	0x20000400
 800253c:	20000020 	.word	0x20000020
 8002540:	1ff8007a 	.word	0x1ff8007a
 8002544:	1ff8007e 	.word	0x1ff8007e
 8002548:	20000406 	.word	0x20000406
 800254c:	2000042c 	.word	0x2000042c
 8002550:	20000562 	.word	0x20000562
 8002554:	20000563 	.word	0x20000563
 8002558:	2000055e 	.word	0x2000055e
 800255c:	ffff8000 	.word	0xffff8000
 8002560:	2000055f 	.word	0x2000055f
 8002564:	20000428 	.word	0x20000428
 8002568:	20000408 	.word	0x20000408
 800256c:	200003e0 	.word	0x200003e0

08002570 <mb_crc>:
}

//==============================================================================

uint16_t mb_crc(uint8_t *buf, int len)
{
 8002570:	b530      	push	{r4, r5, lr}
 8002572:	0005      	movs	r5, r0
 8002574:	000c      	movs	r4, r1
	uint16_t crc = 0xFFFF;

	for (int pos = 0; pos < len; pos++)
 8002576:	2100      	movs	r1, #0
	uint16_t crc = 0xFFFF;
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <mb_crc+0x34>)
	for (int pos = 0; pos < len; pos++)
 800257a:	e00b      	b.n	8002594 <mb_crc+0x24>
			if ((crc & 0x0001) != 0) {
				crc >>= 1;
				crc ^= 0xA001;
			}
			else
				crc >>= 1;
 800257c:	0840      	lsrs	r0, r0, #1
		for (int i = 8; i != 0; i--) {
 800257e:	3b01      	subs	r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <mb_crc+0x22>
			if ((crc & 0x0001) != 0) {
 8002584:	07c2      	lsls	r2, r0, #31
 8002586:	d5f9      	bpl.n	800257c <mb_crc+0xc>
				crc >>= 1;
 8002588:	0840      	lsrs	r0, r0, #1
				crc ^= 0xA001;
 800258a:	4a07      	ldr	r2, [pc, #28]	; (80025a8 <mb_crc+0x38>)
 800258c:	4050      	eors	r0, r2
 800258e:	b280      	uxth	r0, r0
 8002590:	e7f5      	b.n	800257e <mb_crc+0xe>
	for (int pos = 0; pos < len; pos++)
 8002592:	3101      	adds	r1, #1
 8002594:	42a1      	cmp	r1, r4
 8002596:	da03      	bge.n	80025a0 <mb_crc+0x30>
		crc ^= (uint16_t)buf[pos];
 8002598:	5c6b      	ldrb	r3, [r5, r1]
 800259a:	4058      	eors	r0, r3
		for (int i = 8; i != 0; i--) {
 800259c:	2308      	movs	r3, #8
 800259e:	e7ef      	b.n	8002580 <mb_crc+0x10>
		}
	}

	return crc;
}
 80025a0:	bd30      	pop	{r4, r5, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	0000ffff 	.word	0x0000ffff
 80025a8:	ffffa001 	.word	0xffffa001

080025ac <modbusSet>:

//==============================================================================

void modbusSet(void){

	if(mbUnlock){
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <modbusSet+0x4c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d014      	beq.n	80025de <modbusSet+0x32>
		AccessCode = 1;
 80025b4:	4b11      	ldr	r3, [pc, #68]	; (80025fc <modbusSet+0x50>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	801a      	strh	r2, [r3, #0]
	else{
		AccessCode = 0;
	}


	if(mbServiceMode){
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <modbusSet+0x54>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <modbusSet+0x3a>
		dev.Status |= (1 << STATUS_BIT_MAIN_MODE);
 80025c2:	4910      	ldr	r1, [pc, #64]	; (8002604 <modbusSet+0x58>)
 80025c4:	2296      	movs	r2, #150	; 0x96
 80025c6:	0052      	lsls	r2, r2, #1
 80025c8:	5a8b      	ldrh	r3, [r1, r2]
 80025ca:	2004      	movs	r0, #4
 80025cc:	4303      	orrs	r3, r0
 80025ce:	528b      	strh	r3, [r1, r2]
	}else{
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
	}

	mbHoldDevStatus = dev.Status;
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <modbusSet+0x58>)
 80025d2:	2396      	movs	r3, #150	; 0x96
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	5ad2      	ldrh	r2, [r2, r3]
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <modbusSet+0x5c>)
 80025da:	801a      	strh	r2, [r3, #0]

}
 80025dc:	4770      	bx	lr
		AccessCode = 0;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <modbusSet+0x50>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	e7e9      	b.n	80025ba <modbusSet+0xe>
		dev.Status &=~ (1 << STATUS_BIT_MAIN_MODE);
 80025e6:	4907      	ldr	r1, [pc, #28]	; (8002604 <modbusSet+0x58>)
 80025e8:	2296      	movs	r2, #150	; 0x96
 80025ea:	0052      	lsls	r2, r2, #1
 80025ec:	5a8b      	ldrh	r3, [r1, r2]
 80025ee:	2004      	movs	r0, #4
 80025f0:	4383      	bics	r3, r0
 80025f2:	528b      	strh	r3, [r1, r2]
 80025f4:	e7ec      	b.n	80025d0 <modbusSet+0x24>
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	2000057f 	.word	0x2000057f
 80025fc:	20000566 	.word	0x20000566
 8002600:	2000057e 	.word	0x2000057e
 8002604:	2000042c 	.word	0x2000042c
 8002608:	2000057c 	.word	0x2000057c

0800260c <__CMD_PUT_WORD>:

//==============================================================================

void __CMD_PUT_WORD(uint16_t DATA)
{
	Value[0] = HIBYTE(DATA);
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__CMD_PUT_WORD+0x34>)
 800260e:	680b      	ldr	r3, [r1, #0]
 8002610:	0a02      	lsrs	r2, r0, #8
 8002612:	701a      	strb	r2, [r3, #0]
	Value[1] = LOBYTE(DATA);
 8002614:	7058      	strb	r0, [r3, #1]

	(*CountByte) += 2;		Count --;	Value +=2;	AnswerLen += 2;
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <__CMD_PUT_WORD+0x38>)
 8002618:	6810      	ldr	r0, [r2, #0]
 800261a:	7802      	ldrb	r2, [r0, #0]
 800261c:	3202      	adds	r2, #2
 800261e:	7002      	strb	r2, [r0, #0]
 8002620:	4809      	ldr	r0, [pc, #36]	; (8002648 <__CMD_PUT_WORD+0x3c>)
 8002622:	8802      	ldrh	r2, [r0, #0]
 8002624:	3a01      	subs	r2, #1
 8002626:	8002      	strh	r2, [r0, #0]
 8002628:	3302      	adds	r3, #2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <__CMD_PUT_WORD+0x40>)
 800262e:	7813      	ldrb	r3, [r2, #0]
 8002630:	3302      	adds	r3, #2
 8002632:	7013      	strb	r3, [r2, #0]
	Address ++;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <__CMD_PUT_WORD+0x44>)
 8002636:	8813      	ldrh	r3, [r2, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	8013      	strh	r3, [r2, #0]
}
 800263c:	4770      	bx	lr
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	20000578 	.word	0x20000578
 8002644:	20000570 	.word	0x20000570
 8002648:	2000056e 	.word	0x2000056e
 800264c:	2000056c 	.word	0x2000056c
 8002650:	2000056a 	.word	0x2000056a

08002654 <CmdFunc3>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Чтение группы регистров HOLD

uint32_t CmdFunc3(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002654:	b510      	push	{r4, lr}
 8002656:	0014      	movs	r4, r2
	//	tmp = 0;
	//	wModeCalib = st_dgs_state.ModeCalib;

	out[0] = mas[0];	// Адрес устройства
 8002658:	7803      	ldrb	r3, [r0, #0]
 800265a:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 800265c:	7843      	ldrb	r3, [r0, #1]
 800265e:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);	// Адрес начального регистра
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <CmdFunc3+0xb4>)
 8002662:	7882      	ldrb	r2, [r0, #2]
 8002664:	705a      	strb	r2, [r3, #1]
 8002666:	78c2      	ldrb	r2, [r0, #3]
 8002668:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);	// Количество регистров
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <CmdFunc3+0xb8>)
 800266c:	7902      	ldrb	r2, [r0, #4]
 800266e:	705a      	strb	r2, [r3, #1]
 8002670:	7942      	ldrb	r2, [r0, #5]
 8002672:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);	// Выходной поток
 8002674:	1ce1      	adds	r1, r4, #3
 8002676:	4a26      	ldr	r2, [pc, #152]	; (8002710 <CmdFunc3+0xbc>)
 8002678:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);		// Счётчик
 800267a:	1ca1      	adds	r1, r4, #2
 800267c:	4a25      	ldr	r2, [pc, #148]	; (8002714 <CmdFunc3+0xc0>)
 800267e:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;				// Длина ответа (в байтах)
 8002680:	4a25      	ldr	r2, [pc, #148]	; (8002718 <CmdFunc3+0xc4>)
 8002682:	2103      	movs	r1, #3
 8002684:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 8002686:	2200      	movs	r2, #0
 8002688:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	1e53      	subs	r3, r2, #1
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b7c      	cmp	r3, #124	; 0x7c
 8002692:	d814      	bhi.n	80026be <CmdFunc3+0x6a>
	}
	//------------------------------------------------------------------------------------------------------------------
	do
	{
#if DEF_REG_ADR_BASE_x03 > 0
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <CmdFunc3+0xb4>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0149      	lsls	r1, r1, #5
 800269c:	428b      	cmp	r3, r1
 800269e:	d323      	bcc.n	80026e8 <CmdFunc3+0x94>
#endif
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80026a0:	491e      	ldr	r1, [pc, #120]	; (800271c <CmdFunc3+0xc8>)
 80026a2:	428b      	cmp	r3, r1
 80026a4:	d820      	bhi.n	80026e8 <CmdFunc3+0x94>
		if( Count > DEF_REG_CNT_x03 ) break;
 80026a6:	2a7a      	cmp	r2, #122	; 0x7a
 80026a8:	d81e      	bhi.n	80026e8 <CmdFunc3+0x94>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 80026aa:	189a      	adds	r2, r3, r2
 80026ac:	491c      	ldr	r1, [pc, #112]	; (8002720 <CmdFunc3+0xcc>)
 80026ae:	428a      	cmp	r2, r1
 80026b0:	dc1a      	bgt.n	80026e8 <CmdFunc3+0x94>
#if DEF_REG_ADR_BASE_x03 > 0
		Address -= DEF_REG_ADR_BASE_x03;
 80026b2:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <CmdFunc3+0xd0>)
 80026b4:	4694      	mov	ip, r2
 80026b6:	4463      	add	r3, ip
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <CmdFunc3+0xb4>)
 80026ba:	8013      	strh	r3, [r2, #0]
		//#define MB_READ_DBG

#ifdef MB_READ_DBG
		d_printf("\n\r%02x CMD Modbus 3 (%02d) : read adr %03x : data ", mas[0], Count, Address);
#endif
		while( Count )
 80026bc:	e010      	b.n	80026e0 <CmdFunc3+0x8c>
		out[1] |= 0x80;
 80026be:	7862      	ldrb	r2, [r4, #1]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	425b      	negs	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80026c8:	2302      	movs	r3, #2
 80026ca:	70a3      	strb	r3, [r4, #2]
		return(3);
 80026cc:	2003      	movs	r0, #3
 80026ce:	e011      	b.n	80026f4 <CmdFunc3+0xa0>
		{
#ifdef MB_READ_DBG
			d_printf(" %04x", *reg_x03[ Address ].pVar);
#endif
			CMD_PUT_WORD( *reg_x03[ Address ].pVar );
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <CmdFunc3+0xb4>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4a14      	ldr	r2, [pc, #80]	; (8002728 <CmdFunc3+0xd4>)
 80026d8:	589b      	ldr	r3, [r3, r2]
 80026da:	8818      	ldrh	r0, [r3, #0]
 80026dc:	f7ff ff96 	bl	800260c <__CMD_PUT_WORD>
		while( Count )
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <CmdFunc3+0xb8>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f3      	bne.n	80026d0 <CmdFunc3+0x7c>
		}

	} while(0);
	//------------------------------------------------------------------------------------------------------------------
	if( Count )
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <CmdFunc3+0xb8>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <CmdFunc3+0xa2>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return( AnswerLen );
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <CmdFunc3+0xc4>)
 80026f2:	7818      	ldrb	r0, [r3, #0]
}
 80026f4:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 80026f6:	7862      	ldrb	r2, [r4, #1]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	425b      	negs	r3, r3
 80026fc:	4313      	orrs	r3, r2
 80026fe:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002700:	2302      	movs	r3, #2
 8002702:	70a3      	strb	r3, [r4, #2]
		return(3);
 8002704:	2003      	movs	r0, #3
 8002706:	e7f5      	b.n	80026f4 <CmdFunc3+0xa0>
 8002708:	2000056a 	.word	0x2000056a
 800270c:	2000056e 	.word	0x2000056e
 8002710:	20000578 	.word	0x20000578
 8002714:	20000570 	.word	0x20000570
 8002718:	2000056c 	.word	0x2000056c
 800271c:	00001079 	.word	0x00001079
 8002720:	0000107a 	.word	0x0000107a
 8002724:	fffff000 	.word	0xfffff000
 8002728:	08004088 	.word	0x08004088

0800272c <CmdFunc4>:

//======================================================================================================================================
// Чтение группы регистров INPUT

uint32_t CmdFunc4(uint8_t *mas, uint32_t len, uint8_t *out)
{
 800272c:	b510      	push	{r4, lr}
 800272e:	0014      	movs	r4, r2

	//	tmp = 0;
	out[0] = mas[0];	// Адрес устройства
 8002730:	7803      	ldrb	r3, [r0, #0]
 8002732:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];	// Функция
 8002734:	7843      	ldrb	r3, [r0, #1]
 8002736:	7053      	strb	r3, [r2, #1]

	CMD_LOAD_WORD(mas+2, Address);		// Адрес начального регистра
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <CmdFunc4+0xa0>)
 800273a:	7882      	ldrb	r2, [r0, #2]
 800273c:	705a      	strb	r2, [r3, #1]
 800273e:	78c2      	ldrb	r2, [r0, #3]
 8002740:	701a      	strb	r2, [r3, #0]
	CMD_LOAD_WORD(mas+4, Count);		// Количество регистров
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <CmdFunc4+0xa4>)
 8002744:	7902      	ldrb	r2, [r0, #4]
 8002746:	705a      	strb	r2, [r3, #1]
 8002748:	7942      	ldrb	r2, [r0, #5]
 800274a:	701a      	strb	r2, [r3, #0]

	Value		= (BYTE*)&(out[3]);		// Выходной поток
 800274c:	1ce1      	adds	r1, r4, #3
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <CmdFunc4+0xa8>)
 8002750:	6011      	str	r1, [r2, #0]
	CountByte	= &(out[2]);			// Счётчик
 8002752:	1ca1      	adds	r1, r4, #2
 8002754:	4a20      	ldr	r2, [pc, #128]	; (80027d8 <CmdFunc4+0xac>)
 8002756:	6011      	str	r1, [r2, #0]
	AnswerLen	= 3;					// Длина ответа (в байтах)
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <CmdFunc4+0xb0>)
 800275a:	2103      	movs	r1, #3
 800275c:	7011      	strb	r1, [r2, #0]
	*CountByte = 0;
 800275e:	2200      	movs	r2, #0
 8002760:	70a2      	strb	r2, [r4, #2]
	//------------------------------------------------------------------------------------------------------------------
	if( !Count || (Count > 125) )
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	1e53      	subs	r3, r2, #1
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b7c      	cmp	r3, #124	; 0x7c
 800276a:	d80f      	bhi.n	800278c <CmdFunc4+0x60>
	{
		/*if( Count > DEF_REG_CNT_x04 ) break;
		if( (Address + Count) > DEF_REG_CNT_x04 ) break;*/

		if( Address < DEF_REG_ADR_BASE_x04 ) break;
		if( Address >= (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <CmdFunc4+0xa0>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	2b31      	cmp	r3, #49	; 0x31
 8002772:	d804      	bhi.n	800277e <CmdFunc4+0x52>
		if( Count > DEF_REG_CNT_x04 ) break;
 8002774:	2a32      	cmp	r2, #50	; 0x32
 8002776:	d802      	bhi.n	800277e <CmdFunc4+0x52>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x04 + DEF_REG_CNT_x04) ) break;
 8002778:	189b      	adds	r3, r3, r2
 800277a:	2b32      	cmp	r3, #50	; 0x32
 800277c:	dd17      	ble.n	80027ae <CmdFunc4+0x82>
#endif
			CMD_PUT_WORD( *reg_x04[ Address ] );
		}
	} while(0);
	//-----------------------------------------------------------------------------------------------------------------
	if(Count)
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <CmdFunc4+0xa4>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <CmdFunc4+0x8c>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Address;
		return(3);
	}
	//------------------------------------------------------------------------------------------------------------------
	return(AnswerLen);
 8002786:	4b15      	ldr	r3, [pc, #84]	; (80027dc <CmdFunc4+0xb0>)
 8002788:	7818      	ldrb	r0, [r3, #0]
}
 800278a:	bd10      	pop	{r4, pc}
		out[1] |= 0x80;
 800278c:	7862      	ldrb	r2, [r4, #1]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	425b      	negs	r3, r3
 8002792:	4313      	orrs	r3, r2
 8002794:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002796:	2302      	movs	r3, #2
 8002798:	70a3      	strb	r3, [r4, #2]
		return(3);
 800279a:	2003      	movs	r0, #3
 800279c:	e7f5      	b.n	800278a <CmdFunc4+0x5e>
			CMD_PUT_WORD( *reg_x04[ Address ] );
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <CmdFunc4+0xa0>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <CmdFunc4+0xb4>)
 80027a6:	589b      	ldr	r3, [r3, r2]
 80027a8:	8818      	ldrh	r0, [r3, #0]
 80027aa:	f7ff ff2f 	bl	800260c <__CMD_PUT_WORD>
		while( Count )
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <CmdFunc4+0xa4>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f3      	bne.n	800279e <CmdFunc4+0x72>
 80027b6:	e7e2      	b.n	800277e <CmdFunc4+0x52>
		out[1] |= 0x80;
 80027b8:	7862      	ldrb	r2, [r4, #1]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	425b      	negs	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Data_Address;
 80027c2:	2302      	movs	r3, #2
 80027c4:	70a3      	strb	r3, [r4, #2]
		return(3);
 80027c6:	2003      	movs	r0, #3
 80027c8:	e7df      	b.n	800278a <CmdFunc4+0x5e>
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	2000056a 	.word	0x2000056a
 80027d0:	2000056e 	.word	0x2000056e
 80027d4:	20000578 	.word	0x20000578
 80027d8:	20000570 	.word	0x20000570
 80027dc:	2000056c 	.word	0x2000056c
 80027e0:	08004458 	.word	0x08004458

080027e4 <__CMD_SAVE_WORD>:
void __CMD_SAVE_WORD(TVAR *var)
{
#define DATA	*(var->pVar)
#define SAVE	var->bSave

	HIBYTE(DATA)	= Value[0];
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <__CMD_SAVE_WORD+0x34>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	6801      	ldr	r1, [r0, #0]
 80027ec:	704a      	strb	r2, [r1, #1]
	LOBYTE(DATA)	= Value[1];
 80027ee:	785a      	ldrb	r2, [r3, #1]
 80027f0:	6801      	ldr	r1, [r0, #0]
 80027f2:	700a      	strb	r2, [r1, #0]
	if(SAVE) Save	= SAVE;
 80027f4:	7902      	ldrb	r2, [r0, #4]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d001      	beq.n	80027fe <__CMD_SAVE_WORD+0x1a>
 80027fa:	4908      	ldr	r1, [pc, #32]	; (800281c <__CMD_SAVE_WORD+0x38>)
 80027fc:	700a      	strb	r2, [r1, #0]
	Address ++;
 80027fe:	4908      	ldr	r1, [pc, #32]	; (8002820 <__CMD_SAVE_WORD+0x3c>)
 8002800:	880a      	ldrh	r2, [r1, #0]
 8002802:	3201      	adds	r2, #1
 8002804:	800a      	strh	r2, [r1, #0]
	Count --;
 8002806:	4907      	ldr	r1, [pc, #28]	; (8002824 <__CMD_SAVE_WORD+0x40>)
 8002808:	880a      	ldrh	r2, [r1, #0]
 800280a:	3a01      	subs	r2, #1
 800280c:	800a      	strh	r2, [r1, #0]
	Value += 2;
 800280e:	3302      	adds	r3, #2
 8002810:	4a01      	ldr	r2, [pc, #4]	; (8002818 <__CMD_SAVE_WORD+0x34>)
 8002812:	6013      	str	r3, [r2, #0]

#undef DATA
#undef SAVE
}
 8002814:	4770      	bx	lr
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000578 	.word	0x20000578
 800281c:	20000576 	.word	0x20000576
 8002820:	2000056a 	.word	0x2000056a
 8002824:	2000056e 	.word	0x2000056e

08002828 <check_block>:
//======================================================================================================================================


// Защита от случайной порчи настроек

BOOL check_block(void){
 8002828:	b500      	push	{lr}
 800282a:	b083      	sub	sp, #12

	uint16_t tmp;

	if(		( !mbServiceMode && (Address != 0x1000)) || \
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <check_block+0xb0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <check_block+0x1e>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <check_block+0xb4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <check_block+0x2a>
			( !mbUnlock && (Address != 0x1001) && (Address != 0x1000)))
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <check_block+0xb8>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <check_block+0xbc>)
 8002842:	429a      	cmp	r2, r3
 8002844:	d005      	beq.n	8002852 <check_block+0x2a>
	if(		( !mbServiceMode && (Address != 0x1000)) || \
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <check_block+0xb8>)
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	429a      	cmp	r2, r3
 8002850:	d13e      	bne.n	80028d0 <check_block+0xa8>
		return(FALSE);
	}

	// *}

	HIBYTE(tmp)	= Value[0];
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <check_block+0xc0>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	7811      	ldrb	r1, [r2, #0]
 8002858:	466b      	mov	r3, sp
 800285a:	71d9      	strb	r1, [r3, #7]
	LOBYTE(tmp)	= Value[1];
 800285c:	7852      	ldrb	r2, [r2, #1]
 800285e:	719a      	strb	r2, [r3, #6]

	if(Address == 0x1001){
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <check_block+0xb8>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <check_block+0xbc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d011      	beq.n	800288e <check_block+0x66>
			return(FALSE);
		}

	}

	if(Address == 0x1000){
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	0152      	lsls	r2, r2, #5
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <check_block+0x90>
			serviceTimerStop();
		}

	}

	if( mbServiceMode || mbUnlock)
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <check_block+0xb0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <check_block+0x5a>
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <check_block+0xb4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d028      	beq.n	80028d4 <check_block+0xac>
	{ // Преобразователь в сервисном режиме, продлеваем время
		serviceTimerStart( SERVICE_TIME_MODBUS );
 8002882:	20f1      	movs	r0, #241	; 0xf1
 8002884:	f7ff fce8 	bl	8002258 <serviceTimerStart>
	}


	return(TRUE);
 8002888:	2001      	movs	r0, #1
}
 800288a:	b003      	add	sp, #12
 800288c:	bd00      	pop	{pc}
		if((tmp == 0xFACD)){
 800288e:	466a      	mov	r2, sp
 8002890:	3206      	adds	r2, #6
 8002892:	8812      	ldrh	r2, [r2, #0]
 8002894:	4915      	ldr	r1, [pc, #84]	; (80028ec <check_block+0xc4>)
 8002896:	428a      	cmp	r2, r1
 8002898:	d005      	beq.n	80028a6 <check_block+0x7e>
		}else if(tmp == 0){
 800289a:	2a00      	cmp	r2, #0
 800289c:	d107      	bne.n	80028ae <check_block+0x86>
			mbUnlock = FALSE;
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <check_block+0xb4>)
 80028a0:	2100      	movs	r1, #0
 80028a2:	7011      	strb	r1, [r2, #0]
 80028a4:	e7e1      	b.n	800286a <check_block+0x42>
			mbUnlock = TRUE;
 80028a6:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <check_block+0xb4>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	7011      	strb	r1, [r2, #0]
 80028ac:	e7dd      	b.n	800286a <check_block+0x42>
		}else if(!mbUnlock){
 80028ae:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <check_block+0xb4>)
 80028b0:	7810      	ldrb	r0, [r2, #0]
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d1d9      	bne.n	800286a <check_block+0x42>
 80028b6:	e7e8      	b.n	800288a <check_block+0x62>
		if( TESTBIT( tmp, STATUS_BIT_MAIN_MODE))
 80028b8:	466b      	mov	r3, sp
 80028ba:	3306      	adds	r3, #6
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	075b      	lsls	r3, r3, #29
 80028c0:	d503      	bpl.n	80028ca <check_block+0xa2>
			mbServiceMode = TRUE;
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <check_block+0xb0>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e7d3      	b.n	8002872 <check_block+0x4a>
			serviceTimerStop();
 80028ca:	f7ff fccb 	bl	8002264 <serviceTimerStop>
 80028ce:	e7d0      	b.n	8002872 <check_block+0x4a>
		return(FALSE);
 80028d0:	2000      	movs	r0, #0
 80028d2:	e7da      	b.n	800288a <check_block+0x62>
	return(TRUE);
 80028d4:	2001      	movs	r0, #1
 80028d6:	e7d8      	b.n	800288a <check_block+0x62>
 80028d8:	2000057e 	.word	0x2000057e
 80028dc:	2000057f 	.word	0x2000057f
 80028e0:	2000056a 	.word	0x2000056a
 80028e4:	00001001 	.word	0x00001001
 80028e8:	20000578 	.word	0x20000578
 80028ec:	0000facd 	.word	0x0000facd

080028f0 <modbusCMD>:

//==============================================================================

void modbusCMD(void){
 80028f0:	b500      	push	{lr}
 80028f2:	b083      	sub	sp, #12

	uint16_t cmd;

	if(Address != 0x1001)
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <modbusCMD+0xa4>)
 80028f6:	881a      	ldrh	r2, [r3, #0]
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <modbusCMD+0xa8>)
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d119      	bne.n	8002932 <modbusCMD+0x42>
		return;

	HIBYTE(cmd)	= Value[0];
 80028fe:	4b27      	ldr	r3, [pc, #156]	; (800299c <modbusCMD+0xac>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	7811      	ldrb	r1, [r2, #0]
 8002904:	466b      	mov	r3, sp
 8002906:	71d9      	strb	r1, [r3, #7]
	LOBYTE(cmd)	= Value[1];
 8002908:	7852      	ldrb	r2, [r2, #1]
 800290a:	719a      	strb	r2, [r3, #6]
	HIBYTE(cmd)	= Value[0];
 800290c:	3306      	adds	r3, #6

	switch(cmd){
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <modbusCMD+0xb0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01e      	beq.n	8002954 <modbusCMD+0x64>
 8002916:	d814      	bhi.n	8002942 <modbusCMD+0x52>
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <modbusCMD+0xb4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d025      	beq.n	800296a <modbusCMD+0x7a>
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <modbusCMD+0xb8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <modbusCMD+0x46>

	case DEF_CODE_CALIB_GAS_ZERO:
		d_printf("\n\rCalib Zero");
 8002924:	4821      	ldr	r0, [pc, #132]	; (80029ac <modbusCMD+0xbc>)
 8002926:	f7fe fea9 	bl	800167c <d_printf>
#ifdef CONFIG_MIPEX
		Mipex_transmit_commmand(COMMAND_INIT);
		Mipex_transmit_commmand(COMMAND_ZERO2);
#else
		CalibGasZero();
 800292a:	f7fe fcd9 	bl	80012e0 <CalibGasZero>
		eeprom_config_write();
 800292e:	f7fe ff93 	bl	8001858 <eeprom_config_write>
#endif
	default:
		break;
	}

}
 8002932:	b003      	add	sp, #12
 8002934:	bd00      	pop	{pc}
	switch(cmd){
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1fb      	bne.n	8002932 <modbusCMD+0x42>
		f_TimeCalibFid = FALSE;
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <modbusCMD+0xc0>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
		break;
 8002940:	e7f7      	b.n	8002932 <modbusCMD+0x42>
	switch(cmd){
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <modbusCMD+0xc4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <modbusCMD+0x74>
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <modbusCMD+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d1f1      	bne.n	8002932 <modbusCMD+0x42>
		factory_config_read();
 800294e:	f7fe ffad 	bl	80018ac <factory_config_read>
		break;
 8002952:	e7ee      	b.n	8002932 <modbusCMD+0x42>
		d_printf("\n\rCalib Conc");
 8002954:	4819      	ldr	r0, [pc, #100]	; (80029bc <modbusCMD+0xcc>)
 8002956:	f7fe fe91 	bl	800167c <d_printf>
		CalibGasConc();
 800295a:	f7fe fce9 	bl	8001330 <CalibGasConc>
		eeprom_config_write();
 800295e:	f7fe ff7b 	bl	8001858 <eeprom_config_write>
		break;
 8002962:	e7e6      	b.n	8002932 <modbusCMD+0x42>
		factory_config_write();
 8002964:	f7fe ff98 	bl	8001898 <factory_config_write>
		break;
 8002968:	e7e3      	b.n	8002932 <modbusCMD+0x42>
		f_TimeCalibFid = TRUE;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <modbusCMD+0xc0>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
		if(f_ReadFid == TRUE){
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <modbusCMD+0xd0>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d00a      	beq.n	800298e <modbusCMD+0x9e>
			CntCalibFid = ((dev.Config.FID&0xFF) - TIMER_CALIB_FID) - CntReadFid;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <modbusCMD+0xd4>)
 800297a:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800297c:	23ff      	movs	r3, #255	; 0xff
 800297e:	4013      	ands	r3, r2
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <modbusCMD+0xd8>)
 8002982:	8812      	ldrh	r2, [r2, #0]
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	3b05      	subs	r3, #5
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <modbusCMD+0xdc>)
 800298a:	8013      	strh	r3, [r2, #0]
 800298c:	e7d1      	b.n	8002932 <modbusCMD+0x42>
			f_TimeCalibFidStart = TRUE;
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <modbusCMD+0xe0>)
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e7ce      	b.n	8002932 <modbusCMD+0x42>
 8002994:	2000056a 	.word	0x2000056a
 8002998:	00001001 	.word	0x00001001
 800299c:	20000578 	.word	0x20000578
 80029a0:	000064c4 	.word	0x000064c4
 80029a4:	000014ae 	.word	0x000014ae
 80029a8:	0000185d 	.word	0x0000185d
 80029ac:	08003fa0 	.word	0x08003fa0
 80029b0:	20000562 	.word	0x20000562
 80029b4:	0000abce 	.word	0x0000abce
 80029b8:	0000ce4b 	.word	0x0000ce4b
 80029bc:	08003fb0 	.word	0x08003fb0
 80029c0:	2000055f 	.word	0x2000055f
 80029c4:	2000042c 	.word	0x2000042c
 80029c8:	20000410 	.word	0x20000410
 80029cc:	2000040c 	.word	0x2000040c
 80029d0:	20000563 	.word	0x20000563

080029d4 <CmdFunc6>:

//--------------------------------------------------------------------------------------------------------------------------------------
// Запись одного регистра
uint32_t CmdFunc6(uint8_t *mas, uint32_t len, uint8_t *out)
{
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	0004      	movs	r4, r0
 80029d8:	0015      	movs	r5, r2
	Address 	= TO_M_WORD(mas+2);			// Адрес сохраняемого регистра
 80029da:	7883      	ldrb	r3, [r0, #2]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	78c2      	ldrb	r2, [r0, #3]
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	4a30      	ldr	r2, [pc, #192]	; (8002aa4 <CmdFunc6+0xd0>)
 80029e4:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[4]);			// Значение регистра
 80029e6:	1d02      	adds	r2, r0, #4
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <CmdFunc6+0xd4>)
 80029ea:	601a      	str	r2, [r3, #0]
	Count   	= 1;						// Количество регистров
 80029ec:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <CmdFunc6+0xd8>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	801a      	strh	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 80029f2:	3205      	adds	r2, #5
 80029f4:	0001      	movs	r1, r0
 80029f6:	0028      	movs	r0, r5
 80029f8:	f000 fdd8 	bl	80035ac <memcpy>
	Save = FALSE;
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <CmdFunc6+0xdc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
	//------------------------------------------------------------------------------------------------------------------

#define BLOCK_MODBUS

#ifdef BLOCK_MODBUS
	if(!check_block()){
 8002a02:	f7ff ff11 	bl	8002828 <check_block>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d108      	bne.n	8002a1c <CmdFunc6+0x48>
		out[1] |= 0x80;
 8002a0a:	786a      	ldrb	r2, [r5, #1]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	425b      	negs	r3, r3
 8002a10:	4313      	orrs	r3, r2
 8002a12:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8002a14:	2304      	movs	r3, #4
 8002a16:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002a18:	3003      	adds	r0, #3
		stMain.bUpDate = TRUE;
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
	modbusCMD();
 8002a1c:	f7ff ff68 	bl	80028f0 <modbusCMD>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <CmdFunc6+0xd0>)
 8002a22:	881a      	ldrh	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d30a      	bcc.n	8002a42 <CmdFunc6+0x6e>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <CmdFunc6+0xe0>)
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d807      	bhi.n	8002a42 <CmdFunc6+0x6e>
		if( Count > DEF_REG_CNT_x03 ) break;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <CmdFunc6+0xd8>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	2b7a      	cmp	r3, #122	; 0x7a
 8002a38:	d803      	bhi.n	8002a42 <CmdFunc6+0x6e>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002a3a:	18d3      	adds	r3, r2, r3
 8002a3c:	491e      	ldr	r1, [pc, #120]	; (8002ab8 <CmdFunc6+0xe4>)
 8002a3e:	428b      	cmp	r3, r1
 8002a40:	dd0c      	ble.n	8002a5c <CmdFunc6+0x88>
	if( Count )
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <CmdFunc6+0xd8>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <CmdFunc6+0xb8>
		out[1] |= 0x80;
 8002a4a:	786a      	ldrb	r2, [r5, #1]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	425b      	negs	r3, r3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002a54:	2302      	movs	r3, #2
 8002a56:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002a58:	2003      	movs	r0, #3
 8002a5a:	e7de      	b.n	8002a1a <CmdFunc6+0x46>
		Address -= DEF_REG_ADR_BASE_x03;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <CmdFunc6+0xe8>)
 8002a5e:	469c      	mov	ip, r3
 8002a60:	4462      	add	r2, ip
 8002a62:	b292      	uxth	r2, r2
 8002a64:	4e0f      	ldr	r6, [pc, #60]	; (8002aa4 <CmdFunc6+0xd0>)
 8002a66:	8032      	strh	r2, [r6, #0]
		d_printf("\n\r%02x CMD Modbus 6 : write adr %03x : data ", mas[0], Address);
 8002a68:	7821      	ldrb	r1, [r4, #0]
 8002a6a:	4815      	ldr	r0, [pc, #84]	; (8002ac0 <CmdFunc6+0xec>)
 8002a6c:	f7fe fe06 	bl	800167c <d_printf>
		d_printf(" %02x%02x", Value[0], Value[1]);
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <CmdFunc6+0xd4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	7819      	ldrb	r1, [r3, #0]
 8002a76:	785a      	ldrb	r2, [r3, #1]
 8002a78:	4812      	ldr	r0, [pc, #72]	; (8002ac4 <CmdFunc6+0xf0>)
 8002a7a:	f7fe fdff 	bl	800167c <d_printf>
		CMD_SAVE_WORD( &reg_x03[ Address ] );
 8002a7e:	8830      	ldrh	r0, [r6, #0]
 8002a80:	00c0      	lsls	r0, r0, #3
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <CmdFunc6+0xf4>)
 8002a84:	18c0      	adds	r0, r0, r3
 8002a86:	f7ff fead 	bl	80027e4 <__CMD_SAVE_WORD>
 8002a8a:	e7da      	b.n	8002a42 <CmdFunc6+0x6e>
	modbusSet();
 8002a8c:	f7ff fd8e 	bl	80025ac <modbusSet>
	if(Save)
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <CmdFunc6+0xdc>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <CmdFunc6+0xc8>
	return(6);
 8002a98:	2006      	movs	r0, #6
 8002a9a:	e7be      	b.n	8002a1a <CmdFunc6+0x46>
		eeprom_config_write();
 8002a9c:	f7fe fedc 	bl	8001858 <eeprom_config_write>
	return(6);
 8002aa0:	2006      	movs	r0, #6
 8002aa2:	e7ba      	b.n	8002a1a <CmdFunc6+0x46>
 8002aa4:	2000056a 	.word	0x2000056a
 8002aa8:	20000578 	.word	0x20000578
 8002aac:	2000056e 	.word	0x2000056e
 8002ab0:	20000576 	.word	0x20000576
 8002ab4:	00001079 	.word	0x00001079
 8002ab8:	0000107a 	.word	0x0000107a
 8002abc:	fffff000 	.word	0xfffff000
 8002ac0:	08003fc0 	.word	0x08003fc0
 8002ac4:	08003ff0 	.word	0x08003ff0
 8002ac8:	08004088 	.word	0x08004088

08002acc <CmdFunc8>:
//======================================================================================================================================
// Эхо
uint32_t CmdFunc8(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002acc:	b510      	push	{r4, lr}
 8002ace:	0001      	movs	r1, r0
 8002ad0:	0010      	movs	r0, r2
	memcpy((char*)out, (char*)mas, 6);
 8002ad2:	2206      	movs	r2, #6
 8002ad4:	f000 fd6a 	bl	80035ac <memcpy>
	return(6);
}
 8002ad8:	2006      	movs	r0, #6
 8002ada:	bd10      	pop	{r4, pc}

08002adc <CmdFunc12>:
//======================================================================================================================================
// Передача памяти архива
uint32_t CmdFunc12(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002adc:	b510      	push	{r4, lr}
 8002ade:	b082      	sub	sp, #8

	int i;
	uint16_t num_p;
	uint32_t ptr;

	CMD_LOAD_WORD(mas+2, num_p);		// Номер пакета
 8002ae0:	466b      	mov	r3, sp
 8002ae2:	7881      	ldrb	r1, [r0, #2]
 8002ae4:	71d9      	strb	r1, [r3, #7]
 8002ae6:	78c1      	ldrb	r1, [r0, #3]
 8002ae8:	7199      	strb	r1, [r3, #6]
 8002aea:	3306      	adds	r3, #6

	if( num_p >=  (ARHIV_NUM_ITEMS * ARHIV_SIZE_ITEM * 4) / 128)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	2b3f      	cmp	r3, #63	; 0x3f
 8002af0:	d801      	bhi.n	8002af6 <CmdFunc12+0x1a>
		out[1] |= 0x80;
		out[2] = ERROR_Illegal_Data_Value;
		return(3);
	}

	for(i=0; i < 32; i++){
 8002af2:	2100      	movs	r1, #0
 8002af4:	e014      	b.n	8002b20 <CmdFunc12+0x44>
		out[1] |= 0x80;
 8002af6:	7851      	ldrb	r1, [r2, #1]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	425b      	negs	r3, r3
 8002afc:	430b      	orrs	r3, r1
 8002afe:	7053      	strb	r3, [r2, #1]
		out[2] = ERROR_Illegal_Data_Value;
 8002b00:	2303      	movs	r3, #3
 8002b02:	7093      	strb	r3, [r2, #2]
		return(3);
 8002b04:	2003      	movs	r0, #3
 8002b06:	e00e      	b.n	8002b26 <CmdFunc12+0x4a>
		ptr = ARHIV_BASE_ADR + 128 * num_p + i * 4;
 8002b08:	466b      	mov	r3, sp
 8002b0a:	3306      	adds	r3, #6
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	01db      	lsls	r3, r3, #7
 8002b10:	0088      	lsls	r0, r1, #2
 8002b12:	181b      	adds	r3, r3, r0
 8002b14:	4c05      	ldr	r4, [pc, #20]	; (8002b2c <CmdFunc12+0x50>)
 8002b16:	46a4      	mov	ip, r4
 8002b18:	4463      	add	r3, ip
		((uint32_t *)out)[i] = *(__IO uint32_t *)((uint32_t)ptr);
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	5013      	str	r3, [r2, r0]
	for(i=0; i < 32; i++){
 8002b1e:	3101      	adds	r1, #1
 8002b20:	291f      	cmp	r1, #31
 8002b22:	ddf1      	ble.n	8002b08 <CmdFunc12+0x2c>
	}
	return(3+128);
 8002b24:	2083      	movs	r0, #131	; 0x83
}
 8002b26:	b002      	add	sp, #8
 8002b28:	bd10      	pop	{r4, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	08006000 	.word	0x08006000

08002b30 <CmdFunc16>:

//======================================================================================================================================
// Запись группы регистров
uint32_t CmdFunc16(uint8_t *mas, uint32_t len, uint8_t *out)
{
 8002b30:	b530      	push	{r4, r5, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	0004      	movs	r4, r0
 8002b36:	0015      	movs	r5, r2
	wModeCalib = 0;
 8002b38:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <CmdFunc16+0x110>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	801a      	strh	r2, [r3, #0]

	Address 	= TO_M_WORD(mas+2);			// Адрес первого сохраняемого регистра
 8002b3e:	7883      	ldrb	r3, [r0, #2]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	78c2      	ldrb	r2, [r0, #3]
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <CmdFunc16+0x114>)
 8002b48:	8013      	strh	r3, [r2, #0]
	Count	 	= TO_M_WORD(mas+4);			// Количество регистров
 8002b4a:	7903      	ldrb	r3, [r0, #4]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	7942      	ldrb	r2, [r0, #5]
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	4a3d      	ldr	r2, [pc, #244]	; (8002c48 <CmdFunc16+0x118>)
 8002b54:	8013      	strh	r3, [r2, #0]
	Value		= (BYTE*)&(mas[7]);			// Значение регистра
 8002b56:	1dc2      	adds	r2, r0, #7
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <CmdFunc16+0x11c>)
 8002b5a:	601a      	str	r2, [r3, #0]

	memcpy((char*)out, (char*)mas, 6);
 8002b5c:	2206      	movs	r2, #6
 8002b5e:	0001      	movs	r1, r0
 8002b60:	0028      	movs	r0, r5
 8002b62:	f000 fd23 	bl	80035ac <memcpy>
	Save = FALSE;
 8002b66:	2200      	movs	r2, #0
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <CmdFunc16+0x120>)
 8002b6a:	701a      	strb	r2, [r3, #0]
	//TSGMPoint *sgm = &SGMpoint[0];
	//------------------------------------------------------------------------------------------------------------------
#ifdef BLOCK_MODBUS

	if(!check_block()){
 8002b6c:	f7ff fe5c 	bl	8002828 <check_block>
 8002b70:	2800      	cmp	r0, #0
 8002b72:	d109      	bne.n	8002b88 <CmdFunc16+0x58>

		out[1] |= 0x80;
 8002b74:	786a      	ldrb	r2, [r5, #1]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	425b      	negs	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Slave_Device_Failure;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002b82:	3003      	adds	r0, #3
#endif
	}
	//------------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------------
	return(6);
}
 8002b84:	b003      	add	sp, #12
 8002b86:	bd30      	pop	{r4, r5, pc}
	modbusCMD();
 8002b88:	f7ff feb2 	bl	80028f0 <modbusCMD>
	if( !Count || (Count > 125) )
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <CmdFunc16+0x118>)
 8002b8e:	881a      	ldrh	r2, [r3, #0]
 8002b90:	1e53      	subs	r3, r2, #1
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b7c      	cmp	r3, #124	; 0x7c
 8002b96:	d81b      	bhi.n	8002bd0 <CmdFunc16+0xa0>
		if( Address < DEF_REG_ADR_BASE_x03 ) break;
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <CmdFunc16+0x114>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	0149      	lsls	r1, r1, #5
 8002ba0:	428b      	cmp	r3, r1
 8002ba2:	d308      	bcc.n	8002bb6 <CmdFunc16+0x86>
		if( Address >= (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002ba4:	492b      	ldr	r1, [pc, #172]	; (8002c54 <CmdFunc16+0x124>)
 8002ba6:	428b      	cmp	r3, r1
 8002ba8:	d805      	bhi.n	8002bb6 <CmdFunc16+0x86>
		if( Count > DEF_REG_CNT_x03 ) break;
 8002baa:	2a7a      	cmp	r2, #122	; 0x7a
 8002bac:	d803      	bhi.n	8002bb6 <CmdFunc16+0x86>
		if( (Address + Count) > (DEF_REG_ADR_BASE_x03 + DEF_REG_CNT_x03) ) break;
 8002bae:	1899      	adds	r1, r3, r2
 8002bb0:	4829      	ldr	r0, [pc, #164]	; (8002c58 <CmdFunc16+0x128>)
 8002bb2:	4281      	cmp	r1, r0
 8002bb4:	dd15      	ble.n	8002be2 <CmdFunc16+0xb2>
	if( Count )
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <CmdFunc16+0x118>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d033      	beq.n	8002c26 <CmdFunc16+0xf6>
		out[1] |= 0x80;
 8002bbe:	786a      	ldrb	r2, [r5, #1]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002bcc:	2003      	movs	r0, #3
 8002bce:	e7d9      	b.n	8002b84 <CmdFunc16+0x54>
		out[1] |= 0x80;
 8002bd0:	786a      	ldrb	r2, [r5, #1]
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	425b      	negs	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	706b      	strb	r3, [r5, #1]
		out[2] = ERROR_Illegal_Data_Address;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	70ab      	strb	r3, [r5, #2]
		return(3);
 8002bde:	2003      	movs	r0, #3
 8002be0:	e7d0      	b.n	8002b84 <CmdFunc16+0x54>
		Address -= DEF_REG_ADR_BASE_x03;
 8002be2:	491e      	ldr	r1, [pc, #120]	; (8002c5c <CmdFunc16+0x12c>)
 8002be4:	468c      	mov	ip, r1
 8002be6:	4463      	add	r3, ip
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	4916      	ldr	r1, [pc, #88]	; (8002c44 <CmdFunc16+0x114>)
 8002bec:	800b      	strh	r3, [r1, #0]
		d_printf("\n\r%02x CMD Modbus 16 (%02d) : write adr %03x : data ", mas[0], Count, Address, *Value);
 8002bee:	7821      	ldrb	r1, [r4, #0]
 8002bf0:	4816      	ldr	r0, [pc, #88]	; (8002c4c <CmdFunc16+0x11c>)
 8002bf2:	6800      	ldr	r0, [r0, #0]
 8002bf4:	7800      	ldrb	r0, [r0, #0]
 8002bf6:	9000      	str	r0, [sp, #0]
 8002bf8:	4819      	ldr	r0, [pc, #100]	; (8002c60 <CmdFunc16+0x130>)
 8002bfa:	f7fe fd3f 	bl	800167c <d_printf>
		while( Count )
 8002bfe:	e00d      	b.n	8002c1c <CmdFunc16+0xec>
			d_printf(" %02x%02x", Value[0], Value[1]);
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <CmdFunc16+0x11c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	7819      	ldrb	r1, [r3, #0]
 8002c06:	785a      	ldrb	r2, [r3, #1]
 8002c08:	4816      	ldr	r0, [pc, #88]	; (8002c64 <CmdFunc16+0x134>)
 8002c0a:	f7fe fd37 	bl	800167c <d_printf>
			CMD_SAVE_WORD( &reg_x03[ Address ] );
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <CmdFunc16+0x114>)
 8002c10:	8818      	ldrh	r0, [r3, #0]
 8002c12:	00c0      	lsls	r0, r0, #3
 8002c14:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <CmdFunc16+0x138>)
 8002c16:	18c0      	adds	r0, r0, r3
 8002c18:	f7ff fde4 	bl	80027e4 <__CMD_SAVE_WORD>
		while( Count )
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <CmdFunc16+0x118>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ed      	bne.n	8002c00 <CmdFunc16+0xd0>
 8002c24:	e7c7      	b.n	8002bb6 <CmdFunc16+0x86>
	modbusSet();
 8002c26:	f7ff fcc1 	bl	80025ac <modbusSet>
	if(Save)
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <CmdFunc16+0x120>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <CmdFunc16+0x106>
	return(6);
 8002c32:	2006      	movs	r0, #6
 8002c34:	e7a6      	b.n	8002b84 <CmdFunc16+0x54>
		eeprom_config_write();
 8002c36:	f7fe fe0f 	bl	8001858 <eeprom_config_write>
	return(6);
 8002c3a:	2006      	movs	r0, #6
 8002c3c:	e7a2      	b.n	8002b84 <CmdFunc16+0x54>
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	20000580 	.word	0x20000580
 8002c44:	2000056a 	.word	0x2000056a
 8002c48:	2000056e 	.word	0x2000056e
 8002c4c:	20000578 	.word	0x20000578
 8002c50:	20000576 	.word	0x20000576
 8002c54:	00001079 	.word	0x00001079
 8002c58:	0000107a 	.word	0x0000107a
 8002c5c:	fffff000 	.word	0xfffff000
 8002c60:	08003ffc 	.word	0x08003ffc
 8002c64:	08003ff0 	.word	0x08003ff0
 8002c68:	08004088 	.word	0x08004088

08002c6c <cmdModbusRTU>:
{
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	0014      	movs	r4, r2
	out[0] = mas[0];
 8002c70:	7803      	ldrb	r3, [r0, #0]
 8002c72:	7013      	strb	r3, [r2, #0]
	out[1] = mas[1];
 8002c74:	7843      	ldrb	r3, [r0, #1]
 8002c76:	7053      	strb	r3, [r2, #1]
	switch (mas[1])
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	2a0d      	cmp	r2, #13
 8002c7e:	d82e      	bhi.n	8002cde <cmdModbusRTU+0x72>
 8002c80:	0093      	lsls	r3, r2, #2
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <cmdModbusRTU+0x8c>)
 8002c84:	58d3      	ldr	r3, [r2, r3]
 8002c86:	469f      	mov	pc, r3
		AnswerLen = CmdFunc3(mas, len, out);
 8002c88:	0022      	movs	r2, r4
 8002c8a:	f7ff fce3 	bl	8002654 <CmdFunc3>
 8002c8e:	0005      	movs	r5, r0
	if(AnswerLen)
 8002c90:	2d00      	cmp	r5, #0
 8002c92:	d009      	beq.n	8002ca8 <cmdModbusRTU+0x3c>
		crc = mb_crc(out, AnswerLen);
 8002c94:	0029      	movs	r1, r5
 8002c96:	0020      	movs	r0, r4
 8002c98:	f7ff fc6a 	bl	8002570 <mb_crc>
		out[AnswerLen]   = LOBYTE(crc);
 8002c9c:	5560      	strb	r0, [r4, r5]
		out[AnswerLen+1] = HIBYTE(crc);
 8002c9e:	1c6b      	adds	r3, r5, #1
 8002ca0:	0400      	lsls	r0, r0, #16
 8002ca2:	0e00      	lsrs	r0, r0, #24
 8002ca4:	54e0      	strb	r0, [r4, r3]
		AnswerLen += 2;
 8002ca6:	3502      	adds	r5, #2
}
 8002ca8:	0028      	movs	r0, r5
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
		AnswerLen = CmdFunc4(mas, len, out);
 8002cac:	0022      	movs	r2, r4
 8002cae:	f7ff fd3d 	bl	800272c <CmdFunc4>
 8002cb2:	0005      	movs	r5, r0
		break;
 8002cb4:	e7ec      	b.n	8002c90 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc6(mas, len, out);
 8002cb6:	0022      	movs	r2, r4
 8002cb8:	f7ff fe8c 	bl	80029d4 <CmdFunc6>
 8002cbc:	0005      	movs	r5, r0
		break;
 8002cbe:	e7e7      	b.n	8002c90 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc8(mas, len, out);
 8002cc0:	0022      	movs	r2, r4
 8002cc2:	f7ff ff03 	bl	8002acc <CmdFunc8>
 8002cc6:	0005      	movs	r5, r0
		break;
 8002cc8:	e7e2      	b.n	8002c90 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc12(mas, len, out);
 8002cca:	0022      	movs	r2, r4
 8002ccc:	f7ff ff06 	bl	8002adc <CmdFunc12>
 8002cd0:	0005      	movs	r5, r0
		break;
 8002cd2:	e7dd      	b.n	8002c90 <cmdModbusRTU+0x24>
		AnswerLen = CmdFunc16(mas, len, out);
 8002cd4:	0022      	movs	r2, r4
 8002cd6:	f7ff ff2b 	bl	8002b30 <CmdFunc16>
 8002cda:	0005      	movs	r5, r0
		break;
 8002cdc:	e7d8      	b.n	8002c90 <cmdModbusRTU+0x24>
		d_printf("\n\r\n\r ERROR_Illegal_Function");
 8002cde:	4807      	ldr	r0, [pc, #28]	; (8002cfc <cmdModbusRTU+0x90>)
 8002ce0:	f7fe fccc 	bl	800167c <d_printf>
		out[1] |= 0x80;
 8002ce4:	7862      	ldrb	r2, [r4, #1]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	425b      	negs	r3, r3
 8002cea:	4313      	orrs	r3, r2
 8002cec:	7063      	strb	r3, [r4, #1]
		out[2] = ERROR_Illegal_Function;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	70a3      	strb	r3, [r4, #2]
		AnswerLen = 3;
 8002cf2:	2503      	movs	r5, #3
 8002cf4:	e7ce      	b.n	8002c94 <cmdModbusRTU+0x28>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	08004050 	.word	0x08004050
 8002cfc:	08004034 	.word	0x08004034

08002d00 <mb_proc>:
void mb_proc(void){
 8002d00:	b570      	push	{r4, r5, r6, lr}
	if(!f_mbs_packet_rcv)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <mb_proc+0x84>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00f      	beq.n	8002d2a <mb_proc+0x2a>
	f_mbs_packet_rcv = FALSE;
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <mb_proc+0x84>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	if(mbs_rx_pkt_len < 4)
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <mb_proc+0x88>)
 8002d12:	881c      	ldrh	r4, [r3, #0]
 8002d14:	2c03      	cmp	r4, #3
 8002d16:	d908      	bls.n	8002d2a <mb_proc+0x2a>
	uint16_t crc = mb_crc(mbs_pkt_rx,mbs_rx_pkt_len-2);
 8002d18:	1ea6      	subs	r6, r4, #2
 8002d1a:	4d1c      	ldr	r5, [pc, #112]	; (8002d8c <mb_proc+0x8c>)
 8002d1c:	0031      	movs	r1, r6
 8002d1e:	0028      	movs	r0, r5
 8002d20:	f7ff fc26 	bl	8002570 <mb_crc>
	if((mbs_pkt_rx[0] == 0x55) && \
 8002d24:	782b      	ldrb	r3, [r5, #0]
 8002d26:	2b55      	cmp	r3, #85	; 0x55
 8002d28:	d000      	beq.n	8002d2c <mb_proc+0x2c>
}
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8002d2c:	5daa      	ldrb	r2, [r5, r6]
 8002d2e:	b2c3      	uxtb	r3, r0
	if((mbs_pkt_rx[0] == 0x55) && \
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1fa      	bne.n	8002d2a <mb_proc+0x2a>
			(mbs_pkt_rx[mbs_rx_pkt_len-1] == HIBYTE(crc))){
 8002d34:	1e63      	subs	r3, r4, #1
 8002d36:	5ceb      	ldrb	r3, [r5, r3]
 8002d38:	0400      	lsls	r0, r0, #16
 8002d3a:	0e00      	lsrs	r0, r0, #24
			(mbs_pkt_rx[mbs_rx_pkt_len-2] == LOBYTE(crc)) && \
 8002d3c:	4283      	cmp	r3, r0
 8002d3e:	d1f4      	bne.n	8002d2a <mb_proc+0x2a>
		mbs_tx_len = cmdModbusRTU(mbs_pkt_rx, mbs_rx_pkt_len, mbs_pkt_tx);
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <mb_proc+0x90>)
 8002d42:	0021      	movs	r1, r4
 8002d44:	0028      	movs	r0, r5
 8002d46:	f7ff ff91 	bl	8002c6c <cmdModbusRTU>
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <mb_proc+0x94>)
 8002d4c:	8018      	strh	r0, [r3, #0]
		mbs_tx_cnt = 0;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <mb_proc+0x98>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d58:	2101      	movs	r1, #1
 8002d5a:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <mb_proc+0x9c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	2404      	movs	r4, #4
 8002d64:	43a2      	bics	r2, r4
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	f381 8810 	msr	PRIMASK, r1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	317f      	adds	r1, #127	; 0x7f
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f380 8810 	msr	PRIMASK, r0
}
 8002d80:	e7d3      	b.n	8002d2a <mb_proc+0x2a>
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	200001c5 	.word	0x200001c5
 8002d88:	200003ca 	.word	0x200003ca
 8002d8c:	200001c8 	.word	0x200001c8
 8002d90:	200002c8 	.word	0x200002c8
 8002d94:	200003ce 	.word	0x200003ce
 8002d98:	200003cc 	.word	0x200003cc
 8002d9c:	40004800 	.word	0x40004800

08002da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002da0:	480d      	ldr	r0, [pc, #52]	; (8002dd8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002da2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002da4:	480d      	ldr	r0, [pc, #52]	; (8002ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8002da6:	490e      	ldr	r1, [pc, #56]	; (8002de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da8:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <LoopForever+0xe>)
  movs r3, #0
 8002daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dac:	e002      	b.n	8002db4 <LoopCopyDataInit>

08002dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002db2:	3304      	adds	r3, #4

08002db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db8:	d3f9      	bcc.n	8002dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dbc:	4c0b      	ldr	r4, [pc, #44]	; (8002dec <LoopForever+0x16>)
  movs r3, #0
 8002dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dc0:	e001      	b.n	8002dc6 <LoopFillZerobss>

08002dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dc4:	3204      	adds	r2, #4

08002dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc8:	d3fb      	bcc.n	8002dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dca:	f7fe f88f 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f000 fbc9 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd2:	f7fd ff17 	bl	8000c04 <main>

08002dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002dd6:	e7fe      	b.n	8002dd6 <LoopForever>
   ldr   r0, =_estack
 8002dd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002de4:	08004564 	.word	0x08004564
  ldr r2, =_sbss
 8002de8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002dec:	20000594 	.word	0x20000594

08002df0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <DMA1_Channel1_IRQHandler>
	...

08002df4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002df4:	b510      	push	{r4, lr}
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002df6:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002df8:	07db      	lsls	r3, r3, #31
 8002dfa:	d411      	bmi.n	8002e20 <LL_ADC_Init+0x2c>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002dfc:	68c3      	ldr	r3, [r0, #12]
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <LL_ADC_Init+0x30>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	684a      	ldr	r2, [r1, #4]
 8002e04:	688c      	ldr	r4, [r1, #8]
 8002e06:	4322      	orrs	r2, r4
 8002e08:	68cc      	ldr	r4, [r1, #12]
 8002e0a:	4322      	orrs	r2, r4
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60c3      	str	r3, [r0, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );
    
    MODIFY_REG(ADCx->CFGR2,
 8002e10:	6903      	ldr	r3, [r0, #16]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	680a      	ldr	r2, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	6103      	str	r3, [r0, #16]
  ErrorStatus status = SUCCESS;
 8002e1c:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002e1e:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002e20:	2001      	movs	r0, #1
 8002e22:	e7fc      	b.n	8002e1e <LL_ADC_Init+0x2a>
 8002e24:	ffff3fc7 	.word	0xffff3fc7

08002e28 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	6883      	ldr	r3, [r0, #8]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002e2c:	07db      	lsls	r3, r3, #31
 8002e2e:	d40f      	bmi.n	8002e50 <LL_ADC_REG_Init+0x28>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002e30:	68c3      	ldr	r3, [r0, #12]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <LL_ADC_REG_Init+0x2c>)
 8002e34:	401a      	ands	r2, r3
 8002e36:	680b      	ldr	r3, [r1, #0]
 8002e38:	684c      	ldr	r4, [r1, #4]
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	688c      	ldr	r4, [r1, #8]
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	68cc      	ldr	r4, [r1, #12]
 8002e42:	4323      	orrs	r3, r4
 8002e44:	6909      	ldr	r1, [r1, #16]
 8002e46:	430b      	orrs	r3, r1
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60c3      	str	r3, [r0, #12]
  ErrorStatus status = SUCCESS;
 8002e4c:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8002e4e:	bd10      	pop	{r4, pc}
    status = ERROR;
 8002e50:	2001      	movs	r0, #1
 8002e52:	e7fc      	b.n	8002e4e <LL_ADC_REG_Init+0x26>
 8002e54:	fffec23c 	.word	0xfffec23c

08002e58 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002e5c:	7900      	ldrb	r0, [r0, #4]
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d050      	beq.n	8002f04 <LL_EXTI_Init+0xac>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2a00      	cmp	r2, #0
 8002e66:	d057      	beq.n	8002f18 <LL_EXTI_Init+0xc0>
    {
      switch (EXTI_InitStruct->Mode)
 8002e68:	7958      	ldrb	r0, [r3, #5]
 8002e6a:	2801      	cmp	r0, #1
 8002e6c:	d018      	beq.n	8002ea0 <LL_EXTI_Init+0x48>
 8002e6e:	2802      	cmp	r0, #2
 8002e70:	d020      	beq.n	8002eb4 <LL_EXTI_Init+0x5c>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d00b      	beq.n	8002e8e <LL_EXTI_Init+0x36>
 8002e76:	2001      	movs	r0, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002e78:	799a      	ldrb	r2, [r3, #6]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	d04b      	beq.n	8002f16 <LL_EXTI_Init+0xbe>
      {
        switch (EXTI_InitStruct->Trigger)
 8002e7e:	2a02      	cmp	r2, #2
 8002e80:	d02c      	beq.n	8002edc <LL_EXTI_Init+0x84>
 8002e82:	2a03      	cmp	r2, #3
 8002e84:	d034      	beq.n	8002ef0 <LL_EXTI_Init+0x98>
 8002e86:	2a01      	cmp	r2, #1
 8002e88:	d01e      	beq.n	8002ec8 <LL_EXTI_Init+0x70>
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	e043      	b.n	8002f16 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002e8e:	4923      	ldr	r1, [pc, #140]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002e90:	684c      	ldr	r4, [r1, #4]
 8002e92:	4394      	bics	r4, r2
 8002e94:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002e96:	680a      	ldr	r2, [r1, #0]
 8002e98:	681c      	ldr	r4, [r3, #0]
 8002e9a:	4322      	orrs	r2, r4
 8002e9c:	600a      	str	r2, [r1, #0]
}
 8002e9e:	e7eb      	b.n	8002e78 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002ea0:	491e      	ldr	r1, [pc, #120]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002ea2:	6808      	ldr	r0, [r1, #0]
 8002ea4:	4390      	bics	r0, r2
 8002ea6:	6008      	str	r0, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002ea8:	684a      	ldr	r2, [r1, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	4302      	orrs	r2, r0
 8002eae:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8002eb0:	2000      	movs	r0, #0
}
 8002eb2:	e7e1      	b.n	8002e78 <LL_EXTI_Init+0x20>
  SET_BIT(EXTI->IMR, ExtiLine);
 8002eb4:	4919      	ldr	r1, [pc, #100]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002eb6:	6808      	ldr	r0, [r1, #0]
 8002eb8:	4302      	orrs	r2, r0
 8002eba:	600a      	str	r2, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002ebc:	684a      	ldr	r2, [r1, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	604a      	str	r2, [r1, #4]
 8002ec4:	2000      	movs	r0, #0
}
 8002ec6:	e7d7      	b.n	8002e78 <LL_EXTI_Init+0x20>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002ec8:	4a14      	ldr	r2, [pc, #80]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002eca:	68d1      	ldr	r1, [r2, #12]
 8002ecc:	681c      	ldr	r4, [r3, #0]
 8002ece:	43a1      	bics	r1, r4
 8002ed0:	60d1      	str	r1, [r2, #12]
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ed2:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ed4:	6891      	ldr	r1, [r2, #8]
 8002ed6:	430b      	orrs	r3, r1
 8002ed8:	6093      	str	r3, [r2, #8]
}
 8002eda:	e01c      	b.n	8002f16 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002edc:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002ede:	6891      	ldr	r1, [r2, #8]
 8002ee0:	681c      	ldr	r4, [r3, #0]
 8002ee2:	43a1      	bics	r1, r4
 8002ee4:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ee6:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002ee8:	68d1      	ldr	r1, [r2, #12]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
}
 8002eee:	e012      	b.n	8002f16 <LL_EXTI_Init+0xbe>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002ef2:	6891      	ldr	r1, [r2, #8]
 8002ef4:	681c      	ldr	r4, [r3, #0]
 8002ef6:	4321      	orrs	r1, r4
 8002ef8:	6091      	str	r1, [r2, #8]
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002efa:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002efc:	68d1      	ldr	r1, [r2, #12]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	60d3      	str	r3, [r2, #12]
}
 8002f02:	e008      	b.n	8002f16 <LL_EXTI_Init+0xbe>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002f04:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <LL_EXTI_Init+0xc4>)
 8002f06:	6811      	ldr	r1, [r2, #0]
 8002f08:	681c      	ldr	r4, [r3, #0]
 8002f0a:	43a1      	bics	r1, r4
 8002f0c:	6011      	str	r1, [r2, #0]
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002f0e:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f10:	6853      	ldr	r3, [r2, #4]
 8002f12:	438b      	bics	r3, r1
 8002f14:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8002f16:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e7fc      	b.n	8002f16 <LL_EXTI_Init+0xbe>
 8002f1c:	40010400 	.word	0x40010400

08002f20 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8002f22:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f24:	e016      	b.n	8002f54 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002f26:	68c6      	ldr	r6, [r0, #12]
 8002f28:	002b      	movs	r3, r5
 8002f2a:	436b      	muls	r3, r5
 8002f2c:	005f      	lsls	r7, r3, #1
 8002f2e:	18ff      	adds	r7, r7, r3
 8002f30:	43fc      	mvns	r4, r7
 8002f32:	46a4      	mov	ip, r4
 8002f34:	43be      	bics	r6, r7
 8002f36:	690f      	ldr	r7, [r1, #16]
 8002f38:	435f      	muls	r7, r3
 8002f3a:	433e      	orrs	r6, r7
 8002f3c:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f3e:	684c      	ldr	r4, [r1, #4]
 8002f40:	2c02      	cmp	r4, #2
 8002f42:	d027      	beq.n	8002f94 <LL_GPIO_Init+0x74>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002f44:	6804      	ldr	r4, [r0, #0]
 8002f46:	4665      	mov	r5, ip
 8002f48:	402c      	ands	r4, r5
 8002f4a:	684d      	ldr	r5, [r1, #4]
 8002f4c:	436b      	muls	r3, r5
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8002f52:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f54:	680c      	ldr	r4, [r1, #0]
 8002f56:	0023      	movs	r3, r4
 8002f58:	40d3      	lsrs	r3, r2
 8002f5a:	d037      	beq.n	8002fcc <LL_GPIO_Init+0xac>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	0025      	movs	r5, r4
 8002f62:	401d      	ands	r5, r3
    if (currentpin)
 8002f64:	421c      	tst	r4, r3
 8002f66:	d0f4      	beq.n	8002f52 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f68:	684b      	ldr	r3, [r1, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d8da      	bhi.n	8002f26 <LL_GPIO_Init+0x6>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8002f70:	6883      	ldr	r3, [r0, #8]
 8002f72:	002c      	movs	r4, r5
 8002f74:	436c      	muls	r4, r5
 8002f76:	0066      	lsls	r6, r4, #1
 8002f78:	1936      	adds	r6, r6, r4
 8002f7a:	43b3      	bics	r3, r6
 8002f7c:	688e      	ldr	r6, [r1, #8]
 8002f7e:	4374      	muls	r4, r6
 8002f80:	4323      	orrs	r3, r4
 8002f82:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f84:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f86:	6843      	ldr	r3, [r0, #4]
 8002f88:	43a3      	bics	r3, r4
 8002f8a:	68ce      	ldr	r6, [r1, #12]
 8002f8c:	4374      	muls	r4, r6
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	6043      	str	r3, [r0, #4]
}
 8002f92:	e7c8      	b.n	8002f26 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8002f94:	2dff      	cmp	r5, #255	; 0xff
 8002f96:	d80b      	bhi.n	8002fb0 <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002f98:	6a06      	ldr	r6, [r0, #32]
 8002f9a:	001c      	movs	r4, r3
 8002f9c:	436c      	muls	r4, r5
 8002f9e:	4365      	muls	r5, r4
 8002fa0:	012c      	lsls	r4, r5, #4
 8002fa2:	1b64      	subs	r4, r4, r5
 8002fa4:	43a6      	bics	r6, r4
 8002fa6:	694c      	ldr	r4, [r1, #20]
 8002fa8:	4365      	muls	r5, r4
 8002faa:	4335      	orrs	r5, r6
 8002fac:	6205      	str	r5, [r0, #32]
}
 8002fae:	e7c9      	b.n	8002f44 <LL_GPIO_Init+0x24>
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002fb0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002fb2:	0a2d      	lsrs	r5, r5, #8
 8002fb4:	002c      	movs	r4, r5
 8002fb6:	436c      	muls	r4, r5
 8002fb8:	436c      	muls	r4, r5
 8002fba:	4365      	muls	r5, r4
 8002fbc:	012c      	lsls	r4, r5, #4
 8002fbe:	1b64      	subs	r4, r4, r5
 8002fc0:	43a6      	bics	r6, r4
 8002fc2:	694c      	ldr	r4, [r1, #20]
 8002fc4:	4365      	muls	r5, r4
 8002fc6:	4335      	orrs	r5, r6
 8002fc8:	6245      	str	r5, [r0, #36]	; 0x24
}
 8002fca:	e7bb      	b.n	8002f44 <LL_GPIO_Init+0x24>
  }


  return (SUCCESS);
}
 8002fcc:	2000      	movs	r0, #0
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fd0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002fd0:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002fd2:	6802      	ldr	r2, [r0, #0]
 8002fd4:	2401      	movs	r4, #1
 8002fd6:	43a2      	bics	r2, r4
 8002fd8:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002fda:	6803      	ldr	r3, [r0, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <LL_I2C_Init+0x6c>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	68ca      	ldr	r2, [r1, #12]
 8002fe2:	0212      	lsls	r2, r2, #8
 8002fe4:	688d      	ldr	r5, [r1, #8]
 8002fe6:	432a      	orrs	r2, r5
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002fec:	684b      	ldr	r3, [r1, #4]
 8002fee:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ff0:	6803      	ldr	r3, [r0, #0]
 8002ff2:	4323      	orrs	r3, r4
 8002ff4:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002ff6:	6883      	ldr	r3, [r0, #8]
 8002ff8:	4a11      	ldr	r2, [pc, #68]	; (8003040 <LL_I2C_Init+0x70>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002ffe:	6883      	ldr	r3, [r0, #8]
 8003000:	0adb      	lsrs	r3, r3, #11
 8003002:	02db      	lsls	r3, r3, #11
 8003004:	690a      	ldr	r2, [r1, #16]
 8003006:	698c      	ldr	r4, [r1, #24]
 8003008:	4322      	orrs	r2, r4
 800300a:	4313      	orrs	r3, r2
 800300c:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800300e:	690b      	ldr	r3, [r1, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003014:	6882      	ldr	r2, [r0, #8]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	4313      	orrs	r3, r2
 800301c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	4a08      	ldr	r2, [pc, #32]	; (8003044 <LL_I2C_Init+0x74>)
 8003022:	4013      	ands	r3, r2
 8003024:	680a      	ldr	r2, [r1, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800302a:	694b      	ldr	r3, [r1, #20]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800302c:	6842      	ldr	r2, [r0, #4]
 800302e:	4904      	ldr	r1, [pc, #16]	; (8003040 <LL_I2C_Init+0x70>)
 8003030:	400a      	ands	r2, r1
 8003032:	4313      	orrs	r3, r2
 8003034:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8003036:	2000      	movs	r0, #0
 8003038:	bd30      	pop	{r4, r5, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	ffffe0ff 	.word	0xffffe0ff
 8003040:	ffff7fff 	.word	0xffff7fff
 8003044:	ffcfffff 	.word	0xffcfffff

08003048 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	0004      	movs	r4, r0
 800304c:	000d      	movs	r5, r1
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800304e:	6803      	ldr	r3, [r0, #0]
 8003050:	07db      	lsls	r3, r3, #31
 8003052:	d42c      	bmi.n	80030ae <LL_LPUART_Init+0x66>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8003054:	6803      	ldr	r3, [r0, #0]
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <LL_LPUART_Init+0x74>)
 8003058:	4013      	ands	r3, r2
 800305a:	684a      	ldr	r2, [r1, #4]
 800305c:	68c9      	ldr	r1, [r1, #12]
 800305e:	430a      	orrs	r2, r1
 8003060:	6929      	ldr	r1, [r5, #16]
 8003062:	430a      	orrs	r2, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	6003      	str	r3, [r0, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8003068:	6843      	ldr	r3, [r0, #4]
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <LL_LPUART_Init+0x78>)
 800306c:	4013      	ands	r3, r2
 800306e:	68aa      	ldr	r2, [r5, #8]
 8003070:	4313      	orrs	r3, r2
 8003072:	6043      	str	r3, [r0, #4]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003074:	6883      	ldr	r3, [r0, #8]
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <LL_LPUART_Init+0x7c>)
 8003078:	4013      	ands	r3, r2
 800307a:	696a      	ldr	r2, [r5, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	6083      	str	r3, [r0, #8]
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8003080:	20c0      	movs	r0, #192	; 0xc0
 8003082:	0100      	lsls	r0, r0, #4
 8003084:	f000 f8e0 	bl	8003248 <LL_RCC_GetLPUARTClockFreq>

    /* Configure the LPUART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003088:	2800      	cmp	r0, #0
 800308a:	d012      	beq.n	80030b2 <LL_LPUART_Init+0x6a>
        && (LPUART_InitStruct->BaudRate != 0U))
 800308c:	682a      	ldr	r2, [r5, #0]
 800308e:	2a00      	cmp	r2, #0
 8003090:	d011      	beq.n	80030b6 <LL_LPUART_Init+0x6e>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8003092:	0e07      	lsrs	r7, r0, #24
 8003094:	0206      	lsls	r6, r0, #8
 8003096:	0850      	lsrs	r0, r2, #1
 8003098:	2100      	movs	r1, #0
 800309a:	1980      	adds	r0, r0, r6
 800309c:	4179      	adcs	r1, r7
 800309e:	2300      	movs	r3, #0
 80030a0:	f7fd f9ba 	bl	8000418 <__aeabi_uldivmod>
 80030a4:	0300      	lsls	r0, r0, #12
 80030a6:	0b00      	lsrs	r0, r0, #12
 80030a8:	60e0      	str	r0, [r4, #12]
    {
      status = SUCCESS;
 80030aa:	2000      	movs	r0, #0
}
 80030ac:	e000      	b.n	80030b0 <LL_LPUART_Init+0x68>
  ErrorStatus status = ERROR;
 80030ae:	2001      	movs	r0, #1
    }

  }

  return (status);
}
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ErrorStatus status = ERROR;
 80030b2:	2001      	movs	r0, #1
 80030b4:	e7fc      	b.n	80030b0 <LL_LPUART_Init+0x68>
 80030b6:	2001      	movs	r0, #1
 80030b8:	e7fa      	b.n	80030b0 <LL_LPUART_Init+0x68>
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	efffe9f3 	.word	0xefffe9f3
 80030c0:	ffffcfff 	.word	0xffffcfff
 80030c4:	fffffcff 	.word	0xfffffcff

080030c8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <RCC_GetHCLKClockFreq+0x14>)
 80030ca:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80030cc:	0912      	lsrs	r2, r2, #4
 80030ce:	230f      	movs	r3, #15
 80030d0:	4013      	ands	r3, r2
 80030d2:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <RCC_GetHCLKClockFreq+0x18>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	40d8      	lsrs	r0, r3
}
 80030d8:	4770      	bx	lr
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08003f0c 	.word	0x08003f0c

080030e4 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <RCC_GetPCLK1ClockFreq+0x14>)
 80030e6:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030e8:	0a12      	lsrs	r2, r2, #8
 80030ea:	2307      	movs	r3, #7
 80030ec:	4013      	ands	r3, r2
 80030ee:	4a03      	ldr	r2, [pc, #12]	; (80030fc <RCC_GetPCLK1ClockFreq+0x18>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	40d8      	lsrs	r0, r3
}
 80030f4:	4770      	bx	lr
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	40021000 	.word	0x40021000
 80030fc:	08003f1c 	.word	0x08003f1c

08003100 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003100:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8003104:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8003106:	03db      	lsls	r3, r3, #15
 8003108:	d405      	bmi.n	8003116 <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	06db      	lsls	r3, r3, #27
 8003110:	d512      	bpl.n	8003138 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8003112:	480b      	ldr	r0, [pc, #44]	; (8003140 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8003114:	e000      	b.n	8003118 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003116:	480b      	ldr	r0, [pc, #44]	; (8003144 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003118:	4908      	ldr	r1, [pc, #32]	; (800313c <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 800311a:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 800311c:	0c92      	lsrs	r2, r2, #18
 800311e:	230f      	movs	r3, #15
 8003120:	4013      	ands	r3, r2
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8003128:	68cb      	ldr	r3, [r1, #12]
 800312a:	0d9b      	lsrs	r3, r3, #22
 800312c:	2103      	movs	r1, #3
 800312e:	4019      	ands	r1, r3
 8003130:	3101      	adds	r1, #1
 8003132:	f7fc fffb 	bl	800012c <__udivsi3>
}
 8003136:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 800313a:	e7ed      	b.n	8003118 <RCC_PLL_GetFreqDomain_SYS+0x18>
 800313c:	40021000 	.word	0x40021000
 8003140:	003d0900 	.word	0x003d0900
 8003144:	007a1200 	.word	0x007a1200
 8003148:	08003f24 	.word	0x08003f24
 800314c:	00f42400 	.word	0x00f42400

08003150 <RCC_GetSystemClockFreq>:
{
 8003150:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <RCC_GetSystemClockFreq+0x60>)
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	230c      	movs	r3, #12
 8003158:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 800315a:	2b08      	cmp	r3, #8
 800315c:	d023      	beq.n	80031a6 <RCC_GetSystemClockFreq+0x56>
 800315e:	d809      	bhi.n	8003174 <RCC_GetSystemClockFreq+0x24>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <RCC_GetSystemClockFreq+0x2e>
 8003164:	2b04      	cmp	r3, #4
 8003166:	d114      	bne.n	8003192 <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <RCC_GetSystemClockFreq+0x60>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	06db      	lsls	r3, r3, #27
 800316e:	d51c      	bpl.n	80031aa <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8003170:	4810      	ldr	r0, [pc, #64]	; (80031b4 <RCC_GetSystemClockFreq+0x64>)
 8003172:	e00d      	b.n	8003190 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d10c      	bne.n	8003192 <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003178:	f7ff ffc2 	bl	8003100 <RCC_PLL_GetFreqDomain_SYS>
      break;
 800317c:	e008      	b.n	8003190 <RCC_GetSystemClockFreq+0x40>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <RCC_GetSystemClockFreq+0x60>)
 8003180:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003182:	0b52      	lsrs	r2, r2, #13
 8003184:	2307      	movs	r3, #7
 8003186:	4013      	ands	r3, r2
 8003188:	3301      	adds	r3, #1
 800318a:	2080      	movs	r0, #128	; 0x80
 800318c:	0200      	lsls	r0, r0, #8
 800318e:	4098      	lsls	r0, r3
}
 8003190:	bd10      	pop	{r4, pc}
 8003192:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <RCC_GetSystemClockFreq+0x60>)
 8003194:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003196:	0b52      	lsrs	r2, r2, #13
 8003198:	2307      	movs	r3, #7
 800319a:	4013      	ands	r3, r2
 800319c:	3301      	adds	r3, #1
 800319e:	2080      	movs	r0, #128	; 0x80
 80031a0:	0200      	lsls	r0, r0, #8
 80031a2:	4098      	lsls	r0, r3
      break;
 80031a4:	e7f4      	b.n	8003190 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 80031a6:	4804      	ldr	r0, [pc, #16]	; (80031b8 <RCC_GetSystemClockFreq+0x68>)
 80031a8:	e7f2      	b.n	8003190 <RCC_GetSystemClockFreq+0x40>
        frequency = HSI_VALUE;
 80031aa:	4804      	ldr	r0, [pc, #16]	; (80031bc <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 80031ac:	e7f0      	b.n	8003190 <RCC_GetSystemClockFreq+0x40>
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000
 80031b4:	003d0900 	.word	0x003d0900
 80031b8:	007a1200 	.word	0x007a1200
 80031bc:	00f42400 	.word	0x00f42400

080031c0 <LL_RCC_GetUSARTClockFreq>:
{
 80031c0:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80031c2:	280c      	cmp	r0, #12
 80031c4:	d001      	beq.n	80031ca <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80031c6:	2000      	movs	r0, #0
}
 80031c8:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <LL_RCC_GetUSARTClockFreq+0x70>)
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	4003      	ands	r3, r0
 80031d0:	0400      	lsls	r0, r0, #16
 80031d2:	4318      	orrs	r0, r3
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <LL_RCC_GetUSARTClockFreq+0x74>)
 80031d6:	4298      	cmp	r0, r3
 80031d8:	d00f      	beq.n	80031fa <LL_RCC_GetUSARTClockFreq+0x3a>
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <LL_RCC_GetUSARTClockFreq+0x78>)
 80031dc:	4298      	cmp	r0, r3
 80031de:	d019      	beq.n	8003214 <LL_RCC_GetUSARTClockFreq+0x54>
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <LL_RCC_GetUSARTClockFreq+0x7c>)
 80031e2:	4298      	cmp	r0, r3
 80031e4:	d006      	beq.n	80031f4 <LL_RCC_GetUSARTClockFreq+0x34>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80031e6:	f7ff ffb3 	bl	8003150 <RCC_GetSystemClockFreq>
 80031ea:	f7ff ff6d 	bl	80030c8 <RCC_GetHCLKClockFreq>
 80031ee:	f7ff ff79 	bl	80030e4 <RCC_GetPCLK1ClockFreq>
        break;
 80031f2:	e7e9      	b.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetSystemClockFreq();
 80031f4:	f7ff ffac 	bl	8003150 <RCC_GetSystemClockFreq>
        break;
 80031f8:	e7e6      	b.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <LL_RCC_GetUSARTClockFreq+0x70>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2204      	movs	r2, #4
 8003200:	0010      	movs	r0, r2
 8003202:	4018      	ands	r0, r3
 8003204:	421a      	tst	r2, r3
 8003206:	d0df      	beq.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <LL_RCC_GetUSARTClockFreq+0x70>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	06db      	lsls	r3, r3, #27
 800320e:	d40c      	bmi.n	800322a <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <LL_RCC_GetUSARTClockFreq+0x80>)
 8003212:	e7d9      	b.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <LL_RCC_GetUSARTClockFreq+0x70>)
 8003216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	0010      	movs	r0, r2
 800321e:	4018      	ands	r0, r3
 8003220:	421a      	tst	r2, r3
 8003222:	d0d1      	beq.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8003224:	2080      	movs	r0, #128	; 0x80
 8003226:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8003228:	e7ce      	b.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 800322a:	4806      	ldr	r0, [pc, #24]	; (8003244 <LL_RCC_GetUSARTClockFreq+0x84>)
 800322c:	e7cc      	b.n	80031c8 <LL_RCC_GetUSARTClockFreq+0x8>
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	40021000 	.word	0x40021000
 8003234:	000c0008 	.word	0x000c0008
 8003238:	000c000c 	.word	0x000c000c
 800323c:	000c0004 	.word	0x000c0004
 8003240:	00f42400 	.word	0x00f42400
 8003244:	003d0900 	.word	0x003d0900

08003248 <LL_RCC_GetLPUARTClockFreq>:
{
 8003248:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <LL_RCC_GetLPUARTClockFreq+0x68>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	4018      	ands	r0, r3
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	4298      	cmp	r0, r3
 8003256:	d011      	beq.n	800327c <LL_RCC_GetLPUARTClockFreq+0x34>
 8003258:	23c0      	movs	r3, #192	; 0xc0
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	4298      	cmp	r0, r3
 800325e:	d01a      	beq.n	8003296 <LL_RCC_GetLPUARTClockFreq+0x4e>
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4298      	cmp	r0, r3
 8003266:	d006      	beq.n	8003276 <LL_RCC_GetLPUARTClockFreq+0x2e>
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003268:	f7ff ff72 	bl	8003150 <RCC_GetSystemClockFreq>
 800326c:	f7ff ff2c 	bl	80030c8 <RCC_GetHCLKClockFreq>
 8003270:	f7ff ff38 	bl	80030e4 <RCC_GetPCLK1ClockFreq>
      break;
 8003274:	e001      	b.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
      lpuart_frequency = RCC_GetSystemClockFreq();
 8003276:	f7ff ff6b 	bl	8003150 <RCC_GetSystemClockFreq>
}
 800327a:	bd10      	pop	{r4, pc}
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800327c:	4b0c      	ldr	r3, [pc, #48]	; (80032b0 <LL_RCC_GetLPUARTClockFreq+0x68>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2204      	movs	r2, #4
 8003282:	0010      	movs	r0, r2
 8003284:	4018      	ands	r0, r3
 8003286:	421a      	tst	r2, r3
 8003288:	d0f7      	beq.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <LL_RCC_GetLPUARTClockFreq+0x68>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	06db      	lsls	r3, r3, #27
 8003290:	d40c      	bmi.n	80032ac <LL_RCC_GetLPUARTClockFreq+0x64>
          lpuart_frequency = HSI_VALUE;
 8003292:	4808      	ldr	r0, [pc, #32]	; (80032b4 <LL_RCC_GetLPUARTClockFreq+0x6c>)
 8003294:	e7f1      	b.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <LL_RCC_GetLPUARTClockFreq+0x68>)
 8003298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	0010      	movs	r0, r2
 80032a0:	4018      	ands	r0, r3
 80032a2:	421a      	tst	r2, r3
 80032a4:	d0e9      	beq.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
        lpuart_frequency = LSE_VALUE;
 80032a6:	2080      	movs	r0, #128	; 0x80
 80032a8:	0200      	lsls	r0, r0, #8
  return lpuart_frequency;
 80032aa:	e7e6      	b.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
          lpuart_frequency = (HSI_VALUE >> 2U);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <LL_RCC_GetLPUARTClockFreq+0x70>)
 80032ae:	e7e4      	b.n	800327a <LL_RCC_GetLPUARTClockFreq+0x32>
 80032b0:	40021000 	.word	0x40021000
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	003d0900 	.word	0x003d0900

080032bc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032bc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80032be:	6a03      	ldr	r3, [r0, #32]
 80032c0:	2401      	movs	r4, #1
 80032c2:	43a3      	bics	r3, r4
 80032c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032c6:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032c8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80032ca:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80032cc:	2673      	movs	r6, #115	; 0x73
 80032ce:	43b2      	bics	r2, r6
 80032d0:	680e      	ldr	r6, [r1, #0]
 80032d2:	4332      	orrs	r2, r6

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80032d4:	2602      	movs	r6, #2
 80032d6:	43b3      	bics	r3, r6
 80032d8:	68ce      	ldr	r6, [r1, #12]
 80032da:	4333      	orrs	r3, r6

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80032dc:	43a3      	bics	r3, r4
 80032de:	684c      	ldr	r4, [r1, #4]
 80032e0:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032e2:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80032e4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80032e6:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80032e8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032ea:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80032ec:	2000      	movs	r0, #0
 80032ee:	bd70      	pop	{r4, r5, r6, pc}

080032f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032f0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80032f2:	6a03      	ldr	r3, [r0, #32]
 80032f4:	2610      	movs	r6, #16
 80032f6:	43b3      	bics	r3, r6
 80032f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80032fa:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80032fc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80032fe:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003300:	4c0a      	ldr	r4, [pc, #40]	; (800332c <OC2Config+0x3c>)
 8003302:	4022      	ands	r2, r4
 8003304:	680c      	ldr	r4, [r1, #0]
 8003306:	0224      	lsls	r4, r4, #8
 8003308:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800330a:	2420      	movs	r4, #32
 800330c:	43a3      	bics	r3, r4
 800330e:	68cc      	ldr	r4, [r1, #12]
 8003310:	0124      	lsls	r4, r4, #4
 8003312:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003314:	43b3      	bics	r3, r6
 8003316:	684c      	ldr	r4, [r1, #4]
 8003318:	0124      	lsls	r4, r4, #4
 800331a:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800331c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800331e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003320:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003322:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003324:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8003326:	2000      	movs	r0, #0
 8003328:	bd70      	pop	{r4, r5, r6, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	ffff8cff 	.word	0xffff8cff

08003330 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003330:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003332:	6a02      	ldr	r2, [r0, #32]
 8003334:	4e0c      	ldr	r6, [pc, #48]	; (8003368 <OC3Config+0x38>)
 8003336:	4032      	ands	r2, r6
 8003338:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800333a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800333c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800333e:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003340:	2473      	movs	r4, #115	; 0x73
 8003342:	43a2      	bics	r2, r4
 8003344:	680c      	ldr	r4, [r1, #0]
 8003346:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003348:	4c08      	ldr	r4, [pc, #32]	; (800336c <OC3Config+0x3c>)
 800334a:	4023      	ands	r3, r4
 800334c:	68cc      	ldr	r4, [r1, #12]
 800334e:	0224      	lsls	r4, r4, #8
 8003350:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003352:	4033      	ands	r3, r6
 8003354:	684c      	ldr	r4, [r1, #4]
 8003356:	0224      	lsls	r4, r4, #8
 8003358:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800335a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800335c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800335e:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003360:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003362:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8003364:	2000      	movs	r0, #0
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	fffffdff 	.word	0xfffffdff

08003370 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003370:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003372:	6a02      	ldr	r2, [r0, #32]
 8003374:	4e0d      	ldr	r6, [pc, #52]	; (80033ac <OC4Config+0x3c>)
 8003376:	4032      	ands	r2, r6
 8003378:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800337a:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800337c:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800337e:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003380:	4c0b      	ldr	r4, [pc, #44]	; (80033b0 <OC4Config+0x40>)
 8003382:	4022      	ands	r2, r4
 8003384:	680c      	ldr	r4, [r1, #0]
 8003386:	0224      	lsls	r4, r4, #8
 8003388:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800338a:	4c0a      	ldr	r4, [pc, #40]	; (80033b4 <OC4Config+0x44>)
 800338c:	4023      	ands	r3, r4
 800338e:	68cc      	ldr	r4, [r1, #12]
 8003390:	0324      	lsls	r4, r4, #12
 8003392:	4323      	orrs	r3, r4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003394:	4033      	ands	r3, r6
 8003396:	684c      	ldr	r4, [r1, #4]
 8003398:	0324      	lsls	r4, r4, #12
 800339a:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800339c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800339e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80033a0:	688a      	ldr	r2, [r1, #8]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80033a2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033a4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	ffffefff 	.word	0xffffefff
 80033b0:	ffff8cff 	.word	0xffff8cff
 80033b4:	ffffdfff 	.word	0xffffdfff

080033b8 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80033b8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ba:	2280      	movs	r2, #128	; 0x80
 80033bc:	05d2      	lsls	r2, r2, #23
 80033be:	4290      	cmp	r0, r2
 80033c0:	d005      	beq.n	80033ce <LL_TIM_Init+0x16>
 80033c2:	4a11      	ldr	r2, [pc, #68]	; (8003408 <LL_TIM_Init+0x50>)
 80033c4:	4290      	cmp	r0, r2
 80033c6:	d002      	beq.n	80033ce <LL_TIM_Init+0x16>
 80033c8:	4a10      	ldr	r2, [pc, #64]	; (800340c <LL_TIM_Init+0x54>)
 80033ca:	4290      	cmp	r0, r2
 80033cc:	d103      	bne.n	80033d6 <LL_TIM_Init+0x1e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80033ce:	2270      	movs	r2, #112	; 0x70
 80033d0:	4393      	bics	r3, r2
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	05d2      	lsls	r2, r2, #23
 80033da:	4290      	cmp	r0, r2
 80033dc:	d005      	beq.n	80033ea <LL_TIM_Init+0x32>
 80033de:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <LL_TIM_Init+0x50>)
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d002      	beq.n	80033ea <LL_TIM_Init+0x32>
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <LL_TIM_Init+0x54>)
 80033e6:	4290      	cmp	r0, r2
 80033e8:	d103      	bne.n	80033f2 <LL_TIM_Init+0x3a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <LL_TIM_Init+0x58>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	68ca      	ldr	r2, [r1, #12]
 80033f0:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80033f2:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80033f4:	688b      	ldr	r3, [r1, #8]
 80033f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80033f8:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80033fa:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80033fc:	6943      	ldr	r3, [r0, #20]
 80033fe:	2201      	movs	r2, #1
 8003400:	4313      	orrs	r3, r2
 8003402:	6143      	str	r3, [r0, #20]
}
 8003404:	2000      	movs	r0, #0
 8003406:	4770      	bx	lr
 8003408:	40010800 	.word	0x40010800
 800340c:	40011400 	.word	0x40011400
 8003410:	fffffcff 	.word	0xfffffcff

08003414 <LL_TIM_OC_Init>:
{
 8003414:	b510      	push	{r4, lr}
 8003416:	000b      	movs	r3, r1
 8003418:	0011      	movs	r1, r2
  switch (Channel)
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	0052      	lsls	r2, r2, #1
 800341e:	4293      	cmp	r3, r2
 8003420:	d015      	beq.n	800344e <LL_TIM_OC_Init+0x3a>
 8003422:	d808      	bhi.n	8003436 <LL_TIM_OC_Init+0x22>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d00f      	beq.n	8003448 <LL_TIM_OC_Init+0x34>
 8003428:	2b10      	cmp	r3, #16
 800342a:	d102      	bne.n	8003432 <LL_TIM_OC_Init+0x1e>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800342c:	f7ff ff60 	bl	80032f0 <OC2Config>
      break;
 8003430:	e009      	b.n	8003446 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8003432:	2001      	movs	r0, #1
 8003434:	e007      	b.n	8003446 <LL_TIM_OC_Init+0x32>
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	0152      	lsls	r2, r2, #5
 800343a:	4293      	cmp	r3, r2
 800343c:	d102      	bne.n	8003444 <LL_TIM_OC_Init+0x30>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800343e:	f7ff ff97 	bl	8003370 <OC4Config>
      break;
 8003442:	e000      	b.n	8003446 <LL_TIM_OC_Init+0x32>
  switch (Channel)
 8003444:	2001      	movs	r0, #1
}
 8003446:	bd10      	pop	{r4, pc}
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003448:	f7ff ff38 	bl	80032bc <OC1Config>
      break;
 800344c:	e7fb      	b.n	8003446 <LL_TIM_OC_Init+0x32>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800344e:	f7ff ff6f 	bl	8003330 <OC3Config>
      break;
 8003452:	e7f8      	b.n	8003446 <LL_TIM_OC_Init+0x32>

08003454 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	0004      	movs	r4, r0
 8003458:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800345a:	6803      	ldr	r3, [r0, #0]
 800345c:	07db      	lsls	r3, r3, #31
 800345e:	d442      	bmi.n	80034e6 <LL_USART_Init+0x92>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003460:	6803      	ldr	r3, [r0, #0]
 8003462:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <LL_USART_Init+0x9c>)
 8003464:	401a      	ands	r2, r3
 8003466:	684b      	ldr	r3, [r1, #4]
 8003468:	68c9      	ldr	r1, [r1, #12]
 800346a:	430b      	orrs	r3, r1
 800346c:	6929      	ldr	r1, [r5, #16]
 800346e:	430b      	orrs	r3, r1
 8003470:	69a9      	ldr	r1, [r5, #24]
 8003472:	430b      	orrs	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003478:	6843      	ldr	r3, [r0, #4]
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <LL_USART_Init+0xa0>)
 800347c:	4013      	ands	r3, r2
 800347e:	68aa      	ldr	r2, [r5, #8]
 8003480:	4313      	orrs	r3, r2
 8003482:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003484:	6883      	ldr	r3, [r0, #8]
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <LL_USART_Init+0xa4>)
 8003488:	4013      	ands	r3, r2
 800348a:	696a      	ldr	r2, [r5, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <LL_USART_Init+0xa8>)
 8003492:	4298      	cmp	r0, r3
 8003494:	d001      	beq.n	800349a <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8003496:	2001      	movs	r0, #1
 8003498:	e026      	b.n	80034e8 <LL_USART_Init+0x94>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800349a:	200c      	movs	r0, #12
 800349c:	f7ff fe90 	bl	80031c0 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d022      	beq.n	80034ea <LL_USART_Init+0x96>
        && (USART_InitStruct->BaudRate != 0U))
 80034a4:	6829      	ldr	r1, [r5, #0]
 80034a6:	2900      	cmp	r1, #0
 80034a8:	d101      	bne.n	80034ae <LL_USART_Init+0x5a>
  ErrorStatus status = ERROR;
 80034aa:	2001      	movs	r0, #1
 80034ac:	e01c      	b.n	80034e8 <LL_USART_Init+0x94>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
 80034ae:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d008      	beq.n	80034ca <LL_USART_Init+0x76>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80034b8:	084b      	lsrs	r3, r1, #1
 80034ba:	18c0      	adds	r0, r0, r3
 80034bc:	f7fc fe36 	bl	800012c <__udivsi3>
 80034c0:	0403      	lsls	r3, r0, #16
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 80034c6:	2000      	movs	r0, #0
}
 80034c8:	e00e      	b.n	80034e8 <LL_USART_Init+0x94>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80034ca:	0040      	lsls	r0, r0, #1
 80034cc:	084b      	lsrs	r3, r1, #1
 80034ce:	18c0      	adds	r0, r0, r3
 80034d0:	f7fc fe2c 	bl	800012c <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <LL_USART_Init+0xac>)
 80034d6:	4003      	ands	r3, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d8:	0400      	lsls	r0, r0, #16
 80034da:	0c40      	lsrs	r0, r0, #17
 80034dc:	2207      	movs	r2, #7
 80034de:	4010      	ands	r0, r2
 80034e0:	4318      	orrs	r0, r3
    USARTx->BRR = brrtemp;
 80034e2:	60e0      	str	r0, [r4, #12]
 80034e4:	e7ef      	b.n	80034c6 <LL_USART_Init+0x72>
  ErrorStatus status = ERROR;
 80034e6:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e7fc      	b.n	80034e8 <LL_USART_Init+0x94>
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	efff69f3 	.word	0xefff69f3
 80034f4:	ffffcfff 	.word	0xffffcfff
 80034f8:	fffffcff 	.word	0xfffffcff
 80034fc:	40004400 	.word	0x40004400
 8003500:	0000fff0 	.word	0x0000fff0

08003504 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003504:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003506:	21fa      	movs	r1, #250	; 0xfa
 8003508:	0089      	lsls	r1, r1, #2
 800350a:	f7fc fe0f 	bl	800012c <__udivsi3>
 800350e:	3801      	subs	r0, #1
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <LL_Init1msTick+0x1c>)
 8003512:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003518:	3205      	adds	r2, #5
 800351a:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800351c:	bd10      	pop	{r4, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	e000e010 	.word	0xe000e010

08003524 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003524:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <LL_mDelay+0x24>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800352c:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	d000      	beq.n	8003534 <LL_mDelay+0x10>
  {
    Delay++;
 8003532:	3001      	adds	r0, #1
  }

  while (Delay)
 8003534:	2800      	cmp	r0, #0
 8003536:	d005      	beq.n	8003544 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <LL_mDelay+0x24>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	d5f9      	bpl.n	8003534 <LL_mDelay+0x10>
    {
      Delay--;
 8003540:	3801      	subs	r0, #1
 8003542:	e7f7      	b.n	8003534 <LL_mDelay+0x10>
    }
  }
}
 8003544:	b002      	add	sp, #8
 8003546:	4770      	bx	lr
 8003548:	e000e010 	.word	0xe000e010

0800354c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800354c:	4b01      	ldr	r3, [pc, #4]	; (8003554 <LL_SetSystemCoreClock+0x8>)
 800354e:	6018      	str	r0, [r3, #0]
}
 8003550:	4770      	bx	lr
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	2000001c 	.word	0x2000001c

08003558 <__errno>:
 8003558:	4b01      	ldr	r3, [pc, #4]	; (8003560 <__errno+0x8>)
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	4770      	bx	lr
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000024 	.word	0x20000024

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	2600      	movs	r6, #0
 8003568:	4d0c      	ldr	r5, [pc, #48]	; (800359c <__libc_init_array+0x38>)
 800356a:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356c:	1b64      	subs	r4, r4, r5
 800356e:	10a4      	asrs	r4, r4, #2
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	2600      	movs	r6, #0
 8003576:	f000 fca1 	bl	8003ebc <_init>
 800357a:	4d0a      	ldr	r5, [pc, #40]	; (80035a4 <__libc_init_array+0x40>)
 800357c:	4c0a      	ldr	r4, [pc, #40]	; (80035a8 <__libc_init_array+0x44>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	00b3      	lsls	r3, r6, #2
 800358a:	58eb      	ldr	r3, [r5, r3]
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	00b3      	lsls	r3, r6, #2
 8003594:	58eb      	ldr	r3, [r5, r3]
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	0800455c 	.word	0x0800455c
 80035a0:	0800455c 	.word	0x0800455c
 80035a4:	0800455c 	.word	0x0800455c
 80035a8:	08004560 	.word	0x08004560

080035ac <memcpy>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d100      	bne.n	80035b6 <memcpy+0xa>
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	5ccc      	ldrb	r4, [r1, r3]
 80035b8:	54c4      	strb	r4, [r0, r3]
 80035ba:	3301      	adds	r3, #1
 80035bc:	e7f8      	b.n	80035b0 <memcpy+0x4>

080035be <memset>:
 80035be:	0003      	movs	r3, r0
 80035c0:	1882      	adds	r2, r0, r2
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d100      	bne.n	80035c8 <memset+0xa>
 80035c6:	4770      	bx	lr
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	e7f9      	b.n	80035c2 <memset+0x4>

080035ce <_vsniprintf_r>:
 80035ce:	b530      	push	{r4, r5, lr}
 80035d0:	0014      	movs	r4, r2
 80035d2:	0005      	movs	r5, r0
 80035d4:	001a      	movs	r2, r3
 80035d6:	b09b      	sub	sp, #108	; 0x6c
 80035d8:	2c00      	cmp	r4, #0
 80035da:	da05      	bge.n	80035e8 <_vsniprintf_r+0x1a>
 80035dc:	238b      	movs	r3, #139	; 0x8b
 80035de:	6003      	str	r3, [r0, #0]
 80035e0:	2001      	movs	r0, #1
 80035e2:	4240      	negs	r0, r0
 80035e4:	b01b      	add	sp, #108	; 0x6c
 80035e6:	bd30      	pop	{r4, r5, pc}
 80035e8:	2382      	movs	r3, #130	; 0x82
 80035ea:	4668      	mov	r0, sp
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	8183      	strh	r3, [r0, #12]
 80035f0:	2300      	movs	r3, #0
 80035f2:	9100      	str	r1, [sp, #0]
 80035f4:	9104      	str	r1, [sp, #16]
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d000      	beq.n	80035fc <_vsniprintf_r+0x2e>
 80035fa:	1e63      	subs	r3, r4, #1
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	2301      	movs	r3, #1
 8003602:	4669      	mov	r1, sp
 8003604:	425b      	negs	r3, r3
 8003606:	81cb      	strh	r3, [r1, #14]
 8003608:	0028      	movs	r0, r5
 800360a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800360c:	f000 f878 	bl	8003700 <_svfiprintf_r>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	da01      	bge.n	8003618 <_vsniprintf_r+0x4a>
 8003614:	238b      	movs	r3, #139	; 0x8b
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	2c00      	cmp	r4, #0
 800361a:	d0e3      	beq.n	80035e4 <_vsniprintf_r+0x16>
 800361c:	2300      	movs	r3, #0
 800361e:	9a00      	ldr	r2, [sp, #0]
 8003620:	7013      	strb	r3, [r2, #0]
 8003622:	e7df      	b.n	80035e4 <_vsniprintf_r+0x16>

08003624 <vsniprintf>:
 8003624:	b507      	push	{r0, r1, r2, lr}
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	0013      	movs	r3, r2
 800362a:	000a      	movs	r2, r1
 800362c:	0001      	movs	r1, r0
 800362e:	4802      	ldr	r0, [pc, #8]	; (8003638 <vsniprintf+0x14>)
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	f7ff ffcc 	bl	80035ce <_vsniprintf_r>
 8003636:	bd0e      	pop	{r1, r2, r3, pc}
 8003638:	20000024 	.word	0x20000024

0800363c <__ssputs_r>:
 800363c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363e:	688e      	ldr	r6, [r1, #8]
 8003640:	b085      	sub	sp, #20
 8003642:	0007      	movs	r7, r0
 8003644:	000c      	movs	r4, r1
 8003646:	9203      	str	r2, [sp, #12]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	429e      	cmp	r6, r3
 800364c:	d83c      	bhi.n	80036c8 <__ssputs_r+0x8c>
 800364e:	2390      	movs	r3, #144	; 0x90
 8003650:	898a      	ldrh	r2, [r1, #12]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	421a      	tst	r2, r3
 8003656:	d034      	beq.n	80036c2 <__ssputs_r+0x86>
 8003658:	6909      	ldr	r1, [r1, #16]
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	6960      	ldr	r0, [r4, #20]
 800365e:	1a5b      	subs	r3, r3, r1
 8003660:	9302      	str	r3, [sp, #8]
 8003662:	2303      	movs	r3, #3
 8003664:	4343      	muls	r3, r0
 8003666:	0fdd      	lsrs	r5, r3, #31
 8003668:	18ed      	adds	r5, r5, r3
 800366a:	9b01      	ldr	r3, [sp, #4]
 800366c:	9802      	ldr	r0, [sp, #8]
 800366e:	3301      	adds	r3, #1
 8003670:	181b      	adds	r3, r3, r0
 8003672:	106d      	asrs	r5, r5, #1
 8003674:	42ab      	cmp	r3, r5
 8003676:	d900      	bls.n	800367a <__ssputs_r+0x3e>
 8003678:	001d      	movs	r5, r3
 800367a:	0553      	lsls	r3, r2, #21
 800367c:	d532      	bpl.n	80036e4 <__ssputs_r+0xa8>
 800367e:	0029      	movs	r1, r5
 8003680:	0038      	movs	r0, r7
 8003682:	f000 fb49 	bl	8003d18 <_malloc_r>
 8003686:	1e06      	subs	r6, r0, #0
 8003688:	d109      	bne.n	800369e <__ssputs_r+0x62>
 800368a:	230c      	movs	r3, #12
 800368c:	603b      	str	r3, [r7, #0]
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	2001      	movs	r0, #1
 8003692:	89a2      	ldrh	r2, [r4, #12]
 8003694:	4240      	negs	r0, r0
 8003696:	4313      	orrs	r3, r2
 8003698:	81a3      	strh	r3, [r4, #12]
 800369a:	b005      	add	sp, #20
 800369c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369e:	9a02      	ldr	r2, [sp, #8]
 80036a0:	6921      	ldr	r1, [r4, #16]
 80036a2:	f7ff ff83 	bl	80035ac <memcpy>
 80036a6:	89a3      	ldrh	r3, [r4, #12]
 80036a8:	4a14      	ldr	r2, [pc, #80]	; (80036fc <__ssputs_r+0xc0>)
 80036aa:	401a      	ands	r2, r3
 80036ac:	2380      	movs	r3, #128	; 0x80
 80036ae:	4313      	orrs	r3, r2
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	9b02      	ldr	r3, [sp, #8]
 80036b4:	6126      	str	r6, [r4, #16]
 80036b6:	18f6      	adds	r6, r6, r3
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	6165      	str	r5, [r4, #20]
 80036bc:	9e01      	ldr	r6, [sp, #4]
 80036be:	1aed      	subs	r5, r5, r3
 80036c0:	60a5      	str	r5, [r4, #8]
 80036c2:	9b01      	ldr	r3, [sp, #4]
 80036c4:	429e      	cmp	r6, r3
 80036c6:	d900      	bls.n	80036ca <__ssputs_r+0x8e>
 80036c8:	9e01      	ldr	r6, [sp, #4]
 80036ca:	0032      	movs	r2, r6
 80036cc:	9903      	ldr	r1, [sp, #12]
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	f000 faa3 	bl	8003c1a <memmove>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	2000      	movs	r0, #0
 80036d8:	1b9b      	subs	r3, r3, r6
 80036da:	60a3      	str	r3, [r4, #8]
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	199e      	adds	r6, r3, r6
 80036e0:	6026      	str	r6, [r4, #0]
 80036e2:	e7da      	b.n	800369a <__ssputs_r+0x5e>
 80036e4:	002a      	movs	r2, r5
 80036e6:	0038      	movs	r0, r7
 80036e8:	f000 fb8c 	bl	8003e04 <_realloc_r>
 80036ec:	1e06      	subs	r6, r0, #0
 80036ee:	d1e0      	bne.n	80036b2 <__ssputs_r+0x76>
 80036f0:	0038      	movs	r0, r7
 80036f2:	6921      	ldr	r1, [r4, #16]
 80036f4:	f000 faa4 	bl	8003c40 <_free_r>
 80036f8:	e7c7      	b.n	800368a <__ssputs_r+0x4e>
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	fffffb7f 	.word	0xfffffb7f

08003700 <_svfiprintf_r>:
 8003700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003702:	b0a1      	sub	sp, #132	; 0x84
 8003704:	9003      	str	r0, [sp, #12]
 8003706:	001d      	movs	r5, r3
 8003708:	898b      	ldrh	r3, [r1, #12]
 800370a:	000f      	movs	r7, r1
 800370c:	0016      	movs	r6, r2
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	d511      	bpl.n	8003736 <_svfiprintf_r+0x36>
 8003712:	690b      	ldr	r3, [r1, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <_svfiprintf_r+0x36>
 8003718:	2140      	movs	r1, #64	; 0x40
 800371a:	f000 fafd 	bl	8003d18 <_malloc_r>
 800371e:	6038      	str	r0, [r7, #0]
 8003720:	6138      	str	r0, [r7, #16]
 8003722:	2800      	cmp	r0, #0
 8003724:	d105      	bne.n	8003732 <_svfiprintf_r+0x32>
 8003726:	230c      	movs	r3, #12
 8003728:	9a03      	ldr	r2, [sp, #12]
 800372a:	3801      	subs	r0, #1
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	b021      	add	sp, #132	; 0x84
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	ac08      	add	r4, sp, #32
 800373a:	6163      	str	r3, [r4, #20]
 800373c:	3320      	adds	r3, #32
 800373e:	7663      	strb	r3, [r4, #25]
 8003740:	3310      	adds	r3, #16
 8003742:	76a3      	strb	r3, [r4, #26]
 8003744:	9507      	str	r5, [sp, #28]
 8003746:	0035      	movs	r5, r6
 8003748:	782b      	ldrb	r3, [r5, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <_svfiprintf_r+0x52>
 800374e:	2b25      	cmp	r3, #37	; 0x25
 8003750:	d147      	bne.n	80037e2 <_svfiprintf_r+0xe2>
 8003752:	1bab      	subs	r3, r5, r6
 8003754:	9305      	str	r3, [sp, #20]
 8003756:	42b5      	cmp	r5, r6
 8003758:	d00c      	beq.n	8003774 <_svfiprintf_r+0x74>
 800375a:	0032      	movs	r2, r6
 800375c:	0039      	movs	r1, r7
 800375e:	9803      	ldr	r0, [sp, #12]
 8003760:	f7ff ff6c 	bl	800363c <__ssputs_r>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d100      	bne.n	800376a <_svfiprintf_r+0x6a>
 8003768:	e0ae      	b.n	80038c8 <_svfiprintf_r+0x1c8>
 800376a:	6962      	ldr	r2, [r4, #20]
 800376c:	9b05      	ldr	r3, [sp, #20]
 800376e:	4694      	mov	ip, r2
 8003770:	4463      	add	r3, ip
 8003772:	6163      	str	r3, [r4, #20]
 8003774:	782b      	ldrb	r3, [r5, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d100      	bne.n	800377c <_svfiprintf_r+0x7c>
 800377a:	e0a5      	b.n	80038c8 <_svfiprintf_r+0x1c8>
 800377c:	2201      	movs	r2, #1
 800377e:	2300      	movs	r3, #0
 8003780:	4252      	negs	r2, r2
 8003782:	6062      	str	r2, [r4, #4]
 8003784:	a904      	add	r1, sp, #16
 8003786:	3254      	adds	r2, #84	; 0x54
 8003788:	1852      	adds	r2, r2, r1
 800378a:	1c6e      	adds	r6, r5, #1
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	60e3      	str	r3, [r4, #12]
 8003790:	60a3      	str	r3, [r4, #8]
 8003792:	7013      	strb	r3, [r2, #0]
 8003794:	65a3      	str	r3, [r4, #88]	; 0x58
 8003796:	2205      	movs	r2, #5
 8003798:	7831      	ldrb	r1, [r6, #0]
 800379a:	4854      	ldr	r0, [pc, #336]	; (80038ec <_svfiprintf_r+0x1ec>)
 800379c:	f000 fa32 	bl	8003c04 <memchr>
 80037a0:	1c75      	adds	r5, r6, #1
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d11f      	bne.n	80037e6 <_svfiprintf_r+0xe6>
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	06d3      	lsls	r3, r2, #27
 80037aa:	d504      	bpl.n	80037b6 <_svfiprintf_r+0xb6>
 80037ac:	2353      	movs	r3, #83	; 0x53
 80037ae:	a904      	add	r1, sp, #16
 80037b0:	185b      	adds	r3, r3, r1
 80037b2:	2120      	movs	r1, #32
 80037b4:	7019      	strb	r1, [r3, #0]
 80037b6:	0713      	lsls	r3, r2, #28
 80037b8:	d504      	bpl.n	80037c4 <_svfiprintf_r+0xc4>
 80037ba:	2353      	movs	r3, #83	; 0x53
 80037bc:	a904      	add	r1, sp, #16
 80037be:	185b      	adds	r3, r3, r1
 80037c0:	212b      	movs	r1, #43	; 0x2b
 80037c2:	7019      	strb	r1, [r3, #0]
 80037c4:	7833      	ldrb	r3, [r6, #0]
 80037c6:	2b2a      	cmp	r3, #42	; 0x2a
 80037c8:	d016      	beq.n	80037f8 <_svfiprintf_r+0xf8>
 80037ca:	0035      	movs	r5, r6
 80037cc:	2100      	movs	r1, #0
 80037ce:	200a      	movs	r0, #10
 80037d0:	68e3      	ldr	r3, [r4, #12]
 80037d2:	782a      	ldrb	r2, [r5, #0]
 80037d4:	1c6e      	adds	r6, r5, #1
 80037d6:	3a30      	subs	r2, #48	; 0x30
 80037d8:	2a09      	cmp	r2, #9
 80037da:	d94e      	bls.n	800387a <_svfiprintf_r+0x17a>
 80037dc:	2900      	cmp	r1, #0
 80037de:	d111      	bne.n	8003804 <_svfiprintf_r+0x104>
 80037e0:	e017      	b.n	8003812 <_svfiprintf_r+0x112>
 80037e2:	3501      	adds	r5, #1
 80037e4:	e7b0      	b.n	8003748 <_svfiprintf_r+0x48>
 80037e6:	4b41      	ldr	r3, [pc, #260]	; (80038ec <_svfiprintf_r+0x1ec>)
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	1ac0      	subs	r0, r0, r3
 80037ec:	2301      	movs	r3, #1
 80037ee:	4083      	lsls	r3, r0
 80037f0:	4313      	orrs	r3, r2
 80037f2:	002e      	movs	r6, r5
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	e7ce      	b.n	8003796 <_svfiprintf_r+0x96>
 80037f8:	9b07      	ldr	r3, [sp, #28]
 80037fa:	1d19      	adds	r1, r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	9107      	str	r1, [sp, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db01      	blt.n	8003808 <_svfiprintf_r+0x108>
 8003804:	930b      	str	r3, [sp, #44]	; 0x2c
 8003806:	e004      	b.n	8003812 <_svfiprintf_r+0x112>
 8003808:	425b      	negs	r3, r3
 800380a:	60e3      	str	r3, [r4, #12]
 800380c:	2302      	movs	r3, #2
 800380e:	4313      	orrs	r3, r2
 8003810:	6023      	str	r3, [r4, #0]
 8003812:	782b      	ldrb	r3, [r5, #0]
 8003814:	2b2e      	cmp	r3, #46	; 0x2e
 8003816:	d10a      	bne.n	800382e <_svfiprintf_r+0x12e>
 8003818:	786b      	ldrb	r3, [r5, #1]
 800381a:	2b2a      	cmp	r3, #42	; 0x2a
 800381c:	d135      	bne.n	800388a <_svfiprintf_r+0x18a>
 800381e:	9b07      	ldr	r3, [sp, #28]
 8003820:	3502      	adds	r5, #2
 8003822:	1d1a      	adds	r2, r3, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	9207      	str	r2, [sp, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db2b      	blt.n	8003884 <_svfiprintf_r+0x184>
 800382c:	9309      	str	r3, [sp, #36]	; 0x24
 800382e:	4e30      	ldr	r6, [pc, #192]	; (80038f0 <_svfiprintf_r+0x1f0>)
 8003830:	2203      	movs	r2, #3
 8003832:	0030      	movs	r0, r6
 8003834:	7829      	ldrb	r1, [r5, #0]
 8003836:	f000 f9e5 	bl	8003c04 <memchr>
 800383a:	2800      	cmp	r0, #0
 800383c:	d006      	beq.n	800384c <_svfiprintf_r+0x14c>
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	1b80      	subs	r0, r0, r6
 8003842:	4083      	lsls	r3, r0
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	3501      	adds	r5, #1
 8003848:	4313      	orrs	r3, r2
 800384a:	6023      	str	r3, [r4, #0]
 800384c:	7829      	ldrb	r1, [r5, #0]
 800384e:	2206      	movs	r2, #6
 8003850:	4828      	ldr	r0, [pc, #160]	; (80038f4 <_svfiprintf_r+0x1f4>)
 8003852:	1c6e      	adds	r6, r5, #1
 8003854:	7621      	strb	r1, [r4, #24]
 8003856:	f000 f9d5 	bl	8003c04 <memchr>
 800385a:	2800      	cmp	r0, #0
 800385c:	d03c      	beq.n	80038d8 <_svfiprintf_r+0x1d8>
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <_svfiprintf_r+0x1f8>)
 8003860:	2b00      	cmp	r3, #0
 8003862:	d125      	bne.n	80038b0 <_svfiprintf_r+0x1b0>
 8003864:	2207      	movs	r2, #7
 8003866:	9b07      	ldr	r3, [sp, #28]
 8003868:	3307      	adds	r3, #7
 800386a:	4393      	bics	r3, r2
 800386c:	3308      	adds	r3, #8
 800386e:	9307      	str	r3, [sp, #28]
 8003870:	6963      	ldr	r3, [r4, #20]
 8003872:	9a04      	ldr	r2, [sp, #16]
 8003874:	189b      	adds	r3, r3, r2
 8003876:	6163      	str	r3, [r4, #20]
 8003878:	e765      	b.n	8003746 <_svfiprintf_r+0x46>
 800387a:	4343      	muls	r3, r0
 800387c:	0035      	movs	r5, r6
 800387e:	2101      	movs	r1, #1
 8003880:	189b      	adds	r3, r3, r2
 8003882:	e7a6      	b.n	80037d2 <_svfiprintf_r+0xd2>
 8003884:	2301      	movs	r3, #1
 8003886:	425b      	negs	r3, r3
 8003888:	e7d0      	b.n	800382c <_svfiprintf_r+0x12c>
 800388a:	2300      	movs	r3, #0
 800388c:	200a      	movs	r0, #10
 800388e:	001a      	movs	r2, r3
 8003890:	3501      	adds	r5, #1
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	7829      	ldrb	r1, [r5, #0]
 8003896:	1c6e      	adds	r6, r5, #1
 8003898:	3930      	subs	r1, #48	; 0x30
 800389a:	2909      	cmp	r1, #9
 800389c:	d903      	bls.n	80038a6 <_svfiprintf_r+0x1a6>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0c5      	beq.n	800382e <_svfiprintf_r+0x12e>
 80038a2:	9209      	str	r2, [sp, #36]	; 0x24
 80038a4:	e7c3      	b.n	800382e <_svfiprintf_r+0x12e>
 80038a6:	4342      	muls	r2, r0
 80038a8:	0035      	movs	r5, r6
 80038aa:	2301      	movs	r3, #1
 80038ac:	1852      	adds	r2, r2, r1
 80038ae:	e7f1      	b.n	8003894 <_svfiprintf_r+0x194>
 80038b0:	ab07      	add	r3, sp, #28
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	003a      	movs	r2, r7
 80038b6:	0021      	movs	r1, r4
 80038b8:	4b10      	ldr	r3, [pc, #64]	; (80038fc <_svfiprintf_r+0x1fc>)
 80038ba:	9803      	ldr	r0, [sp, #12]
 80038bc:	e000      	b.n	80038c0 <_svfiprintf_r+0x1c0>
 80038be:	bf00      	nop
 80038c0:	9004      	str	r0, [sp, #16]
 80038c2:	9b04      	ldr	r3, [sp, #16]
 80038c4:	3301      	adds	r3, #1
 80038c6:	d1d3      	bne.n	8003870 <_svfiprintf_r+0x170>
 80038c8:	89bb      	ldrh	r3, [r7, #12]
 80038ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80038cc:	065b      	lsls	r3, r3, #25
 80038ce:	d400      	bmi.n	80038d2 <_svfiprintf_r+0x1d2>
 80038d0:	e72d      	b.n	800372e <_svfiprintf_r+0x2e>
 80038d2:	2001      	movs	r0, #1
 80038d4:	4240      	negs	r0, r0
 80038d6:	e72a      	b.n	800372e <_svfiprintf_r+0x2e>
 80038d8:	ab07      	add	r3, sp, #28
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	003a      	movs	r2, r7
 80038de:	0021      	movs	r1, r4
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <_svfiprintf_r+0x1fc>)
 80038e2:	9803      	ldr	r0, [sp, #12]
 80038e4:	f000 f87c 	bl	80039e0 <_printf_i>
 80038e8:	e7ea      	b.n	80038c0 <_svfiprintf_r+0x1c0>
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	08004520 	.word	0x08004520
 80038f0:	08004526 	.word	0x08004526
 80038f4:	0800452a 	.word	0x0800452a
 80038f8:	00000000 	.word	0x00000000
 80038fc:	0800363d 	.word	0x0800363d

08003900 <_printf_common>:
 8003900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003902:	0015      	movs	r5, r2
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	688a      	ldr	r2, [r1, #8]
 8003908:	690b      	ldr	r3, [r1, #16]
 800390a:	000c      	movs	r4, r1
 800390c:	9000      	str	r0, [sp, #0]
 800390e:	4293      	cmp	r3, r2
 8003910:	da00      	bge.n	8003914 <_printf_common+0x14>
 8003912:	0013      	movs	r3, r2
 8003914:	0022      	movs	r2, r4
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	3243      	adds	r2, #67	; 0x43
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	2a00      	cmp	r2, #0
 800391e:	d001      	beq.n	8003924 <_printf_common+0x24>
 8003920:	3301      	adds	r3, #1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	069b      	lsls	r3, r3, #26
 8003928:	d502      	bpl.n	8003930 <_printf_common+0x30>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	3302      	adds	r3, #2
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	6822      	ldr	r2, [r4, #0]
 8003932:	2306      	movs	r3, #6
 8003934:	0017      	movs	r7, r2
 8003936:	401f      	ands	r7, r3
 8003938:	421a      	tst	r2, r3
 800393a:	d027      	beq.n	800398c <_printf_common+0x8c>
 800393c:	0023      	movs	r3, r4
 800393e:	3343      	adds	r3, #67	; 0x43
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	4193      	sbcs	r3, r2
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	0692      	lsls	r2, r2, #26
 800394a:	d430      	bmi.n	80039ae <_printf_common+0xae>
 800394c:	0022      	movs	r2, r4
 800394e:	9901      	ldr	r1, [sp, #4]
 8003950:	9800      	ldr	r0, [sp, #0]
 8003952:	9e08      	ldr	r6, [sp, #32]
 8003954:	3243      	adds	r2, #67	; 0x43
 8003956:	47b0      	blx	r6
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d025      	beq.n	80039a8 <_printf_common+0xa8>
 800395c:	2306      	movs	r3, #6
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	682a      	ldr	r2, [r5, #0]
 8003962:	68e1      	ldr	r1, [r4, #12]
 8003964:	2500      	movs	r5, #0
 8003966:	4003      	ands	r3, r0
 8003968:	2b04      	cmp	r3, #4
 800396a:	d103      	bne.n	8003974 <_printf_common+0x74>
 800396c:	1a8d      	subs	r5, r1, r2
 800396e:	43eb      	mvns	r3, r5
 8003970:	17db      	asrs	r3, r3, #31
 8003972:	401d      	ands	r5, r3
 8003974:	68a3      	ldr	r3, [r4, #8]
 8003976:	6922      	ldr	r2, [r4, #16]
 8003978:	4293      	cmp	r3, r2
 800397a:	dd01      	ble.n	8003980 <_printf_common+0x80>
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	18ed      	adds	r5, r5, r3
 8003980:	2700      	movs	r7, #0
 8003982:	42bd      	cmp	r5, r7
 8003984:	d120      	bne.n	80039c8 <_printf_common+0xc8>
 8003986:	2000      	movs	r0, #0
 8003988:	e010      	b.n	80039ac <_printf_common+0xac>
 800398a:	3701      	adds	r7, #1
 800398c:	68e3      	ldr	r3, [r4, #12]
 800398e:	682a      	ldr	r2, [r5, #0]
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	42bb      	cmp	r3, r7
 8003994:	ddd2      	ble.n	800393c <_printf_common+0x3c>
 8003996:	0022      	movs	r2, r4
 8003998:	2301      	movs	r3, #1
 800399a:	9901      	ldr	r1, [sp, #4]
 800399c:	9800      	ldr	r0, [sp, #0]
 800399e:	9e08      	ldr	r6, [sp, #32]
 80039a0:	3219      	adds	r2, #25
 80039a2:	47b0      	blx	r6
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d1f0      	bne.n	800398a <_printf_common+0x8a>
 80039a8:	2001      	movs	r0, #1
 80039aa:	4240      	negs	r0, r0
 80039ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039ae:	2030      	movs	r0, #48	; 0x30
 80039b0:	18e1      	adds	r1, r4, r3
 80039b2:	3143      	adds	r1, #67	; 0x43
 80039b4:	7008      	strb	r0, [r1, #0]
 80039b6:	0021      	movs	r1, r4
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	3145      	adds	r1, #69	; 0x45
 80039bc:	7809      	ldrb	r1, [r1, #0]
 80039be:	18a2      	adds	r2, r4, r2
 80039c0:	3243      	adds	r2, #67	; 0x43
 80039c2:	3302      	adds	r3, #2
 80039c4:	7011      	strb	r1, [r2, #0]
 80039c6:	e7c1      	b.n	800394c <_printf_common+0x4c>
 80039c8:	0022      	movs	r2, r4
 80039ca:	2301      	movs	r3, #1
 80039cc:	9901      	ldr	r1, [sp, #4]
 80039ce:	9800      	ldr	r0, [sp, #0]
 80039d0:	9e08      	ldr	r6, [sp, #32]
 80039d2:	321a      	adds	r2, #26
 80039d4:	47b0      	blx	r6
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d0e6      	beq.n	80039a8 <_printf_common+0xa8>
 80039da:	3701      	adds	r7, #1
 80039dc:	e7d1      	b.n	8003982 <_printf_common+0x82>
	...

080039e0 <_printf_i>:
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	b08b      	sub	sp, #44	; 0x2c
 80039e4:	9206      	str	r2, [sp, #24]
 80039e6:	000a      	movs	r2, r1
 80039e8:	3243      	adds	r2, #67	; 0x43
 80039ea:	9307      	str	r3, [sp, #28]
 80039ec:	9005      	str	r0, [sp, #20]
 80039ee:	9204      	str	r2, [sp, #16]
 80039f0:	7e0a      	ldrb	r2, [r1, #24]
 80039f2:	000c      	movs	r4, r1
 80039f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80039f6:	2a78      	cmp	r2, #120	; 0x78
 80039f8:	d807      	bhi.n	8003a0a <_printf_i+0x2a>
 80039fa:	2a62      	cmp	r2, #98	; 0x62
 80039fc:	d809      	bhi.n	8003a12 <_printf_i+0x32>
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	d100      	bne.n	8003a04 <_printf_i+0x24>
 8003a02:	e0c1      	b.n	8003b88 <_printf_i+0x1a8>
 8003a04:	2a58      	cmp	r2, #88	; 0x58
 8003a06:	d100      	bne.n	8003a0a <_printf_i+0x2a>
 8003a08:	e08c      	b.n	8003b24 <_printf_i+0x144>
 8003a0a:	0026      	movs	r6, r4
 8003a0c:	3642      	adds	r6, #66	; 0x42
 8003a0e:	7032      	strb	r2, [r6, #0]
 8003a10:	e022      	b.n	8003a58 <_printf_i+0x78>
 8003a12:	0010      	movs	r0, r2
 8003a14:	3863      	subs	r0, #99	; 0x63
 8003a16:	2815      	cmp	r0, #21
 8003a18:	d8f7      	bhi.n	8003a0a <_printf_i+0x2a>
 8003a1a:	f7fc fb7d 	bl	8000118 <__gnu_thumb1_case_shi>
 8003a1e:	0016      	.short	0x0016
 8003a20:	fff6001f 	.word	0xfff6001f
 8003a24:	fff6fff6 	.word	0xfff6fff6
 8003a28:	001ffff6 	.word	0x001ffff6
 8003a2c:	fff6fff6 	.word	0xfff6fff6
 8003a30:	fff6fff6 	.word	0xfff6fff6
 8003a34:	003600a8 	.word	0x003600a8
 8003a38:	fff6009a 	.word	0xfff6009a
 8003a3c:	00b9fff6 	.word	0x00b9fff6
 8003a40:	0036fff6 	.word	0x0036fff6
 8003a44:	fff6fff6 	.word	0xfff6fff6
 8003a48:	009e      	.short	0x009e
 8003a4a:	0026      	movs	r6, r4
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	3642      	adds	r6, #66	; 0x42
 8003a50:	1d11      	adds	r1, r2, #4
 8003a52:	6019      	str	r1, [r3, #0]
 8003a54:	6813      	ldr	r3, [r2, #0]
 8003a56:	7033      	strb	r3, [r6, #0]
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0a7      	b.n	8003bac <_printf_i+0x1cc>
 8003a5c:	6808      	ldr	r0, [r1, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	1d0a      	adds	r2, r1, #4
 8003a62:	0605      	lsls	r5, r0, #24
 8003a64:	d50b      	bpl.n	8003a7e <_printf_i+0x9e>
 8003a66:	680d      	ldr	r5, [r1, #0]
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0x96>
 8003a6e:	232d      	movs	r3, #45	; 0x2d
 8003a70:	9a04      	ldr	r2, [sp, #16]
 8003a72:	426d      	negs	r5, r5
 8003a74:	7013      	strb	r3, [r2, #0]
 8003a76:	4b61      	ldr	r3, [pc, #388]	; (8003bfc <_printf_i+0x21c>)
 8003a78:	270a      	movs	r7, #10
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	e01b      	b.n	8003ab6 <_printf_i+0xd6>
 8003a7e:	680d      	ldr	r5, [r1, #0]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	0641      	lsls	r1, r0, #25
 8003a84:	d5f1      	bpl.n	8003a6a <_printf_i+0x8a>
 8003a86:	b22d      	sxth	r5, r5
 8003a88:	e7ef      	b.n	8003a6a <_printf_i+0x8a>
 8003a8a:	680d      	ldr	r5, [r1, #0]
 8003a8c:	6819      	ldr	r1, [r3, #0]
 8003a8e:	1d08      	adds	r0, r1, #4
 8003a90:	6018      	str	r0, [r3, #0]
 8003a92:	062e      	lsls	r6, r5, #24
 8003a94:	d501      	bpl.n	8003a9a <_printf_i+0xba>
 8003a96:	680d      	ldr	r5, [r1, #0]
 8003a98:	e003      	b.n	8003aa2 <_printf_i+0xc2>
 8003a9a:	066d      	lsls	r5, r5, #25
 8003a9c:	d5fb      	bpl.n	8003a96 <_printf_i+0xb6>
 8003a9e:	680d      	ldr	r5, [r1, #0]
 8003aa0:	b2ad      	uxth	r5, r5
 8003aa2:	4b56      	ldr	r3, [pc, #344]	; (8003bfc <_printf_i+0x21c>)
 8003aa4:	2708      	movs	r7, #8
 8003aa6:	9303      	str	r3, [sp, #12]
 8003aa8:	2a6f      	cmp	r2, #111	; 0x6f
 8003aaa:	d000      	beq.n	8003aae <_printf_i+0xce>
 8003aac:	3702      	adds	r7, #2
 8003aae:	0023      	movs	r3, r4
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	3343      	adds	r3, #67	; 0x43
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	6863      	ldr	r3, [r4, #4]
 8003ab8:	60a3      	str	r3, [r4, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	db03      	blt.n	8003ac6 <_printf_i+0xe6>
 8003abe:	2204      	movs	r2, #4
 8003ac0:	6821      	ldr	r1, [r4, #0]
 8003ac2:	4391      	bics	r1, r2
 8003ac4:	6021      	str	r1, [r4, #0]
 8003ac6:	2d00      	cmp	r5, #0
 8003ac8:	d102      	bne.n	8003ad0 <_printf_i+0xf0>
 8003aca:	9e04      	ldr	r6, [sp, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00c      	beq.n	8003aea <_printf_i+0x10a>
 8003ad0:	9e04      	ldr	r6, [sp, #16]
 8003ad2:	0028      	movs	r0, r5
 8003ad4:	0039      	movs	r1, r7
 8003ad6:	f7fc fbaf 	bl	8000238 <__aeabi_uidivmod>
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	3e01      	subs	r6, #1
 8003ade:	5c5b      	ldrb	r3, [r3, r1]
 8003ae0:	7033      	strb	r3, [r6, #0]
 8003ae2:	002b      	movs	r3, r5
 8003ae4:	0005      	movs	r5, r0
 8003ae6:	429f      	cmp	r7, r3
 8003ae8:	d9f3      	bls.n	8003ad2 <_printf_i+0xf2>
 8003aea:	2f08      	cmp	r7, #8
 8003aec:	d109      	bne.n	8003b02 <_printf_i+0x122>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	07db      	lsls	r3, r3, #31
 8003af2:	d506      	bpl.n	8003b02 <_printf_i+0x122>
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6922      	ldr	r2, [r4, #16]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	dc02      	bgt.n	8003b02 <_printf_i+0x122>
 8003afc:	2330      	movs	r3, #48	; 0x30
 8003afe:	3e01      	subs	r6, #1
 8003b00:	7033      	strb	r3, [r6, #0]
 8003b02:	9b04      	ldr	r3, [sp, #16]
 8003b04:	1b9b      	subs	r3, r3, r6
 8003b06:	6123      	str	r3, [r4, #16]
 8003b08:	9b07      	ldr	r3, [sp, #28]
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	9805      	ldr	r0, [sp, #20]
 8003b10:	9b06      	ldr	r3, [sp, #24]
 8003b12:	aa09      	add	r2, sp, #36	; 0x24
 8003b14:	f7ff fef4 	bl	8003900 <_printf_common>
 8003b18:	1c43      	adds	r3, r0, #1
 8003b1a:	d14c      	bne.n	8003bb6 <_printf_i+0x1d6>
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	4240      	negs	r0, r0
 8003b20:	b00b      	add	sp, #44	; 0x2c
 8003b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b24:	3145      	adds	r1, #69	; 0x45
 8003b26:	700a      	strb	r2, [r1, #0]
 8003b28:	4a34      	ldr	r2, [pc, #208]	; (8003bfc <_printf_i+0x21c>)
 8003b2a:	9203      	str	r2, [sp, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	6821      	ldr	r1, [r4, #0]
 8003b30:	ca20      	ldmia	r2!, {r5}
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	0608      	lsls	r0, r1, #24
 8003b36:	d516      	bpl.n	8003b66 <_printf_i+0x186>
 8003b38:	07cb      	lsls	r3, r1, #31
 8003b3a:	d502      	bpl.n	8003b42 <_printf_i+0x162>
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	4319      	orrs	r1, r3
 8003b40:	6021      	str	r1, [r4, #0]
 8003b42:	2710      	movs	r7, #16
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	d1b2      	bne.n	8003aae <_printf_i+0xce>
 8003b48:	2320      	movs	r3, #32
 8003b4a:	6822      	ldr	r2, [r4, #0]
 8003b4c:	439a      	bics	r2, r3
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	e7ad      	b.n	8003aae <_printf_i+0xce>
 8003b52:	2220      	movs	r2, #32
 8003b54:	6809      	ldr	r1, [r1, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	0022      	movs	r2, r4
 8003b5c:	2178      	movs	r1, #120	; 0x78
 8003b5e:	3245      	adds	r2, #69	; 0x45
 8003b60:	7011      	strb	r1, [r2, #0]
 8003b62:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <_printf_i+0x220>)
 8003b64:	e7e1      	b.n	8003b2a <_printf_i+0x14a>
 8003b66:	0648      	lsls	r0, r1, #25
 8003b68:	d5e6      	bpl.n	8003b38 <_printf_i+0x158>
 8003b6a:	b2ad      	uxth	r5, r5
 8003b6c:	e7e4      	b.n	8003b38 <_printf_i+0x158>
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	680d      	ldr	r5, [r1, #0]
 8003b72:	1d10      	adds	r0, r2, #4
 8003b74:	6949      	ldr	r1, [r1, #20]
 8003b76:	6018      	str	r0, [r3, #0]
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	062e      	lsls	r6, r5, #24
 8003b7c:	d501      	bpl.n	8003b82 <_printf_i+0x1a2>
 8003b7e:	6019      	str	r1, [r3, #0]
 8003b80:	e002      	b.n	8003b88 <_printf_i+0x1a8>
 8003b82:	066d      	lsls	r5, r5, #25
 8003b84:	d5fb      	bpl.n	8003b7e <_printf_i+0x19e>
 8003b86:	8019      	strh	r1, [r3, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9e04      	ldr	r6, [sp, #16]
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	e7bb      	b.n	8003b08 <_printf_i+0x128>
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	1d11      	adds	r1, r2, #4
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	6816      	ldr	r6, [r2, #0]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	0030      	movs	r0, r6
 8003b9c:	6862      	ldr	r2, [r4, #4]
 8003b9e:	f000 f831 	bl	8003c04 <memchr>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d001      	beq.n	8003baa <_printf_i+0x1ca>
 8003ba6:	1b80      	subs	r0, r0, r6
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	7013      	strb	r3, [r2, #0]
 8003bb4:	e7a8      	b.n	8003b08 <_printf_i+0x128>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	0032      	movs	r2, r6
 8003bba:	9906      	ldr	r1, [sp, #24]
 8003bbc:	9805      	ldr	r0, [sp, #20]
 8003bbe:	9d07      	ldr	r5, [sp, #28]
 8003bc0:	47a8      	blx	r5
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d0aa      	beq.n	8003b1c <_printf_i+0x13c>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	079b      	lsls	r3, r3, #30
 8003bca:	d415      	bmi.n	8003bf8 <_printf_i+0x218>
 8003bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bce:	68e0      	ldr	r0, [r4, #12]
 8003bd0:	4298      	cmp	r0, r3
 8003bd2:	daa5      	bge.n	8003b20 <_printf_i+0x140>
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	e7a3      	b.n	8003b20 <_printf_i+0x140>
 8003bd8:	0022      	movs	r2, r4
 8003bda:	2301      	movs	r3, #1
 8003bdc:	9906      	ldr	r1, [sp, #24]
 8003bde:	9805      	ldr	r0, [sp, #20]
 8003be0:	9e07      	ldr	r6, [sp, #28]
 8003be2:	3219      	adds	r2, #25
 8003be4:	47b0      	blx	r6
 8003be6:	1c43      	adds	r3, r0, #1
 8003be8:	d098      	beq.n	8003b1c <_printf_i+0x13c>
 8003bea:	3501      	adds	r5, #1
 8003bec:	68e3      	ldr	r3, [r4, #12]
 8003bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	42ab      	cmp	r3, r5
 8003bf4:	dcf0      	bgt.n	8003bd8 <_printf_i+0x1f8>
 8003bf6:	e7e9      	b.n	8003bcc <_printf_i+0x1ec>
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	e7f7      	b.n	8003bec <_printf_i+0x20c>
 8003bfc:	08004531 	.word	0x08004531
 8003c00:	08004542 	.word	0x08004542

08003c04 <memchr>:
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	1882      	adds	r2, r0, r2
 8003c08:	4290      	cmp	r0, r2
 8003c0a:	d101      	bne.n	8003c10 <memchr+0xc>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	4770      	bx	lr
 8003c10:	7803      	ldrb	r3, [r0, #0]
 8003c12:	428b      	cmp	r3, r1
 8003c14:	d0fb      	beq.n	8003c0e <memchr+0xa>
 8003c16:	3001      	adds	r0, #1
 8003c18:	e7f6      	b.n	8003c08 <memchr+0x4>

08003c1a <memmove>:
 8003c1a:	b510      	push	{r4, lr}
 8003c1c:	4288      	cmp	r0, r1
 8003c1e:	d902      	bls.n	8003c26 <memmove+0xc>
 8003c20:	188b      	adds	r3, r1, r2
 8003c22:	4298      	cmp	r0, r3
 8003c24:	d303      	bcc.n	8003c2e <memmove+0x14>
 8003c26:	2300      	movs	r3, #0
 8003c28:	e007      	b.n	8003c3a <memmove+0x20>
 8003c2a:	5c8b      	ldrb	r3, [r1, r2]
 8003c2c:	5483      	strb	r3, [r0, r2]
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	d2fb      	bcs.n	8003c2a <memmove+0x10>
 8003c32:	bd10      	pop	{r4, pc}
 8003c34:	5ccc      	ldrb	r4, [r1, r3]
 8003c36:	54c4      	strb	r4, [r0, r3]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d1fa      	bne.n	8003c34 <memmove+0x1a>
 8003c3e:	e7f8      	b.n	8003c32 <memmove+0x18>

08003c40 <_free_r>:
 8003c40:	b570      	push	{r4, r5, r6, lr}
 8003c42:	0005      	movs	r5, r0
 8003c44:	2900      	cmp	r1, #0
 8003c46:	d010      	beq.n	8003c6a <_free_r+0x2a>
 8003c48:	1f0c      	subs	r4, r1, #4
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da00      	bge.n	8003c52 <_free_r+0x12>
 8003c50:	18e4      	adds	r4, r4, r3
 8003c52:	0028      	movs	r0, r5
 8003c54:	f000 f918 	bl	8003e88 <__malloc_lock>
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <_free_r+0x90>)
 8003c5a:	6813      	ldr	r3, [r2, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d105      	bne.n	8003c6c <_free_r+0x2c>
 8003c60:	6063      	str	r3, [r4, #4]
 8003c62:	6014      	str	r4, [r2, #0]
 8003c64:	0028      	movs	r0, r5
 8003c66:	f000 f917 	bl	8003e98 <__malloc_unlock>
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
 8003c6c:	42a3      	cmp	r3, r4
 8003c6e:	d908      	bls.n	8003c82 <_free_r+0x42>
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	1860      	adds	r0, r4, r1
 8003c74:	4283      	cmp	r3, r0
 8003c76:	d1f3      	bne.n	8003c60 <_free_r+0x20>
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	1841      	adds	r1, r0, r1
 8003c7e:	6021      	str	r1, [r4, #0]
 8003c80:	e7ee      	b.n	8003c60 <_free_r+0x20>
 8003c82:	001a      	movs	r2, r3
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <_free_r+0x4e>
 8003c8a:	42a3      	cmp	r3, r4
 8003c8c:	d9f9      	bls.n	8003c82 <_free_r+0x42>
 8003c8e:	6811      	ldr	r1, [r2, #0]
 8003c90:	1850      	adds	r0, r2, r1
 8003c92:	42a0      	cmp	r0, r4
 8003c94:	d10b      	bne.n	8003cae <_free_r+0x6e>
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1809      	adds	r1, r1, r0
 8003c9a:	1850      	adds	r0, r2, r1
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	4283      	cmp	r3, r0
 8003ca0:	d1e0      	bne.n	8003c64 <_free_r+0x24>
 8003ca2:	6818      	ldr	r0, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	1841      	adds	r1, r0, r1
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	6053      	str	r3, [r2, #4]
 8003cac:	e7da      	b.n	8003c64 <_free_r+0x24>
 8003cae:	42a0      	cmp	r0, r4
 8003cb0:	d902      	bls.n	8003cb8 <_free_r+0x78>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	e7d5      	b.n	8003c64 <_free_r+0x24>
 8003cb8:	6821      	ldr	r1, [r4, #0]
 8003cba:	1860      	adds	r0, r4, r1
 8003cbc:	4283      	cmp	r3, r0
 8003cbe:	d103      	bne.n	8003cc8 <_free_r+0x88>
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	1841      	adds	r1, r0, r1
 8003cc6:	6021      	str	r1, [r4, #0]
 8003cc8:	6063      	str	r3, [r4, #4]
 8003cca:	6054      	str	r4, [r2, #4]
 8003ccc:	e7ca      	b.n	8003c64 <_free_r+0x24>
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000584 	.word	0x20000584

08003cd4 <sbrk_aligned>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4e0f      	ldr	r6, [pc, #60]	; (8003d14 <sbrk_aligned+0x40>)
 8003cd8:	000d      	movs	r5, r1
 8003cda:	6831      	ldr	r1, [r6, #0]
 8003cdc:	0004      	movs	r4, r0
 8003cde:	2900      	cmp	r1, #0
 8003ce0:	d102      	bne.n	8003ce8 <sbrk_aligned+0x14>
 8003ce2:	f000 f8bf 	bl	8003e64 <_sbrk_r>
 8003ce6:	6030      	str	r0, [r6, #0]
 8003ce8:	0029      	movs	r1, r5
 8003cea:	0020      	movs	r0, r4
 8003cec:	f000 f8ba 	bl	8003e64 <_sbrk_r>
 8003cf0:	1c43      	adds	r3, r0, #1
 8003cf2:	d00a      	beq.n	8003d0a <sbrk_aligned+0x36>
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	1cc5      	adds	r5, r0, #3
 8003cf8:	439d      	bics	r5, r3
 8003cfa:	42a8      	cmp	r0, r5
 8003cfc:	d007      	beq.n	8003d0e <sbrk_aligned+0x3a>
 8003cfe:	1a29      	subs	r1, r5, r0
 8003d00:	0020      	movs	r0, r4
 8003d02:	f000 f8af 	bl	8003e64 <_sbrk_r>
 8003d06:	1c43      	adds	r3, r0, #1
 8003d08:	d101      	bne.n	8003d0e <sbrk_aligned+0x3a>
 8003d0a:	2501      	movs	r5, #1
 8003d0c:	426d      	negs	r5, r5
 8003d0e:	0028      	movs	r0, r5
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20000588 	.word	0x20000588

08003d18 <_malloc_r>:
 8003d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	1ccb      	adds	r3, r1, #3
 8003d1e:	4393      	bics	r3, r2
 8003d20:	3308      	adds	r3, #8
 8003d22:	0006      	movs	r6, r0
 8003d24:	001f      	movs	r7, r3
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d232      	bcs.n	8003d90 <_malloc_r+0x78>
 8003d2a:	270c      	movs	r7, #12
 8003d2c:	42b9      	cmp	r1, r7
 8003d2e:	d831      	bhi.n	8003d94 <_malloc_r+0x7c>
 8003d30:	0030      	movs	r0, r6
 8003d32:	f000 f8a9 	bl	8003e88 <__malloc_lock>
 8003d36:	4d32      	ldr	r5, [pc, #200]	; (8003e00 <_malloc_r+0xe8>)
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	001c      	movs	r4, r3
 8003d3c:	2c00      	cmp	r4, #0
 8003d3e:	d12e      	bne.n	8003d9e <_malloc_r+0x86>
 8003d40:	0039      	movs	r1, r7
 8003d42:	0030      	movs	r0, r6
 8003d44:	f7ff ffc6 	bl	8003cd4 <sbrk_aligned>
 8003d48:	0004      	movs	r4, r0
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d11e      	bne.n	8003d8c <_malloc_r+0x74>
 8003d4e:	682c      	ldr	r4, [r5, #0]
 8003d50:	0025      	movs	r5, r4
 8003d52:	2d00      	cmp	r5, #0
 8003d54:	d14a      	bne.n	8003dec <_malloc_r+0xd4>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0029      	movs	r1, r5
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	0030      	movs	r0, r6
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	f000 f880 	bl	8003e64 <_sbrk_r>
 8003d64:	9b01      	ldr	r3, [sp, #4]
 8003d66:	4283      	cmp	r3, r0
 8003d68:	d143      	bne.n	8003df2 <_malloc_r+0xda>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	3703      	adds	r7, #3
 8003d6e:	1aff      	subs	r7, r7, r3
 8003d70:	2303      	movs	r3, #3
 8003d72:	439f      	bics	r7, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	2f0c      	cmp	r7, #12
 8003d78:	d200      	bcs.n	8003d7c <_malloc_r+0x64>
 8003d7a:	270c      	movs	r7, #12
 8003d7c:	0039      	movs	r1, r7
 8003d7e:	0030      	movs	r0, r6
 8003d80:	f7ff ffa8 	bl	8003cd4 <sbrk_aligned>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d034      	beq.n	8003df2 <_malloc_r+0xda>
 8003d88:	6823      	ldr	r3, [r4, #0]
 8003d8a:	19df      	adds	r7, r3, r7
 8003d8c:	6027      	str	r7, [r4, #0]
 8003d8e:	e013      	b.n	8003db8 <_malloc_r+0xa0>
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dacb      	bge.n	8003d2c <_malloc_r+0x14>
 8003d94:	230c      	movs	r3, #12
 8003d96:	2500      	movs	r5, #0
 8003d98:	6033      	str	r3, [r6, #0]
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d9e:	6822      	ldr	r2, [r4, #0]
 8003da0:	1bd1      	subs	r1, r2, r7
 8003da2:	d420      	bmi.n	8003de6 <_malloc_r+0xce>
 8003da4:	290b      	cmp	r1, #11
 8003da6:	d917      	bls.n	8003dd8 <_malloc_r+0xc0>
 8003da8:	19e2      	adds	r2, r4, r7
 8003daa:	6027      	str	r7, [r4, #0]
 8003dac:	42a3      	cmp	r3, r4
 8003dae:	d111      	bne.n	8003dd4 <_malloc_r+0xbc>
 8003db0:	602a      	str	r2, [r5, #0]
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	6053      	str	r3, [r2, #4]
 8003db8:	0030      	movs	r0, r6
 8003dba:	0025      	movs	r5, r4
 8003dbc:	f000 f86c 	bl	8003e98 <__malloc_unlock>
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	350b      	adds	r5, #11
 8003dc4:	1d23      	adds	r3, r4, #4
 8003dc6:	4395      	bics	r5, r2
 8003dc8:	1aea      	subs	r2, r5, r3
 8003dca:	429d      	cmp	r5, r3
 8003dcc:	d0e5      	beq.n	8003d9a <_malloc_r+0x82>
 8003dce:	1b5b      	subs	r3, r3, r5
 8003dd0:	50a3      	str	r3, [r4, r2]
 8003dd2:	e7e2      	b.n	8003d9a <_malloc_r+0x82>
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	e7ec      	b.n	8003db2 <_malloc_r+0x9a>
 8003dd8:	6862      	ldr	r2, [r4, #4]
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	d101      	bne.n	8003de2 <_malloc_r+0xca>
 8003dde:	602a      	str	r2, [r5, #0]
 8003de0:	e7ea      	b.n	8003db8 <_malloc_r+0xa0>
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	e7e8      	b.n	8003db8 <_malloc_r+0xa0>
 8003de6:	0023      	movs	r3, r4
 8003de8:	6864      	ldr	r4, [r4, #4]
 8003dea:	e7a7      	b.n	8003d3c <_malloc_r+0x24>
 8003dec:	002c      	movs	r4, r5
 8003dee:	686d      	ldr	r5, [r5, #4]
 8003df0:	e7af      	b.n	8003d52 <_malloc_r+0x3a>
 8003df2:	230c      	movs	r3, #12
 8003df4:	0030      	movs	r0, r6
 8003df6:	6033      	str	r3, [r6, #0]
 8003df8:	f000 f84e 	bl	8003e98 <__malloc_unlock>
 8003dfc:	e7cd      	b.n	8003d9a <_malloc_r+0x82>
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	20000584 	.word	0x20000584

08003e04 <_realloc_r>:
 8003e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e06:	0007      	movs	r7, r0
 8003e08:	000e      	movs	r6, r1
 8003e0a:	0014      	movs	r4, r2
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	d105      	bne.n	8003e1c <_realloc_r+0x18>
 8003e10:	0011      	movs	r1, r2
 8003e12:	f7ff ff81 	bl	8003d18 <_malloc_r>
 8003e16:	0005      	movs	r5, r0
 8003e18:	0028      	movs	r0, r5
 8003e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d103      	bne.n	8003e28 <_realloc_r+0x24>
 8003e20:	f7ff ff0e 	bl	8003c40 <_free_r>
 8003e24:	0025      	movs	r5, r4
 8003e26:	e7f7      	b.n	8003e18 <_realloc_r+0x14>
 8003e28:	f000 f83e 	bl	8003ea8 <_malloc_usable_size_r>
 8003e2c:	9001      	str	r0, [sp, #4]
 8003e2e:	4284      	cmp	r4, r0
 8003e30:	d803      	bhi.n	8003e3a <_realloc_r+0x36>
 8003e32:	0035      	movs	r5, r6
 8003e34:	0843      	lsrs	r3, r0, #1
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	d3ee      	bcc.n	8003e18 <_realloc_r+0x14>
 8003e3a:	0021      	movs	r1, r4
 8003e3c:	0038      	movs	r0, r7
 8003e3e:	f7ff ff6b 	bl	8003d18 <_malloc_r>
 8003e42:	1e05      	subs	r5, r0, #0
 8003e44:	d0e8      	beq.n	8003e18 <_realloc_r+0x14>
 8003e46:	9b01      	ldr	r3, [sp, #4]
 8003e48:	0022      	movs	r2, r4
 8003e4a:	429c      	cmp	r4, r3
 8003e4c:	d900      	bls.n	8003e50 <_realloc_r+0x4c>
 8003e4e:	001a      	movs	r2, r3
 8003e50:	0031      	movs	r1, r6
 8003e52:	0028      	movs	r0, r5
 8003e54:	f7ff fbaa 	bl	80035ac <memcpy>
 8003e58:	0031      	movs	r1, r6
 8003e5a:	0038      	movs	r0, r7
 8003e5c:	f7ff fef0 	bl	8003c40 <_free_r>
 8003e60:	e7da      	b.n	8003e18 <_realloc_r+0x14>
	...

08003e64 <_sbrk_r>:
 8003e64:	2300      	movs	r3, #0
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	4d06      	ldr	r5, [pc, #24]	; (8003e84 <_sbrk_r+0x20>)
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	0008      	movs	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fd f818 	bl	8000ea4 <_sbrk>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d103      	bne.n	8003e80 <_sbrk_r+0x1c>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d000      	beq.n	8003e80 <_sbrk_r+0x1c>
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	2000058c 	.word	0x2000058c

08003e88 <__malloc_lock>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4802      	ldr	r0, [pc, #8]	; (8003e94 <__malloc_lock+0xc>)
 8003e8c:	f000 f814 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	20000590 	.word	0x20000590

08003e98 <__malloc_unlock>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <__malloc_unlock+0xc>)
 8003e9c:	f000 f80d 	bl	8003eba <__retarget_lock_release_recursive>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	20000590 	.word	0x20000590

08003ea8 <_malloc_usable_size_r>:
 8003ea8:	1f0b      	subs	r3, r1, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1f18      	subs	r0, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da01      	bge.n	8003eb6 <_malloc_usable_size_r+0xe>
 8003eb2:	580b      	ldr	r3, [r1, r0]
 8003eb4:	18c0      	adds	r0, r0, r3
 8003eb6:	4770      	bx	lr

08003eb8 <__retarget_lock_acquire_recursive>:
 8003eb8:	4770      	bx	lr

08003eba <__retarget_lock_release_recursive>:
 8003eba:	4770      	bx	lr

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
